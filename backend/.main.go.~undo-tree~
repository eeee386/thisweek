(undo-tree-save-format-version . 1)
"168011cc3dd0da893887b7df9f1e67d1a1527e42"
[nil nil nil nil (25935 41792 253793 796000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2 . 3) (#("
" 0 1 (fontified nil)) . -559) (1 . 560) (t 25935 40308 587901 767000)) nil (25935 41792 253791 953000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253790 89000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1) (undo-tree-id16 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2) (undo-tree-id17 . -1) 3) nil (25935 41792 253788 537000) 0 nil])
([nil nil ((1 . 10)) nil (25935 41792 253785 731000) 0 nil])
([nil nil ((12 . 15) (#(")" 0 1 (fontified nil)) . -11) (11 . 12) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -11) (11 . 12) (10 . 12)) nil (25935 41792 253784 269000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -14) (undo-tree-id13 . -1) (undo-tree-id14 . 1) (undo-tree-id15 . -1) 15) nil (25935 41792 253782 325000) 0 nil])
([nil nil ((572 . 574)) nil (25935 41792 253779 79000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -573) (undo-tree-id12 . -1) (574 . 575) (#("}" 0 1 (fontified nil)) . -574) (574 . 575)) nil (25935 41792 253777 686000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253774 911000) 0 nil])
([nil nil ((1 . 8)) nil (25935 41792 253773 649000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1 . 13) (#("package main" 0 12 (fontified nil)) . 1) (1 . 13) (#("package
" 0 7 (fontified nil) 7 8 (fontified nil)) . 1) (undo-tree-id9 . 1) (1 . 8) (#("package main" 0 12 (fontified nil)) . -1) (1 . 13) (#("package" 0 7 (face tree-sitter-hl-face:keyword fontified t)) . -1) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 8) nil (25935 41792 253771 865000) 0 nil])
([nil nil ((13 . 14)) nil (25935 41792 253767 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14 . 15) (#("
" 0 1 (fontified nil)) . -84) (14 . 85)) nil (25935 41792 253766 395000) 0 nil])
([nil nil ((16 . 17)) nil (25935 41792 253765 233000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -16) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 17) nil (25935 41792 253763 780000) 0 nil])
([nil nil ((84 . 85)) nil (25935 41792 253706 3000) 0 nil])
([nil nil ((659 . 660)) nil (25935 41792 253699 661000) 0 nil])
([nil nil ((14 . 16) (t 25935 41792 261610 602000)) nil (25935 41910 236570 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -23) (23 . 24) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -23) (23 . 24) (15 . 24)) nil (25935 41910 236568 683000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 24) (24 . 25) (23 . 25)) nil (25935 41910 236567 90000) 0 nil])
([nil nil ((25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25935 41910 236565 286000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -18) (undo-tree-id35 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -19) (undo-tree-id36 . -1) 20) nil (25935 41910 236563 803000) 0 nil])
([nil nil ((18 . 20)) nil (25935 41910 236561 229000) 0 nil])
([nil nil ((26 . 29)) nil (25935 41910 236560 608000) 0 nil])
([nil nil ((30 . 32)) nil (25935 41910 236559 776000) 0 nil])
([nil nil ((33 . 41) (32 . 34) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25935 41910 236558 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 33 42 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (33 . 42) (#("database/" 0 9 (fontified nil)) . 33) (33 . 42) (#("database" 0 8 (fontified nil)) . 33) (33 . 41) (#("database/" 0 9 (fontified nil)) . -33) (33 . 42) (#("database" 0 8 (face tree-sitter-hl-face:string fontified t)) . -33) (undo-tree-id33 . -8) (undo-tree-id34 . -8) 41) nil (25935 41910 236556 99000) 0 nil])
([nil nil ((42 . 45)) nil (25935 41910 236551 841000) 0 nil])
([nil nil ((46 . 48)) nil (25935 41910 236551 30000) 0 nil])
([nil nil ((48 . 50) (#("\"" 0 1 (fontified nil)) . -48) (48 . 49)) nil (25935 41910 236550 148000) 0 nil])
([nil nil ((49 . 51)) nil (25935 41910 236548 866000) 0 nil])
([nil nil ((52 . 54)) nil (25935 41910 236547 724000) 0 nil])
([nil nil ((55 . 62) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 41910 236546 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 55 66 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (55 . 66) (#("github.com/" 0 11 (fontified nil)) . 55) (55 . 66) (#("github." 0 7 (face tree-sitter-hl-face:string fontified nil)) . 55) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (#("github.com/" 0 11 (fontified nil)) . -62) (62 . 73)) nil (25935 41910 236544 568000) 0 nil])
([nil nil ((66 . 78)) nil (25935 41910 236541 372000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 78) nil (25935 41910 236540 159000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236535 621000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -78) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 79) nil (25935 41910 236533 627000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236511 205000) 0 nil])
([nil nil ((80 . 82) (t 25935 41910 239945 613000)) nil (25935 42324 259808 993000) 0 nil])
([nil nil ((82 . 84) (#("\"" 0 1 (fontified nil)) . -82) (82 . 83)) nil (25935 42324 259807 931000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -82) (undo-tree-id88 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 83)) nil (25935 42324 259806 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -80) (undo-tree-id86 . -1) (#("	" 0 1 (fontified t)) . -81) (undo-tree-id87 . -1) 82) nil (25935 42324 259805 126000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -77) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("v" 0 1 (fontified t)) . -78) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -79) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 80) nil (25935 42324 259802 731000) 0 nil])
([nil nil ((77 . 79)) nil (25935 42324 259798 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 71 80 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (71 . 80) (#("godotenv\"" 0 9 (fontified nil)) . 71) (71 . 80) (#("godotenv" 0 8 (fontified nil)) . 71) (71 . 79) (#("godotenv\"" 0 9 (fontified nil)) . -71) (71 . 80) (#("godotenv" 0 8 (fontified t)) . -71) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -6) 79) nil (25935 42324 259797 361000) 0 nil])
([nil nil ((80 . 82)) nil (25935 42324 259793 915000) 0 nil])
([nil nil ((82 . 83)) nil (25935 42324 259792 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 84 . 85) (#("
" 0 1 (fontified nil)) . -230) (83 . 231) 82) nil (25935 42324 259791 320000) 0 nil])
([nil nil ((#("	p
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 81) (undo-tree-id64 . -2) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -2) (undo-tree-id70 . -3) (undo-tree-id71 . -2) (undo-tree-id72 . -3) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -3) 82) nil (25935 42324 259789 206000) 0 nil])
([nil nil ((#("	\"github.com/joho/godotenv\"
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:string fontified t) 2 18 (face tree-sitter-hl-face:string fontified t) 18 27 (face tree-sitter-hl-face:string fontified t) 27 28 (fontified t)) . 53) (undo-tree-id37 . -27) (undo-tree-id38 . -28) (undo-tree-id39 . -1) (undo-tree-id40 . -18) (undo-tree-id41 . -28) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -27) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 26) (undo-tree-id55 . -26) (undo-tree-id56 . -1) (undo-tree-id57 . -27) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -28) 54) nil (25935 42324 259777 515000) 0 nil])
([nil nil ((52 . 54) (t 25935 42324 359603 65000)) nil (25935 42365 609807 672000) 0 nil])
([nil nil ((55 . 63) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 42365 609799 797000) 0 nil])
([nil nil ((859 . 860) (#("	" 0 1 (fontified nil)) . 858) (undo-tree-id95 . -1) (857 . 860) (t 25935 42365 613811 525000)) nil (25935 42440 264073 273000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -859) (undo-tree-id94 . -1) 860) nil (25935 42440 263998 274000) 0 nil])
([nil nil ((nil rear-nonsticky nil 860 . 861) (#("
" 0 1 (fontified nil)) . -958) (859 . 959)) nil (25935 42440 263996 250000) 0 nil])
([nil nil ((#("	go apiCfg.Worker(60);
" 0 1 (rear-nonsticky t fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 17 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 20 (face tree-sitter-hl-face:number fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 23 (fontified t)) . 860) (undo-tree-id89 . -22) (undo-tree-id90 . -23) (undo-tree-id91 . -1) (undo-tree-id92 . -11) (undo-tree-id93 . -17)) nil (25935 42440 263991 391000) 0 nil])
([nil nil ((64 . 66) (t 25935 42440 272366 292000)) nil (25935 42460 990438 156000) 0 nil])
([nil nil ((67 . 74) (66 . 68) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67)) nil (25935 42460 990431 744000) 0 nil])
([nil nil ((295 . 297) (t 25935 42460 998962 626000)) nil (25935 43014 524356 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 297 . 298) (#("
" 0 1 (fontified nil)) . -683) (297 . 684)) nil (25935 43014 524355 202000) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (#("
" 0 1 (fontified nil)) . -371) (296 . 372)) nil (25935 43014 524347 958000) 0 nil])
([nil nil ((75 . 77) (t 25935 43014 624357 441000)) nil (25935 43175 977548 802000) 0 nil])
([nil nil ((78 . 85) (77 . 79) (#("\"" 0 1 (fontified nil)) . -77) (77 . 78)) nil (25935 43175 977542 100000) 0 nil])
([nil nil ((306 . 308) (t 25935 43175 985006 525000)) nil (25935 43225 419279 251000) 0 nil])
([nil nil ((236 . 238)) nil (25935 43225 419278 169000) 0 nil])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -513) (237 . 514)) nil (25935 43225 419276 877000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 237) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) nil (25935 43225 419275 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id99 . -1)) nil (25935 43225 419269 643000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1)) nil (25935 43225 419264 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1622 . 1623) (#("
" 0 1 (fontified nil)) . -1703) (1621 . 1704) (t 25935 43225 426780 453000)) nil (25935 43379 58674 184000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1621) (undo-tree-id107 . -1)) nil (25935 43379 58669 806000) 0 nil])
([nil nil ((86 . 88) (t 25935 43379 66798 188000)) nil (25935 43602 299526 293000) 0 nil])
([nil nil ((89 . 94) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (88 . 89)) nil (25935 43602 299525 31000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id118 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id119 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id120 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id121 . -1) 94) nil (25935 43602 299522 636000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id117 . -1) 90) nil (25935 43602 299518 378000) 0 nil])
([nil nil ((89 . 97)) nil (25935 43602 299516 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 89 98 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (89 . 98) (#("thisweek/" 0 9 (fontified nil)) . 89) (89 . 98) (#("thisweek" 0 8 (fontified nil)) . 89) (89 . 97) (#("thisweek/" 0 9 (fontified nil)) . -89) (89 . 98) (#("thisweek" 0 8 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id115 . -8) (undo-tree-id116 . -8) 97) nil (25935 43602 299514 892000) 0 nil])
([nil nil ((98 . 112)) nil (25935 43602 299510 604000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 112) nil (25935 43602 299508 951000) 0 nil])
([nil nil ((110 . 112)) nil (25935 43602 299484 605000) 0 nil])
([nil nil ((112 . 118) (t 25935 43602 400794 139000)) nil (25935 43698 619833 60000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -112) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -113) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -114) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -115) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -116) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -117) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 118) nil (25935 43698 619830 595000) 0 nil])
([nil nil ((111 . 112)) nil (25935 43698 619803 414000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -94) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -95) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("k" 0 1 (face tree-sitter-hl-face:string fontified t)) . -96) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -97) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -99) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -100) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -101) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -102) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -103) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -104) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -105) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -107) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -108) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -109) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id315 . -1) 112 (t 25935 43698 628776 444000)) nil (25935 43757 468120 683000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 91) nil (25935 43757 467873 802000) 0 nil])
([nil nil ((89 . 90)) nil (25935 43757 467868 221000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id143 . -1) 90) nil (25935 43757 467867 650000) 0 nil])
([nil nil ((89 . 95)) nil (25935 43757 467866 57000) 0 nil])
([nil nil ((95 . 101)) nil (25935 43757 467865 717000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 106 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (98 . 106) (#("backend/" 0 8 (fontified nil)) . 98) (98 . 106) (#("bac" 0 3 (fontified nil)) . 98) (98 . 101) (#("backend/" 0 8 (fontified nil)) . -98) (98 . 106) (#("bac" 0 3 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id141 . -3) (undo-tree-id142 . -3) 101) nil (25935 43757 467864 615000) 0 nil])
([nil nil ((106 . 110)) nil (25935 43757 467862 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 115 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (106 . 115) (#("internal/" 0 9 (fontified nil)) . 106) (106 . 115) (#("inte" 0 4 (fontified nil)) . 106) (106 . 110) (#("internal/" 0 9 (fontified nil)) . -106) (106 . 115) (#("inte" 0 4 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 110) nil (25935 43757 467860 497000) 0 nil])
([nil nil ((115 . 120)) nil (25935 43757 467843 14000) 0 nil])
([nil nil ((26 . 4744) (#("fmt\"
	\"database/sql\"
	\"os\"
	\"net/http\"
	\"context\"
	\"strings\"
	\"thisweek/backend/internal/utils\"
	\"github.com/go-chi/chi/v5\"
	\"github.com/go-chi/chi/v5/middleware\"
	\"github.com/go-chi/cors\"
	\"github.com/google/uuid\"
	\"github.com/joho/godotenv\"
)

func readinessHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithJSON(w, 200, struct {
		Status string `json:\"status\"`
	}{Status: \"OK\"})
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithError(w, 500, \"Internal Server Error\")
}

type apiConfig struct {
	DB  *database.Queries
	ctx context.Context
}

type authedHandler func(http.ResponseWriter, *http.Request, database.User)

func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		apikey := strings.Split(bearerToken, \" \")[1]
		user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
		if err != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
		} else {
			handler(w, r, user)
		}
	}
}

func main() {
	godotenv.Load()
	port := os.Getenv(\"PORT\")

	dbURL := os.Getenv(\"CONN\")
	db, derr := sql.Open(\"postgres\", dbURL)
	if derr != nil {
		fmt.Println(derr.Error())
		return
	}

	dbQueries := database.New(db)
	apiCfg := apiConfig{}
	apiCfg.DB = dbQueries
	apiCfg.ctx = context.Background()

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins: []string{\"*\"},
		AllowedMethods: []string{\"GET, POST, OPTIONS, PUT, DELETE\"},
		AllowedHeaders: []string{\"*\"},
	}))

	v1Router := chi.NewRouter()
	r.Mount(\"/v1\", v1Router)

	v1Router.Get(\"/readiness\", readinessHandler)
	v1Router.Get(\"/err\", erro" 0 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t) 6 20 (fontified t face tree-sitter-hl-face:string) 20 22 (fontified t) 22 26 (fontified t face tree-sitter-hl-face:string) 26 28 (fontified t) 28 38 (fontified t face tree-sitter-hl-face:string) 38 40 (fontified t) 40 49 (fontified t face tree-sitter-hl-face:string) 49 51 (fontified t) 51 60 (fontified t face tree-sitter-hl-face:string) 60 62 (fontified t) 62 95 (fontified t face tree-sitter-hl-face:string) 95 97 (fontified t) 97 123 (fontified t face tree-sitter-hl-face:string) 123 125 (fontified t) 125 162 (fontified t face tree-sitter-hl-face:string) 162 164 (fontified t) 164 188 (fontified t face tree-sitter-hl-face:string) 188 190 (fontified t) 190 214 (fontified t face tree-sitter-hl-face:string) 214 216 (fontified t) 216 242 (fontified t face tree-sitter-hl-face:string) 242 243 (fontified t) 243 244 (fontified t face (rainbow-delimiters-depth-1-face)) 244 246 (fontified t) 246 250 (fontified t face tree-sitter-hl-face:keyword) 250 251 (fontified t) 251 267 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 267 268 (fontified t face (rainbow-delimiters-depth-1-face)) 268 269 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 269 275 (fontified t) 275 289 (fontified t face tree-sitter-hl-face:type) 289 291 (fontified t) 291 292 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 292 293 (fontified t) 293 294 (fontified t face tree-sitter-hl-face:operator) 294 299 (fontified t) 299 306 (fontified t face tree-sitter-hl-face:type) 306 307 (fontified t face (rainbow-delimiters-depth-1-face)) 307 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-1-face)) 309 311 (fontified t) 311 316 (fontified t face tree-sitter-hl-face:variable) 316 317 (fontified t) 317 332 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 332 333 (fontified t face (rainbow-delimiters-depth-2-face)) 333 334 (fontified t face tree-sitter-hl-face:variable) 334 336 (fontified t) 336 339 (fontified t face tree-sitter-hl-face:number) 339 341 (fontified t) 341 347 (fontified t face tree-sitter-hl-face:keyword) 347 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-3-face)) 349 352 (fontified t) 352 358 (fontified t face tree-sitter-hl-face:property) 358 359 (fontified t) 359 365 (fontified t face tree-sitter-hl-face:type) 365 366 (fontified t) 366 381 (fontified t face tree-sitter-hl-face:string) 381 383 (fontified t) 383 384 (fontified t face (rainbow-delimiters-depth-3-face)) 384 385 (fontified t face (rainbow-delimiters-depth-3-face)) 385 391 (fontified t face tree-sitter-hl-face:variable) 391 393 (fontified t) 393 397 (fontified t face tree-sitter-hl-face:string) 397 398 (fontified t face (rainbow-delimiters-depth-3-face)) 398 399 (fontified t face (rainbow-delimiters-depth-2-face)) 399 400 (fontified t) 400 401 (fontified t face (rainbow-delimiters-depth-1-face)) 401 403 (fontified t) 403 407 (fontified t face tree-sitter-hl-face:keyword) 407 408 (fontified t) 408 420 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 420 421 (fontified t face (rainbow-delimiters-depth-1-face)) 421 422 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 422 428 (fontified t) 428 442 (fontified t face tree-sitter-hl-face:type) 442 444 (fontified t) 444 445 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 445 446 (fontified t) 446 447 (fontified t face tree-sitter-hl-face:operator) 447 452 (fontified t) 452 459 (fontified t face tree-sitter-hl-face:type) 459 460 (fontified t face (rainbow-delimiters-depth-1-face)) 460 461 (fontified t) 461 462 (fontified t face (rainbow-delimiters-depth-1-face)) 462 464 (fontified t) 464 469 (fontified t face tree-sitter-hl-face:variable) 469 470 (fontified t) 470 486 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 486 487 (fontified t face (rainbow-delimiters-depth-2-face)) 487 488 (fontified t face tree-sitter-hl-face:variable) 488 490 (fontified t) 490 493 (fontified t face tree-sitter-hl-face:number) 493 495 (fontified t) 495 518 (fontified t face tree-sitter-hl-face:string) 518 519 (fontified t face (rainbow-delimiters-depth-2-face)) 519 520 (fontified t) 520 521 (fontified t face (rainbow-delimiters-depth-1-face)) 521 523 (fontified t) 523 527 (fontified t face tree-sitter-hl-face:keyword) 527 528 (fontified t) 528 537 (fontified t face tree-sitter-hl-face:type) 537 538 (fontified t) 538 544 (fontified t face tree-sitter-hl-face:keyword) 544 545 (fontified t) 545 546 (fontified t face (rainbow-delimiters-depth-1-face)) 546 548 (fontified t) 548 550 (fontified t face tree-sitter-hl-face:property) 550 552 (fontified t) 552 553 (fontified t face tree-sitter-hl-face:operator) 553 562 (fontified t) 562 569 (fontified t face tree-sitter-hl-face:type) 569 571 (fontified t) 571 574 (fontified t face tree-sitter-hl-face:property) 574 583 (fontified t) 583 590 (fontified t face tree-sitter-hl-face:type) 590 591 (fontified t) 591 592 (fontified t face (rainbow-delimiters-depth-1-face)) 592 594 (fontified t) 594 598 (fontified t face tree-sitter-hl-face:keyword) 598 599 (fontified t) 599 612 (fontified t face tree-sitter-hl-face:type) 612 613 (fontified t) 613 617 (fontified t face tree-sitter-hl-face:keyword) 617 618 (fontified t face (rainbow-delimiters-depth-1-face)) 618 623 (fontified t) 623 637 (fontified t face tree-sitter-hl-face:type) 637 639 (fontified t) 639 640 (fontified t face tree-sitter-hl-face:operator) 640 645 (fontified t) 645 652 (fontified t face tree-sitter-hl-face:type) 652 663 (fontified t) 663 667 (fontified t face tree-sitter-hl-face:type) 667 668 (fontified t face (rainbow-delimiters-depth-1-face)) 668 670 (fontified t) 670 674 (fontified t face tree-sitter-hl-face:keyword) 674 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-1-face)) 676 677 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 677 678 (fontified t) 678 679 (fontified t face tree-sitter-hl-face:operator) 679 688 (fontified t face tree-sitter-hl-face:type) 688 689 (fontified t face (rainbow-delimiters-depth-1-face)) 689 690 (fontified t) 690 702 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 702 703 (fontified t face (rainbow-delimiters-depth-1-face)) 703 710 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 710 711 (fontified t) 711 724 (fontified t face tree-sitter-hl-face:type) 724 725 (fontified t face (rainbow-delimiters-depth-1-face)) 725 731 (fontified t) 731 742 (fontified t face tree-sitter-hl-face:type) 742 743 (fontified t) 743 744 (fontified t face (rainbow-delimiters-depth-1-face)) 744 746 (fontified t) 746 752 (fontified t face tree-sitter-hl-face:keyword) 752 753 (fontified t) 753 757 (fontified t face tree-sitter-hl-face:keyword) 757 758 (fontified t face (rainbow-delimiters-depth-2-face)) 758 759 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 759 765 (fontified t) 765 779 (fontified t face tree-sitter-hl-face:type) 779 781 (fontified t) 781 782 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 782 783 (fontified t) 783 784 (fontified t face tree-sitter-hl-face:operator) 784 789 (fontified t) 789 796 (fontified t face tree-sitter-hl-face:type) 796 797 (fontified t face (rainbow-delimiters-depth-2-face)) 797 798 (fontified t) 798 799 (fontified t face (rainbow-delimiters-depth-2-face)) 799 802 (fontified t) 802 813 (fontified t face tree-sitter-hl-face:variable) 813 814 (fontified t) 814 816 (fontified t face tree-sitter-hl-face:operator) 816 817 (fontified t) 817 818 (fontified t face tree-sitter-hl-face:variable) 818 819 (fontified t) 819 825 (fontified t face tree-sitter-hl-face:property) 825 826 (fontified t) 826 829 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 829 830 (fontified t face (rainbow-delimiters-depth-3-face)) 830 845 (fontified t face tree-sitter-hl-face:string) 845 846 (fontified t face (rainbow-delimiters-depth-3-face)) 846 849 (fontified t) 849 855 (fontified t face tree-sitter-hl-face:variable) 855 856 (fontified t) 856 858 (fontified t face tree-sitter-hl-face:operator) 858 859 (fontified t) 859 866 (fontified t face tree-sitter-hl-face:variable) 866 867 (fontified t) 867 872 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 872 873 (fontified t face (rainbow-delimiters-depth-3-face)) 873 884 (fontified t face tree-sitter-hl-face:variable) 884 886 (fontified t) 886 889 (fontified t face tree-sitter-hl-face:string) 889 890 (fontified t face (rainbow-delimiters-depth-3-face)) 890 891 (fontified t face (rainbow-delimiters-depth-3-face)) 891 892 (fontified t face tree-sitter-hl-face:number) 892 893 (fontified t face (rainbow-delimiters-depth-3-face)) 893 896 (fontified t) 896 900 (fontified t face tree-sitter-hl-face:variable) 900 902 (fontified t) 902 905 (fontified t face tree-sitter-hl-face:variable) 905 906 (fontified t) 906 908 (fontified t face tree-sitter-hl-face:operator) 908 909 (fontified t) 909 910 (fontified t face tree-sitter-hl-face:variable) 910 911 (fontified t) 911 913 (fontified t face tree-sitter-hl-face:property) 913 914 (fontified t) 914 929 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 929 930 (fontified t face (rainbow-delimiters-depth-3-face)) 930 931 (fontified t face tree-sitter-hl-face:variable) 931 932 (fontified t) 932 935 (fontified t face tree-sitter-hl-face:property) 935 937 (fontified t) 937 943 (fontified t face tree-sitter-hl-face:variable) 943 944 (fontified t face (rainbow-delimiters-depth-3-face)) 944 947 (fontified t) 947 949 (fontified t face tree-sitter-hl-face:keyword) 949 950 (fontified t) 950 953 (fontified t face tree-sitter-hl-face:variable) 953 954 (fontified t) 954 956 (fontified t face tree-sitter-hl-face:operator) 956 957 (fontified t) 957 960 (fontified t face tree-sitter-hl-face:constant\.builtin) 960 961 (fontified t) 961 962 (fontified t face (rainbow-delimiters-depth-3-face)) 962 966 (fontified t) 966 971 (fontified t face tree-sitter-hl-face:variable) 971 972 (fontified t) 972 988 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 988 989 (fontified t face (rainbow-delimiters-depth-4-face)) 989 990 (fontified t face tree-sitter-hl-face:variable) 990 992 (fontified t) 992 995 (fontified t face tree-sitter-hl-face:number) 995 997 (fontified t) 997 1011 (fontified t face tree-sitter-hl-face:string) 1011 1012 (fontified t face (rainbow-delimiters-depth-4-face)) 1012 1015 (fontified t) 1015 1016 (fontified t face (rainbow-delimiters-depth-3-face)) 1016 1017 (fontified t) 1017 1021 (fontified t face tree-sitter-hl-face:keyword) 1021 1022 (fontified t) 1022 1023 (fontified t face (rainbow-delimiters-depth-3-face)) 1023 1027 (fontified t) 1027 1034 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 1034 1035 (fontified t face (rainbow-delimiters-depth-4-face)) 1035 1036 (fontified t face tree-sitter-hl-face:variable) 1036 1038 (fontified t) 1038 1039 (fontified t face tree-sitter-hl-face:variable) 1039 1041 (fontified t) 1041 1045 (fontified t face tree-sitter-hl-face:variable) 1045 1046 (fontified t face (rainbow-delimiters-depth-4-face)) 1046 1049 (fontified t) 1049 1050 (fontified t face (rainbow-delimiters-depth-3-face)) 1050 1052 (fontified t) 1052 1053 (fontified t face (rainbow-delimiters-depth-2-face)) 1053 1054 (fontified t) 1054 1055 (fontified t face (rainbow-delimiters-depth-1-face)) 1055 1057 (fontified t) 1057 1061 (fontified t face tree-sitter-hl-face:keyword) 1061 1062 (fontified t) 1062 1066 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 1066 1067 (fontified t face (rainbow-delimiters-depth-1-face)) 1067 1068 (fontified t face (rainbow-delimiters-depth-1-face)) 1068 1069 (fontified t) 1069 1070 (fontified t face (rainbow-delimiters-depth-1-face)) 1070 1072 (fontified t) 1072 1080 (fontified t face tree-sitter-hl-face:variable) 1080 1081 (fontified t) 1081 1085 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1085 1086 (fontified t face (rainbow-delimiters-depth-2-face)) 1086 1087 (fontified t face (rainbow-delimiters-depth-2-face)) 1087 1089 (fontified t) 1089 1093 (fontified t face tree-sitter-hl-face:variable) 1093 1094 (fontified t) 1094 1096 (fontified t face tree-sitter-hl-face:operator) 1096 1097 (fontified t) 1097 1099 (fontified t face tree-sitter-hl-face:variable) 1099 1100 (fontified t) 1100 1106 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1106 1107 (fontified t face (rainbow-delimiters-depth-2-face)) 1107 1113 (fontified t face tree-sitter-hl-face:string) 1113 1114 (fontified t face (rainbow-delimiters-depth-2-face)) 1114 1117 (fontified t) 1117 1122 (fontified t face tree-sitter-hl-face:variable) 1122 1123 (fontified t) 1123 1125 (fontified t face tree-sitter-hl-face:operator) 1125 1126 (fontified t) 1126 1128 (fontified t face tree-sitter-hl-face:variable) 1128 1129 (fontified t) 1129 1135 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1135 1136 (fontified t face (rainbow-delimiters-depth-2-face)) 1136 1142 (fontified t face tree-sitter-hl-face:string) 1142 1143 (fontified t face (rainbow-delimiters-depth-2-face)) 1143 1145 (fontified t) 1145 1147 (fontified t face tree-sitter-hl-face:variable) 1147 1149 (fontified t) 1149 1153 (fontified t face tree-sitter-hl-face:variable) 1153 1154 (fontified t) 1154 1156 (fontified t face tree-sitter-hl-face:operator) 1156 1157 (fontified t) 1157 1160 (fontified t face tree-sitter-hl-face:variable) 1160 1161 (fontified t) 1161 1165 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1165 1166 (fontified t face (rainbow-delimiters-depth-2-face)) 1166 1176 (fontified t face tree-sitter-hl-face:string) 1176 1178 (fontified t) 1178 1183 (fontified t face tree-sitter-hl-face:variable) 1183 1184 (fontified t face (rainbow-delimiters-depth-2-face)) 1184 1186 (fontified t) 1186 1188 (fontified t face tree-sitter-hl-face:keyword) 1188 1189 (fontified t) 1189 1193 (fontified t face tree-sitter-hl-face:variable) 1193 1194 (fontified t) 1194 1196 (fontified t face tree-sitter-hl-face:operator) 1196 1197 (fontified t) 1197 1200 (fontified t face tree-sitter-hl-face:constant\.builtin) 1200 1201 (fontified t) 1201 1202 (fontified t face (rainbow-delimiters-depth-2-face)) 1202 1205 (fontified t) 1205 1208 (fontified t face tree-sitter-hl-face:variable) 1208 1209 (fontified t) 1209 1216 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1216 1217 (fontified t face (rainbow-delimiters-depth-3-face)) 1217 1221 (fontified t face tree-sitter-hl-face:variable) 1221 1222 (fontified t) 1222 1227 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1227 1228 (fontified t face (rainbow-delimiters-depth-4-face)) 1228 1229 (fontified t face (rainbow-delimiters-depth-4-face)) 1229 1230 (fontified t face (rainbow-delimiters-depth-3-face)) 1230 1233 (fontified t) 1233 1239 (fontified t face tree-sitter-hl-face:keyword) 1239 1241 (fontified t) 1241 1242 (fontified t face (rainbow-delimiters-depth-2-face)) 1242 1245 (fontified t) 1245 1254 (fontified t face tree-sitter-hl-face:variable) 1254 1255 (fontified t) 1255 1257 (fontified t face tree-sitter-hl-face:operator) 1257 1258 (fontified t) 1258 1266 (fontified t face tree-sitter-hl-face:variable) 1266 1267 (fontified t) 1267 1270 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1270 1271 (fontified t face (rainbow-delimiters-depth-2-face)) 1271 1273 (fontified t face tree-sitter-hl-face:variable) 1273 1274 (fontified t face (rainbow-delimiters-depth-2-face)) 1274 1276 (fontified t) 1276 1282 (fontified t face tree-sitter-hl-face:variable) 1282 1283 (fontified t) 1283 1285 (fontified t face tree-sitter-hl-face:operator) 1285 1286 (fontified t) 1286 1295 (fontified t face tree-sitter-hl-face:type) 1295 1296 (fontified t face (rainbow-delimiters-depth-2-face)) 1296 1297 (fontified t face (rainbow-delimiters-depth-2-face)) 1297 1299 (fontified t) 1299 1305 (fontified t face tree-sitter-hl-face:variable) 1305 1306 (fontified t) 1306 1308 (fontified t face tree-sitter-hl-face:property) 1308 1309 (fontified t) 1309 1310 (fontified t face tree-sitter-hl-face:operator) 1310 1311 (fontified t) 1311 1320 (fontified t face tree-sitter-hl-face:variable) 1320 1322 (fontified t) 1322 1328 (fontified t face tree-sitter-hl-face:variable) 1328 1329 (fontified t) 1329 1332 (fontified t face tree-sitter-hl-face:property) 1332 1333 (fontified t) 1333 1334 (fontified t face tree-sitter-hl-face:operator) 1334 1335 (fontified t) 1335 1342 (fontified t face tree-sitter-hl-face:variable) 1342 1343 (fontified t) 1343 1353 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1353 1354 (fontified t face (rainbow-delimiters-depth-2-face)) 1354 1355 (fontified t face (rainbow-delimiters-depth-2-face)) 1355 1358 (fontified t) 1358 1359 (fontified t face tree-sitter-hl-face:variable) 1359 1360 (fontified t) 1360 1362 (fontified t face tree-sitter-hl-face:operator) 1362 1363 (fontified t) 1363 1366 (fontified t face tree-sitter-hl-face:variable) 1366 1367 (fontified t) 1367 1376 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1376 1377 (fontified t face (rainbow-delimiters-depth-2-face)) 1377 1378 (fontified t face (rainbow-delimiters-depth-2-face)) 1378 1380 (fontified t) 1380 1381 (fontified t face tree-sitter-hl-face:variable) 1381 1382 (fontified t) 1382 1385 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1385 1386 (fontified t face (rainbow-delimiters-depth-2-face)) 1386 1396 (fontified t face tree-sitter-hl-face:variable) 1396 1397 (fontified t) 1397 1403 (fontified t face tree-sitter-hl-face:property) 1403 1404 (fontified t face (rainbow-delimiters-depth-2-face)) 1404 1406 (fontified t) 1406 1407 (fontified t face tree-sitter-hl-face:variable) 1407 1408 (fontified t) 1408 1411 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1411 1412 (fontified t face (rainbow-delimiters-depth-2-face)) 1412 1416 (fontified t face tree-sitter-hl-face:variable) 1416 1417 (fontified t) 1417 1424 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1424 1425 (fontified t face (rainbow-delimiters-depth-3-face)) 1425 1430 (fontified t) 1430 1437 (fontified t face tree-sitter-hl-face:type) 1437 1438 (fontified t face (rainbow-delimiters-depth-4-face)) 1438 1441 (fontified t) 1441 1455 (fontified t face tree-sitter-hl-face:variable) 1455 1457 (fontified t) 1457 1458 (fontified t face (rainbow-delimiters-depth-5-face)) 1458 1459 (fontified t face (rainbow-delimiters-depth-5-face)) 1459 1465 (fontified t face tree-sitter-hl-face:type) 1465 1466 (fontified t face (rainbow-delimiters-depth-5-face)) 1466 1469 (fontified t face tree-sitter-hl-face:string) 1469 1470 (fontified t face (rainbow-delimiters-depth-5-face)) 1470 1474 (fontified t) 1474 1475 (fontified t face tree-sitter-hl-face:variable) 1475 1488 (fontified t face tree-sitter-hl-face:variable) 1488 1490 (fontified t) 1490 1491 (fontified t face (rainbow-delimiters-depth-5-face)) 1491 1492 (fontified t face (rainbow-delimiters-depth-5-face)) 1492 1498 (fontified t face tree-sitter-hl-face:type) 1498 1499 (fontified t face (rainbow-delimiters-depth-5-face)) 1499 1532 (fontified t face tree-sitter-hl-face:string) 1532 1533 (fontified t face (rainbow-delimiters-depth-5-face)) 1533 1537 (fontified t) 1537 1551 (fontified t face tree-sitter-hl-face:variable) 1551 1553 (fontified t) 1553 1554 (fontified t face (rainbow-delimiters-depth-5-face)) 1554 1555 (fontified t face (rainbow-delimiters-depth-5-face)) 1555 1561 (fontified t face tree-sitter-hl-face:type) 1561 1562 (fontified t face (rainbow-delimiters-depth-5-face)) 1562 1565 (fontified t face tree-sitter-hl-face:string) 1565 1566 (fontified t face (rainbow-delimiters-depth-5-face)) 1566 1569 (fontified t) 1569 1570 (fontified t face (rainbow-delimiters-depth-4-face)) 1570 1571 (fontified t face (rainbow-delimiters-depth-3-face)) 1571 1572 (fontified t face (rainbow-delimiters-depth-2-face)) 1572 1575 (fontified t) 1575 1583 (fontified t face tree-sitter-hl-face:variable) 1583 1584 (fontified t) 1584 1586 (fontified t face tree-sitter-hl-face:operator) 1586 1587 (fontified t) 1587 1590 (fontified t face tree-sitter-hl-face:variable) 1590 1591 (fontified t) 1591 1600 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1600 1601 (fontified t face (rainbow-delimiters-depth-2-face)) 1601 1602 (fontified t face (rainbow-delimiters-depth-2-face)) 1602 1604 (fontified t) 1604 1605 (fontified t face tree-sitter-hl-face:variable) 1605 1606 (fontified t) 1606 1611 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1611 1612 (fontified t face (rainbow-delimiters-depth-2-face)) 1612 1617 (fontified t face tree-sitter-hl-face:string) 1617 1619 (fontified t) 1619 1627 (fontified t face tree-sitter-hl-face:variable) 1627 1628 (fontified t face (rainbow-delimiters-depth-2-face)) 1628 1631 (fontified t) 1631 1639 (fontified t face tree-sitter-hl-face:variable) 1639 1640 (fontified t) 1640 1643 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1643 1644 (fontified t face (rainbow-delimiters-depth-2-face)) 1644 1656 (fontified t face tree-sitter-hl-face:string) 1656 1658 (fontified t) 1658 1674 (fontified t face tree-sitter-hl-face:variable) 1674 1675 (fontified t face (rainbow-delimiters-depth-2-face)) 1675 1677 (fontified t) 1677 1685 (fontified t face tree-sitter-hl-face:variable) 1685 1686 (fontified t) 1686 1689 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1689 1690 (fontified t face (rainbow-delimiters-depth-2-face)) 1690 1696 (fontified t face tree-sitter-hl-face:string) 1696 1698 (fontified t) 1698 1702 (fontified t face tree-sitter-hl-face:variable)) . 26) (undo-tree-id32 . -667) (undo-tree-id33 . -667) (undo-tree-id34 . -667) (undo-tree-id35 . -667) (t 25935 43757 475118 574000)) nil (25941 4622 691170 850000) 0 nil])
([nil nil ((2770 . 2772) (t 25940 65169 335402 92000)) nil (25941 4622 691168 556000) 0 nil])
([nil nil ((2772 . 2778)) nil (25941 4622 691167 814000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2772) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2773) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2774) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2775) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2776) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2777) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 2778) nil (25941 4622 691166 712000) 0 nil])
([nil nil ((2772 . 2777)) nil (25941 4622 691161 492000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) #s(yas--field 2 2800 2811 nil nil nil t nil)) nil 0 nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil nil)) (2777 . 2824) (#("AddRefreshToken(${1:ctx context.Context}, ${2:id string})" 0 57 (fontified nil)) . 2777) (2777 . 2834) (#("AddRefreshToken" 0 15 (fontified nil)) . -2777) (2777 . 2792)) nil (25941 4622 691160 601000) 0 nil])
([nil nil ((2794 . 2796) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 2794) (undo-tree-id19 . -19) (2793 . 2794)) nil (25941 4622 691159 459000) 0 nil])
([nil nil ((apply yas--snippet-revive 2793 2798 #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) nil)) (2793 . 2798) (#("a.ctx" 0 5 (fontified nil)) . 2793) (undo-tree-id13 . -5) (2793 . 2798) (#("ctx" 0 3 (fontified nil)) . 2793) (undo-tree-id14 . -3) (2793 . 2796) (#("a.ctx" 0 5 (fontified nil)) . -2793) (undo-tree-id15 . -5) (2793 . 2798) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2793) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 2796) nil (25941 4622 691157 936000) 0 nil])
([nil nil ((2801 . 2805) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 2801) (undo-tree-id10 . -9) (undo-tree-id11 . -3) (undo-tree-id12 . -4) (2800 . 2801)) nil (25941 4622 691154 539000) 0 nil])
([nil nil ((apply yas--snippet-revive 2800 2811 #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil)) (2800 . 2811) (#("tokenString" 0 11 (fontified nil)) . 2800) (undo-tree-id0 . -11) (2800 . 2811) (#("token" 0 5 (fontified nil)) . 2800) (undo-tree-id1 . -5) (2800 . 2805) (#("tokenString" 0 11 (fontified nil)) . -2800) (undo-tree-id2 . -11) (2800 . 2811) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2800) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) 2805) nil (25941 4622 691151 824000) 0 nil])
([nil nil ((apply yas--snippet-revive 2777 2812 #s(yas--snippet nil (#s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) #s(yas--field 2 2800 2811 nil nil nil t nil)) nil 0 nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil nil))) nil (25941 4622 691115 647000) 0 nil])
([nil nil ((3679 . 3681) (t 25941 4622 698126 922000)) nil (25941 4752 933684 41000) 0 nil])
([nil nil ((3681 . 3691)) nil (25941 4752 933682 848000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3688) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3689) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3690) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 3691) nil (25941 4752 933680 304000) 0 nil])
([nil nil ((3688 . 3689)) nil (25941 4752 933676 988000) 0 nil])
([nil nil ((3689 . 3700)) nil (25941 4752 933676 657000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3714 3729 nil nil nil t nil)) nil 3 nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil nil)) (3696 . 3724) (#("a.mintAccessToken(${1:id string})" 0 33 (fontified nil)) . 3696) (3696 . 3729) (#("mint" 0 4 (fontified nil)) . 3696) (3696 . 3700) (#("a.mintAccessToken" 0 17 (fontified nil)) . -3696) (3696 . 3713) (#("mint" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3696) (undo-tree-id49 . -4) (undo-tree-id50 . -4) 3700) nil (25941 4752 933676 236000) 0 nil])
([nil nil ((3715 . 3719) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 3715) (3714 . 3715)) nil (25941 4752 933674 403000) 0 nil])
([nil nil ((apply yas--snippet-revive 3726 3729 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil)) (3714 . 3721) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil)) (3719 . 3722) (#("ID)" 0 3 (fontified nil)) . 3719) (3719 . 3722) (#("ID" 0 2 (fontified nil)) . -3719) (3719 . 3721)) nil (25941 4752 933673 441000) 0 nil])
([nil nil ((apply yas--snippet-revive 3696 3730 #s(yas--snippet nil (#s(yas--field 1 3714 3729 nil nil nil t nil)) nil 3 nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil nil))) nil (25941 4752 933672 489000) 0 nil])
([nil nil ((3728 . 3732)) nil (25941 4752 933672 149000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3728) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3729) (undo-tree-id46 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3730) (undo-tree-id47 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3731) (undo-tree-id48 . -1) 3732) nil (25941 4752 933671 628000) 0 nil])
([nil nil ((3728 . 3729)) nil (25941 4752 933669 423000) 0 nil])
([nil nil ((apply yas--snippet-revive 3729 3737 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (3729 . 3737) (#("String()" 0 8 (fontified nil)) . 3729) (3729 . 3737) (#("String" 0 6 (fontified nil)) . -3729) (3729 . 3735)) nil (25941 4752 933668 562000) 0 nil])
([nil nil ((3739 . 3741)) nil (25941 4752 933666 929000) 0 nil])
([nil nil ((3741 . 3755)) nil (25941 4752 933666 67000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3753) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3754) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 3755) nil (25941 4752 933665 296000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3757) (3757 . 3758) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3757) (3757 . 3758) (3753 . 3758)) nil (25941 4752 933661 960000) 0 nil])
([nil nil ((3758 . 3760) (3759 . 3760) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3758) (3758 . 3760) (3757 . 3759)) nil (25941 4752 933657 672000) 0 nil])
([nil nil ((3760 . 3766)) nil (25941 4752 933656 720000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3783 3784 nil nil nil t #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil))) #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil)) #s(yas--field 3 3791 3814 nil nil nil t nil)) nil 6 nil #s(yas--field 3 3791 3814 nil nil nil t nil) nil nil)) (3766 . 3827) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3766) (3766 . 3842) (#("RespondWithError" 0 16 (fontified nil)) . -3766) (3766 . 3782)) nil (25941 4752 933655 828000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3784) (3783 . 3784)) nil (25941 4752 933654 646000) 0 nil])
([nil nil ((3787 . 3789) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3787) (3786 . 3787)) nil (25941 4752 933653 975000) 0 nil])
([nil nil ((3792 . 3802) (3791 . 3793) (#("\"" 0 1 (fontified nil)) . -3791) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3792) (3791 . 3792)) nil (25941 4752 933653 263000) 0 nil])
([nil nil ((3802 . 3813)) nil (25941 4752 933652 392000) 0 nil])
([nil nil ((apply yas--snippet-revive 3766 3815 #s(yas--snippet nil (#s(yas--field 1 3783 3784 nil nil nil t #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil))) #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil)) #s(yas--field 3 3791 3814 nil nil nil t nil)) nil 6 nil #s(yas--field 3 3791 3814 nil nil nil t nil) nil nil))) nil (25941 4752 933651 620000) 0 nil])
([nil nil ((3815 . 3818)) nil (25941 4752 933650 658000) 0 nil])
([nil nil ((3818 . 3824)) nil (25941 4752 933650 157000) 0 nil])
([nil nil ((3827 . 3829)) nil (25941 4752 933649 576000) 0 nil])
([nil nil ((3829 . 3833)) nil (25941 4752 933649 166000) 0 nil])
([nil nil ((apply yas--snippet-revive 3829 3836 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (3829 . 3836) (#("resUser" 0 7 (fontified nil)) . 3829) (3829 . 3836) (#("resU" 0 4 (fontified nil)) . 3829) (3829 . 3833) (#("resUser" 0 7 (fontified nil)) . -3829) (3829 . 3836) (#("resU" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3829) (undo-tree-id38 . -4) (undo-tree-id39 . -4) 3833) nil (25941 4752 933648 104000) 0 nil])
([nil nil ((3836 . 3837)) nil (25941 4752 933645 890000) 0 nil])
([nil nil ((3837 . 3841)) nil (25941 4752 933645 198000) 0 nil])
([nil nil ((apply yas--snippet-revive 3837 3842 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (3837 . 3842) (#("Token" 0 5 (fontified nil)) . 3837) (3837 . 3842) (#("Toke" 0 4 (fontified nil)) . 3837) (3837 . 3841) (#("Token" 0 5 (fontified nil)) . -3837) (3837 . 3842) (#("Toke" 0 4 (fontified t face tree-sitter-hl-face:property)) . -3837) (undo-tree-id36 . -4) (undo-tree-id37 . -4) 3841) nil (25941 4752 933644 246000) 0 nil])
([nil nil ((3842 . 3850)) nil (25941 4752 933632 324000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2770 . 2771) (#("
" 0 1 (fontified nil)) . -2824) (2769 . 2825) 2768 (t 25941 4753 34366 400000)) nil (25941 6468 567134 269000) 0 nil])
([nil nil ((2771 . 2773)) nil (25941 6468 567133 848000) 0 nil])
([nil nil ((2790 . 2792)) nil (25941 6468 567133 498000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2792) (undo-tree-id67 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2793) (undo-tree-id68 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2794) (undo-tree-id69 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2795) (undo-tree-id70 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2796) (undo-tree-id71 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2797) (undo-tree-id72 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2798) (undo-tree-id73 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2799) (undo-tree-id74 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2800) (undo-tree-id75 . -1) 2801) nil (25941 6468 567131 995000) 0 nil])
([nil nil ((2792 . 2810)) nil (25941 6468 567128 488000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2825) (undo-tree-id57 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2826) (undo-tree-id58 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2827) (undo-tree-id59 . -1) (#("_" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2828) (undo-tree-id60 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2829) (undo-tree-id61 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2830) (undo-tree-id62 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2831) (undo-tree-id63 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2832) (undo-tree-id64 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2833) (undo-tree-id65 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2834) (undo-tree-id66 . -1) 2835) nil (25941 6468 567126 975000) 0 nil])
([nil nil ((2825 . 2845)) nil (25941 6468 567111 156000) 0 nil])
([nil nil ((2847 . 2850) (t 25941 6468 576038 960000)) nil (25941 6484 8988 396000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2847) (undo-tree-id76 . -1) (#("	" 0 1 (fontified t)) . -2848) (undo-tree-id77 . -1) (#("	" 0 1 (fontified t)) . -2849) (undo-tree-id78 . -1) 2850) nil (25941 6484 8985 671000) 0 nil])
([nil nil ((2847 . 2850) (t 25941 6484 109051 253000)) nil (25941 6698 960176 872000) 0 nil])
([nil nil ((2850 . 2861)) nil (25941 6698 960176 541000) 0 nil])
([nil nil ((2861 . 2870)) nil (25941 6698 960175 719000) 0 nil])
([nil nil ((apply yas--snippet-revive 2866 2874 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2866 . 2874) (#("database" 0 8 (fontified nil)) . 2866) (2866 . 2874) (#("data" 0 4 (fontified nil)) . 2866) (2866 . 2870) (#("database" 0 8 (fontified nil)) . -2866) (2866 . 2874) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2866) (undo-tree-id148 . -4) (undo-tree-id149 . -4) 2870) nil (25941 6698 960174 818000) 0 nil])
([nil nil ((2874 . 2875)) nil (25941 6698 960172 684000) 0 nil])
([nil nil ((apply yas--snippet-revive 2875 2896 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (2875 . 2896) (#("AddRefreshTokenParams" 0 21 (fontified nil)) . 2875) (2875 . 2896) (#("AddRefreshTokenParams" 0 21 (fontified nil)) . -2875) (2875 . 2896)) nil (25941 6698 960171 632000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2897) (2897 . 2898) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2897) (2897 . 2898) (2896 . 2898)) nil (25941 6698 960170 269000) 0 nil])
([nil nil ((2898 . 2901)) nil (25941 6698 960169 127000) 0 nil])
([nil nil ((2901 . 2904)) nil (25941 6698 960168 626000) 0 nil])
([nil nil ((2904 . 2905)) nil (25941 6698 960168 115000) 0 nil])
([nil nil ((2905 . 2907)) nil (25941 6698 960167 574000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2904) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2905) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 2907) nil (25941 6698 960166 692000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2903) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 2904) nil (25941 6698 960163 767000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2898) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("	" 0 1 (fontified t)) . -2899) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("	" 0 1 (fontified t)) . -2900) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2901) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2902) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 2903) nil (25941 6698 960162 334000) 0 nil])
([nil nil ((2864 . 2865)) nil (25941 6698 960158 858000) 0 nil])
([nil nil ((2899 . 2902)) nil (25941 6698 960158 447000) 0 nil])
([nil nil ((2902 . 2905)) nil (25941 6698 960158 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 2902 2915 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (2902 . 2915) (#("refreshObject" 0 13 (fontified nil)) . 2902) (2902 . 2915) (#("ref" 0 3 (fontified nil)) . 2902) (2902 . 2905) (#("refreshObject" 0 13 (fontified nil)) . -2902) (2902 . 2915) (#("ref" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2902) (undo-tree-id128 . -3) (undo-tree-id129 . -3) 2905) nil (25941 6698 960157 575000) 0 nil])
([nil nil ((2915 . 2916)) nil (25941 6698 960155 612000) 0 nil])
([nil nil ((apply yas--snippet-revive 2916 2924 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (2916 . 2924) (#("IssuedAt" 0 8 (fontified nil)) . 2916) (2916 . 2924) (#("IssuedAt" 0 8 (fontified nil)) . -2916) (2916 . 2924)) nil (25941 6698 960155 151000) 0 nil])
([nil nil ((2924 . 2933)) nil (25941 6698 960154 59000) 0 nil])
([nil nil ((apply yas--snippet-revive 2933 2938 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (2933 . 2938) (#("Now()" 0 5 (fontified nil)) . 2933) (2933 . 2938) (#("Now" 0 3 (fontified nil)) . -2933) (2933 . 2936)) nil (25941 6698 960153 237000) 0 nil])
([nil nil ((2938 . 2941)) nil (25941 6698 960152 446000) 0 nil])
([nil nil ((2941 . 2946)) nil (25941 6698 960152 145000) 0 nil])
([nil nil ((apply yas--snippet-revive 2941 2954 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (2941 . 2954) (#("refreshObject" 0 13 (fontified nil)) . 2941) (2941 . 2954) (#("refre" 0 5 (fontified nil)) . 2941) (2941 . 2946) (#("refreshObject" 0 13 (fontified nil)) . -2941) (2941 . 2954) (#("refre" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id126 . -5) (undo-tree-id127 . -5) 2946) nil (25941 6698 960151 514000) 0 nil])
([nil nil ((2954 . 2955)) nil (25941 6698 960149 650000) 0 nil])
([nil nil ((apply yas--snippet-revive 2955 2957 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (2955 . 2957) (#("ID" 0 2 (fontified nil)) . 2955) (2955 . 2957) (#("ID" 0 2 (fontified nil)) . -2955) (2955 . 2957)) nil (25941 6698 960148 859000) 0 nil])
([nil nil ((2957 . 2964)) nil (25941 6698 960147 246000) 0 nil])
([nil nil ((apply yas--snippet-revive 2960 2978 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (2960 . 2978) (#("refreshTokenSecret" 0 18 (fontified nil)) . 2960) (2960 . 2978) (#("refe" 0 4 (fontified nil)) . 2960) (2960 . 2964) (#("refreshTokenSecret" 0 18 (fontified nil)) . -2960) (2960 . 2978) (#("refe" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2960) (undo-tree-id124 . -4) (undo-tree-id125 . -4) 2964) nil (25941 6698 960146 344000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3010) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3011) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3012) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3013) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3014) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3015) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3016) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3017) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3018) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3019) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 3020) nil (25941 6698 960142 216000) 0 nil])
([nil nil ((3009 . 3012)) nil (25941 6698 959969 943000) 0 nil])
([nil nil ((3012 . 3014)) nil (25941 6698 959969 252000) 0 nil])
([nil nil ((apply yas--snippet-revive 3009 3022 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (3009 . 3022) (#("refreshObject" 0 13 (fontified nil)) . 3009) (3009 . 3022) (#("refre" 0 5 (fontified nil)) . 3009) (3009 . 3014) (#("refreshObject" 0 13 (fontified nil)) . -3009) (3009 . 3022) (#("refre" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id89 . -5) (undo-tree-id90 . -5) 3014) nil (25941 6698 959968 420000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2925) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 2926) nil (25941 6698 959963 812000) 0 nil])
([nil nil ((2959 . 2966) (t 25941 6699 61962 890000)) nil (25941 7171 94039 680000) 0 nil])
([nil nil ((2966 . 2967)) nil (25941 7171 94039 179000) 0 nil])
([nil nil ((2967 . 2970)) nil (25941 7171 94038 708000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2966) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2967) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2968) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2969) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 2970) nil (25941 7171 94037 927000) 0 nil])
([nil nil ((2966 . 2969)) nil (25941 7171 94034 530000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2966) (undo-tree-id365 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2967) (undo-tree-id366 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2968) (undo-tree-id367 . -1) 2969) nil (25941 7171 94033 929000) 0 nil])
([nil nil ((2966 . 2967)) nil (25941 7171 94031 615000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2965) (undo-tree-id363 . -1) (undo-tree-id364 . -1) 2966) nil (25941 7171 94031 114000) 0 nil])
([nil nil ((2965 . 2966)) nil (25941 7171 94029 922000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) #s(yas--field 2 3000 3001 nil nil nil t nil)) nil 18 nil #s(yas--field 2 3000 3001 nil nil nil t nil) nil nil)) (2966 . 3013) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2966) (2966 . 3023) (#("GenerateFromPassword" 0 20 (fontified nil)) . -2966) (2966 . 2986)) nil (25941 7171 94029 211000) 0 nil])
([nil nil ((2988 . 2993) (#("password []byte" 0 8 (fontified nil face tree-sitter-hl-face:type) 8 9 (fontified nil) 9 10 (fontified nil face (rainbow-delimiters-depth-4-face)) 10 11 (fontified nil face (rainbow-delimiters-depth-4-face)) 11 15 (fontified nil face tree-sitter-hl-face:type)) . 2988) (2987 . 2988)) nil (25941 7171 94027 678000) 0 nil])
([nil nil ((apply yas--snippet-revive 2987 2998 #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) nil)) (2987 . 2998) (#("tokenString" 0 11 (fontified nil)) . 2987) (2987 . 2998) (#("tokenS" 0 6 (fontified nil)) . 2987) (2987 . 2993) (#("tokenString" 0 11 (fontified nil)) . -2987) (2987 . 2998) (#("tokenS" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -2987) (undo-tree-id361 . -6) (undo-tree-id362 . -6) 2993) nil (25941 7171 94026 806000) 0 nil])
([nil nil ((#("cost int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3001) (3000 . 3001)) nil (25941 7171 94024 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 2966 3002 #s(yas--snippet nil (#s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) #s(yas--field 2 3000 3001 nil nil nil t nil)) nil 18 nil #s(yas--field 2 3000 3001 nil nil nil t nil) nil nil))) nil (25941 7171 94023 660000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3002) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3003) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3004) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3005) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3006) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3007) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3008) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3010) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3011) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3012) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3013) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3014) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3015) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3016) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3017) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3018) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3019) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3020) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 3021) nil (25941 7171 94021 246000) 0 nil])
([nil nil ((#("	\"github.com/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t)) . 365) (undo-tree-id318 . 1) (undo-tree-id319 . -29) (undo-tree-id320 . -29) (undo-tree-id321 . -28) (undo-tree-id322 . -29) 393) nil (25941 7171 94000 106000) 0 nil])
([nil nil ((393 . 394)) nil (25941 7171 93997 762000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id311 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -388) (undo-tree-id312 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -389) (undo-tree-id313 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -390) (undo-tree-id314 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -391) (undo-tree-id315 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -392) (undo-tree-id316 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -393) (undo-tree-id317 . -1) 394) nil (25941 7171 93996 700000) 0 nil])
([nil nil ((387 . 390)) nil (25941 7171 93992 692000) 0 nil])
([nil nil ((apply yas--snippet-revive 387 394 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (387 . 394) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("two" 0 3 (fontified nil)) . 387) (387 . 390) (#("twofish" 0 7 (fontified nil)) . -387) (387 . 394) (#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id309 . -3) (undo-tree-id310 . -3) 390) nil (25941 7171 93991 810000) 0 nil])
([nil nil ((387 . 390) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("two" 0 3 (fontified nil)) . 387) (387 . 390) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("twofish" 0 7 (fontified t face tree-sitter-hl-face:string)) . 387) (undo-tree-id308 . -7)) nil (25941 7171 93989 686000) 0 nil])
([nil nil ((#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . 387) (undo-tree-id307 . -3)) nil (25941 7171 93988 895000) 0 nil])
([nil nil ((387 . 394)) nil (25941 7171 93988 474000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . 393) (undo-tree-id306 . -1)) nil (25941 7171 93988 204000) 0 nil])
([nil nil ((365 . 395)) nil (25941 7171 93987 362000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id300 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id301 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id302 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id303 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id304 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id305 . -1) 423) nil (25941 7171 93986 731000) 0 nil])
([nil nil ((#("	\"github.com/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t)) . 365) (undo-tree-id296 . 8) (undo-tree-id297 . -29) (undo-tree-id298 . -21) (undo-tree-id299 . -29) 386) nil (25941 7171 93983 875000) 0 nil])
([nil nil ((387 . 389)) nil (25941 7171 93982 82000) 0 nil])
([nil nil ((389 . 391)) nil (25941 7171 93981 812000) 0 nil])
([nil nil ((apply yas--snippet-revive 387 393 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (387 . 393) (#("bcrypt" 0 6 (fontified nil)) . 387) (387 . 393) (#("bcry" 0 4 (fontified nil)) . 387) (387 . 391) (#("bcrypt" 0 6 (fontified nil)) . -387) (387 . 393) (#("bcry" 0 4 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id294 . -4) (undo-tree-id295 . -4) 391) nil (25941 7171 93980 569000) 0 nil])
([nil nil ((nil rear-nonsticky nil 395 . 396) (#("
" 0 1 (fontified nil)) . -424) (394 . 425) 392) nil (25941 7171 93978 465000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id288 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id289 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id290 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id291 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id292 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id293 . -1) 423) nil (25941 7171 93977 253000) 0 nil])
([nil nil ((417 . 420)) nil (25941 7171 93974 879000) 0 nil])
([nil nil ((apply yas--snippet-revive 417 424 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (417 . 424) (#("twofish" 0 7 (fontified nil)) . 417) (417 . 424) (#("two" 0 3 (fontified nil)) . 417) (417 . 420) (#("twofish" 0 7 (fontified nil)) . -417) (417 . 424) (#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 420) nil (25941 7171 93974 267000) 0 nil])
([nil nil ((427 . 429)) nil (25941 7171 93972 244000) 0 nil])
([nil nil ((429 . 435)) nil (25941 7171 93971 673000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -427) (undo-tree-id150 . -1) (undo-tree-id151 . 1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("
" 0 1 (fontified t)) . -428) (undo-tree-id184 . -1) (undo-tree-id185 . 1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -429) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -430) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -431) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -432) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("z" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -433) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#(" " 0 1 (fontified t)) . -434) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 435) nil (25941 7171 93966 974000) 0 nil])
([nil nil ((428 . 430) (t 25941 7171 194662 356000)) nil (25941 7330 176855 201000) 0 nil])
([nil nil ((429 . 437)) nil (25941 7330 176854 660000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -436) (undo-tree-id436 . -1) 437) nil (25941 7330 176853 979000) 0 nil])
([nil nil ((436 . 445)) nil (25941 7330 176853 87000) 0 nil])
([nil nil ((445 . 447)) nil (25941 7330 176852 597000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -446) (undo-tree-id434 . -1) (undo-tree-id435 . -1) 447) nil (25941 7330 176852 176000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -444) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -445) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 446) nil (25941 7330 176850 743000) 0 nil])
([nil nil ((444 . 447)) nil (25941 7330 176847 206000) 0 nil])
([nil nil ((apply yas--snippet-revive 444 451 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (444 . 451) (#("twofish" 0 7 (fontified nil)) . 444) (444 . 451) (#("two" 0 3 (fontified nil)) . 444) (444 . 447) (#("twofish" 0 7 (fontified nil)) . -444) (444 . 451) (#("two" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -444) (undo-tree-id428 . -3) (undo-tree-id429 . -3) 447) nil (25941 7330 176846 134000) 0 nil])
([nil nil ((451 . 452)) nil (25941 7330 176843 319000) 0 nil])
([nil nil ((452 . 453)) nil (25941 7330 176842 918000) 0 nil])
([nil nil ((453 . 455)) nil (25941 7330 176842 287000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 462 464 nil nil nil t nil)) nil 24 nil #s(yas--field 1 462 464 nil nil nil t nil) nil nil)) (452 . 473) (#("NewCipher(${1:key []byte})" 0 26 (fontified nil)) . 452) (452 . 478) (#("New" 0 3 (fontified nil)) . 452) (452 . 455) (#("NewCipher" 0 9 (fontified nil)) . -452) (452 . 461) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -452) (undo-tree-id426 . -3) (undo-tree-id427 . -3) 455) nil (25941 7330 176841 345000) 0 nil])
([nil nil ((462 . 464) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -462) (#("key []byte" 0 3 (fontified nil face tree-sitter-hl-face:type) 3 4 (fontified nil) 4 5 (fontified nil face (rainbow-delimiters-depth-2-face)) 5 6 (fontified nil face (rainbow-delimiters-depth-2-face)) 6 10 (fontified nil face tree-sitter-hl-face:type)) . 463) (462 . 463)) nil (25941 7330 176838 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 452 465 #s(yas--snippet nil (#s(yas--field 1 462 464 nil nil nil t nil)) nil 24 nil #s(yas--field 1 462 464 nil nil nil t nil) nil nil))) nil (25941 7330 176838 89000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -429) (undo-tree-id411 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -430) (undo-tree-id412 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -431) (undo-tree-id413 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -432) (undo-tree-id414 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -433) (undo-tree-id415 . -1) (#(" " 0 1 (fontified t)) . -434) (undo-tree-id416 . -1) (#("C" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -435) (undo-tree-id417 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -436) (undo-tree-id418 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -437) (undo-tree-id419 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -438) (undo-tree-id420 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -439) (undo-tree-id421 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -440) (undo-tree-id422 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id423 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -442) (undo-tree-id424 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id425 . -1) 444) nil (25941 7330 176835 865000) 0 nil])
([nil nil ((429 . 444)) nil (25941 7330 176829 804000) 0 nil])
([nil nil ((444 . 446)) nil (25941 7330 176829 383000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -445) (undo-tree-id408 . -1) (undo-tree-id409 . 1) (undo-tree-id410 . -1) 446) nil (25941 7330 176828 752000) 0 nil])
([nil nil ((445 . 447)) nil (25941 7330 176826 618000) 0 nil])
([nil nil ((445 . 452)) nil (25941 7330 176826 177000) 0 nil])
([nil nil ((452 . 453) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 452) (452 . 453) (451 . 453)) nil (25941 7330 176825 586000) 0 nil])
([nil nil ((#("	twofish.NewCipher(\"\")
" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t) 9 18 (fontified t face tree-sitter-hl-face:type) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 21 (fontified t face tree-sitter-hl-face:string) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t)) . 456) (undo-tree-id405 . 22) (undo-tree-id406 . -22) (undo-tree-id407 . -19)) nil (25941 7330 176824 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 454 . 455) (#("
" 0 1 (fontified nil)) . -476) (453 . 477) 452) nil (25941 7330 176823 131000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 452) (undo-tree-id404 . -1)) nil (25941 7330 176822 99000) 0 nil])
([nil nil ((450 . 451) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -450) (450 . 451) (449 . 451)) nil (25941 7330 176821 248000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -451) (undo-tree-id401 . -1) (undo-tree-id402 . 1) (undo-tree-id403 . -1) 452) nil (25941 7330 176819 915000) 0 nil])
([nil nil ((453 . 454) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -453) (453 . 454) (451 . 454)) nil (25941 7330 176818 142000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -454) (undo-tree-id398 . -1) (undo-tree-id399 . 1) (undo-tree-id400 . -1) 455) nil (25941 7330 176816 950000) 0 nil])
([nil nil ((453 . 459)) nil (25941 7330 176815 76000) 0 nil])
([nil nil ((453 . 456)) nil (25941 7330 176814 445000) 0 nil])
([nil nil ((apply yas--snippet-revive 453 467 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (453 . 467) (#("twofish.Cipher" 0 14 (fontified nil)) . 453) (453 . 467) (#("twoCipher" 0 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:type)) . 453) (453 . 456) (#("twofish.Cipher" 0 14 (fontified nil)) . -453) (453 . 467) (#("two" 0 3 (fontified t face tree-sitter-hl-face:type)) . -453) (undo-tree-id396 . -3) (undo-tree-id397 . -3) 456) nil (25941 7330 176813 804000) 0 nil])
([nil nil ((495 . 496)) nil (25941 7330 176811 620000) 0 nil])
([nil nil ((#("const Cipher = (func() (twofish.Cipher) {
	twofish.NewCipher(\"\")
}0
" 0 1 (fontified t face tree-sitter-hl-face:keyword) 1 2 (fontified t face tree-sitter-hl-face:keyword) 2 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:operator) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 20 (fontified t face tree-sitter-hl-face:keyword) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 32 (fontified t) 32 38 (fontified t face tree-sitter-hl-face:type) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 42 (fontified t) 42 43 (fontified t rear-nonsticky t) 43 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 60 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 63 (fontified t face tree-sitter-hl-face:string) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t face tree-sitter-hl-face:number) 67 68 (fontified t)) . 429) (undo-tree-id386 . -66) (undo-tree-id387 . 1) (undo-tree-id388 . -67) (undo-tree-id389 . -66) (undo-tree-id390 . -1) (undo-tree-id391 . -24) (undo-tree-id392 . -1) (undo-tree-id393 . -68) (undo-tree-id394 . -1) (undo-tree-id395 . -66) 430) nil (25941 7330 176811 229000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 429) (undo-tree-id384 . 1) (undo-tree-id385 . 1)) nil (25941 7330 176807 41000) 0 nil])
([nil nil ((773 . 775)) nil (25941 7330 176805 348000) 0 nil])
([nil nil ((775 . 778)) nil (25941 7330 176804 627000) 0 nil])
([nil nil ((778 . 785)) nil (25941 7330 176804 15000) 0 nil])
([nil nil ((apply yas--snippet-revive 782 796 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (782 . 796) (#("twofish.Cipher" 0 14 (fontified nil)) . 782) (782 . 796) (#("two" 0 3 (fontified nil)) . 782) (782 . 785) (#("twofish.Cipher" 0 14 (fontified nil)) . -782) (782 . 796) (#("two" 0 3 (fontified t face tree-sitter-hl-face:type)) . -782) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) 785) nil (25941 7330 176801 240000) 0 nil])
([nil nil ((4787 . 4789) (t 25941 7330 185027 697000)) nil (25941 7388 750753 631000) 0 nil])
([nil nil ((4789 . 4795)) nil (25941 7388 750752 950000) 0 nil])
([nil nil ((4795 . 4796)) nil (25941 7388 750752 639000) 0 nil])
([nil nil ((4796 . 4798)) nil (25941 7388 750752 379000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4796) (undo-tree-id459 . -1) (#(" " 0 1 (fontified t)) . -4797) (undo-tree-id460 . -1) 4798) nil (25941 7388 750751 427000) 0 nil])
([nil nil ((4796 . 4802)) nil (25941 7388 750750 465000) 0 nil])
([nil nil ((apply yas--snippet-revive 4799 4806 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (4799 . 4806) (#("twofish" 0 7 (fontified nil)) . 4799) (4799 . 4806) (#("two" 0 3 (fontified nil)) . 4799) (4799 . 4802) (#("twofish" 0 7 (fontified nil)) . -4799) (4799 . 4806) (#("two" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4799) (undo-tree-id457 . -3) (undo-tree-id458 . -3) 4802) nil (25941 7388 750749 804000) 0 nil])
([nil nil ((4806 . 4807)) nil (25941 7388 750748 251000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4817 4858 nil nil nil t nil)) nil 28 nil #s(yas--field 1 4817 4858 nil nil nil t nil) nil nil)) (4807 . 4828) (#("NewCipher(${1:key []byte})" 0 26 (fontified nil)) . 4807) (4807 . 4833) (#("NewCipher" 0 9 (fontified nil)) . -4807) (4807 . 4816)) nil (25941 7388 750747 620000) 0 nil])
([nil nil ((4817 . 4819) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4817) (undo-tree-id455 . -1) (#("key []byte" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 5 (fontified nil face (rainbow-delimiters-depth-3-face)) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 10 (fontified nil face tree-sitter-hl-face:type)) . 4818) (undo-tree-id456 . -10) (4817 . 4818)) nil (25941 7388 750746 438000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4817) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 4818) (undo-tree-id454 . -1)) nil (25941 7388 750744 454000) 0 nil])
([nil nil ((4817 . 4823)) nil (25941 7388 750742 320000) 0 nil])
([nil nil ((4817 . 4824) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4834 4856 nil nil nil t nil)) nil 29 nil #s(yas--field 1 4834 4856 nil nil nil t nil) #s(yas--field 1 4817 4858 nil nil nil t nil) nil)) (4820 . 4839) (#("Getenv(${1:key string}))" 0 24 (fontified nil)) . 4820) (undo-tree-id445 . -24) (4820 . 4844) (#("Get" 0 3 (fontified nil)) . 4820) (undo-tree-id446 . -3) (4820 . 4823) (#("Getenv" 0 6 (fontified nil)) . -4820) (undo-tree-id447 . -6) (4820 . 4826) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4820) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) 4823) nil (25941 7388 750741 348000) 0 nil])
([nil nil ((4835 . 4842) (4834 . 4836) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -4834) (undo-tree-id443 . -1) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4835) (undo-tree-id444 . -10) (4834 . 4835)) nil (25941 7388 750737 310000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4836) (undo-tree-id437 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4837) (undo-tree-id438 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4838) (undo-tree-id439 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4839) (undo-tree-id440 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4840) (undo-tree-id441 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4841) (undo-tree-id442 . -1) 4842) nil (25941 7388 750734 455000) 0 nil])
([nil nil ((4836 . 4848)) nil (25941 7388 750724 576000) 0 nil])
([nil nil ((4848 . 4855)) nil (25941 7388 750724 246000) 0 nil])
([nil nil ((apply yas--snippet-revive 4827 4858 #s(yas--snippet nil (#s(yas--field 1 4834 4856 nil nil nil t nil)) nil 29 nil #s(yas--field 1 4834 4856 nil nil nil t nil) #s(yas--field 1 4817 4858 nil nil nil t nil) nil))) nil (25941 7388 750723 494000) 0 nil])
([nil nil ((apply yas--snippet-revive 4807 4859 #s(yas--snippet nil (#s(yas--field 1 4817 4858 nil nil nil t nil)) nil 28 nil #s(yas--field 1 4817 4858 nil nil nil t nil) nil nil))) nil (25941 7388 750720 529000) 0 nil])
([nil nil ((4795 . 4801) (t 25941 7388 853424 624000)) nil (25941 7423 745796 478000) 0 nil])
([nil nil ((4865 . 4867)) nil (25941 7423 745796 247000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4879) (4879 . 4880) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4879) (4879 . 4880) (4867 . 4880)) nil (25941 7423 745795 656000) 0 nil])
([nil nil ((4880 . 4882) (4881 . 4882) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4880) (4880 . 4882) (4879 . 4881)) nil (25941 7423 745794 845000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4875) (undo-tree-id463 . -1) 4876) nil (25941 7423 745793 452000) 0 nil])
([nil nil ((4875 . 4876)) nil (25941 7423 745791 939000) 0 nil])
([nil nil ((4877 . 4881)) nil (25941 7423 745791 518000) 0 nil])
([nil nil ((4886 . 4894)) nil (25941 7423 745790 987000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4898 4910 nil nil nil t nil)) nil 30 nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil nil)) (4890 . 4907) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 4890) (4890 . 4912) (#("Prin" 0 4 (fontified nil)) . 4890) (4890 . 4894) (#("Println" 0 7 (fontified nil)) . -4890) (4890 . 4897) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4890) (undo-tree-id461 . -4) (undo-tree-id462 . -4) 4894) nil (25941 7423 745790 146000) 0 nil])
([nil nil ((4899 . 4903) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4899) (4898 . 4899)) nil (25941 7423 745782 51000) 0 nil])
([nil nil ((apply yas--snippet-revive 4903 4910 #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil)) (4903 . 4910) (#("Error()" 0 7 (fontified nil)) . 4903) (4903 . 4910) (#("Error" 0 5 (fontified nil)) . -4903) (4903 . 4908)) nil (25941 7423 745781 309000) 0 nil])
([nil nil ((apply yas--snippet-revive 4890 4911 #s(yas--snippet nil (#s(yas--field 1 4898 4910 nil nil nil t nil)) nil 30 nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil nil))) nil (25941 7423 745780 738000) 0 nil])
([nil nil ((4911 . 4914)) nil (25941 7423 745780 317000) 0 nil])
([nil nil ((4914 . 4920)) nil (25941 7423 745777 522000) 0 nil])
([nil nil ((4923 . 4925) (t 25941 7423 755646 161000)) nil (25941 7465 549174 331000) 0 nil])
([nil nil ((4925 . 4928)) nil (25941 7465 549173 560000) 0 nil])
([nil nil ((apply yas--snippet-revive 4925 4931 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (4925 . 4931) (#("apiCfg" 0 6 (fontified nil)) . 4925) (4925 . 4931) (#("api" 0 3 (fontified nil)) . 4925) (4925 . 4928) (#("apiCfg" 0 6 (fontified nil)) . -4925) (4925 . 4931) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4925) (undo-tree-id479 . -3) (undo-tree-id480 . -3) 4928) nil (25941 7465 549172 668000) 0 nil])
([nil nil ((4931 . 4932)) nil (25941 7465 549171 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 4932 4938 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (4932 . 4938) (#("cipher" 0 6 (fontified nil)) . 4932) (4932 . 4938) (#("cipher" 0 6 (fontified nil)) . -4932) (4932 . 4938)) nil (25941 7465 549170 163000) 0 nil])
([nil nil ((4938 . 4944)) nil (25941 7465 549169 211000) 0 nil])
([nil nil ((apply yas--snippet-revive 4941 4948 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (4941 . 4948) (#("*cipher" 0 7 (fontified nil)) . 4941) (4941 . 4948) (#("cip" 0 3 (fontified nil)) . 4941) (4941 . 4944) (#("cipher" 0 6 (fontified nil)) . -4941) (4941 . 4947) (#("cip" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4941) (undo-tree-id477 . -3) (undo-tree-id478 . -3) 4944) nil (25941 7465 549168 209000) 0 nil])
([nil nil ((782 . 783)) nil (25941 7465 549165 504000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4942) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 4943) nil (25941 8368 458831 59000) 0 nil])
([nil nil ((#("	  refreshTokenSecret := os.Getenv(\"REFRESH_TOKEN_SECRET\")
" 0 3 (fontified t) 3 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 24 (fontified t face tree-sitter-hl-face:operator) 24 25 (fontified t) 25 27 (fontified t face tree-sitter-hl-face:variable) 27 28 (fontified t) 28 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-3-face)) 35 57 (fontified t face tree-sitter-hl-face:string) 57 58 (fontified t face (rainbow-delimiters-depth-3-face)) 58 59 (fontified t)) . 2814) (undo-tree-id815 . -58) (undo-tree-id816 . -57) (undo-tree-id817 . -57)) ((2814 . 2873)) (25941 8369 678293 988000) 0 nil])
([nil nil ((#("sword(tokenString, 8)" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1 2 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2 3 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 3 4 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 4 5 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t face tree-sitter-hl-face:variable) 13 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face tree-sitter-hl-face:number) 20 21 (fontified t face (rainbow-delimiters-depth-3-face))) . 2947) (undo-tree-id818 . -21)) ((2947 . 2968)) (25941 8369 867225 680000) 0 nil])
([nil nil ((#("crypt.GenerateFromPas" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t face tree-sitter-hl-face:property) 8 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t face tree-sitter-hl-face:property) 10 11 (fontified t face tree-sitter-hl-face:property) 11 12 (fontified t face tree-sitter-hl-face:property) 12 13 (fontified t face tree-sitter-hl-face:property) 13 14 (fontified t face tree-sitter-hl-face:property) 14 15 (fontified t face tree-sitter-hl-face:property) 15 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t face tree-sitter-hl-face:property) 18 19 (fontified t face tree-sitter-hl-face:property) 19 20 (fontified t face tree-sitter-hl-face:property) 20 21 (fontified t face tree-sitter-hl-face:property)) . 2926) (undo-tree-id819 . -18) (undo-tree-id820 . -21) (undo-tree-id821 . -21) (undo-tree-id822 . -21) (undo-tree-id823 . -6) (undo-tree-id824 . -21)) ((2926 . 2947)) (25941 8370 134971 318000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 2925) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1)) ((2925 . 2926)) (25941 8370 346221 787000) 0 nil])
([nil nil ((2925 . 2927)) ((#("a." 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t)) . 2925) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2)) (25941 8370 651006 929000) 0 nil])
([nil nil ((2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933)) ((#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property) 4 5 (fontified t face tree-sitter-hl-face:property) 5 6 (fontified t face tree-sitter-hl-face:property)) . 2927) (undo-tree-id809 . -6) (undo-tree-id810 . -6) (undo-tree-id811 . -6)) (25941 8370 879544 602000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 2934) (2934 . 2935) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2934) (2934 . 2935) (2933 . 2935)) ((#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2933) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2934) (2934 . 2935) (#(")" 0 1 (fontified nil)) . 2934) (2934 . 2935)) (25941 8376 799054 293000) 0 nil])
([nil nil ((2934 . 2939)) nil (25941 9197 303951 541000) 0 nil] [nil nil ((#("pher()" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1 2 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2 3 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 3 4 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t face (rainbow-delimiters-depth-3-face))) . 2929) (undo-tree-id831 . -5) (undo-tree-id832 . -5)) ((2929 . 2935)) (25941 8375 747049 759000) 0 nil])
([nil nil ((apply yas--snippet-revive 2934 2945 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (2934 . 2945) (#("tokenString" 0 11 (fontified nil)) . 2934) (2934 . 2945) (#("token" 0 5 (fontified nil)) . 2934) (2934 . 2939) (#("tokenString" 0 11 (fontified nil)) . -2934) (2934 . 2945) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2934) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) 2939) nil (25941 9197 303950 900000) 0 nil])
([nil nil ((#("	cipher, cerr := twofish.NewCipher([]byte(os.Getenv(\"REFRESH_TOKEN_SECRET\")))
	if cerr != nil {
		fmt.Println(cerr.Error())
		return
	}
	apiCfg.cipher = cipher
" 1 7 (face tree-sitter-hl-face:variable) 9 13 (face tree-sitter-hl-face:variable) 14 16 (face tree-sitter-hl-face:operator) 17 24 (face tree-sitter-hl-face:variable) 25 34 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (face (rainbow-delimiters-depth-2-face)) 35 36 (face (rainbow-delimiters-depth-3-face)) 36 37 (face (rainbow-delimiters-depth-3-face)) 37 41 (face tree-sitter-hl-face:type) 41 42 (face (rainbow-delimiters-depth-3-face)) 42 44 (face tree-sitter-hl-face:variable) 45 51 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 51 52 (face (rainbow-delimiters-depth-4-face)) 52 74 (face tree-sitter-hl-face:string) 74 75 (face (rainbow-delimiters-depth-4-face)) 75 76 (face (rainbow-delimiters-depth-3-face)) 76 77 (face (rainbow-delimiters-depth-2-face)) 79 81 (face tree-sitter-hl-face:keyword) 82 86 (face tree-sitter-hl-face:variable) 87 88 (face tree-sitter-hl-face:operator) 88 89 (face tree-sitter-hl-face:operator) 90 93 (face tree-sitter-hl-face:constant\.builtin) 94 95 (face (rainbow-delimiters-depth-2-face)) 98 101 (face tree-sitter-hl-face:variable) 102 109 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 109 110 (face (rainbow-delimiters-depth-3-face)) 110 114 (face tree-sitter-hl-face:variable) 115 120 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 120 121 (face (rainbow-delimiters-depth-4-face)) 121 122 (face (rainbow-delimiters-depth-4-face)) 122 123 (face (rainbow-delimiters-depth-3-face)) 126 132 (face tree-sitter-hl-face:keyword) 134 135 (face (rainbow-delimiters-depth-2-face)) 137 143 (face tree-sitter-hl-face:variable) 144 150 (face tree-sitter-hl-face:property) 151 152 (face tree-sitter-hl-face:operator) 153 159 (face tree-sitter-hl-face:variable)) . 4691)) ((4691 . 4851)) (25941 8374 178389 102000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2933) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2934) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2935) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2936) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2937) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2938) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2939) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2940) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2945) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . 1) (undo-tree-id1015 . -1) 2946) nil (25941 9197 303947 814000) 0 nil])
([nil nil ((#("	\"golang.org/x/crypto/twofish\"
" 0 1 (fontified t rear-nonsticky t) 1 22 (fontified t face tree-sitter-hl-face:string) 22 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t face tree-sitter-hl-face:string) 30 31 (fontified t)) . 395) (undo-tree-id833 . -30) (undo-tree-id834 . -30) (undo-tree-id835 . -30)) ((395 . 426)) (25941 8373 427456 521000) 0 nil])
([nil nil ((2933 . 2934)) nil (25941 9197 303934 499000) 0 nil])
([nil nil ((#("	cipher *twofish.Cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:operator) 9 17 (fontified t) 17 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t)) . 743) (undo-tree-id481 . -23) (undo-tree-id482 . -23) (undo-tree-id483 . -22) (undo-tree-id485 . -16) (undo-tree-id487 . -24) (undo-tree-id489 . -23) (undo-tree-id491 . -22) (undo-tree-id493 . -22) (undo-tree-id495 . -22) (undo-tree-id497 . -17) (undo-tree-id499 . -22) (undo-tree-id501 . -22) 765) ((743 . 767)) (25941 8357 973546 500000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil 39 nil #s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil nil)) (2934 . 2965) (#("Encrypt(${1:dst []byte}, ${2:src []byte})" 0 41 (fontified nil)) . 2934) (2934 . 2975) (#("Encrypt" 0 7 (fontified nil)) . -2934) (2934 . 2941)) nil (25941 9197 303934 8000) 0 nil])
([nil nil ((1765 . 1771) (t 25941 7891 724861 403000)) ((#("string" 0 6 (fontified t face tree-sitter-hl-face:variable)) . 1765) (undo-tree-id800 . -6) (undo-tree-id801 . -6)) (25941 8357 942338 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 2934 2965 #s(yas--snippet nil (#s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil 39 nil #s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil nil))) nil (25941 9197 303933 87000) 0 nil])
([nil nil ((1771 . 1773)) ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 1771) (undo-tree-id798 . -2) (undo-tree-id799 . -2)) (25941 8357 912433 563000) 0 nil])
([nil nil ((2903 . 2906)) nil (25941 9197 303932 405000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1772) (undo-tree-id642 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . 1) (undo-tree-id646 . -1) 1773) ((1772 . 1773)) (25941 8357 883337 705000) 0 nil])
([nil nil ((2906 . 2911)) nil (25941 9197 303932 55000) 0 nil])
([nil nil ((1776 . 1777) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1776) (1776 . 1777)) ((#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . 1776) (1776 . 1777) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1776) (t 25941 7906 988861 756000)) (25941 8357 855509 447000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2907) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2908) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2909) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2910) (undo-tree-id973 . -1) (undo-tree-id974 . -1) 2911) nil (25941 9197 303930 832000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2878) (undo-tree-id761 . -1) (#("." 0 1 (fontified t)) . -2879) (undo-tree-id762 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2880) (undo-tree-id763 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2881) (undo-tree-id764 . -1) 2882 (t 25941 7906 988861 756000)) ((2878 . 2882)) (25941 8357 351111 196000) 0 nil])
([nil nil ((2921 . 2923) (#("]" 0 1 (fontified nil)) . -2920) (2920 . 2921) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2920) (2920 . 2921) (2906 . 2921)) nil (25941 9197 303926 143000) 0 nil])
([nil nil ((2878 . 2881)) ((#("bcr" 0 3 (fontified t face tree-sitter-hl-face:variable)) . 2878) (undo-tree-id796 . -3) (undo-tree-id797 . -3)) (25941 8357 219241 481000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2922) (undo-tree-id964 . -1) 2923) nil (25941 9197 303924 761000) 0 nil])
([nil nil ((2881 . 2882)) ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 2881) (undo-tree-id794 . -1) (undo-tree-id795 . -1)) (25941 8357 31915 996000) 0 nil])
([nil nil ((2922 . 2925)) nil (25941 9197 303782 895000) 0 nil])
([nil nil ((apply yas--snippet-revive 2878 2908 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2878 . 2908) (#("bcrypt.ErrHashTooShort.Error()" 0 30 (fontified nil)) . 2878) (2878 . 2908) (#("bcry" 0 4 (fontified nil)) . 2878) (2878 . 2882) (#("bcrypt.ErrHashTooShort.Error" 0 28 (fontified nil)) . -2878) (2878 . 2906) (#("bcry" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2878) (undo-tree-id759 . -4) (undo-tree-id760 . -4) 2882) ((2878 . 2882) (#("bcrypt.ErrHashTooShort.Error" 0 28 (fontified nil)) . 2878) (2878 . 2906) (#("bcry" 0 4 (fontified nil)) . 2878) (2878 . 2882) (#("bcrypt.ErrHashTooShort.Error()" 0 30 (fontified nil)) . 2878) (2878 . 2908) (#("bcrypt.ErrHashTooShort.Error()" 0 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 8 (fontified t face tree-sitter-hl-face:property) 8 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t face tree-sitter-hl-face:property) 10 11 (fontified t face tree-sitter-hl-face:property) 11 12 (fontified t face tree-sitter-hl-face:property) 12 13 (fontified t face tree-sitter-hl-face:property) 13 14 (fontified t face tree-sitter-hl-face:property) 14 15 (fontified t face tree-sitter-hl-face:property) 15 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t face tree-sitter-hl-face:property) 18 19 (fontified t face tree-sitter-hl-face:property) 19 20 (fontified t face tree-sitter-hl-face:property) 20 21 (fontified t face tree-sitter-hl-face:property) 21 22 (fontified t face tree-sitter-hl-face:property) 22 23 (fontified t) 23 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 26 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t face (rainbow-delimiters-depth-3-face))) . 2878) (undo-tree-id789 . -6) (undo-tree-id790 . -6) (undo-tree-id791 . -6) (undo-tree-id792 . -30) (undo-tree-id793 . -30)) (25941 8356 866613 535000) 0 nil])
([nil nil ((2925 . 2926)) nil (25941 9197 303782 474000) 0 nil])
([nil nil ((2908 . 2909)) ((#("." 0 1 (fontified t)) . 2908) (undo-tree-id787 . -1) (undo-tree-id788 . -1)) (25941 8356 697408 739000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2925) (undo-tree-id963 . -1) 2926) nil (25941 9197 303781 943000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2889) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2890) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2891) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2892) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2893) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2894) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2895) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2896) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2897) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2898) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2899) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("." 0 1 (fontified t)) . -2900) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2901) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2902) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2903) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2904) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2905) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2906) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . 1) (undo-tree-id752 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2907) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . 1) (undo-tree-id756 . -1) (#("." 0 1 (fontified t)) . -2908) (undo-tree-id757 . -1) (undo-tree-id758 . -1) 2909) ((2888 . 2909)) (25941 8356 530976 967000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2964) (undo-tree-id953 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2965) (undo-tree-id954 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2966) (undo-tree-id955 . -1) (#(" " 0 1 (fontified t)) . -2967) (undo-tree-id956 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2968) (undo-tree-id957 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2969) (undo-tree-id958 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2970) (undo-tree-id959 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2971) (undo-tree-id960 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2972) (undo-tree-id961 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2973) (undo-tree-id962 . -1) 2974) nil (25941 9197 303780 19000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) 2888) ((2885 . 2888)) (25941 8356 358599 145000) 0 nil])
([nil nil ((2964 . 2967)) nil (25941 9197 303776 222000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2884) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 2885) ((2884 . 2885)) (25941 8356 91180 219000) 0 nil])
([nil nil ((apply yas--snippet-revive 2964 2973 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (2964 . 2973) (#("encrypted" 0 9 (fontified nil)) . 2964) (2964 . 2973) (#("enc" 0 3 (fontified nil)) . 2964) (2964 . 2967) (#("encrypted" 0 9 (fontified nil)) . -2964) (2964 . 2973) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2964) (undo-tree-id951 . -3) (undo-tree-id952 . -3) 2967) nil (25941 9197 303775 260000) 0 nil])
([nil nil ((2884 . 2885)) ((#("." 0 1 (fontified t)) . 2884) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1)) (25941 8355 727009 517000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2975) (undo-tree-id941 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2976) (undo-tree-id942 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2977) (undo-tree-id943 . -1) (#(" " 0 1 (fontified t)) . -2978) (undo-tree-id944 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2979) (undo-tree-id945 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2980) (undo-tree-id946 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2981) (undo-tree-id947 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2982) (undo-tree-id948 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2983) (undo-tree-id949 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2984) (undo-tree-id950 . -1) 2985) nil (25941 9197 303772 4000) 0 nil])
([nil nil ((2885 . 2886)) ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id780 . -1) (undo-tree-id781 . -1)) (25941 8355 696782 456000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2982) (2982 . 2983) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2982) (2982 . 2983) (2977 . 2983) (#("]" 0 1 (fontified nil)) . -2976) (2976 . 2977) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2976) (2976 . 2977) (2975 . 2977)) nil (25941 9197 303767 726000) 0 nil])
([nil nil ((2886 . 2889)) ((#("ash" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property)) . 2886) (undo-tree-id778 . -3) (undo-tree-id779 . -3)) (25941 8355 668079 175000) 0 nil])
([nil nil ((2982 . 2987)) nil (25941 9197 303766 554000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 2889) ((2885 . 2889)) (25941 8355 637157 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 2982 2993 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (2982 . 2993) (#("tokenString" 0 11 (fontified nil)) . 2982) (2982 . 2993) (#("token" 0 5 (fontified nil)) . 2982) (2982 . 2987) (#("tokenString" 0 11 (fontified nil)) . -2982) (2982 . 2993) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2982) (undo-tree-id939 . -5) (undo-tree-id940 . -5) 2987) nil (25941 9197 303765 683000) 0 nil])
([nil nil ((2885 . 2888)) ((#("Has" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id776 . -3) (undo-tree-id777 . -3)) (25941 8355 606372 773000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2916) (undo-tree-id938 . -1) 2917) nil (25941 9197 303763 609000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id656 . -1) (undo-tree-id657 . -1) 2888) ((2887 . 2888)) (25941 8355 576123 691000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2918) (undo-tree-id930 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2919) (undo-tree-id931 . -1) (undo-tree-id932 . 1) (undo-tree-id933 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2920) (undo-tree-id934 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2921) (undo-tree-id935 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2922) (undo-tree-id936 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2923) (undo-tree-id937 . -1) 2924) nil (25941 9197 303762 356000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id654 . -1) (undo-tree-id655 . -1) 2887) ((2885 . 2887)) (25941 8355 545334 816000) 0 nil])
([nil nil ((2918 . 2920) (#("\"" 0 1 (fontified nil)) . -2918) (2918 . 2919)) nil (25941 9197 303759 100000) 0 nil])
([nil nil ((2885 . 2889)) ((#("Geme" 0 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id774 . -4) (undo-tree-id775 . -4)) (25941 8355 516312 56000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2914) (undo-tree-id924 . -1) (#(" " 0 1 (fontified t)) . -2915) (undo-tree-id925 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2916) (undo-tree-id926 . -1) (#(" " 0 1 (fontified t)) . -2917) (undo-tree-id927 . -1) (#("\"" 0 1 (fontified t)) . -2918) (undo-tree-id928 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2919) (undo-tree-id929 . -1) 2920) nil (25941 9197 303757 848000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id650 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id651 . -1) 2889) ((2887 . 2889)) (25941 8355 485298 249000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2903) (undo-tree-id913 . -1) (#("	" 0 1 (fontified t)) . -2904) (undo-tree-id914 . -1) (#("	" 0 1 (fontified t)) . -2905) (undo-tree-id915 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id916 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2907) (undo-tree-id917 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2908) (undo-tree-id918 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2909) (undo-tree-id919 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2910) (undo-tree-id920 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2911) (undo-tree-id921 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2912) (undo-tree-id922 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2913) (undo-tree-id923 . -1) 2914) nil (25941 9197 303753 620000) 0 nil])
([nil nil ((2887 . 2889)) ((#("ne" 0 2 (fontified t face tree-sitter-hl-face:property)) . 2887) (undo-tree-id772 . -2) (undo-tree-id773 . -2)) (25941 8355 457218 879000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id904 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id905 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id906 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2945) (undo-tree-id907 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2946) (undo-tree-id908 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2947) (undo-tree-id909 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2948) (undo-tree-id910 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2949) (undo-tree-id911 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2950) (undo-tree-id912 . -1) 2951) nil (25941 9197 303747 248000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil)) (2885 . 2932) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2885) (2885 . 2942) (#("Gene" 0 4 (fontified nil)) . 2885) (2885 . 2889) (#("GenerateFromPassword" 0 20 (fontified nil)) . -2885) (2885 . 2905) (#("Gene" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id648 . -4) (undo-tree-id649 . -4) 2889) ((2885 . 2889) (#("GenerateFromPassword" 0 20 (fontified nil)) . 2885) (2885 . 2905) (#("Gene" 0 4 (fontified nil)) . 2885) (2885 . 2889) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2885) (2885 . 2942) (#("GenerateFromPassword(password []byte, cost int)" 0 20 (fontified t face tree-sitter-hl-face:type) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 29 (fontified t face tree-sitter-hl-face:type) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-4-face)) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 36 (fontified t face tree-sitter-hl-face:type) 36 38 (fontified t) 38 42 (fontified t face tree-sitter-hl-face:variable) 42 43 (fontified t) 43 46 (fontified t face tree-sitter-hl-face:variable) 46 47 (fontified t face (rainbow-delimiters-depth-3-face))) . 2885) (undo-tree-id765 . -21) (undo-tree-id766 . -31) (undo-tree-id767 . -32) (undo-tree-id768 . -21) (undo-tree-id769 . -29) (undo-tree-id770 . -21) (undo-tree-id771 . -21) (apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8354 954384 880000) 0 nil])
([nil nil ((2903 . 2906)) nil (25941 9197 303743 621000) 0 nil])
([nil nil ((apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8354 581814 843000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2926) (2926 . 2927) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2926) (2926 . 2927) (2921 . 2927) (#("]" 0 1 (fontified nil)) . -2920) (2920 . 2921) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2920) (2920 . 2921) (2906 . 2921)) nil (25941 9197 303742 619000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) ((apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8353 495237 290000) 0 nil])
([nil nil ((2966 . 2969)) nil (25941 9197 303741 26000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 2966 2975 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (2966 . 2975) (#("encrypted" 0 9 (fontified nil)) . 2966) (2966 . 2975) (#("enc" 0 3 (fontified nil)) . 2966) (2966 . 2969) (#("encrypted" 0 9 (fontified nil)) . -2966) (2966 . 2975) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2966) (undo-tree-id902 . -3) (undo-tree-id903 . -3) 2969) nil (25941 9197 303740 325000) 0 nil])
([nil nil ((425 . 427)) nil (25941 9197 303738 271000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id895 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id896 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id897 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id898 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id899 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id900 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -423) (undo-tree-id901 . -1) 424) nil (25941 9197 303737 299000) 0 nil])
([nil nil ((417 . 421)) nil (25941 9197 303733 252000) 0 nil])
([nil nil ((#("	cipher *twofish.Cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:operator) 9 17 (fontified t) 17 22 (fontified t face tree-sitter-hl-face:type) 22 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t)) . 773) (undo-tree-id892 . 1) (undo-tree-id893 . -23) (undo-tree-id894 . -22) 795) nil (25941 9197 303732 540000) 0 nil])
([nil nil ((#("	cipher, cerr := twofish.NewCipher([]byte(os.Getenv(\"REFRESH_TOKEN_SECRET\")))
	if cerr != nil {
		fmt.Println(cerr.Error())
		return
	}
	apiCfg.cipher = cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:variable) 7 9 (fontified t) 9 13 (fontified t face tree-sitter-hl-face:variable) 13 14 (fontified t) 14 16 (fontified t face tree-sitter-hl-face:operator) 16 17 (fontified t) 17 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t face (rainbow-delimiters-depth-3-face)) 37 41 (fontified t face tree-sitter-hl-face:type) 41 42 (fontified t face (rainbow-delimiters-depth-3-face)) 42 44 (fontified t face tree-sitter-hl-face:variable) 44 45 (fontified t) 45 51 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 51 52 (fontified t face (rainbow-delimiters-depth-4-face)) 52 53 (fontified t face tree-sitter-hl-face:string) 53 73 (fontified t face tree-sitter-hl-face:string) 73 74 (fontified t face tree-sitter-hl-face:string) 74 75 (fontified t face (rainbow-delimiters-depth-4-face)) 75 76 (fontified t face (rainbow-delimiters-depth-3-face)) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t) 78 79 (fontified t) 79 81 (fontified t face tree-sitter-hl-face:keyword) 81 82 (fontified t) 82 86 (fontified t face tree-sitter-hl-face:variable) 86 87 (fontified t) 87 88 (fontified t face tree-sitter-hl-face:operator) 88 89 (fontified t face tree-sitter-hl-face:operator) 89 90 (fontified t) 90 93 (fontified t face tree-sitter-hl-face:constant\.builtin) 93 94 (fontified t) 94 95 (fontified t face (rainbow-delimiters-depth-2-face)) 95 96 (fontified t) 96 98 (fontified t) 98 101 (fontified t face tree-sitter-hl-face:variable) 101 102 (fontified t) 102 109 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 109 110 (fontified t face (rainbow-delimiters-depth-3-face)) 110 114 (fontified t face tree-sitter-hl-face:variable) 114 115 (fontified t) 115 120 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 120 121 (fontified t face (rainbow-delimiters-depth-4-face)) 121 122 (fontified t face (rainbow-delimiters-depth-4-face)) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 124 (fontified t) 124 126 (fontified t) 126 132 (fontified t face tree-sitter-hl-face:keyword) 132 133 (fontified t) 133 134 (fontified t) 134 135 (fontified t face (rainbow-delimiters-depth-2-face)) 135 136 (fontified t) 136 137 (fontified t) 137 143 (fontified t face tree-sitter-hl-face:variable) 143 144 (fontified t) 144 150 (fontified t face tree-sitter-hl-face:property) 150 151 (fontified t) 151 152 (fontified t face tree-sitter-hl-face:operator) 152 153 (fontified t) 153 159 (fontified t face tree-sitter-hl-face:variable) 159 160 (fontified t)) . 4734) (undo-tree-id888 . -136) (undo-tree-id889 . -159) (undo-tree-id890 . -136) (undo-tree-id891 . -136)) nil (25941 9197 303730 567000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2924) (undo-tree-id872 . -1) (#("." 0 1 (fontified t)) . -2925) (undo-tree-id873 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2926) (undo-tree-id874 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2927) (undo-tree-id875 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2928) (undo-tree-id876 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2929) (undo-tree-id877 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2930) (undo-tree-id878 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2931) (undo-tree-id879 . -1) (#("." 0 1 (fontified t)) . -2932) (undo-tree-id880 . -1) (#("E" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2933) (undo-tree-id881 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2934) (undo-tree-id882 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2935) (undo-tree-id883 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2936) (undo-tree-id884 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2937) (undo-tree-id885 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2938) (undo-tree-id886 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2939) (undo-tree-id887 . -1) 2940) nil (25941 9197 303727 230000) 0 nil])
([nil nil ((2924 . 2927)) nil (25941 9197 303719 937000) 0 nil])
([nil nil ((apply yas--snippet-revive 2924 2928 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (2924 . 2928) (#("sha3" 0 4 (fontified nil)) . 2924) (2924 . 2928) (#("sha" 0 3 (fontified nil)) . 2924) (2924 . 2927) (#("sha3" 0 4 (fontified nil)) . -2924) (2924 . 2928) (#("sha" 0 3 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2924) (undo-tree-id870 . -3) (undo-tree-id871 . -3) 2927) nil (25941 9197 303719 135000) 0 nil])
([nil nil ((2928 . 2929)) nil (25941 9197 303716 500000) 0 nil])
([nil nil ((apply yas--snippet-revive 2929 2937 #s(yas--snippet nil nil nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil nil nil)) (2929 . 2937) (#("New256()" 0 8 (fontified nil)) . 2929) (2929 . 2937) (#("New256" 0 6 (fontified nil)) . -2929) (2929 . 2935)) nil (25941 9197 303715 849000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id864 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id865 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2945) (undo-tree-id866 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2946) (undo-tree-id867 . -1) (#("," 0 1 (fontified t)) . -2947) (undo-tree-id868 . -1) (#(" " 0 1 (fontified t)) . -2948) (undo-tree-id869 . -1) 2949) nil (25941 9197 303714 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2936) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . 1) (undo-tree-id856 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2937) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2938) (undo-tree-id859 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2939) (undo-tree-id860 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2940) (undo-tree-id861 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id862 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id863 . -1) 2943) nil (25941 9197 303710 649000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2955) (undo-tree-id850 . -1) (undo-tree-id851 . 1) (undo-tree-id852 . -1) 2956) nil (25941 9197 303706 31000) 0 nil])
([nil nil ((2955 . 2956) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2955) (2955 . 2956)) nil (25941 9197 303704 548000) 0 nil])
([nil nil ((#("		encrypted := []byte{}
" 0 2 (fontified t) 2 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 14 (fontified t face tree-sitter-hl-face:operator) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 21 (fontified t face tree-sitter-hl-face:type) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t)) . 2879) (undo-tree-id847 . 4) (undo-tree-id848 . -23) (undo-tree-id849 . -19) 2898) nil (25941 9197 303703 486000) 0 nil])
([nil nil ((2900 . 2906)) nil (25941 9197 303701 813000) 0 nil])
([nil nil ((2906 . 2908)) nil (25941 9197 303701 382000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2907) (undo-tree-id844 . 1) (undo-tree-id845 . 1) (undo-tree-id846 . -1)) nil (25941 9197 303700 751000) 0 nil])
([nil nil ((2939 . 2940) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2939) (2939 . 2940)) nil (25941 9197 303699 408000) 0 nil])
([nil nil ((426 . 427)) nil (25941 9197 303698 797000) 0 nil])
([nil nil ((427 . 428)) nil (25941 9197 303698 396000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -426) (undo-tree-id842 . -1) (#("
" 0 1 (fontified t)) . -427) (undo-tree-id843 . -1) 428) nil (25941 9197 303697 805000) 0 nil])
([nil nil ((426 . 428)) nil (25941 9197 303695 952000) 0 nil])
([nil nil ((nil rear-nonsticky nil 712 . 713) (nil fontified nil 428 . 713) (428 . 713)) nil (25941 9197 303695 481000) 0 nil])
([nil nil ((2082 . 2088)) nil (25941 9197 303694 940000) 0 nil])
([nil nil ((2088 . 2090)) nil (25941 9197 303694 319000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2089) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . 1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) 2090) nil (25941 9197 303693 537000) 0 nil])
([nil nil ((2093 . 2094) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2093) (2093 . 2094)) nil (25941 9197 303680 974000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2082) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2083) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2084) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2085) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2086) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2087) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2088) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) 2089 (t 25941 9197 313668 319000)) nil (25941 9225 819495 117000) 0 nil])
([nil nil ((2082 . 2086)) nil (25941 9225 819352 670000) 0 nil])
([nil nil ((2086 . 2087)) nil (25941 9225 819352 39000) 0 nil])
([nil nil ((2087 . 2088)) nil (25941 9225 819351 387000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2087) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 2088) nil (25941 9225 819350 836000) 0 nil])
([nil nil ((2087 . 2091)) nil (25941 9225 819349 664000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2087) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2088) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2089) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2090) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) 2091) nil (25941 9225 819348 212000) 0 nil])
([nil nil ((2087 . 2089)) nil (25941 9225 819332 422000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2094 2098 nil nil nil t #s(yas--field 2 2100 2104 nil nil nil t nil)) #s(yas--field 2 2100 2104 nil nil nil t nil)) nil 45 nil #s(yas--field 2 2100 2104 nil nil nil t nil) nil nil)) (2086 . 2118) (#("Sprintf(${1:format string}, ${2:a ...any})" 0 42 (fontified nil)) . 2086) (2086 . 2128) (#("Sprpass" 0 3 (fontified nil) 3 7 (fontified nil face tree-sitter-hl-face:type)) . 2086) (undo-tree-id1035 . 4) (undo-tree-id1036 . -7) (2086 . 2089) (#("Sprintf" 0 7 (fontified nil)) . -2086) (2086 . 2093) (#("Spr" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2086) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -2) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) 2089) nil (25941 9225 819330 899000) 0 nil])
([nil nil ((2095 . 2097) (2094 . 2096) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2094) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 2095) (undo-tree-id1032 . -13) (undo-tree-id1033 . -7) (undo-tree-id1034 . -8) (2094 . 2095)) nil (25941 9225 819314 408000) 0 nil])
([nil nil ((2101 . 2104) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2101) (undo-tree-id1026 . -8) (undo-tree-id1027 . -5) (undo-tree-id1028 . -6) (2100 . 2101)) nil (25941 9225 819310 791000) 0 nil])
([nil nil ((apply yas--snippet-revive 2086 2105 #s(yas--snippet nil (#s(yas--field 1 2094 2098 nil nil nil t #s(yas--field 2 2100 2104 nil nil nil t nil)) #s(yas--field 2 2100 2104 nil nil nil t nil)) nil 45 nil #s(yas--field 2 2100 2104 nil nil nil t nil) nil nil))) nil (25941 9225 819308 46000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -2105) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . 1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 2106) nil (25941 9225 819305 21000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3211) (undo-tree-id1361 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3212) (undo-tree-id1362 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3213) (undo-tree-id1363 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3214) (undo-tree-id1364 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1365 . -1) (#("3" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1366 . -1) (#("." 0 1 (fontified t)) . -3217) (undo-tree-id1367 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3218) (undo-tree-id1368 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3219) (undo-tree-id1369 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3220) (undo-tree-id1370 . -1) (#("2" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3221) (undo-tree-id1371 . -1) (#("5" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3222) (undo-tree-id1372 . -1) (#("6" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3223) (undo-tree-id1373 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -3224) (undo-tree-id1374 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3225) (undo-tree-id1375 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3226) (undo-tree-id1376 . -1) (#("b" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -3227) (undo-tree-id1377 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -3228) (undo-tree-id1378 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3229) (undo-tree-id1379 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3230) (undo-tree-id1380 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3231) (undo-tree-id1381 . -1) 3232 (t 25941 9225 825566 398000)) nil (25941 9250 691665 301000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3206) (undo-tree-id1356 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3207) (undo-tree-id1357 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3208) (undo-tree-id1358 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3209) (undo-tree-id1359 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3210) (undo-tree-id1360 . -1) 3211) nil (25941 9250 691464 134000) 0 nil])
([nil nil ((3206 . 3209)) nil (25941 9250 691461 649000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3215 3227 nil nil nil nil nil)) nil 46 nil #s(yas--field 1 3215 3227 nil nil nil nil nil) nil nil)) (3206 . 3228) (#("sha3Hash(${1:input string})" 0 27 (fontified nil)) . 3206) (3206 . 3233) (#("shatokenString" 0 3 (fontified nil) 3 14 (fontified nil face tree-sitter-hl-face:variable)) . 3206) (undo-tree-id1353 . 11) (3206 . 3209) (#("sha3Hash" 0 8 (fontified nil)) . -3206) (3206 . 3214) (#("sha" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3206) (undo-tree-id1354 . -3) (undo-tree-id1355 . -3) 3209) nil (25941 9250 691460 778000) 0 nil])
([nil nil ((apply yas--snippet-revive 3206 3228 #s(yas--snippet nil (#s(yas--field 1 3215 3227 nil nil nil nil nil)) nil 46 nil #s(yas--field 1 3215 3227 nil nil nil nil nil) nil nil))) nil (25941 9250 691458 163000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3217) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3218) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3219) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#(" " 0 1 (fontified t)) . -3220) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3221) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3222) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3223) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3224) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3225) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3226) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) 3227) nil (25941 9250 691455 818000) 0 nil])
([nil nil ((3215 . 3220)) nil (25941 9250 691413 880000) 0 nil])
([nil nil ((apply yas--snippet-revive 3215 3226 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (3215 . 3226) (#("tokenString" 0 11 (fontified nil)) . 3215) (3215 . 3226) (#("token" 0 5 (fontified nil)) . 3215) (3215 . 3220) (#("tokenString" 0 11 (fontified nil)) . -3215) (3215 . 3226) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -1) (undo-tree-id1219 . -2) (undo-tree-id1220 . -3) (undo-tree-id1221 . -4) (undo-tree-id1222 . -5) (undo-tree-id1223 . -5) (undo-tree-id1224 . -5) (undo-tree-id1225 . -5) (undo-tree-id1226 . -5) (undo-tree-id1227 . -5) 3220) nil (25941 9250 691412 798000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -3227) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . 1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -3228) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . 1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -3229) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . 1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) 3230) nil (25941 9250 691404 883000) 0 nil])
([nil nil ((4287 . 4289) (t 25941 9250 701477 91000)) nil (25941 9374 614130 944000) 0 nil])
([nil nil ((4289 . 4294)) nil (25941 9374 614130 653000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4289) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4290) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4291) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4292) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4293) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) 4294) nil (25941 9374 614129 401000) 0 nil])
([nil nil ((4289 . 4306)) nil (25941 9374 614125 624000) 0 nil])
([nil nil ((4306 . 4309)) nil (25941 9374 614125 363000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4305) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4306) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4307) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4308) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) 4309) nil (25941 9374 614124 321000) 0 nil])
([nil nil ((4305 . 4312)) nil (25941 9374 614121 145000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4325 4333 nil nil nil t nil)) nil 48 nil #s(yas--field 1 4325 4333 nil nil nil t nil) nil nil)) (4308 . 4335) (#("mintRefreshToken(${1:id string})" 0 32 (fontified nil)) . 4308) (4308 . 4340) (#("mint" 0 4 (fontified nil)) . 4308) (4308 . 4312) (#("mintRefreshToken" 0 16 (fontified nil)) . -4308) (4308 . 4324) (#("mint" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4308) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) 4312) nil (25941 9374 614120 384000) 0 nil])
([nil nil ((4326 . 4327) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 4326) (4325 . 4326)) nil (25941 9374 614118 981000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4326) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) 4327) nil (25941 9374 614118 510000) 0 nil])
([nil nil ((4326 . 4333)) nil (25941 9374 614117 749000) 0 nil])
([nil nil ((apply yas--snippet-revive 4308 4334 #s(yas--snippet nil (#s(yas--field 1 4325 4333 nil nil nil t nil)) nil 48 nil #s(yas--field 1 4325 4333 nil nil nil t nil) nil nil))) nil (25941 9374 614117 498000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4174) (undo-tree-id1445 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4175) (undo-tree-id1446 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4176) (undo-tree-id1447 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4177) (undo-tree-id1448 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4178) (undo-tree-id1449 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4179) (undo-tree-id1450 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4180) (undo-tree-id1451 . -1) 4181) nil (25941 9374 614115 986000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -4191) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . 1) (undo-tree-id1444 . -1) 4192) nil (25941 9374 614113 110000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4324) (undo-tree-id1437 . -1) (undo-tree-id1438 . 1) (undo-tree-id1439 . -1) 4325) nil (25941 9374 614109 944000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4323) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . 1) (undo-tree-id1435 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 4324) (undo-tree-id1436 . 1)) nil (25941 9374 614108 51000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4317) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4318) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4319) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4320) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4321) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4322) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 4323) nil (25941 9374 614104 714000) 0 nil])
([nil nil ((4317 . 4326)) nil (25941 9374 614099 174000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4325) (undo-tree-id1418 . -1) 4326) nil (25941 9374 614098 513000) 0 nil])
([nil nil ((4325 . 4328)) nil (25941 9374 614097 561000) 0 nil])
([nil nil ((apply yas--snippet-revive 4325 4333 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (4325 . 4333) (#("String()" 0 8 (fontified nil)) . 4325) (4325 . 4333) (#("Str" 0 3 (fontified nil)) . 4325) (4325 . 4328) (#("String" 0 6 (fontified nil)) . -4325) (4325 . 4331) (#("Str" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4325) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) 4328) nil (25941 9374 614096 659000) 0 nil])
([nil nil ((4333 . 4334) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4333) (4333 . 4334)) nil (25941 9374 614094 595000) 0 nil])
([nil nil ((4293 . 4299)) nil (25941 9374 614094 44000) 0 nil])
([nil nil ((4340 . 4342)) nil (25941 9374 614093 393000) 0 nil])
([nil nil ((4350 . 4352) (#("'" 0 1 (fontified nil)) . -4350) (4342 . 4351)) nil (25941 9374 614093 123000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -4350) (undo-tree-id1415 . -1) (#("'" 0 1 (fontified t)) . 4351)) nil (25941 9374 614092 762000) 0 nil])
([nil nil ((4350 . 4356)) nil (25941 9374 614092 321000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4358) (4358 . 4359) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4358) (4358 . 4359) (4356 . 4359)) nil (25941 9374 614091 940000) 0 nil])
([nil nil ((4359 . 4361) (4360 . 4361) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4359) (4359 . 4361) (4358 . 4360)) nil (25941 9374 614091 49000) 0 nil])
([nil nil ((4361 . 4368)) nil (25941 9374 614090 428000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4361) (undo-tree-id1408 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4362) (undo-tree-id1409 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4363) (undo-tree-id1410 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4364) (undo-tree-id1411 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4365) (undo-tree-id1412 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4366) (undo-tree-id1413 . -1) (#(" " 0 1 (fontified t)) . -4367) (undo-tree-id1414 . -1) 4368) nil (25941 9374 614089 366000) 0 nil])
([nil nil ((4361 . 4367)) nil (25941 9374 614086 821000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4384 4385 nil nil nil t #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil))) #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil)) #s(yas--field 3 4392 4415 nil nil nil t nil)) nil 50 nil #s(yas--field 3 4392 4415 nil nil nil t nil) nil nil)) (4367 . 4428) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4367) (4367 . 4443) (#("RespondWithError" 0 16 (fontified nil)) . -4367) (4367 . 4383)) nil (25941 9374 614086 9000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4385) (4384 . 4385)) nil (25941 9374 614085 368000) 0 nil])
([nil nil ((#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4388) (4387 . 4388)) nil (25941 9374 614084 917000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4387) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) 4388) nil (25941 9374 614084 516000) 0 nil])
([nil nil ((4387 . 4390)) nil (25941 9374 614083 354000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) 4393) nil (25941 9374 614082 833000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4393) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#(" " 0 1 (fontified t)) . -4394) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4395) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4396) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4397) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4398) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4399) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4400) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) 4401) nil (25941 9374 614080 599000) 0 nil])
([nil nil ((4392 . 4394)) nil (25941 9374 614073 366000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4393) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 4394) nil (25941 9374 614072 504000) 0 nil])
([nil nil ((4393 . 4413) (4392 . 4394) (#("\"" 0 1 (fontified nil)) . -4392) (4392 . 4393)) nil (25941 9374 614062 906000) 0 nil])
([nil nil ((4413 . 4414)) nil (25941 9374 614061 654000) 0 nil])
([nil nil ((apply yas--snippet-revive 4367 4416 #s(yas--snippet nil (#s(yas--field 1 4384 4385 nil nil nil t #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil))) #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil)) #s(yas--field 3 4392 4415 nil nil nil t nil)) nil 50 nil #s(yas--field 3 4392 4415 nil nil nil t nil) nil nil))) nil (25941 9374 614058 428000) 0 nil])
([nil nil (3793) nil (25941 9410 390694 949000) 0 nil])
([nil nil ((3761 . 3767) (t 25941 9374 717027 109000)) nil (25941 9410 390694 237000) 0 nil])
([nil nil ((3801 . 3803)) nil (25941 9410 390693 576000) 0 nil])
([nil nil ((3803 . 3811)) nil (25941 9410 390692 614000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3810) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) 3811) nil (25941 9410 390692 13000) 0 nil])
([nil nil ((3810 . 3823)) nil (25941 9410 390690 230000) 0 nil])
([nil nil ((3823 . 3825) (#("`" 0 1 (fontified nil)) . -3823) (3823 . 3824)) nil (25941 9410 390689 519000) 0 nil])
([nil nil ((3794 . 3801)) nil (25941 9410 390688 637000) 0 nil])
([nil nil ((3837 . 3844) (3836 . 3838) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -3836) (3831 . 3837)) nil (25941 9410 390687 835000) 0 nil])
([nil nil ((3844 . 3850)) nil (25941 9410 390686 653000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . -423) (#("
" 0 1 (fontified t)) . -714) (3077 . 3078) (#("  " 0 2 (fontified t)) . -3077) (undo-tree-id1474 . -2) 3079 (3620 . 3623) (3653 . 3656) (3693 . 3696) (3730 . 3733) (#("   " 0 3 (fontified t)) . -3772) (3829 . 3832) (#(" " 0 1 (fontified t)) . 4359) 3851) nil (25941 9410 390683 878000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4493) (undo-tree-id1497 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4494) (undo-tree-id1498 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4495) (undo-tree-id1499 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4496) (undo-tree-id1500 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4497) (undo-tree-id1501 . -1) 4498 (t 25941 9410 494091 804000)) nil (25941 9432 988257 852000) 0 nil])
([nil nil ((4493 . 4496)) nil (25941 9432 988255 487000) 0 nil])
([nil nil ((apply yas--snippet-revive 4493 4504 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (4493 . 4504) (#("AccessToken" 0 11 (fontified nil)) . 4493) (4493 . 4504) (#("Acc" 0 3 (fontified nil)) . 4493) (4493 . 4496) (#("AccessToken" 0 11 (fontified nil)) . -4493) (4493 . 4504) (#("Acc" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4493) (undo-tree-id1495 . -3) (undo-tree-id1496 . -3) 4496) nil (25941 9432 988254 706000) 0 nil])
([nil nil ((4634 . 4636)) nil (25941 9432 988252 862000) 0 nil])
([nil nil ((4636 . 4639)) nil (25941 9432 988252 121000) 0 nil])
([nil nil ((apply yas--snippet-revive 4636 4643 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (4636 . 4643) (#("resUser" 0 7 (fontified nil)) . 4636) (4636 . 4643) (#("res" 0 3 (fontified nil)) . 4636) (4636 . 4639) (#("resUser" 0 7 (fontified nil)) . -4636) (4636 . 4643) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4636) (undo-tree-id1493 . -3) (undo-tree-id1494 . -3) 4639) nil (25941 9432 988251 470000) 0 nil])
([nil nil ((4643 . 4644)) nil (25941 9432 988250 197000) 0 nil])
([nil nil ((4644 . 4645)) nil (25941 9432 988249 857000) 0 nil])
([nil nil ((4645 . 4649)) nil (25941 9432 988249 656000) 0 nil])
([nil nil ((apply yas--snippet-revive 4644 4656 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (4644 . 4656) (#("RefreshToken" 0 12 (fontified nil)) . 4644) (4644 . 4656) (#("Refre" 0 5 (fontified nil)) . 4644) (4644 . 4649) (#("RefreshToken" 0 12 (fontified nil)) . -4644) (4644 . 4656) (#("Refre" 0 5 (fontified t face tree-sitter-hl-face:property)) . -4644) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) 4649) nil (25941 9432 988248 895000) 0 nil])
([nil nil ((4656 . 4657)) nil (25941 9432 988245 919000) 0 nil])
([nil nil ((4657 . 4662)) nil (25941 9432 988245 488000) 0 nil])
([nil nil ((apply yas--snippet-revive 4659 4671 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (4659 . 4671) (#("refreshToken" 0 12 (fontified nil)) . 4659) (4659 . 4671) (#("ref" 0 3 (fontified nil)) . 4659) (4659 . 4662) (#("refreshToken" 0 12 (fontified nil)) . -4659) (4659 . 4671) (#("ref" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4659) (undo-tree-id1477 . -3) (undo-tree-id1478 . -3) (undo-tree-id1479 . -1) (undo-tree-id1480 . -2) (undo-tree-id1481 . -3) (undo-tree-id1482 . -3) (undo-tree-id1483 . -3) (undo-tree-id1484 . -3) (undo-tree-id1485 . -3) (undo-tree-id1486 . -3) (undo-tree-id1487 . -3) 4662) nil (25941 9432 988242 533000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4960) (t 25941 9432 994151 661000)) nil (25942 29940 208124 702000) 0 nil])
([nil nil ((1576 . 1578)) nil (25942 29940 208124 91000) 0 nil])
([nil nil ((1578 . 1586)) nil (25942 29940 208123 500000) 0 nil])
([nil nil ((1586 . 1587)) nil (25942 29940 208122 919000) 0 nil])
([nil nil ((1587 . 1591)) nil (25942 29940 208122 678000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1587) (undo-tree-id18 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1588) (undo-tree-id19 . -1) (#("V" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1589) (undo-tree-id20 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1590) (undo-tree-id21 . -1) 1591) nil (25942 29940 208122 37000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1586) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 1587) nil (25942 29940 208119 943000) 0 nil])
([nil nil ((1586 . 1587)) nil (25942 29940 208118 651000) 0 nil])
([nil nil ((1587 . 1588)) nil (25942 29940 208118 220000) 0 nil])
([nil nil ((1588 . 1591)) nil (25942 29940 208117 719000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1587) (undo-tree-id12 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1588) (undo-tree-id13 . -1) (#("V" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1589) (undo-tree-id14 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1590) (undo-tree-id15 . -1) 1591) nil (25942 29940 208116 567000) 0 nil])
([nil nil ((1587 . 1590)) nil (25942 29940 208114 333000) 0 nil])
([nil nil ((apply yas--snippet-revive 1587 1592 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1587 . 1592) (#("Valid" 0 5 (fontified nil)) . 1587) (1587 . 1592) (#("Val" 0 3 (fontified nil)) . 1587) (1587 . 1590) (#("Valid" 0 5 (fontified nil)) . -1587) (1587 . 1592) (#("Val" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1587) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 1590) nil (25942 29940 208113 271000) 0 nil])
([nil nil ((1581 . 1583) (#("'" 0 1 (fontified nil)) . -1581) (1581 . 1582)) nil (25942 29940 208110 155000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -1581) (undo-tree-id8 . -1) (#("'" 0 1 (fontified t)) . -1582) (undo-tree-id9 . -1) 1583) nil (25942 29940 208109 253000) 0 nil])
([nil nil ((1581 . 1590)) nil (25942 29940 208107 570000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1588) (undo-tree-id6 . -1) (#("m" 0 1 (fontified t)) . -1589) (undo-tree-id7 . -1) 1590) nil (25942 29940 208106 849000) 0 nil])
([nil nil ((1588 . 1595)) nil (25942 29940 208105 566000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1608) (1608 . 1609) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1608) (1608 . 1609) (1606 . 1609)) nil (25942 29940 208104 925000) 0 nil])
([nil nil ((1609 . 1612) (1610 . 1612) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1609) (1609 . 1612) (1608 . 1610)) nil (25942 29940 208103 883000) 0 nil])
([nil nil ((1595 . 1596)) nil (25942 29940 208102 921000) 0 nil])
([nil nil ((1613 . 1620)) nil (25942 29940 208102 601000) 0 nil])
([nil nil ((1607 . 1617)) nil (25942 29940 208102 340000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1614) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1615) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1616) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1617) nil (25942 29940 208101 428000) 0 nil])
([nil nil ((1614 . 1618)) nil (25942 29940 208069 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 1618 1624 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1618 . 1624) (#("Issuer" 0 6 (fontified nil)) . 1618) (1618 . 1624) (#("Issuer" 0 6 (fontified nil)) . -1618) (1618 . 1624)) nil (25942 29940 208068 216000) 0 nil])
([nil nil ((1624 . 1628)) nil (25942 29940 208066 583000) 0 nil])
([nil nil ((1629 . 1637) (1628 . 1630) (#("\"" 0 1 (fontified nil)) . -1628) (1628 . 1629)) nil (25942 29940 208063 357000) 0 nil])
([nil nil ((1640 . 1644) (t 25942 29940 312396 223000)) nil (25942 30183 342661 224000) 0 nil])
([nil nil ((1644 . 1650)) nil (25942 30183 342660 814000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1667 1668 nil nil nil t #s(yas--field 2 1670 1673 nil nil nil t #s(yas--field 3 1675 1689 nil nil nil t nil))) #s(yas--field 2 1670 1673 nil nil nil t #s(yas--field 3 1675 1689 nil nil nil t nil)) #s(yas--field 3 1675 1689 nil nil nil t nil)) nil 3 nil #s(yas--field 3 1675 1689 nil nil nil t nil) nil nil)) (1650 . 1711) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1650) (1650 . 1726) (#("RespondWithError" 0 16 (fontified nil)) . -1650) (1650 . 1666)) nil (25942 30183 342660 152000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1668) (1667 . 1668)) nil (25942 30183 342658 870000) 0 nil])
([nil nil ((1671 . 1673) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1671) (1670 . 1671)) nil (25942 30183 342658 18000) 0 nil])
([nil nil ((1676 . 1688) (1675 . 1677) (#("\"" 0 1 (fontified nil)) . -1675) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 1676) (1675 . 1676)) nil (25942 30183 342656 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 1650 1690 #s(yas--snippet nil (#s(yas--field 1 1667 1668 nil nil nil t #s(yas--field 2 1670 1673 nil nil nil t #s(yas--field 3 1675 1689 nil nil nil t nil))) #s(yas--field 2 1670 1673 nil nil nil t #s(yas--field 3 1675 1689 nil nil nil t nil)) #s(yas--field 3 1675 1689 nil nil nil t nil)) nil 3 nil #s(yas--field 3 1675 1689 nil nil nil t nil) nil nil))) nil (25942 30183 342655 744000) 0 nil])
([nil nil ((1637 . 1644)) nil (25942 30183 342655 243000) 0 nil])
([nil nil ((#("func (a apiConfig) mintToken(id string, issuer string, expiresInSeconds int) (string, error) {
	godotenv.Load()
	jwtSecret := os.Getenv(\"JWT_SECRET\")
	claims := jwt.RegisteredClaims{}
	claims.Issuer = issuer
	claims.IssuedAt = jwt.NewNumericDate(time.Now().UTC())
	claims.ExpiresAt = jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))
	claims.Subject = id
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(jwtSecret))
}

func (a apiConfig) mintRefreshToken(id string) (string, error) {
	tokenString, err := a.mintToken(id, \"thisweek-refresh\", 5184000)
	if err == nil {
		godotenv.Load()
		refreshObject := database.AddRefreshTokenParams{}
		refreshObject.IssuedAt = time.Now()
		refreshObject.ID = sha3Hash(tokenString)
		a.DB.AddRefreshToken(a.ctx, refreshObject)
	}
	return tokenString, err
}

func (a apiConfig) mintAccessToken(id string) (string, error) {
	return a.mintToken(id, \"thisweek-access\", 86400)
}

" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 7 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 17 (face tree-sitter-hl-face:type fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (fontified t) 19 28 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 31 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 31 32 (fontified t) 32 38 (face tree-sitter-hl-face:type fontified t) 38 40 (fontified t) 40 46 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 46 47 (fontified t) 47 53 (face tree-sitter-hl-face:type fontified t) 53 55 (fontified t) 55 71 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 71 72 (fontified t) 72 75 (face tree-sitter-hl-face:type fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t) 76 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-1-face) fontified t) 78 84 (face tree-sitter-hl-face:type fontified t) 84 86 (fontified t) 86 91 (face tree-sitter-hl-face:type fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t) 92 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-1-face) fontified t) 94 96 (fontified t) 96 104 (face tree-sitter-hl-face:variable fontified t) 104 105 (fontified t) 105 109 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t) 110 111 (face (rainbow-delimiters-depth-2-face) fontified t) 111 113 (fontified t) 113 122 (face tree-sitter-hl-face:variable fontified t) 122 123 (fontified t) 123 125 (face tree-sitter-hl-face:operator fontified t) 125 126 (fontified t) 126 128 (face tree-sitter-hl-face:variable fontified t) 128 129 (fontified t) 129 135 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 135 136 (face (rainbow-delimiters-depth-2-face) fontified t) 136 148 (face tree-sitter-hl-face:string fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 151 (fontified t) 151 157 (face tree-sitter-hl-face:variable fontified t) 157 158 (fontified t) 158 160 (face tree-sitter-hl-face:operator fontified t) 160 165 (fontified t) 165 181 (face tree-sitter-hl-face:type fontified t) 181 182 (face (rainbow-delimiters-depth-2-face) fontified t) 182 183 (face (rainbow-delimiters-depth-2-face) fontified t) 183 185 (fontified t) 185 191 (face tree-sitter-hl-face:variable fontified t) 191 192 (fontified t) 192 198 (face tree-sitter-hl-face:property fontified t) 198 199 (fontified t) 199 200 (face tree-sitter-hl-face:operator fontified t) 200 201 (fontified t) 201 207 (face tree-sitter-hl-face:variable fontified t) 207 209 (fontified t) 209 213 (face tree-sitter-hl-face:variable fontified t) 213 215 (face tree-sitter-hl-face:variable fontified t) 215 216 (fontified t) 216 224 (face tree-sitter-hl-face:property fontified t) 224 225 (fontified t) 225 226 (face tree-sitter-hl-face:operator fontified t) 226 227 (fontified t) 227 230 (face tree-sitter-hl-face:variable fontified t) 230 231 (fontified t) 231 245 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 245 246 (face (rainbow-delimiters-depth-2-face) fontified t) 246 250 (face tree-sitter-hl-face:variable fontified t) 250 251 (fontified t) 251 254 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 254 255 (face (rainbow-delimiters-depth-3-face) fontified t) 255 256 (face (rainbow-delimiters-depth-3-face) fontified t) 256 257 (fontified t) 257 260 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 260 261 (face (rainbow-delimiters-depth-3-face) fontified t) 261 262 (face (rainbow-delimiters-depth-3-face) fontified t) 262 263 (face (rainbow-delimiters-depth-2-face) fontified t) 263 265 (fontified t) 265 271 (face tree-sitter-hl-face:variable fontified t) 271 272 (fontified t) 272 281 (face tree-sitter-hl-face:property fontified t) 281 282 (fontified t) 282 283 (face tree-sitter-hl-face:operator fontified t) 283 284 (fontified t) 284 287 (face tree-sitter-hl-face:variable fontified t) 287 288 (fontified t) 288 302 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 302 303 (face (rainbow-delimiters-depth-2-face) fontified t) 303 309 (face tree-sitter-hl-face:variable fontified t) 309 310 (fontified t) 310 318 (face tree-sitter-hl-face:property fontified t) 318 319 (fontified t) 319 322 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 322 323 (face (rainbow-delimiters-depth-3-face) fontified t) 323 327 (face tree-sitter-hl-face:variable fontified t) 327 328 (fontified t) 328 334 (face tree-sitter-hl-face:property fontified t) 334 335 (fontified t) 335 336 (face tree-sitter-hl-face:operator fontified t) 336 337 (fontified t) 337 341 (face tree-sitter-hl-face:variable fontified t) 341 342 (fontified t) 342 350 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 350 351 (face (rainbow-delimiters-depth-4-face) fontified t) 351 367 (face tree-sitter-hl-face:variable fontified t) 367 368 (face (rainbow-delimiters-depth-4-face) fontified t) 368 369 (face (rainbow-delimiters-depth-3-face) fontified t) 369 370 (face (rainbow-delimiters-depth-2-face) fontified t) 370 372 (fontified t) 372 378 (face tree-sitter-hl-face:variable fontified t) 378 379 (fontified t) 379 386 (face tree-sitter-hl-face:property fontified t) 386 387 (fontified t) 387 388 (face tree-sitter-hl-face:operator fontified t) 388 389 (fontified t) 389 391 (face tree-sitter-hl-face:variable fontified t) 391 393 (fontified t) 393 398 (face tree-sitter-hl-face:variable fontified t) 398 399 (fontified t) 399 401 (face tree-sitter-hl-face:operator fontified t) 401 402 (fontified t) 402 405 (face tree-sitter-hl-face:variable fontified t) 405 406 (fontified t) 406 419 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 419 420 (face (rainbow-delimiters-depth-2-face) fontified t) 420 423 (face tree-sitter-hl-face:variable fontified t) 423 424 (fontified t) 424 442 (face tree-sitter-hl-face:property fontified t) 442 444 (fontified t) 444 450 (face tree-sitter-hl-face:variable fontified t) 450 451 (face (rainbow-delimiters-depth-2-face) fontified t) 451 453 (fontified t) 453 459 (face tree-sitter-hl-face:keyword fontified t) 459 460 (fontified t) 460 465 (face tree-sitter-hl-face:variable fontified t) 465 466 (fontified t) 466 478 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 478 479 (face (rainbow-delimiters-depth-2-face) fontified t) 479 480 (face (rainbow-delimiters-depth-3-face) fontified t) 480 481 (face (rainbow-delimiters-depth-3-face) fontified t) 481 485 (face tree-sitter-hl-face:type fontified t) 485 486 (face (rainbow-delimiters-depth-3-face) fontified t) 486 495 (face tree-sitter-hl-face:variable fontified t) 495 496 (face (rainbow-delimiters-depth-3-face) fontified t) 496 497 (face (rainbow-delimiters-depth-2-face) fontified t) 497 498 (fontified t) 498 499 (face (rainbow-delimiters-depth-1-face) fontified t) 499 501 (fontified t) 501 505 (face tree-sitter-hl-face:keyword fontified t) 505 506 (fontified t) 506 507 (face (rainbow-delimiters-depth-1-face) fontified t) 507 508 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 508 509 (fontified t) 509 518 (face tree-sitter-hl-face:type fontified t) 518 519 (face (rainbow-delimiters-depth-1-face) fontified t) 519 520 (fontified t) 520 536 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 536 537 (face (rainbow-delimiters-depth-1-face) fontified t) 537 539 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 539 540 (fontified t) 540 546 (face tree-sitter-hl-face:type fontified t) 546 547 (face (rainbow-delimiters-depth-1-face) fontified t) 547 548 (fontified t) 548 549 (face (rainbow-delimiters-depth-1-face) fontified t) 549 555 (face tree-sitter-hl-face:type fontified t) 555 557 (fontified t) 557 562 (face tree-sitter-hl-face:type fontified t) 562 563 (face (rainbow-delimiters-depth-1-face) fontified t) 563 564 (fontified t) 564 565 (face (rainbow-delimiters-depth-1-face) fontified t) 565 567 (fontified t) 567 577 (face tree-sitter-hl-face:variable fontified t) 577 578 (face tree-sitter-hl-face:variable fontified t) 578 580 (fontified t) 580 583 (face tree-sitter-hl-face:variable fontified t) 583 584 (fontified t) 584 586 (face tree-sitter-hl-face:operator fontified t) 586 587 (fontified t) 587 588 (face tree-sitter-hl-face:variable fontified t) 588 589 (fontified t) 589 598 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 598 599 (face (rainbow-delimiters-depth-2-face) fontified t) 599 601 (face tree-sitter-hl-face:variable fontified t) 601 603 (fontified t) 603 619 (face tree-sitter-hl-face:string fontified t) 619 621 (face tree-sitter-hl-face:string fontified t) 621 623 (fontified t) 623 630 (face tree-sitter-hl-face:number fontified t) 630 631 (face (rainbow-delimiters-depth-2-face) fontified t) 631 632 (fontified t) 632 633 (fontified t) 633 635 (face tree-sitter-hl-face:keyword fontified t) 635 636 (fontified t) 636 639 (face tree-sitter-hl-face:variable fontified t) 639 640 (fontified t) 640 642 (face tree-sitter-hl-face:operator fontified t) 642 643 (fontified t) 643 646 (face tree-sitter-hl-face:constant\.builtin fontified t) 646 647 (fontified t) 647 648 (face (rainbow-delimiters-depth-2-face) fontified t) 648 651 (fontified t) 651 652 (face tree-sitter-hl-face:variable fontified t) 652 655 (face tree-sitter-hl-face:variable fontified t) 655 659 (face tree-sitter-hl-face:variable fontified t) 659 660 (fontified t) 660 664 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 664 665 (face (rainbow-delimiters-depth-3-face) fontified t) 665 666 (face (rainbow-delimiters-depth-3-face) fontified t) 666 669 (fontified t) 669 682 (face tree-sitter-hl-face:variable fontified t) 682 683 (fontified t) 683 685 (face tree-sitter-hl-face:operator fontified t) 685 695 (fontified t) 695 716 (face tree-sitter-hl-face:type fontified t) 716 717 (face (rainbow-delimiters-depth-3-face) fontified t) 717 718 (face (rainbow-delimiters-depth-3-face) fontified t) 718 721 (fontified t) 721 734 (face tree-sitter-hl-face:variable fontified t) 734 735 (fontified t) 735 743 (face tree-sitter-hl-face:property fontified t) 743 744 (fontified t) 744 745 (face tree-sitter-hl-face:operator fontified t) 745 746 (fontified t) 746 750 (face tree-sitter-hl-face:variable fontified t) 750 751 (fontified t) 751 754 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 754 755 (face (rainbow-delimiters-depth-3-face) fontified t) 755 756 (face (rainbow-delimiters-depth-3-face) fontified t) 756 757 (fontified t) 757 759 (fontified t) 759 772 (face tree-sitter-hl-face:variable fontified t) 772 773 (fontified t) 773 775 (face tree-sitter-hl-face:property fontified t) 775 776 (fontified t) 776 777 (face tree-sitter-hl-face:operator fontified t) 777 778 (fontified t) 778 786 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 786 787 (face (rainbow-delimiters-depth-3-face) fontified t) 787 798 (face tree-sitter-hl-face:variable fontified t) 798 799 (face (rainbow-delimiters-depth-3-face) fontified t) 799 800 (fontified t) 800 802 (fontified t) 802 803 (face tree-sitter-hl-face:variable fontified t) 803 804 (fontified t) 804 806 (face tree-sitter-hl-face:property fontified t) 806 807 (fontified t) 807 822 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 822 823 (face (rainbow-delimiters-depth-3-face) fontified t) 823 824 (face tree-sitter-hl-face:variable fontified t) 824 825 (fontified t) 825 828 (face tree-sitter-hl-face:property fontified t) 828 830 (fontified t) 830 843 (face tree-sitter-hl-face:variable fontified t) 843 844 (face (rainbow-delimiters-depth-3-face) fontified t) 844 846 (fontified t) 846 847 (face (rainbow-delimiters-depth-2-face) fontified t) 847 849 (fontified t) 849 855 (face tree-sitter-hl-face:keyword fontified t) 855 856 (fontified t) 856 867 (face tree-sitter-hl-face:variable fontified t) 867 869 (fontified t) 869 872 (face tree-sitter-hl-face:variable fontified t) 872 873 (fontified t) 873 874 (face (rainbow-delimiters-depth-1-face) fontified t) 874 876 (fontified t) 876 880 (face tree-sitter-hl-face:keyword fontified t) 880 881 (fontified t) 881 882 (face (rainbow-delimiters-depth-1-face) fontified t) 882 883 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 883 884 (fontified t) 884 893 (face tree-sitter-hl-face:type fontified t) 893 894 (face (rainbow-delimiters-depth-1-face) fontified t) 894 895 (fontified t) 895 910 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 910 911 (face (rainbow-delimiters-depth-1-face) fontified t) 911 913 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 913 914 (fontified t) 914 920 (face tree-sitter-hl-face:type fontified t) 920 921 (face (rainbow-delimiters-depth-1-face) fontified t) 921 922 (fontified t) 922 923 (face (rainbow-delimiters-depth-1-face) fontified t) 923 929 (face tree-sitter-hl-face:type fontified t) 929 931 (fontified t) 931 936 (face tree-sitter-hl-face:type fontified t) 936 937 (face (rainbow-delimiters-depth-1-face) fontified t) 937 938 (fontified t) 938 939 (face (rainbow-delimiters-depth-1-face) fontified t) 939 941 (fontified t) 941 947 (face tree-sitter-hl-face:keyword fontified t) 947 948 (fontified t) 948 949 (face tree-sitter-hl-face:variable fontified t) 949 950 (fontified t) 950 959 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 959 960 (face (rainbow-delimiters-depth-2-face) fontified t) 960 962 (face tree-sitter-hl-face:variable fontified t) 962 964 (fontified t) 964 981 (face tree-sitter-hl-face:string fontified t) 981 983 (fontified t) 983 988 (face tree-sitter-hl-face:number fontified t) 988 989 (face (rainbow-delimiters-depth-2-face) fontified t) 989 990 (fontified t) 990 991 (face (rainbow-delimiters-depth-1-face) fontified t) 991 992 (fontified t) 992 993 (fontified t)) . 2560) (undo-tree-id34 . -992) (undo-tree-id35 . -992) (undo-tree-id36 . -992) (undo-tree-id37 . -992) (undo-tree-id38 . 1) (undo-tree-id39 . -992) (undo-tree-id40 . -992)) nil (25942 30183 342654 462000) 0 nil])
([nil nil ((#("type authedHandler func(http.ResponseWriter, *http.Request, database.User)

func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		jwtToken := strings.Split(bearerToken, \" \")[1]
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
		if err != nil || !token.Valid || claims.Issuer != \"thisweek-access\" {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return 
		}
	}
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 18 (face tree-sitter-hl-face:type fontified t) 18 19 (fontified t) 19 23 (face tree-sitter-hl-face:keyword fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 29 (fontified t) 29 43 (face tree-sitter-hl-face:type fontified t) 43 45 (fontified t) 45 46 (face tree-sitter-hl-face:operator fontified t) 46 51 (fontified t) 51 58 (face tree-sitter-hl-face:type fontified t) 58 69 (fontified t) 69 73 (face tree-sitter-hl-face:type fontified t) 73 74 (face (rainbow-delimiters-depth-1-face) fontified t) 74 76 (fontified t) 76 80 (face tree-sitter-hl-face:keyword fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 83 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 83 84 (fontified t) 84 85 (face tree-sitter-hl-face:operator fontified t) 85 94 (face tree-sitter-hl-face:type fontified t) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t) 95 96 (fontified t) 96 108 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 108 109 (face (rainbow-delimiters-depth-1-face) fontified t) 109 116 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 116 117 (fontified t) 117 130 (face tree-sitter-hl-face:type fontified t) 130 131 (face (rainbow-delimiters-depth-1-face) fontified t) 131 137 (fontified t) 137 148 (face tree-sitter-hl-face:type fontified t) 148 149 (fontified t) 149 150 (face (rainbow-delimiters-depth-1-face) fontified t) 150 152 (fontified t) 152 158 (face tree-sitter-hl-face:keyword fontified t) 158 159 (fontified t) 159 163 (face tree-sitter-hl-face:keyword fontified t) 163 164 (face (rainbow-delimiters-depth-2-face) fontified t) 164 165 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 165 171 (fontified t) 171 185 (face tree-sitter-hl-face:type fontified t) 185 187 (fontified t) 187 188 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 188 189 (fontified t) 189 190 (face tree-sitter-hl-face:operator fontified t) 190 195 (fontified t) 195 202 (face tree-sitter-hl-face:type fontified t) 202 203 (face (rainbow-delimiters-depth-2-face) fontified t) 203 204 (fontified t) 204 205 (face (rainbow-delimiters-depth-2-face) fontified t) 205 208 (fontified t) 208 219 (face tree-sitter-hl-face:variable fontified t) 219 220 (fontified t) 220 222 (face tree-sitter-hl-face:operator fontified t) 222 223 (fontified t) 223 224 (face tree-sitter-hl-face:variable fontified t) 224 225 (fontified t) 225 231 (face tree-sitter-hl-face:property fontified t) 231 232 (fontified t) 232 235 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 235 236 (face (rainbow-delimiters-depth-3-face) fontified t) 236 251 (face tree-sitter-hl-face:string fontified t) 251 252 (face (rainbow-delimiters-depth-3-face) fontified t) 252 255 (fontified t) 255 263 (face tree-sitter-hl-face:variable fontified t) 263 264 (fontified t) 264 266 (face tree-sitter-hl-face:operator fontified t) 266 267 (fontified t) 267 274 (face tree-sitter-hl-face:variable fontified t) 274 275 (fontified t) 275 280 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 280 281 (face (rainbow-delimiters-depth-3-face) fontified t) 281 292 (face tree-sitter-hl-face:variable fontified t) 292 294 (fontified t) 294 297 (face tree-sitter-hl-face:string fontified t) 297 298 (face (rainbow-delimiters-depth-3-face) fontified t) 298 299 (face (rainbow-delimiters-depth-3-face) fontified t) 299 300 (face tree-sitter-hl-face:number fontified t) 300 301 (face (rainbow-delimiters-depth-3-face) fontified t) 301 304 (fontified t) 304 310 (face tree-sitter-hl-face:variable fontified t) 310 311 (fontified t) 311 313 (face tree-sitter-hl-face:operator fontified t) 313 318 (fontified t) 318 334 (face tree-sitter-hl-face:type fontified t) 334 335 (face (rainbow-delimiters-depth-3-face) fontified t) 335 336 (face (rainbow-delimiters-depth-3-face) fontified t) 336 339 (fontified t) 339 344 (face tree-sitter-hl-face:variable fontified t) 344 346 (fontified t) 346 349 (face tree-sitter-hl-face:variable fontified t) 349 350 (fontified t) 350 352 (face tree-sitter-hl-face:operator fontified t) 352 353 (fontified t) 353 356 (face tree-sitter-hl-face:variable fontified t) 356 357 (fontified t) 357 372 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 372 373 (face (rainbow-delimiters-depth-3-face) fontified t) 373 381 (face tree-sitter-hl-face:variable fontified t) 381 383 (fontified t) 383 384 (face tree-sitter-hl-face:operator fontified t) 384 390 (face tree-sitter-hl-face:variable fontified t) 390 392 (fontified t) 392 396 (face tree-sitter-hl-face:keyword fontified t) 396 397 (face (rainbow-delimiters-depth-4-face) fontified t) 397 402 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 402 403 (fontified t) 403 404 (face tree-sitter-hl-face:operator fontified t) 404 408 (fontified t) 408 413 (face tree-sitter-hl-face:type fontified t) 413 414 (face (rainbow-delimiters-depth-4-face) fontified t) 414 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-4-face) fontified t) 416 425 (face tree-sitter-hl-face:keyword fontified t) 425 426 (face (rainbow-delimiters-depth-5-face) fontified t) 426 427 (face (rainbow-delimiters-depth-5-face) fontified t) 427 429 (fontified t) 429 434 (face tree-sitter-hl-face:type fontified t) 434 435 (face (rainbow-delimiters-depth-4-face) fontified t) 435 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-4-face) fontified t) 437 441 (fontified t) 441 450 (face tree-sitter-hl-face:variable fontified t) 450 451 (fontified t) 451 453 (face tree-sitter-hl-face:operator fontified t) 453 454 (fontified t) 454 456 (face tree-sitter-hl-face:variable fontified t) 456 457 (fontified t) 457 463 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 463 464 (face (rainbow-delimiters-depth-5-face) fontified t) 464 476 (face tree-sitter-hl-face:string fontified t) 476 477 (face (rainbow-delimiters-depth-5-face) fontified t) 477 481 (fontified t) 481 487 (face tree-sitter-hl-face:keyword fontified t) 487 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-5-face) fontified t) 489 490 (face (rainbow-delimiters-depth-5-face) fontified t) 490 494 (face tree-sitter-hl-face:type fontified t) 494 495 (face (rainbow-delimiters-depth-5-face) fontified t) 495 504 (face tree-sitter-hl-face:variable fontified t) 504 505 (face (rainbow-delimiters-depth-5-face) fontified t) 505 507 (fontified t) 507 510 (face tree-sitter-hl-face:constant\.builtin fontified t) 510 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-4-face) fontified t) 514 515 (face (rainbow-delimiters-depth-3-face) fontified t) 515 516 (fontified t) 516 518 (fontified t) 518 520 (face tree-sitter-hl-face:keyword fontified t) 520 521 (fontified t) 521 524 (face tree-sitter-hl-face:variable fontified t) 524 525 (fontified t) 525 527 (face tree-sitter-hl-face:operator fontified t) 527 528 (fontified t) 528 531 (face tree-sitter-hl-face:constant\.builtin fontified t) 531 532 (fontified t) 532 534 (face tree-sitter-hl-face:operator fontified t) 534 535 (fontified t) 535 536 (face tree-sitter-hl-face:operator fontified t) 536 541 (face tree-sitter-hl-face:variable fontified t) 541 542 (fontified t) 542 547 (face tree-sitter-hl-face:property fontified t) 547 548 (fontified t) 548 550 (face tree-sitter-hl-face:operator fontified t) 550 551 (fontified t) 551 557 (face tree-sitter-hl-face:variable fontified t) 557 558 (fontified t) 558 564 (face tree-sitter-hl-face:property fontified t) 564 565 (fontified t) 565 567 (face tree-sitter-hl-face:operator fontified t) 567 568 (fontified t) 568 585 (face tree-sitter-hl-face:string fontified t) 585 586 (fontified t) 586 587 (face (rainbow-delimiters-depth-3-face) fontified t) 587 588 (fontified t) 588 591 (fontified t) 591 596 (face tree-sitter-hl-face:variable fontified t) 596 597 (fontified t) 597 613 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 613 614 (face (rainbow-delimiters-depth-4-face) fontified t) 614 615 (face tree-sitter-hl-face:variable fontified t) 615 617 (fontified t) 617 620 (face tree-sitter-hl-face:number fontified t) 620 622 (fontified t) 622 636 (face tree-sitter-hl-face:string fontified t) 636 637 (face (rainbow-delimiters-depth-4-face) fontified t) 637 638 (fontified t) 638 641 (fontified t) 641 647 (face tree-sitter-hl-face:keyword fontified t) 647 648 (fontified t) 648 649 (fontified t) 649 651 (fontified t) 651 652 (face (rainbow-delimiters-depth-3-face) fontified t) 652 653 (fontified t) 653 654 (fontified t) 654 655 (face (rainbow-delimiters-depth-2-face) fontified t) 655 656 (fontified t) 656 657 (face (rainbow-delimiters-depth-1-face) fontified t) 657 658 (fontified t)) . 1060) (undo-tree-id22 . -656) (undo-tree-id23 . -657) (undo-tree-id24 . -516) (undo-tree-id25 . -438) (undo-tree-id26 . -438) (undo-tree-id27 . -438) (undo-tree-id28 . -351) (undo-tree-id29 . -351) (undo-tree-id30 . -587) (undo-tree-id31 . -614) (undo-tree-id32 . -656) (undo-tree-id33 . -656)) nil (25942 30183 342651 636000) 0 nil])
([nil nil ((1060 . 1718)) nil (25942 30183 342609 447000) 0 nil])
([nil nil ((2560 . 3553)) nil (25942 30183 342606 552000) 0 nil])
([nil nil ((1727 . 1728) (t 25942 30183 448149 905000)) nil (25942 30641 39429 228000) 0 nil])
([nil nil ((2569 . 2570)) nil (25942 30641 39428 847000) 0 nil])
([nil nil ((3071 . 3072)) nil (25942 30641 39428 527000) 0 nil])
([nil nil ((3447 . 3448)) nil (25942 30641 39428 286000) 0 nil])
([nil nil ((4012 . 4013)) nil (25942 30641 39428 66000) 0 nil])
([nil nil ((1058 . 1060)) nil (25942 30641 39427 816000) 0 nil])
([nil nil ((1060 . 1077)) nil (25942 30641 39427 555000) 0 nil])
([nil nil ((1087 . 1098) (1086 . 1088) (#("\"" 0 1 (fontified nil)) . -1086) (1077 . 1087)) nil (25942 30641 39427 285000) 0 nil])
([nil nil ((1098 . 1102)) nil (25942 30641 39426 904000) 0 nil])
([nil nil ((1103 . 1104)) nil (25942 30641 39426 363000) 0 nil])
([nil nil ((1104 . 1105)) nil (25942 30641 39426 213000) 0 nil])
([nil nil ((1105 . 1115)) nil (25942 30641 39426 52000) 0 nil])
([nil nil ((1115 . 1116)) nil (25942 30641 39425 842000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1114) (undo-tree-id103 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1115) (undo-tree-id104 . -1) 1116) nil (25942 30641 39425 421000) 0 nil])
([nil nil ((1132 . 1134) (#("\"" 0 1 (fontified nil)) . -1132) (1114 . 1133)) nil (25942 30641 39423 918000) 0 nil])
([nil nil ((988 . 989)) nil (25942 30641 39423 417000) 0 nil])
([nil nil ((989 . 994)) nil (25942 30641 39423 167000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -993) (undo-tree-id102 . -1) 994) nil (25942 30641 39422 626000) 0 nil])
([nil nil ((993 . 1008)) nil (25942 30641 39421 624000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -992) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("a" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -993) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("t" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -994) (undo-tree-id88 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -995) (undo-tree-id89 . -1) (#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -996) (undo-tree-id90 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -997) (undo-tree-id91 . -1) (#("b" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -998) (undo-tree-id92 . -1) (#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -999) (undo-tree-id93 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1000) (undo-tree-id94 . -1) (#("a" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1001) (undo-tree-id95 . -1) (#("k" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1002) (undo-tree-id96 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1003) (undo-tree-id97 . -1) (#("t" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1004) (undo-tree-id98 . -1) (#("h" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1005) (undo-tree-id99 . -1) (#("i" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1006) (undo-tree-id100 . -1) (#("s" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1007) (undo-tree-id101 . -1) 1008) nil (25942 30641 39419 410000) 0 nil])
([nil nil ((992 . 998)) nil (25942 30641 39241 216000) 0 nil])
([nil nil ((998 . 1003)) nil (25942 30641 39240 905000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1000) (undo-tree-id81 . -1) (#("n" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1001) (undo-tree-id82 . -1) (#("g" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1002) (undo-tree-id83 . -1) 1003) nil (25942 30641 39239 983000) 0 nil])
([nil nil ((1000 . 1021)) nil (25942 30641 39238 270000) 0 nil])
([nil nil ((1021 . 1028)) nil (25942 30641 39238 100000) 0 nil])
([nil nil ((1028 . 1049)) nil (25942 30641 39237 859000) 0 nil])
([nil nil ((1049 . 1057)) nil (25942 30641 39237 619000) 0 nil])
([nil nil ((1057 . 1058)) nil (25942 30641 39237 439000) 0 nil])
([nil nil ((1058 . 1060)) nil (25942 30641 39236 918000) 0 nil])
([nil nil ((1060 . 1081)) nil (25942 30641 39236 447000) 0 nil])
([nil nil ((1081 . 1098)) nil (25942 30641 39236 126000) 0 nil])
([nil nil ((1098 . 1101)) nil (25942 30641 39235 786000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1098) (undo-tree-id78 . -1) (#("d" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1099) (undo-tree-id79 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1100) (undo-tree-id80 . -1) 1101) nil (25942 30641 39235 114000) 0 nil])
([nil nil ((1098 . 1099)) nil (25942 30641 39233 511000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1098) (undo-tree-id77 . -1) 1099) nil (25942 30641 39232 940000) 0 nil])
([nil nil ((1098 . 1119)) nil (25942 30641 39232 209000) 0 nil])
([nil nil ((1119 . 1137)) nil (25942 30641 39231 648000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:comment fontified nil)) . 1136) (undo-tree-id76 . -1) (1137 . 1138)) nil (25942 30641 39230 796000) 0 nil])
([nil nil ((1137 . 1147)) nil (25942 30641 39230 155000) 0 nil])
([nil nil ((#("é" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1145) (undo-tree-id74 . -1) (#("t" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1146) (undo-tree-id75 . -1) 1147) nil (25942 30641 39229 674000) 0 nil])
([nil nil ((1145 . 1166)) nil (25942 30641 39228 692000) 0 nil])
([nil nil ((1166 . 1168)) nil (25942 30641 39228 211000) 0 nil])
([nil nil ((1168 . 1172)) nil (25942 30641 39228 41000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1171) (undo-tree-id73 . -1) 1172) nil (25942 30641 39227 580000) 0 nil])
([nil nil ((1171 . 1183)) nil (25942 30641 39226 879000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1181) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1182) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 1183) nil (25942 30641 39226 7000) 0 nil])
([nil nil ((1181 . 1183)) nil (25942 30641 39215 207000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1182) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 1183) nil (25942 30641 39214 355000) 0 nil])
([nil nil ((1182 . 1183)) nil (25942 30641 39202 623000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -1899) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("t" 0 1 (fontified t)) . -1900) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("h" 0 1 (fontified t)) . -1901) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("i" 0 1 (fontified nil)) . -1902) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("s" 0 1 (fontified nil)) . -1903) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("w" 0 1 (fontified t)) . -1904) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("e" 0 1 (fontified t)) . -1905) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("e" 0 1 (fontified t)) . -1906) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("k" 0 1 (fontified t)) . -1907) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("-" 0 1 (fontified t)) . -1908) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("a" 0 1 (fontified t)) . -1909) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("c" 0 1 (fontified t)) . -1910) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("c" 0 1 (fontified t)) . -1911) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("e" 0 1 (fontified t)) . -1912) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("s" 0 1 (fontified t)) . -1913) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("s" 0 1 (fontified t)) . -1914) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1915) (undo-tree-id158 . -1) 1916 (t 25942 30641 50813 678000)) nil (25942 30669 274440 588000) 0 nil])
([nil nil ((1899 . 1903)) nil (25942 30669 274425 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 1899 1916 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (1899 . 1916) (#("AccessTokenIssuer" 0 17 (fontified nil)) . 1899) (1899 . 1916) (#("Acce" 0 4 (fontified nil)) . 1899) (1899 . 1903) (#("AccessTokenIssuer" 0 17 (fontified nil)) . -1899) (1899 . 1916) (#("Acce" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1899) (undo-tree-id108 . -4) (undo-tree-id109 . -4) 1903) nil (25942 30669 274424 558000) 0 nil])
([nil nil ((#("ű" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1298) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 1299) nil (25942 30669 274422 133000) 0 nil])
([nil nil ((1327 . 1336)) nil (25942 30669 274413 146000) 0 nil])
([nil nil ((1336 . 1343)) nil (25942 30669 274409 920000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -3452) (undo-tree-id199 . -1) (#("t" 0 1 (fontified t)) . -3453) (undo-tree-id200 . -1) (#("h" 0 1 (fontified nil)) . -3454) (undo-tree-id201 . -1) (#("i" 0 1 (fontified nil)) . -3455) (undo-tree-id202 . -1) (#("s" 0 1 (fontified t)) . -3456) (undo-tree-id203 . -1) (#("w" 0 1 (fontified t)) . -3457) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t)) . -3458) (undo-tree-id205 . -1) (#("e" 0 1 (fontified t)) . -3459) (undo-tree-id206 . -1) (#("k" 0 1 (fontified t)) . -3460) (undo-tree-id207 . -1) (#("-" 0 1 (fontified t)) . -3461) (undo-tree-id208 . -1) (#("r" 0 1 (fontified t)) . -3462) (undo-tree-id209 . -1) (#("e" 0 1 (fontified t)) . -3463) (undo-tree-id210 . -1) (#("f" 0 1 (fontified t)) . -3464) (undo-tree-id211 . -1) (#("r" 0 1 (fontified t)) . -3465) (undo-tree-id212 . -1) (#("e" 0 1 (fontified t)) . -3466) (undo-tree-id213 . -1) (#("s" 0 1 (fontified t)) . -3467) (undo-tree-id214 . -1) (#("h" 0 1 (fontified t)) . -3468) (undo-tree-id215 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3469) (undo-tree-id216 . -1) 3470 (t 25942 30669 377669 300000)) nil (25942 30685 83707 611000) 0 nil])
([nil nil ((3452 . 3456)) nil (25942 30685 83700 838000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3452) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3453) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3454) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3455) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 3456) nil (25942 30685 83700 87000) 0 nil])
([nil nil ((3452 . 3456)) nil (25942 30685 83696 109000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3455) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 3456) nil (25942 30685 83695 498000) 0 nil])
([nil nil ((apply yas--snippet-revive 3452 3470 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (3452 . 3470) (#("RefreshTokenIssuer" 0 18 (fontified nil)) . 3452) (3452 . 3470) (#("Ref" 0 3 (fontified nil)) . 3452) (3452 . 3455) (#("RefreshTokenIssuer" 0 18 (fontified nil)) . -3452) (3452 . 3470) (#("Ref" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3452) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) 3455) nil (25942 30685 83690 379000) 0 nil])
([nil nil ((1931 . 1942) (t 25942 30685 94589 201000)) nil (25942 31041 287960 279000) 0 nil])
([nil nil ((apply yas--snippet-revive 1942 1951 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1942 . 1951) (#("ExpiresAt" 0 9 (fontified nil)) . 1942) (1942 . 1951) (#("ExpiresAt" 0 9 (fontified nil)) . -1942) (1942 . 1951)) nil (25942 31041 287959 257000) 0 nil])
([nil nil ((1951 . 1954)) nil (25942 31041 287957 965000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1963) (1963 . 1964) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1963) (1963 . 1964) (1954 . 1964)) nil (25942 31041 287956 973000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1951) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("<" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1952) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -1953) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1954) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1955) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1956) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1957) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("." 0 1 (fontified t)) . -1958) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1959) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1960) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1961) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1962) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1963) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . 1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 1964) nil (25942 31041 287954 608000) 0 nil])
([nil nil ((1951 . 1952)) nil (25942 31041 287821 890000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1960 1970 nil nil nil t nil)) nil 7 nil #s(yas--field 1 1960 1970 nil nil nil t nil) nil nil)) (1952 . 1972) (#("Compare(${1:u time.Time})" 0 25 (fontified nil)) . 1952) (1952 . 1977) (#("Compare" 0 7 (fontified nil)) . -1952) (1952 . 1959)) nil (25942 31041 287820 567000) 0 nil])
([nil nil ((1961 . 1965) (#("u time.Time" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 11 (face tree-sitter-hl-face:property fontified nil)) . 1961) (1960 . 1961)) nil (25942 31041 287818 714000) 0 nil])
([nil nil ((apply yas--snippet-revive 1965 1970 #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 1960 1970 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 1960 1970 nil nil nil t nil) nil)) (1965 . 1970) (#("Now()" 0 5 (fontified nil)) . 1965) (1965 . 1970) (#("Now" 0 3 (fontified nil)) . -1965) (1965 . 1968)) nil (25942 31041 287817 672000) 0 nil])
([nil nil ((apply yas--snippet-revive 1952 1971 #s(yas--snippet nil (#s(yas--field 1 1960 1970 nil nil nil t nil)) nil 7 nil #s(yas--field 1 1960 1970 nil nil nil t nil) nil nil))) nil (25942 31041 287816 259000) 0 nil])
([nil nil ((3071 . 3073)) nil (25942 31041 287815 768000) 0 nil])
([nil nil ((3073 . 3084)) nil (25942 31041 287815 167000) 0 nil])
([nil nil ((3084 . 3091)) nil (25942 31041 287814 766000) 0 nil])
([nil nil ((apply yas--snippet-revive 3088 3106 #s(yas--snippet nil nil #s(yas--exit 3105 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3105 nil) 9 nil nil nil nil)) (3088 . 3106) (#("RegisteredClaims{$0\\}" 0 21 (fontified nil)) . 3088) (3088 . 3109) (#("Reg" 0 3 (fontified nil)) . 3088) (3088 . 3091) (#("RegisteredClaims{}" 0 18 (fontified nil)) . -3088) (3088 . 3106) (#("Reg" 0 3 (face tree-sitter-hl-face:property fontified t)) . -3088) (undo-tree-id254 . -3) (undo-tree-id255 . -3) 3091) nil (25942 31041 287814 25000) 0 nil])
([nil nil ((3106 . 3108) (3107 . 3108) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 3106) (3106 . 3108) (3105 . 3107)) nil (25942 31041 287811 119000) 0 nil])
([nil nil ((3108 . 3114)) nil (25942 31041 287809 967000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3116 3122 nil nil nil t nil)) nil 10 nil #s(yas--field 1 3116 3122 nil nil nil t nil) nil nil)) (3108 . 3123) (#("Issuer: ${1:string}," 0 20 (fontified nil)) . 3108) (3108 . 3128) (#("issuer" 0 6 (fontified nil)) . 3108) (3108 . 3114) (#("Issuer" 0 6 (fontified nil)) . -3108) (3108 . 3114) (#("issuer" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -3108) (undo-tree-id252 . -6) (undo-tree-id253 . -6) 3114) nil (25942 31041 287808 975000) 0 nil])
([nil nil ((3117 . 3122) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified nil)) . 3117) (3116 . 3117)) nil (25942 31041 287806 932000) 0 nil])
([nil nil ((apply yas--snippet-revive 3108 3123 #s(yas--snippet nil (#s(yas--field 1 3116 3122 nil nil nil t nil)) nil 10 nil #s(yas--field 1 3116 3122 nil nil nil t nil) nil nil))) nil (25942 31041 287806 210000) 0 nil])
([nil nil ((3123 . 3126)) nil (25942 31041 287805 669000) 0 nil])
([nil nil ((#("	claims := jwt.RegisteredClaims{}
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 15 (fontified t) 15 31 (face tree-sitter-hl-face:type fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (fontified t)) . 3038) (undo-tree-id249 . -33) (undo-tree-id250 . 31) (undo-tree-id251 . -2) 3040) nil (25942 31041 287805 349000) 0 nil])
([nil nil ((3092 . 3096)) nil (25942 31041 287803 776000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3102 3138 nil nil nil t nil)) nil 11 nil #s(yas--field 1 3102 3138 nil nil nil t nil) nil nil)) (3092 . 3119) (#("IssuedAt: ${1:*jwt.NumericDate}," 0 32 (fontified nil)) . 3092) (3092 . 3124) (#("Issu" 0 4 (fontified nil)) . 3092) (3092 . 3096) (#("IssuedAt" 0 8 (fontified nil)) . -3092) (3092 . 3100) (#("Issu" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -3092) (undo-tree-id247 . -4) (undo-tree-id248 . -4) 3096) nil (25942 31041 287802 814000) 0 nil])
([nil nil ((3103 . 3106) (#("*jwt.NumericDate" 0 1 (face tree-sitter-hl-face:operator fontified nil) 1 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 16 (face tree-sitter-hl-face:property fontified nil)) . 3103) (3102 . 3103)) nil (25942 31041 287800 229000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3121 3137 nil nil nil t nil)) nil 12 nil #s(yas--field 1 3121 3137 nil nil nil t nil) #s(yas--field 1 3102 3138 nil nil nil t nil) nil)) (3106 . 3133) (#("NewNumericDate(${1:t time.Time})" 0 32 (fontified nil)) . 3106) (3106 . 3138) (#("NewNumericDate" 0 14 (fontified nil)) . -3106) (3106 . 3120)) nil (25942 31041 287799 177000) 0 nil])
([nil nil ((3122 . 3126) (#("t time.Time" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 11 (face tree-sitter-hl-face:property fontified nil)) . 3122) (3121 . 3122)) nil (25942 31041 287798 396000) 0 nil])
([nil nil ((apply yas--snippet-revive 3126 3131 #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 1 3121 3137 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 1 3121 3137 nil nil nil t nil) nil)) (3126 . 3131) (#("Now()" 0 5 (fontified nil)) . 3126) (3126 . 3131) (#("Now" 0 3 (fontified nil)) . -3126) (3126 . 3129)) nil (25942 31041 287797 253000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3136) (3136 . 3137) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -3136) (3136 . 3137) (3131 . 3137)) nil (25942 31041 287796 81000) 0 nil])
([nil nil ((apply yas--snippet-revive 3106 3138 #s(yas--snippet nil (#s(yas--field 1 3121 3137 nil nil nil t nil)) nil 12 nil #s(yas--field 1 3121 3137 nil nil nil t nil) #s(yas--field 1 3102 3138 nil nil nil t nil) nil))) nil (25942 31041 287794 909000) 0 nil])
([nil nil ((apply yas--snippet-revive 3092 3139 #s(yas--snippet nil (#s(yas--field 1 3102 3138 nil nil nil t nil)) nil 11 nil #s(yas--field 1 3102 3138 nil nil nil t nil) nil nil))) nil (25942 31041 287794 198000) 0 nil])
([nil nil ((1970 . 1971)) nil (25942 31041 287793 516000) 0 nil])
([nil nil ((1971 . 1972)) nil (25942 31041 287792 935000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1975) (1975 . 1976) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -1975) (1975 . 1976) (1972 . 1976)) nil (25942 31041 287791 964000) 0 nil])
([nil nil ((#("C" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1952) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1953) (undo-tree-id240 . -1) (#("m" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1954) (undo-tree-id241 . 1) (undo-tree-id242 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1955) (undo-tree-id243 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1956) (undo-tree-id244 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1957) (undo-tree-id245 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1958) (undo-tree-id246 . -1) 1959) nil (25942 31041 287789 499000) 0 nil])
([nil nil ((1952 . 1955)) nil (25942 31041 287784 229000) 0 nil])
([nil nil ((apply yas--snippet-revive 1952 1958 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (1952 . 1958) (#("Before" 0 6 (fontified nil)) . 1952) (1952 . 1958) (#("Bef" 0 3 (fontified nil)) . 1952) (1952 . 1955) (#("Before" 0 6 (fontified nil)) . -1952) (1952 . 1958) (#("Bef" 0 3 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1952) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) 1955) nil (25942 31041 287781 324000) 0 nil])
([nil nil ((3144 . 3147) (t 25942 31041 391774 833000)) nil (25942 31112 816862 802000) 0 nil])
([nil nil ((3147 . 3150)) nil (25942 31112 816862 131000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3158 3174 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 3158 3174 nil nil nil nil nil) nil nil)) (3147 . 3175) (#("ExpiresAt: ${1:*jwt.NumericDate}," 0 33 (fontified nil)) . 3147) (3147 . 3180) (#("Exp" 0 3 (fontified nil)) . 3147) (3147 . 3150) (#("ExpiresAt" 0 9 (fontified nil)) . -3147) (3147 . 3156) (#("Exp" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3147) (undo-tree-id360 . -3) (undo-tree-id361 . -3) 3150) nil (25942 31112 816861 329000) 0 nil])
([nil nil ((apply yas--snippet-revive 3147 3175 #s(yas--snippet nil (#s(yas--field 1 3158 3174 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 3158 3174 nil nil nil nil nil) nil nil))) nil (25942 31112 816859 296000) 0 nil])
([nil nil ((#("jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (fontified t) 4 18 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 34 (face tree-sitter-hl-face:property fontified t) 34 35 (fontified t) 35 38 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 43 (face tree-sitter-hl-face:variable fontified t) 43 44 (fontified t) 44 50 (face tree-sitter-hl-face:property fontified t) 50 51 (fontified t) 51 52 (face tree-sitter-hl-face:operator fontified t) 52 53 (fontified t) 53 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 66 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 66 67 (face (rainbow-delimiters-depth-4-face) fontified t) 67 83 (face tree-sitter-hl-face:variable fontified t) 83 84 (face (rainbow-delimiters-depth-4-face) fontified t) 84 85 (face (rainbow-delimiters-depth-3-face) fontified t) 85 86 (face (rainbow-delimiters-depth-2-face) fontified t)) . 3279) (undo-tree-id355 . -85) (undo-tree-id356 . -85) (undo-tree-id357 . -85) (undo-tree-id358 . -86) (undo-tree-id359 . -85)) nil (25942 31112 816858 424000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3157) (undo-tree-id338 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -3158) (undo-tree-id339 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3159) (undo-tree-id340 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3160) (undo-tree-id341 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3161) (undo-tree-id342 . -1) (#("." 0 1 (fontified t)) . -3162) (undo-tree-id343 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -3163) (undo-tree-id344 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -3164) (undo-tree-id345 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3165) (undo-tree-id346 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3166) (undo-tree-id347 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3167) (undo-tree-id348 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3168) (undo-tree-id349 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3169) (undo-tree-id350 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3170) (undo-tree-id351 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3171) (undo-tree-id352 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3172) (undo-tree-id353 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3173) (undo-tree-id354 . -1) 3174) nil (25942 31112 816854 497000) 0 nil])
([nil nil ((3157 . 3158)) nil (25942 31112 816847 143000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3243 . 3244) (nil fontified nil 3158 . 3244) (3158 . 3244) 3157) nil (25942 31112 816846 431000) 0 nil])
([nil nil ((3245 . 3248)) nil (25942 31112 816845 199000) 0 nil])
([nil nil ((3248 . 3251)) nil (25942 31112 816844 408000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3257 3257 nil nil nil t nil)) nil 16 nil #s(yas--field 1 3257 3257 nil nil nil t nil) nil nil)) (3248 . 3264) (#("Subject: ${1:string}," 0 21 (fontified nil)) . 3248) (3248 . 3269) (#("Sub" 0 3 (fontified nil)) . 3248) (3248 . 3251) (#("Subject" 0 7 (fontified nil)) . -3248) (3248 . 3255) (#("Sub" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3248) (undo-tree-id336 . -3) (undo-tree-id337 . -3) 3251) nil (25942 31112 816843 376000) 0 nil])
([nil nil ((3258 . 3259) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified nil)) . 3258) (3257 . 3258)) nil (25942 31112 816840 931000) 0 nil])
([nil nil ((apply yas--snippet-revive 3248 3260 #s(yas--snippet nil (#s(yas--field 1 3257 3257 nil nil nil t nil)) nil 16 nil #s(yas--field 1 3257 3257 nil nil nil t nil) nil nil))) nil (25942 31112 816839 699000) 0 nil])
([nil nil ((#("	claims.Issuer = issuer
	claims.IssuedAt = jwt.NewNumericDate(time.Now().UTC())
	claims.ExpiresAt = 
	claims.Subject = id
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 14 (face tree-sitter-hl-face:property fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:operator fontified t) 16 17 (fontified t) 17 23 (face tree-sitter-hl-face:variable fontified t) 23 25 (fontified t) 25 29 (face tree-sitter-hl-face:variable fontified t) 29 31 (face tree-sitter-hl-face:variable fontified t) 31 32 (fontified t) 32 40 (face tree-sitter-hl-face:property fontified t) 40 41 (fontified t) 41 42 (face tree-sitter-hl-face:operator fontified t) 42 43 (fontified t) 43 46 (face tree-sitter-hl-face:variable fontified t) 46 47 (fontified t) 47 61 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 66 (face tree-sitter-hl-face:variable fontified t) 66 67 (fontified t) 67 70 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 73 (fontified t) 73 76 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 78 (face (rainbow-delimiters-depth-3-face) fontified t) 78 79 (face (rainbow-delimiters-depth-2-face) fontified t) 79 80 (fontified t) 80 81 (fontified t) 81 87 (face tree-sitter-hl-face:variable fontified t) 87 88 (fontified t) 88 97 (face tree-sitter-hl-face:property fontified t) 97 98 (fontified t) 98 99 (face tree-sitter-hl-face:operator fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 108 (fontified t) 108 109 (fontified t) 109 116 (face tree-sitter-hl-face:type fontified t) 116 117 (fontified t) 117 118 (face tree-sitter-hl-face:operator fontified t) 118 119 (fontified t) 119 121 (face tree-sitter-hl-face:variable fontified t) 121 122 (fontified t)) . 3264) (undo-tree-id326 . -115) (undo-tree-id327 . -121) (undo-tree-id328 . 107) (undo-tree-id329 . -14) (undo-tree-id330 . -115) (undo-tree-id331 . -115) (undo-tree-id332 . -100) (undo-tree-id333 . -100) (undo-tree-id334 . -14) (undo-tree-id335 . -115) 3379) nil (25942 31112 816839 48000) 0 nil])
([nil nil ((3264 . 3386)) nil (25942 31112 816834 760000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3257 3257 nil nil nil t nil)) nil 16 nil #s(yas--field 1 3257 3257 nil nil nil t nil) nil nil))) nil (25942 31112 816834 108000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . 3257) (3258 . 3264) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 3258)) nil (25942 31112 816833 457000) 0 nil])
([nil nil ((3248 . 3251) (#("Subject" 0 7 (fontified nil)) . 3248) (3248 . 3255) (#("Sub" 0 3 (fontified nil)) . 3248) (3248 . 3251) (#("Subject: ${1:string}," 0 21 (fontified nil)) . 3248) (3248 . 3269) (#("Subject: string," 0 7 (face tree-sitter-hl-face:variable fontified t) 7 9 (fontified t) 9 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (fontified t)) . 3248) (undo-tree-id325 . -9) (apply yas--snippet-revive 3248 3264 #s(yas--snippet nil (#s(yas--field 1 3257 3257 nil nil nil t nil)) nil 16 nil #s(yas--field 1 3257 3257 nil nil nil t nil) nil nil))) nil (25942 31112 816832 115000) 0 nil])
([nil nil ((#("Sub" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 3248) (undo-tree-id323 . -3) (undo-tree-id324 . -2)) nil (25942 31112 816830 351000) 0 nil])
([nil nil ((#("
		" 0 1 (fontified t) 1 3 (fontified t)) . 3245) (undo-tree-id321 . -3) (undo-tree-id322 . -2)) nil (25942 31112 816829 179000) 0 nil])
([nil nil ((#("jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 18 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil) 19 25 (face tree-sitter-hl-face:variable fontified nil) 25 26 (fontified nil) 26 34 (face tree-sitter-hl-face:property fontified nil) 34 35 (fontified nil) 35 38 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 38 39 (face (rainbow-delimiters-depth-4-face) fontified nil) 39 43 (face tree-sitter-hl-face:variable fontified nil) 43 44 (fontified nil) 44 50 (face tree-sitter-hl-face:property fontified nil) 50 51 (fontified nil) 51 52 (face tree-sitter-hl-face:operator fontified nil) 52 53 (fontified nil) 53 57 (face tree-sitter-hl-face:variable fontified nil) 57 58 (fontified nil) 58 66 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 66 67 (face (rainbow-delimiters-depth-5-face) fontified nil) 67 83 (face tree-sitter-hl-face:variable fontified nil) 83 84 (face (rainbow-delimiters-depth-5-face) fontified nil) 84 85 (face (rainbow-delimiters-depth-4-face) fontified nil) 85 86 (face (rainbow-delimiters-depth-3-face) rear-nonsticky nil fontified nil)) . 3158) (undo-tree-id320 . -86) (nil rear-nonsticky t 3243 . 3244)) nil (25942 31112 816828 117000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3157)) nil (25942 31112 816827 25000) 0 nil])
([nil nil ((3157 . 3174)) nil (25942 31112 816826 614000) 0 nil])
([nil nil ((3279 . 3365)) nil (25942 31112 816826 53000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3158 3174 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 3158 3174 nil nil nil nil nil) nil nil))) nil (25942 31112 816825 642000) 0 nil])
([nil nil ((3147 . 3150) (#("ExpiresAt" 0 9 (fontified nil)) . 3147) (3147 . 3156) (#("Exp" 0 3 (fontified nil)) . 3147) (3147 . 3150) (#("ExpiresAt: ${1:*jwt.NumericDate}," 0 33 (fontified nil)) . 3147) (3147 . 3180) (#("ExpiresAt: *jwt.NumericDate," 0 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (face tree-sitter-hl-face:operator fontified t) 12 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (fontified t) 16 17 (face tree-sitter-hl-face:property fontified t) 17 18 (face tree-sitter-hl-face:property fontified t) 18 19 (face tree-sitter-hl-face:property fontified t) 19 20 (face tree-sitter-hl-face:property fontified t) 20 21 (face tree-sitter-hl-face:property fontified t) 21 22 (face tree-sitter-hl-face:property fontified t) 22 23 (face tree-sitter-hl-face:property fontified t) 23 24 (face tree-sitter-hl-face:property fontified t) 24 25 (face tree-sitter-hl-face:property fontified t) 25 26 (face tree-sitter-hl-face:property fontified t) 26 27 (face tree-sitter-hl-face:property fontified t) 27 28 (fontified t)) . 3147) (undo-tree-id318 . -28) (undo-tree-id319 . -11) (apply yas--snippet-revive 3147 3175 #s(yas--snippet nil (#s(yas--field 1 3158 3174 nil nil nil nil nil)) nil 15 nil #s(yas--field 1 3158 3174 nil nil nil nil nil) nil nil))) nil (25942 31112 816824 600000) 0 nil])
([nil nil ((#("Exp" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 3147) (undo-tree-id316 . -3) (undo-tree-id317 . -2)) nil (25942 31112 816822 577000) 0 nil])
([nil nil ((#("
		" 0 1 (fontified t) 1 3 (fontified t)) . 3144) (undo-tree-id314 . -3) (undo-tree-id315 . -2)) nil (25942 31112 816821 344000) 0 nil])
([nil nil ((#("	claims := &jwt.RegisteredClaims{
		Issuer: issuer,
		IssuedAt: jwt.NewNumericDate(time.Now().UTC()),
	}
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 11 (fontified t) 11 12 (face tree-sitter-hl-face:operator fontified t) 12 15 (fontified t) 15 16 (fontified t) 16 31 (face tree-sitter-hl-face:type fontified t) 31 32 (face tree-sitter-hl-face:type fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (fontified t) 34 36 (fontified t) 36 42 (face tree-sitter-hl-face:variable fontified t) 42 44 (fontified t) 44 50 (face tree-sitter-hl-face:variable fontified t) 50 52 (fontified t) 52 54 (fontified t) 54 62 (face tree-sitter-hl-face:variable fontified t) 62 64 (fontified t) 64 67 (face tree-sitter-hl-face:variable fontified t) 67 68 (fontified t) 68 82 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 82 83 (face (rainbow-delimiters-depth-3-face) fontified t) 83 87 (face tree-sitter-hl-face:variable fontified t) 87 88 (fontified t) 88 91 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 91 92 (face (rainbow-delimiters-depth-4-face) fontified t) 92 93 (face (rainbow-delimiters-depth-4-face) fontified t) 93 94 (fontified t) 94 97 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 97 98 (face (rainbow-delimiters-depth-4-face) fontified t) 98 99 (face (rainbow-delimiters-depth-4-face) fontified t) 99 100 (face (rainbow-delimiters-depth-3-face) fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-2-face) fontified t) 104 105 (fontified t)) . 3043) (undo-tree-id306 . -103) (undo-tree-id307 . -104) (undo-tree-id308 . -103) (undo-tree-id309 . -1) (undo-tree-id310 . -101) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -103) 3044 (t 25942 31041 391774 833000)) nil (25942 31112 816820 232000) 0 nil])
([nil nil ((3043 . 3148)) nil (25942 31112 816816 565000) 0 nil])
([nil nil ((#("		Issuer: issuer,
		IssuedAt: jwt.NewNumericDate(time.Now().UTC()),
	}
" 0 2 (fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 10 (fontified t) 10 16 (face tree-sitter-hl-face:variable fontified t) 16 18 (fontified t) 18 20 (fontified t) 20 28 (face tree-sitter-hl-face:variable fontified t) 28 30 (fontified t) 30 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (fontified t) 34 48 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t) 54 57 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t) 59 60 (fontified t) 60 63 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 65 (face (rainbow-delimiters-depth-4-face) fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-2-face) fontified t) 70 71 (fontified t)) . 3077) (undo-tree-id298 . -69) (undo-tree-id299 . -70) (undo-tree-id300 . -69) (undo-tree-id301 . -1) (undo-tree-id302 . -67) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -69) 3078 (t 25942 31041 391774 833000)) nil (25942 31112 816815 604000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -3054) (undo-tree-id297 . -1) 3055) nil (25942 31112 816811 296000) 0 nil])
([nil nil ((3075 . 3076) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3075) (3075 . 3076)) nil (25942 31112 816801 888000) 0 nil])
([nil nil ((#("	createUserObject := database.CreateUserParams{}
" 0 1 (fontified t) 1 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 20 (face tree-sitter-hl-face:operator fontified t) 20 30 (fontified t) 30 46 (face tree-sitter-hl-face:type fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (fontified t)) . 2164) (undo-tree-id362 . -48) (undo-tree-id363 . -32) 2196 (t 25942 31112 829411 261000)) nil (25942 31128 343057 176000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2164 . 2165) (#("
" 0 1 (fontified nil)) . -2212) (2163 . 2213) 2160) nil (25942 31128 343046 726000) 0 nil])
([nil nil ((2043 . 2046) (t 25942 31128 449331 772000)) nil (25942 31477 287082 666000) 0 nil])
([nil nil ((2046 . 2049)) nil (25942 31477 287082 316000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2046) (undo-tree-id560 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2047) (undo-tree-id561 . -1) (#(" " 0 1 (fontified t)) . -2048) (undo-tree-id562 . -1) 2049) nil (25942 31477 287081 624000) 0 nil])
([nil nil ((2046 . 2062)) nil (25942 31477 287080 482000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2060) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2061) (undo-tree-id558 . -1) (undo-tree-id559 . -1) 2062) nil (25942 31477 287079 801000) 0 nil])
([nil nil ((2059 . 2063)) nil (25942 31477 287076 575000) 0 nil])
([nil nil ((2063 . 2065)) nil (25942 31477 287076 204000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2063) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#("Q" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2064) (undo-tree-id553 . -1) 2065) nil (25942 31477 287075 673000) 0 nil])
([nil nil ((2063 . 2064)) nil (25942 31477 287074 501000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("." 0 1 (fontified t)) . -2060) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2061) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2062) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("." 0 1 (fontified t)) . -2063) (undo-tree-id549 . -1) (undo-tree-id550 . -1) 2064) nil (25942 31477 287073 629000) 0 nil])
([nil nil ((2059 . 2063)) nil (25942 31477 287070 443000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2060) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2061) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2062) (undo-tree-id539 . -1) (undo-tree-id540 . -1) 2063) nil (25942 31477 287069 732000) 0 nil])
([nil nil ((2059 . 2068)) nil (25942 31477 287066 516000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil t #s(yas--field 2 2083 2097 nil nil nil t nil)) #s(yas--field 2 2083 2097 nil nil nil t nil)) nil 17 nil #s(yas--field 2 2083 2097 nil nil nil t nil) nil nil)) (2064 . 2110) (#("GetUserById(${1:ctx context.Context}, ${2:id uuid.UUID})" 0 56 (fontified nil)) . 2064) (2064 . 2120) (#("User" 0 4 (fontified nil)) . 2064) (2064 . 2068) (#("GetUserById" 0 11 (fontified nil)) . -2064) (2064 . 2075) (#("User" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2064) (undo-tree-id531 . -4) (undo-tree-id532 . -4) 2068) nil (25942 31477 287065 825000) 0 nil])
([nil nil ((2077 . 2079) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 2077) (2076 . 2077)) nil (25942 31477 287064 592000) 0 nil])
([nil nil ((apply yas--snippet-revive 2076 2081 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 2076 2081 nil nil nil t #s(yas--field 2 2083 2097 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 2076 2081 nil nil nil t #s(yas--field 2 2083 2097 nil nil nil t nil)) nil)) (2076 . 2081) (#("a.ctx" 0 5 (fontified nil)) . 2076) (2076 . 2081) (#("ctx" 0 3 (fontified nil)) . 2076) (2076 . 2079) (#("a.ctx" 0 5 (fontified nil)) . -2076) (2076 . 2081) (#("ctx" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2076) (undo-tree-id529 . -3) (undo-tree-id530 . -3) 2079) nil (25942 31477 287063 711000) 0 nil])
([nil nil ((2084 . 2093) (#("id uuid.UUID" 0 2 (face tree-sitter-hl-face:variable fontified nil) 2 3 (fontified nil) 3 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 12 (face tree-sitter-hl-face:property fontified nil)) . 2084) (2083 . 2084)) nil (25942 31477 287062 218000) 0 nil])
([nil nil ((apply yas--snippet-revive 2090 2097 #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 2083 2097 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 2083 2097 nil nil nil t nil) nil)) (2090 . 2097) (#("Subject" 0 7 (fontified nil)) . 2090) (2090 . 2097) (#("Sub" 0 3 (fontified nil)) . 2090) (2090 . 2093) (#("Subject" 0 7 (fontified nil)) . -2090) (2090 . 2097) (#("Sub" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2090) (undo-tree-id527 . -3) (undo-tree-id528 . -3) 2093) nil (25942 31477 287061 196000) 0 nil])
([nil nil ((apply yas--snippet-revive 2064 2098 #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil t #s(yas--field 2 2083 2097 nil nil nil t nil)) #s(yas--field 2 2083 2097 nil nil nil t nil)) nil 17 nil #s(yas--field 2 2083 2097 nil nil nil t nil) nil nil))) nil (25942 31477 287059 974000) 0 nil])
([nil nil ((2043 . 2046)) nil (25942 31477 287059 703000) 0 nil])
([nil nil ((2046 . 2050)) nil (25942 31477 287059 443000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2046) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2047) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2048) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2049) (undo-tree-id525 . -1) (undo-tree-id526 . -1) 2050) nil (25942 31477 287058 611000) 0 nil])
([nil nil ((2046 . 2047)) nil (25942 31477 287056 397000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2046) (undo-tree-id518 . -1) 2047) nil (25942 31477 287055 976000) 0 nil])
([nil nil ((2046 . 2048)) nil (25942 31477 287055 235000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2046) (undo-tree-id516 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2047) (undo-tree-id517 . -1) 2048) nil (25942 31477 287054 854000) 0 nil])
([nil nil ((2046 . 2057)) nil (25942 31477 287053 932000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2056) (undo-tree-id515 . -1) 2057) nil (25942 31477 287053 522000) 0 nil])
([nil nil ((2056 . 2061)) nil (25942 31477 287052 760000) 0 nil])
([nil nil ((2061 . 2062)) nil (25942 31477 287052 349000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2061) (undo-tree-id514 . -1) 2062) nil (25942 31477 287051 979000) 0 nil])
([nil nil ((2061 . 2067)) nil (25942 31477 287051 227000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2057) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("I" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2058) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("D" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("." 0 1 (fontified t)) . -2060) (undo-tree-id507 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2061) (undo-tree-id508 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2062) (undo-tree-id509 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2063) (undo-tree-id510 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2064) (undo-tree-id511 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2065) (undo-tree-id512 . -1) (#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2066) (undo-tree-id513 . -1) 2067) nil (25942 31477 287049 795000) 0 nil])
([nil nil ((2057 . 2059)) nil (25942 31477 287045 266000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2056) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2057) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2058) (undo-tree-id499 . -1) (undo-tree-id500 . -1) 2059) nil (25942 31477 287044 655000) 0 nil])
([nil nil ((2056 . 2061)) nil (25942 31477 287042 661000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2061 2082 nil nil nil t nil)) nil 20 nil #s(yas--field 1 2061 2082 nil nil nil t nil) nil nil)) (2061 . 2080) (#("MustParse(${1:s string})" 0 24 (fontified nil)) . 2061) (2061 . 2085) (#("MustParse" 0 9 (fontified nil)) . -2061) (2061 . 2070)) nil (25942 31477 287042 110000) 0 nil])
([nil nil ((#("s string" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t)) . 2071)) nil (25942 31477 287041 399000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2070) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2071)) nil (25942 31477 287040 858000) 0 nil])
([nil nil ((#("M" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2061) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2062) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2063) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2064) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2065) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2066) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2067) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2068) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2069) (undo-tree-id491 . -1) (undo-tree-id492 . -1) 2070) nil (25942 31477 287038 854000) 0 nil])
([nil nil ((2061 . 2064)) nil (25942 31477 287033 324000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2067 2081 nil nil nil t nil)) nil 21 nil #s(yas--field 1 2067 2081 nil nil nil t nil) #s(yas--field 1 2061 2082 nil nil nil t nil) nil)) (2061 . 2076) (#("Parse(${1:s string})" 0 20 (fontified nil)) . 2061) (2061 . 2081) (#("Par" 0 3 (fontified nil)) . 2061) (2061 . 2064) (#("Parse" 0 5 (fontified nil)) . -2061) (2061 . 2066) (#("Par" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2061) (undo-tree-id473 . -3) (undo-tree-id474 . -3) 2064) nil (25942 31477 287032 733000) 0 nil])
([nil nil ((2068 . 2074) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 2068) (2067 . 2068)) nil (25942 31477 287031 310000) 0 nil])
([nil nil ((apply yas--snippet-revive 2074 2081 #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 2067 2081 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 2067 2081 nil nil nil t nil) nil)) (2074 . 2081) (#("Subject" 0 7 (fontified nil)) . 2074) (2074 . 2081) (#("Subject" 0 7 (fontified nil)) . -2074) (2074 . 2081)) nil (25942 31477 287030 669000) 0 nil])
([nil nil ((apply yas--snippet-revive 2061 2082 #s(yas--snippet nil (#s(yas--field 1 2067 2081 nil nil nil t nil)) nil 21 nil #s(yas--field 1 2067 2081 nil nil nil t nil) #s(yas--field 1 2061 2082 nil nil nil t nil) nil))) nil (25942 31477 287030 178000) 0 nil])
([nil nil ((apply yas--snippet-revive 2061 2082 #s(yas--snippet nil (#s(yas--field 1 2061 2082 nil nil nil t nil)) nil 20 nil #s(yas--field 1 2061 2082 nil nil nil t nil) nil nil))) nil (25942 31477 287029 947000) 0 nil])
([nil nil ((2052 . 2058)) nil (25942 31477 287029 697000) 0 nil])
([nil nil ((2088 . 2091)) nil (25942 31477 287029 456000) 0 nil])
([nil nil ((2088 . 2091)) nil (25942 31477 287029 196000) 0 nil])
([nil nil ((2091 . 2098)) nil (25942 31477 287028 945000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2097) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 2098) nil (25942 31477 287028 545000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2107) (2107 . 2108) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2107) (2107 . 2108) (2097 . 2108)) nil (25942 31477 287027 52000) 0 nil])
([nil nil ((2108 . 2111) (2109 . 2111) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2108) (2108 . 2111) (2107 . 2109)) nil (25942 31477 287026 521000) 0 nil])
([nil nil ((#("			utils.RespondWithError(w, 401, \"Unauthorized\")
" 0 3 (fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 25 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t) 26 27 (face tree-sitter-hl-face:variable fontified t) 27 29 (fontified t) 29 32 (face tree-sitter-hl-face:number fontified t) 32 34 (fontified t) 34 48 (face tree-sitter-hl-face:string fontified t) 48 49 (face (rainbow-delimiters-depth-4-face) fontified t) 49 50 (fontified t)) . 1979) (undo-tree-id468 . -49) (undo-tree-id469 . 47) (undo-tree-id470 . -2) 1981) nil (25942 31477 287025 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1981 . 1982) (#("
" 0 1 (fontified nil)) . -2028) (1978 . 2029) 1864) nil (25942 31477 287024 818000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2110 . 2111) (#("
" 0 1 (fontified nil)) . -2157) (2107 . 2158) 2093) nil (25942 31477 287024 387000) 0 nil])
([nil nil ((2157 . 2161)) nil (25942 31477 287023 996000) 0 nil])
([nil nil ((2161 . 2167)) nil (25942 31477 287023 746000) 0 nil])
([nil nil ((2171 . 2172)) nil (25942 31477 287023 495000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2167) (undo-tree-id463 . -1) (#("	" 0 1 (fontified t)) . -2168) (undo-tree-id464 . -1) (#("	" 0 1 (fontified t)) . -2169) (undo-tree-id465 . -1) (#("	" 0 1 (fontified t)) . -2170) (undo-tree-id466 . -1) (#("ó" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2171) (undo-tree-id467 . -1) 2172) nil (25942 31477 287022 824000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2171) (undo-tree-id460 . -1) (#("	" 0 1 (fontified t)) . -2172) (undo-tree-id461 . -1) (#("	" 0 1 (fontified t)) . -2173) (undo-tree-id462 . -1) 2174) nil (25942 31477 287020 930000) 0 nil])
([nil nil ((2175 . 2176)) nil (25942 31477 287019 838000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2175) (undo-tree-id459 . -1) 2176) nil (25942 31477 287019 498000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2211) (undo-tree-id445 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2212) (undo-tree-id446 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2213) (undo-tree-id447 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2214) (undo-tree-id448 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2215) (undo-tree-id449 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2216) (undo-tree-id450 . -1) (#("." 0 1 (fontified t)) . -2217) (undo-tree-id451 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2218) (undo-tree-id452 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2219) (undo-tree-id453 . -1) (#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2220) (undo-tree-id454 . -1) (#("j" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2221) (undo-tree-id455 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2222) (undo-tree-id456 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2223) (undo-tree-id457 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2224) (undo-tree-id458 . -1) 2225) nil (25942 31477 287017 454000) 0 nil])
([nil nil ((2211 . 2215)) nil (25942 31477 287012 605000) 0 nil])
([nil nil ((apply yas--snippet-revive 2211 2217 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (2211 . 2217) (#("userId" 0 6 (fontified nil)) . 2211) (2211 . 2217) (#("user" 0 4 (fontified nil)) . 2211) (2211 . 2215) (#("userId" 0 6 (fontified nil)) . -2211) (2211 . 2217) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2211) (undo-tree-id443 . -4) (undo-tree-id444 . -4) 2215) nil (25942 31477 287011 773000) 0 nil])
([nil nil ((2218 . 2221)) nil (25942 31477 287010 561000) 0 nil])
([nil nil ((2221 . 2224)) nil (25942 31477 287010 411000) 0 nil])
([nil nil ((2180 . 2181)) nil (25942 31477 287010 240000) 0 nil])
([nil nil ((2231 . 2233) (2230 . 2232) (#("'" 0 1 (fontified nil)) . -2230) (2225 . 2231)) nil (25942 31477 287010 30000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2231) (undo-tree-id441 . -1) (#(" " 0 1 (fontified t)) . -2232) (undo-tree-id442 . -1) 2233) nil (25942 31477 287009 599000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -2230) (undo-tree-id440 . -1) (#("'" 0 1 (fontified t)) . 2231)) nil (25942 31477 287008 768000) 0 nil])
([nil nil ((2230 . 2235)) nil (25942 31477 287008 317000) 0 nil])
([nil nil ((2235 . 2238)) nil (25942 31477 287008 157000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2236) (undo-tree-id438 . -1) (#(" " 0 1 (fontified t)) . -2237) (undo-tree-id439 . -1) 2238) nil (25942 31477 287007 776000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2238) (2238 . 2239) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2238) (2238 . 2239) (2236 . 2239)) nil (25942 31477 287006 473000) 0 nil])
([nil nil ((2239 . 2242) (2240 . 2242) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2239) (2239 . 2242) (2238 . 2240)) nil (25942 31477 287006 43000) 0 nil])
([nil nil ((2242 . 2248)) nil (25942 31477 287005 642000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2265 2266 nil nil nil t #s(yas--field 2 2268 2271 nil nil nil t #s(yas--field 3 2273 2287 nil nil nil t nil))) #s(yas--field 2 2268 2271 nil nil nil t #s(yas--field 3 2273 2287 nil nil nil t nil)) #s(yas--field 3 2273 2287 nil nil nil t nil)) nil 24 nil #s(yas--field 3 2273 2287 nil nil nil t nil) nil nil)) (2248 . 2309) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2248) (2248 . 2324) (#("RespondWithError" 0 16 (fontified nil)) . -2248) (2248 . 2264)) nil (25942 31477 287005 271000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2266) (2265 . 2266)) nil (25942 31477 287004 770000) 0 nil])
([nil nil ((2269 . 2271) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2269) (2268 . 2269)) nil (25942 31477 287004 500000) 0 nil])
([nil nil ((2274 . 2283) (2273 . 2275) (#("\"" 0 1 (fontified nil)) . -2273) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 2274) (2273 . 2274)) nil (25942 31477 287004 9000) 0 nil])
([nil nil ((2283 . 2286)) nil (25942 31477 287003 648000) 0 nil])
([nil nil ((apply yas--snippet-revive 2248 2288 #s(yas--snippet nil (#s(yas--field 1 2265 2266 nil nil nil t #s(yas--field 2 2268 2271 nil nil nil t #s(yas--field 3 2273 2287 nil nil nil t nil))) #s(yas--field 2 2268 2271 nil nil nil t #s(yas--field 3 2273 2287 nil nil nil t nil)) #s(yas--field 3 2273 2287 nil nil nil t nil)) nil 24 nil #s(yas--field 3 2273 2287 nil nil nil t nil) nil nil))) nil (25942 31477 287003 488000) 0 nil])
([nil nil ((2288 . 2292)) nil (25942 31477 287003 237000) 0 nil])
([nil nil ((2292 . 2298)) nil (25942 31477 287003 7000) 0 nil])
([nil nil ((2302 . 2305)) nil (25942 31477 287002 716000) 0 nil])
([nil nil ((2305 . 2312)) nil (25942 31477 287002 466000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2307) (undo-tree-id434 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2308) (undo-tree-id435 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2309) (undo-tree-id436 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2310) (undo-tree-id437 . -1) 2311) nil (25942 31477 287001 745000) 0 nil])
([nil nil ((2307 . 2319)) nil (25942 31477 287000 292000) 0 nil])
([nil nil ((2319 . 2321)) nil (25942 31477 287000 41000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2320) (2320 . 2321) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2320) (2320 . 2321)) nil (25942 31477 286999 570000) 0 nil])
([nil nil ((2320 . 2330)) nil (25942 31477 286998 869000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2305) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2306) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2307) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("u" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2308) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2309) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2310) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#(" " 0 1 (fontified t)) . -2311) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 2312) nil (25942 31477 286995 653000) 0 nil])
([nil nil ((4168 . 4170) (t 25942 31477 299557 139000)) nil (25942 31707 694112 757000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4176) (4176 . 4177) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4176) (4176 . 4177) (4170 . 4177)) nil (25942 31707 694112 196000) 0 nil])
([nil nil ((4176 . 4178)) nil (25942 31707 694111 876000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4177) (undo-tree-id604 . -1) 4178) nil (25942 31707 694111 605000) 0 nil])
([nil nil ((4177 . 4182)) nil (25942 31707 694110 924000) 0 nil])
([nil nil ((apply yas--snippet-revive 4179 4188 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (4179 . 4188) (#("apiConfig" 0 9 (fontified nil)) . 4179) (4179 . 4188) (#("api" 0 3 (fontified nil)) . 4179) (4179 . 4182) (#("apiConfig" 0 9 (fontified nil)) . -4179) (4179 . 4188) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4179) (undo-tree-id602 . -3) (undo-tree-id603 . -3) 4182) nil (25942 31707 694109 671000) 0 nil])
([nil nil ((4189 . 4196)) nil (25942 31707 694107 16000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4192) (undo-tree-id598 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4193) (undo-tree-id599 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4194) (undo-tree-id600 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4195) (undo-tree-id601 . -1) 4196) nil (25942 31707 694105 944000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4208) (4208 . 4209) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4208) (4208 . 4209) (4192 . 4209)) nil (25942 31707 694103 109000) 0 nil])
([nil nil ((4208 . 4211)) nil (25942 31707 694101 837000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4209) (undo-tree-id596 . -1) (#(" " 0 1 (fontified t)) . -4210) (undo-tree-id597 . -1) 4211) nil (25942 31707 694101 255000) 0 nil])
([nil nil ((4209 . 4214)) nil (25942 31707 694099 682000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4213) (undo-tree-id595 . -1) 4214) nil (25942 31707 694098 901000) 0 nil])
([nil nil ((4213 . 4218)) nil (25942 31707 694098 220000) 0 nil])
([nil nil ((apply yas--snippet-revive 4215 4229 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (4215 . 4229) (#("ResponseWriter" 0 14 (fontified nil)) . 4215) (4215 . 4229) (#("Res" 0 3 (fontified nil)) . 4215) (4215 . 4218) (#("ResponseWriter" 0 14 (fontified nil)) . -4215) (4215 . 4229) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4215) (undo-tree-id593 . -3) (undo-tree-id594 . -3) 4218) nil (25942 31707 694097 57000) 0 nil])
([nil nil ((4229 . 4242)) nil (25942 31707 694094 493000) 0 nil])
([nil nil ((apply yas--snippet-revive 4239 4246 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (4239 . 4246) (#("Request" 0 7 (fontified nil)) . 4239) (4239 . 4246) (#("req" 0 3 (fontified nil)) . 4239) (4239 . 4242) (#("Request" 0 7 (fontified nil)) . -4239) (4239 . 4246) (#("req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4239) (undo-tree-id591 . -3) (undo-tree-id592 . -3) 4242) nil (25942 31707 694093 711000) 0 nil])
([nil nil ((4247 . 4248)) nil (25942 31707 694092 148000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4249) (4249 . 4250) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4249) (4249 . 4250) (4248 . 4250)) nil (25942 31707 694091 517000) 0 nil])
([nil nil ((4250 . 4251) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4250) (4250 . 4251) (4249 . 4251)) nil (25942 31707 694090 826000) 0 nil])
([nil nil ((4251 . 4254)) nil (25942 31707 694090 425000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4251) (undo-tree-id588 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -4252) (undo-tree-id589 . -1) (#(" " 0 1 (fontified t)) . -4253) (undo-tree-id590 . -1) 4254) nil (25942 31707 694089 934000) 0 nil])
([nil nil ((4251 . 4258)) nil (25942 31707 694088 90000) 0 nil])
([nil nil ((4258 . 4269)) nil (25942 31707 694087 579000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4267) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("." 0 1 (fontified t)) . -4268) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 4269) nil (25942 31707 694086 768000) 0 nil])
([nil nil ((4249 . 4251)) nil (25942 31707 694084 614000) 0 nil])
([nil nil ((4169 . 4170)) nil (25942 31707 694084 173000) 0 nil])
([nil nil ((4169 . 4170)) nil (25942 31707 694083 732000) 0 nil])
([nil nil ((#("func (a *apiConfig) revokeAccessToken(w http.ResponseWriter, r *http.Request) {
	
	if user, err := 
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 7 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator fontified t) 9 18 (face tree-sitter-hl-face:type fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 37 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 39 40 (fontified t) 40 44 (fontified t) 44 45 (fontified t) 45 59 (face tree-sitter-hl-face:type fontified t) 59 61 (fontified t) 61 62 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 62 63 (fontified t) 63 64 (face tree-sitter-hl-face:operator fontified t) 64 68 (fontified t) 68 69 (fontified t) 69 76 (face tree-sitter-hl-face:type fontified t) 76 77 (face (rainbow-delimiters-depth-1-face) fontified t) 77 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-1-face) fontified t) 79 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 85 (face tree-sitter-hl-face:keyword fontified t) 85 86 (fontified t) 86 90 (face tree-sitter-hl-face:variable fontified t) 90 92 (fontified t) 92 95 (face tree-sitter-hl-face:variable fontified t) 95 96 (fontified t) 96 98 (face tree-sitter-hl-face:operator fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 102 (fontified t)) . 4172) (undo-tree-id576 . -100) (undo-tree-id577 . -101) (undo-tree-id578 . -102) (undo-tree-id579 . -102) (undo-tree-id580 . 1) (undo-tree-id581 . -100) (undo-tree-id582 . -101) (undo-tree-id583 . -100)) nil (25942 31707 694083 301000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4176) (4176 . 4177) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4176) (4176 . 4177) (4170 . 4177)) nil (25942 31707 694078 692000) 0 nil])
([nil nil ((4176 . 4179)) nil (25942 31707 694078 191000) 0 nil])
([nil nil ((4179 . 4182)) nil (25942 31707 694077 861000) 0 nil])
([nil nil ((apply yas--snippet-revive 4179 4188 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (4179 . 4188) (#("apiConfig" 0 9 (fontified nil)) . 4179) (4179 . 4188) (#("api" 0 3 (fontified nil)) . 4179) (4179 . 4182) (#("apiConfig" 0 9 (fontified nil)) . -4179) (4179 . 4188) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4179) (undo-tree-id574 . -3) (undo-tree-id575 . -3) 4182) nil (25942 31707 694076 979000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4208) (4208 . 4209) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4208) (4208 . 4209) (4189 . 4209)) nil (25942 31707 694075 95000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4207) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . 1) (undo-tree-id570 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4208) (undo-tree-id571 . -1) (undo-tree-id572 . 1) (undo-tree-id573 . -1) 4209) nil (25942 31707 694074 114000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4208) (4208 . 4209) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4208) (4208 . 4209) (4207 . 4209)) nil (25942 31707 694070 387000) 0 nil])
([nil nil ((4208 . 4219)) nil (25942 31707 694069 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 4215 4229 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (4215 . 4229) (#("ResponseWriter" 0 14 (fontified nil)) . 4215) (4215 . 4229) (#("Resp" 0 4 (fontified nil)) . 4215) (4215 . 4219) (#("ResponseWriter" 0 14 (fontified nil)) . -4215) (4215 . 4229) (#("Resp" 0 4 (face tree-sitter-hl-face:type fontified t)) . -4215) (undo-tree-id565 . -4) (undo-tree-id566 . -4) 4219) nil (25942 31707 694066 319000) 0 nil])
([nil nil ((4229 . 4231)) nil (25942 31707 694064 696000) 0 nil])
([nil nil ((4231 . 4242)) nil (25942 31707 694064 435000) 0 nil])
([nil nil ((apply yas--snippet-revive 4239 4246 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (4239 . 4246) (#("Request" 0 7 (fontified nil)) . 4239) (4239 . 4246) (#("Req" 0 3 (fontified nil)) . 4239) (4239 . 4242) (#("Request" 0 7 (fontified nil)) . -4239) (4239 . 4246) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4239) (undo-tree-id563 . -3) (undo-tree-id564 . -3) 4242) nil (25942 31707 694063 333000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4249) (4249 . 4250) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4249) (4249 . 4250) (4247 . 4250)) nil (25942 31707 694054 576000) 0 nil])
([nil nil ((4250 . 4251) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4250) (4250 . 4251) (4249 . 4251)) nil (25942 31707 694051 90000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4250) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 4251 (t 25942 31707 706552 128000)) nil (25942 31760 858749 200000) 0 nil])
([nil nil ((4250 . 4251) (t 25942 31760 965654 553000)) nil (25942 31764 405823 594000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4250) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) 4251) nil (25942 31764 405822 532000) 0 nil])
([nil nil ((4250 . 4252)) nil (25942 31764 405809 388000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -4250) (undo-tree-id745 . -1) (undo-tree-id746 . -2) 4252 (t 25942 31764 510578 368000)) nil (25942 31779 937605 557000) 0 nil])
([nil nil ((4250 . 4257)) nil (25942 31779 937604 174000) 0 nil])
([nil nil ((4257 . 4258)) nil (25942 31779 937603 674000) 0 nil])
([nil nil ((4258 . 4261)) nil (25942 31779 937603 173000) 0 nil])
([nil nil ((4261 . 4262)) nil (25942 31779 937602 812000) 0 nil])
([nil nil ((4262 . 4264)) nil (25942 31779 937602 271000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4249) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#(" " 0 1 (fontified t)) . -4250) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#(" " 0 1 (fontified t)) . -4251) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4252) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4253) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4254) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4255) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4256) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -4257) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#(" " 0 1 (fontified t)) . -4258) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4259) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("." 0 1 (fontified t)) . -4260) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4261) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4262) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4263) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) 4264) nil (25942 31779 937597 572000) 0 nil])
([nil nil ((4249 . 4251) (t 25942 31780 42320 289000)) nil (25942 31782 170254 296000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4250) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) 4251) nil (25942 31782 170252 22000) 0 nil])
([nil nil ((4246 . 4252) (t 25942 31782 182293 444000)) nil (25942 31924 10595 589000) 0 nil])
([nil nil ((4252 . 4253)) nil (25942 31924 10595 78000) 0 nil])
([nil nil ((4253 . 4257)) nil (25942 31924 10594 778000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4253) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4254) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4255) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4256) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) 4257) nil (25942 31924 10593 405000) 0 nil])
([nil nil ((4253 . 4266)) nil (25942 31924 10579 258000) 0 nil])
([nil nil ((4270 . 4271) (t 25942 31924 19808 916000)) nil (25942 32428 444553 450000) 0 nil])
([nil nil ((4271 . 4278)) nil (25942 32428 444553 159000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4271) (undo-tree-id942 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4272) (undo-tree-id943 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4273) (undo-tree-id944 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4274) (undo-tree-id945 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4275) (undo-tree-id946 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -4276) (undo-tree-id947 . -1) (#(" " 0 1 (fontified t)) . -4277) (undo-tree-id948 . -1) 4278) nil (25942 32428 444552 117000) 0 nil])
([nil nil ((4271 . 4276)) nil (25942 32428 444548 70000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4271) (undo-tree-id937 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4272) (undo-tree-id938 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4273) (undo-tree-id939 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -4274) (undo-tree-id940 . -1) (#(" " 0 1 (fontified t)) . -4275) (undo-tree-id941 . -1) 4276) nil (25942 32428 444547 318000) 0 nil])
([nil nil ((4271 . 4273)) nil (25942 32428 444545 355000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4272) (undo-tree-id936 . -1) 4273) nil (25942 32428 444544 854000) 0 nil])
([nil nil ((4272 . 4274)) nil (25942 32428 444544 72000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4271) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4272) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4273) (undo-tree-id934 . -1) (undo-tree-id935 . -1) 4274) nil (25942 32428 444543 361000) 0 nil])
([nil nil ((4271 . 4278)) nil (25942 32428 444541 367000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4275) (undo-tree-id927 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4276) (undo-tree-id928 . -1) (#(" " 0 1 (fontified t)) . -4277) (undo-tree-id929 . -1) 4278) nil (25942 32428 444540 746000) 0 nil])
([nil nil ((4275 . 4283)) nil (25942 32428 444539 283000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4282) (undo-tree-id926 . -1) 4283) nil (25942 32428 444538 672000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4283) (4283 . 4284) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4283) (4283 . 4284) (4282 . 4284)) nil (25942 32428 444536 768000) 0 nil])
([nil nil ((4283 . 4290)) nil (25942 32428 444536 267000) 0 nil])
([nil nil ((4290 . 4298)) nil (25942 32428 444535 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 4290 4304 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (4290 . 4304) (#("ResponseWriter" 0 14 (fontified nil)) . 4290) (4290 . 4304) (#("Response" 0 8 (fontified nil)) . 4290) (4290 . 4298) (#("ResponseWriter" 0 14 (fontified nil)) . -4290) (4290 . 4304) (#("Response" 0 8 (face tree-sitter-hl-face:type fontified t)) . -4290) (undo-tree-id924 . -8) (undo-tree-id925 . -8) 4298) nil (25942 32428 444535 145000) 0 nil])
([nil nil ((4304 . 4316)) nil (25942 32428 444534 63000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4315) (undo-tree-id923 . -1) 4316) nil (25942 32428 444533 773000) 0 nil])
([nil nil ((4315 . 4317)) nil (25942 32428 444533 232000) 0 nil])
([nil nil ((apply yas--snippet-revive 4314 4321 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (4314 . 4321) (#("Request" 0 7 (fontified nil)) . 4314) (4314 . 4321) (#("Req" 0 3 (fontified nil)) . 4314) (4314 . 4317) (#("Request" 0 7 (fontified nil)) . -4314) (4314 . 4321) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4314) (undo-tree-id921 . -3) (undo-tree-id922 . -3) 4317) nil (25942 32428 444532 350000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4324) (4324 . 4325) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4324) (4324 . 4325) (4322 . 4325)) nil (25942 32428 444531 38000) 0 nil])
([nil nil ((4325 . 4327) (4326 . 4327) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 4325) (4325 . 4327) (4324 . 4326)) nil (25942 32428 444530 637000) 0 nil])
([nil nil ((4327 . 4330)) nil (25942 32428 444530 226000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4327) (undo-tree-id918 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -4328) (undo-tree-id919 . -1) (#(" " 0 1 (fontified t)) . -4329) (undo-tree-id920 . -1) 4330) nil (25942 32428 444529 735000) 0 nil])
([nil nil ((4327 . 4332)) nil (25942 32428 444528 743000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4327) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4328) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4329) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4330) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4331) (undo-tree-id916 . -1) (undo-tree-id917 . -1) 4332) nil (25942 32428 444528 2000) 0 nil])
([nil nil ((4327 . 4338)) nil (25942 32428 444525 377000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4337) (undo-tree-id906 . -1) (undo-tree-id907 . -1) 4338) nil (25942 32428 444524 806000) 0 nil])
([nil nil ((4337 . 4339)) nil (25942 32428 444523 914000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4327) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4328) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4329) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4330) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#(" " 0 1 (fontified t)) . -4331) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#(":" 0 1 (fontified t)) . -4332) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4333) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#(" " 0 1 (fontified t)) . -4334) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (#("A" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4335) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4336) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4337) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4338) (undo-tree-id904 . -1) (undo-tree-id905 . -1) 4339) nil (25942 32428 444522 0) 0 nil])
([nil nil ((#("A" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4196) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4197) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4198) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4199) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4200) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4201) (undo-tree-id880 . -1) (undo-tree-id881 . -1) 4202) nil (25942 32428 444510 970000) 0 nil])
([nil nil ((4200 . 4201)) nil (25942 32428 444506 972000) 0 nil])
([nil nil ((#("s" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -4200) (undo-tree-id869 . -1) 4201) nil (25942 32428 444506 401000) 0 nil])
([nil nil ((4201 . 4202)) nil (25942 32428 444505 439000) 0 nil])
([nil nil ((4322 . 4324)) nil (25942 32428 444504 968000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4323) (undo-tree-id868 . -1) 4324) nil (25942 32428 444504 377000) 0 nil])
([nil nil ((4323 . 4330)) nil (25942 32428 444503 315000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4322) (undo-tree-id867 . -1) 4323) nil (25942 32428 444502 734000) 0 nil])
([nil nil ((4328 . 4329)) nil (25942 32428 444501 452000) 0 nil])
([nil nil ((4329 . 4331)) nil (25942 32428 444500 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 4331 4333 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (4331 . 4333) (#("DB" 0 2 (fontified nil)) . 4331) (4331 . 4333) (#("DB" 0 2 (fontified nil)) . -4331) (4331 . 4333)) nil (25942 32428 444500 179000) 0 nil])
([nil nil ((4333 . 4334)) nil (25942 32428 444499 368000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4353 4358 nil nil nil t #s(yas--field 2 4360 4360 nil nil nil t nil)) #s(yas--field 2 4360 4360 nil nil nil t nil)) nil 34 nil #s(yas--field 2 4360 4360 nil nil nil t nil) nil nil)) (4334 . 4384) (#("RevokeRefreshToken(${1:ctx context.Context}, ${2:id string})" 0 60 (fontified nil)) . 4334) (4334 . 4394) (#("RevokeRefreshToken" 0 18 (fontified nil)) . -4334) (4334 . 4352)) nil (25942 32428 444498 997000) 0 nil])
([nil nil ((4354 . 4355) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 4354) (4353 . 4354)) nil (25942 32428 444498 516000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4353) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4354) (undo-tree-id865 . -1) (undo-tree-id866 . -1) 4355) nil (25942 32428 444497 675000) 0 nil])
([nil nil ((4353 . 4355)) nil (25942 32428 444494 989000) 0 nil])
([nil nil ((apply yas--snippet-revive 4355 4358 #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 4353 4358 nil nil nil t #s(yas--field 2 4360 4360 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 4353 4358 nil nil nil t #s(yas--field 2 4360 4360 nil nil nil t nil)) nil)) (4355 . 4358) (#("ctx" 0 3 (fontified nil)) . 4355) (4355 . 4358) (#("ctx" 0 3 (fontified nil)) . -4355) (4355 . 4358)) nil (25942 32428 444494 168000) 0 nil])
([nil nil ((#("id string" 0 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (fontified t) 3 9 (face tree-sitter-hl-face:variable fontified t)) . 4360)) nil (25942 32428 444493 166000) 0 nil])
([nil nil ((apply yas--snippet-revive 4334 4361 #s(yas--snippet nil (#s(yas--field 1 4353 4358 nil nil nil t #s(yas--field 2 4360 4360 nil nil nil t nil)) #s(yas--field 2 4360 4360 nil nil nil t nil)) nil 34 nil #s(yas--field 2 4360 4360 nil nil nil t nil) nil nil))) nil (25942 32428 444492 785000) 0 nil])
([nil nil ((4319 . 4322)) nil (25942 32428 444492 395000) 0 nil])
([nil nil ((#("func (a *apiConfig) revokeTokens(w http.ResponseWriter, r *http.Request, user database.User) {
	return func(w http.ResponseWriter, r *http.Request) {
		
		err := a.DB.RevokeRefreshToken(a.ctx, ) 
	}
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 7 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 7 8 (fontified t) 8 9 (face tree-sitter-hl-face:operator fontified t) 9 18 (face tree-sitter-hl-face:type fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 32 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 34 35 (fontified t) 35 39 (fontified t) 39 40 (fontified t) 40 54 (face tree-sitter-hl-face:type fontified t) 54 56 (fontified t) 56 57 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 57 58 (fontified t) 58 59 (face tree-sitter-hl-face:operator fontified t) 59 63 (fontified t) 63 64 (fontified t) 64 71 (face tree-sitter-hl-face:type fontified t) 71 73 (fontified t) 73 77 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 77 78 (fontified t) 78 86 (fontified t) 86 87 (fontified t) 87 91 (face tree-sitter-hl-face:type fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t) 92 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-1-face) fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 102 (face tree-sitter-hl-face:keyword fontified t) 102 103 (fontified t) 103 107 (face tree-sitter-hl-face:keyword fontified t) 107 108 (face (rainbow-delimiters-depth-2-face) fontified t) 108 109 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 109 110 (fontified t) 110 115 (fontified t) 115 129 (face tree-sitter-hl-face:type fontified t) 129 131 (fontified t) 131 132 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 132 133 (fontified t) 133 134 (face tree-sitter-hl-face:operator fontified t) 134 139 (fontified t) 139 146 (face tree-sitter-hl-face:type fontified t) 146 147 (face (rainbow-delimiters-depth-2-face) fontified t) 147 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 152 (fontified t) 152 153 (fontified t) 153 155 (fontified t) 155 158 (face tree-sitter-hl-face:variable fontified t) 158 159 (fontified t) 159 161 (face tree-sitter-hl-face:operator fontified t) 161 162 (fontified t) 162 163 (face tree-sitter-hl-face:variable fontified t) 163 164 (fontified t) 164 166 (face tree-sitter-hl-face:property fontified t) 166 167 (fontified t) 167 185 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 185 186 (face (rainbow-delimiters-depth-3-face) fontified t) 186 187 (face tree-sitter-hl-face:variable fontified t) 187 188 (fontified t) 188 191 (face tree-sitter-hl-face:property fontified t) 191 193 (fontified t) 193 194 (face (rainbow-delimiters-depth-3-face) fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t) 197 198 (face (rainbow-delimiters-depth-2-face) fontified t) 198 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-1-face) fontified t) 200 201 (fontified t)) . 4170) (undo-tree-id856 . -199) (undo-tree-id857 . -200) (undo-tree-id858 . 1) (undo-tree-id859 . -199) (undo-tree-id860 . -136) (undo-tree-id861 . -26) (undo-tree-id862 . -199)) nil (25942 32428 444491 633000) 0 nil])
([nil nil ((4170 . 4371)) nil (25942 32428 444488 567000) 0 nil])
([nil nil ((4322 . 4325)) nil (25942 32428 444488 66000) 0 nil])
([nil nil ((4325 . 4327)) nil (25942 32428 444487 325000) 0 nil])
([nil nil ((4327 . 4328)) nil (25942 32428 444486 684000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4325) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4326) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4327) (undo-tree-id855 . -1) 4328) nil (25942 32428 444486 22000) 0 nil])
([nil nil ((4325 . 4326)) nil (25942 32428 444483 548000) 0 nil])
([nil nil ((4326 . 4329)) nil (25942 32428 444483 137000) 0 nil])
([nil nil ((4329 . 4332)) nil (25942 32428 444482 776000) 0 nil])
([nil nil ((4168 . 4170)) nil (25942 32428 444482 446000) 0 nil])
([nil nil ((4170 . 4176)) nil (25942 32428 444482 185000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4170) (undo-tree-id845 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4171) (undo-tree-id846 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4172) (undo-tree-id847 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4173) (undo-tree-id848 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4174) (undo-tree-id849 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4175) (undo-tree-id850 . -1) 4176) nil (25942 32428 444481 253000) 0 nil])
([nil nil ((4170 . 4182)) nil (25942 32428 444478 588000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4181) (undo-tree-id844 . -1) 4182) nil (25942 32428 444477 857000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4199) (4199 . 4200) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4199) (4199 . 4200) (4181 . 4200)) nil (25942 32428 444476 625000) 0 nil])
([nil nil ((4200 . 4201) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4200) (4200 . 4201) (4199 . 4201)) nil (25942 32428 444476 174000) 0 nil])
([nil nil ((4201 . 4204)) nil (25942 32428 444475 803000) 0 nil])
([nil nil ((4204 . 4205)) nil (25942 32428 444475 252000) 0 nil])
([nil nil ((4205 . 4209)) nil (25942 32428 444474 561000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4208) (undo-tree-id842 . -1) (undo-tree-id843 . -1) 4209) nil (25942 32428 444474 50000) 0 nil])
([nil nil ((4208 . 4213)) nil (25942 32428 444472 377000) 0 nil])
([nil nil ((4213 . 4221)) nil (25942 32428 444471 625000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4220) (undo-tree-id841 . -1) 4221) nil (25942 32428 444470 844000) 0 nil])
([nil nil ((4386 . 4392)) nil (25942 32428 444470 203000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4381) (undo-tree-id840 . -1) 4382) nil (25942 32428 444469 591000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4385) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4386) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4387) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4388) (undo-tree-id837 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4389) (undo-tree-id838 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4390) (undo-tree-id839 . -1) 4391) nil (25942 32428 444468 199000) 0 nil])
([nil nil ((4385 . 4389)) nil (25942 32428 444464 893000) 0 nil])
([nil nil ((apply yas--snippet-revive 4385 4400 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (4385 . 4400) (#("RevokeTokenType" 0 15 (fontified nil)) . 4385) (4385 . 4400) (#("Revo" 0 4 (fontified nil)) . 4385) (4385 . 4389) (#("RevokeTokenType" 0 15 (fontified nil)) . -4385) (4385 . 4400) (#("Revo" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -4385) (undo-tree-id829 . -4) (undo-tree-id830 . -4) 4389) nil (25942 32428 444464 422000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4401) (4401 . 4402) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -4401) (4401 . 4402) (4400 . 4402)) nil (25942 32428 444462 979000) 0 nil])
([nil nil ((4402 . 4405)) nil (25942 32428 444462 608000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4403 . 4404) (#("
" 0 1 (fontified nil)) . -4606) (4402 . 4607) 4375) nil (25942 32428 444461 937000) 0 nil])
([nil nil ((#("		token := RevokeTokenType{}
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 11 (fontified t) 11 26 (face tree-sitter-hl-face:type fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 29 (fontified t)) . 4374) (undo-tree-id827 . -28) (undo-tree-id828 . -1) 4375) nil (25942 32428 444461 456000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2038) (#(" " 0 1 (fontified t)) . -2324) (4375 . 4376) (4411 . 4412) (4460 . 4461) (4520 . 4521) (4566 . 4567) (4575 . 4576) (#("		" 0 2 (fontified t)) . 4578) (#(", " 0 2 (fontified t)) . 4619) (#(" " 0 1 (fontified t)) . 4622) (#("
" 0 1 (fontified t)) . 4628) 4375) nil (25942 32428 444459 793000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4440) (undo-tree-id811 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4441) (undo-tree-id812 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4442) (undo-tree-id813 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4443) (undo-tree-id814 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4444) (undo-tree-id815 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4445) (undo-tree-id816 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4446) (undo-tree-id817 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4447) (undo-tree-id818 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4448) (undo-tree-id819 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4449) (undo-tree-id820 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4450) (undo-tree-id821 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -4451) (undo-tree-id822 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -4452) (undo-tree-id823 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4453) (undo-tree-id824 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4454) (undo-tree-id825 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4455) (undo-tree-id826 . -1) 4456) nil (25942 32428 444457 459000) 0 nil])
([nil nil ((4440 . 4446)) nil (25942 32428 444452 950000) 0 nil])
([nil nil ((4446 . 4451)) nil (25942 32428 444452 790000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4431) (undo-tree-id802 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4432) (undo-tree-id803 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4433) (undo-tree-id804 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4434) (undo-tree-id805 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4435) (undo-tree-id806 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4436) (undo-tree-id807 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4437) (undo-tree-id808 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4438) (undo-tree-id809 . -1) (#("." 0 1 (fontified t)) . -4439) (undo-tree-id810 . -1) 4440) nil (25942 32428 444451 688000) 0 nil])
([nil nil ((4442 . 4443)) nil (25942 32428 444448 672000) 0 nil])
([nil nil ((apply yas--snippet-revive 4431 4446 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (4431 . 4446) (#("RevokeTokenType" 0 15 (fontified nil)) . 4431) (4431 . 4446) (#("RevokeTokenT" 0 12 (fontified nil)) . 4431) (4431 . 4443) (#("RevokeTokenType" 0 15 (fontified nil)) . -4431) (4431 . 4446) (#("RevokeTokenT" 0 12 (face tree-sitter-hl-face:type fontified t)) . -4431) (undo-tree-id800 . -12) (undo-tree-id801 . -12) 4443) nil (25942 32428 444448 11000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4411) (4414 . 4416) (#("at" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 4414) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4417) (4419 . 4423) (4420 . 4421) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4420) (#("ect" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 4424) (undo-tree-id798 . -1) (undo-tree-id799 . -1) 4425 (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4477) (4480 . 4482) (#("at" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 4480) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4483) (4485 . 4489) (4486 . 4487) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 4486) (#("ect" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 4490) 4477) nil (25942 32428 444445 837000) 0 nil])
([nil nil ((4609 . 4614)) nil (25942 32428 444444 314000) 0 nil])
([nil nil ((apply yas--snippet-revive 4611 4639 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (4611 . 4639) (#("refreshTokenObj.refreshToken" 0 28 (fontified nil)) . 4611) (4611 . 4639) (#("ref" 0 3 (fontified nil)) . 4611) (4611 . 4614) (#("refreshTokenObj.refreshToken" 0 28 (fontified nil)) . -4611) (4611 . 4639) (#("ref" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -4611) (undo-tree-id796 . -3) (undo-tree-id797 . -3) 4614) nil (25942 32428 444443 372000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4569) (undo-tree-id794 . -1) (undo-tree-id795 . -1) 4570) nil (25942 32428 444441 919000) 0 nil])
([nil nil ((4639 . 4642)) nil (25942 32428 444440 787000) 0 nil])
([nil nil ((4572 . 4573)) nil (25942 32428 444440 537000) 0 nil])
([nil nil ((4643 . 4646)) nil (25942 32428 444440 306000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4645) (undo-tree-id793 . -1) 4646) nil (25942 32428 444439 925000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4644) (undo-tree-id792 . -1) 4645) nil (25942 32428 444439 14000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4659) (4659 . 4660) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -4659) (4659 . 4660) (4644 . 4660)) nil (25942 32428 444438 92000) 0 nil])
([nil nil ((4660 . 4663) (4661 . 4663) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 4660) (4660 . 4663) (4659 . 4661)) nil (25942 32428 444437 441000) 0 nil])
([nil nil ((4663 . 4669)) nil (25942 32428 444436 799000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4686 4687 nil nil nil t #s(yas--field 2 4689 4692 nil nil nil t #s(yas--field 3 4694 4708 nil nil nil t nil))) #s(yas--field 2 4689 4692 nil nil nil t #s(yas--field 3 4694 4708 nil nil nil t nil)) #s(yas--field 3 4694 4708 nil nil nil t nil)) nil 39 nil #s(yas--field 3 4694 4708 nil nil nil t nil) nil nil)) (4669 . 4730) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4669) (4669 . 4745) (#("RespondWithError" 0 16 (fontified nil)) . -4669) (4669 . 4685)) nil (25942 32428 444436 98000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 4687) (4686 . 4687)) nil (25942 32428 444435 327000) 0 nil])
([nil nil ((4690 . 4692) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 4690) (4689 . 4690)) nil (25942 32428 444434 996000) 0 nil])
([nil nil ((4695 . 4704) (4694 . 4696) (#("\"" 0 1 (fontified nil)) . -4694) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 4695) (4694 . 4695)) nil (25942 32428 444434 505000) 0 nil])
([nil nil ((4704 . 4707)) nil (25942 32428 444434 44000) 0 nil])
([nil nil ((apply yas--snippet-revive 4669 4709 #s(yas--snippet nil (#s(yas--field 1 4686 4687 nil nil nil t #s(yas--field 2 4689 4692 nil nil nil t #s(yas--field 3 4694 4708 nil nil nil t nil))) #s(yas--field 2 4689 4692 nil nil nil t #s(yas--field 3 4694 4708 nil nil nil t nil)) #s(yas--field 3 4694 4708 nil nil nil t nil)) nil 39 nil #s(yas--field 3 4694 4708 nil nil nil t nil) nil nil))) nil (25942 32428 444433 644000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4691) (undo-tree-id791 . -1) 4692) nil (25942 32428 444433 373000) 0 nil])
([nil nil ((4691 . 4692)) nil (25942 32428 444432 902000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4695) (undo-tree-id779 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4696) (undo-tree-id780 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4697) (undo-tree-id781 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4698) (undo-tree-id782 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4699) (undo-tree-id783 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4700) (undo-tree-id784 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4701) (undo-tree-id785 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4702) (undo-tree-id786 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4703) (undo-tree-id787 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4704) (undo-tree-id788 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4705) (undo-tree-id789 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4706) (undo-tree-id790 . -1) 4707) nil (25942 32428 444431 760000) 0 nil])
([nil nil ((4695 . 4704)) nil (25942 32428 444426 871000) 0 nil])
([nil nil ((4706 . 4710)) nil (25942 32428 444426 620000) 0 nil])
([nil nil ((4710 . 4712)) nil (25942 32428 444426 400000) 0 nil])
([nil nil ((4712 . 4716)) nil (25942 32428 444426 139000) 0 nil])
([nil nil ((4720 . 4723)) nil (25942 32428 444425 959000) 0 nil])
([nil nil ((4723 . 4729)) nil (25942 32428 444425 719000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4745 4746 nil nil nil t #s(yas--field 2 4748 4751 nil nil nil t #s(yas--field 3 4753 4757 nil nil nil t nil))) #s(yas--field 2 4748 4751 nil nil nil t #s(yas--field 3 4753 4757 nil nil nil t nil)) #s(yas--field 3 4753 4757 nil nil nil t nil)) nil 40 nil #s(yas--field 3 4753 4757 nil nil nil t nil) nil nil)) (4729 . 4798) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4729) (4729 . 4814) (#("RespondWithJSON" 0 15 (fontified nil)) . -4729) (4729 . 4744)) nil (25942 32428 444424 947000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 4746) (undo-tree-id776 . -21) (undo-tree-id777 . -2) (undo-tree-id778 . -3) (4745 . 4746)) nil (25942 32428 444424 356000) 0 nil])
([nil nil ((4749 . 4751) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 4749) (undo-tree-id773 . -8) (undo-tree-id774 . -5) (undo-tree-id775 . -6) (4748 . 4749)) nil (25942 32428 444422 543000) 0 nil])
([nil nil ((4754 . 4756) (4753 . 4755) (#("\"" 0 1 (fontified nil)) . -4753) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 4754) (undo-tree-id770 . -19) (undo-tree-id771 . -8) (undo-tree-id772 . -9) (4753 . 4754)) nil (25942 32428 444420 549000) 0 nil])
([nil nil ((apply yas--snippet-revive 4729 4758 #s(yas--snippet nil (#s(yas--field 1 4745 4746 nil nil nil t #s(yas--field 2 4748 4751 nil nil nil t #s(yas--field 3 4753 4757 nil nil nil t nil))) #s(yas--field 2 4748 4751 nil nil nil t #s(yas--field 3 4753 4757 nil nil nil t nil)) #s(yas--field 3 4753 4757 nil nil nil t nil)) nil 40 nil #s(yas--field 3 4753 4757 nil nil nil t nil) nil nil))) nil (25942 32428 444409 328000) 0 nil])
([nil nil ((4763 . 4765) (t 25942 32428 457907 617000)) nil (25942 32477 37510 47000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4771) (4771 . 4772) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4771) (4771 . 4772) (4765 . 4772)) nil (25942 32477 37509 65000) 0 nil])
([nil nil ((4771 . 4772)) nil (25942 32477 37508 83000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4771) (undo-tree-id1111 . -1) 4772) nil (25942 32477 37507 132000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4293) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#(" " 0 1 (fontified t)) . -4294) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4295) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4296) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4297) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4298) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#(" " 0 1 (fontified t)) . -4299) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4300) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4301) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4302) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4303) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4304) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4305) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -4306) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -4307) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (#("." 0 1 (fontified t)) . -4308) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4309) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4310) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4311) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4312) (undo-tree-id1110 . -1) 4313) nil (25942 32477 37500 168000) 0 nil])
([nil nil ((4751 . 4757) (t 25942 32477 50399 429000)) nil (25942 32557 415623 830000) 0 nil])
([nil nil ((apply yas--snippet-revive 4754 4763 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (4754 . 4763) (#("apiConfig" 0 9 (fontified nil)) . 4754) (4754 . 4763) (#("api" 0 3 (fontified nil)) . 4754) (4754 . 4757) (#("apiConfig" 0 9 (fontified nil)) . -4754) (4754 . 4763) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4754) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) 4757) nil (25942 32557 415623 88000) 0 nil])
([nil nil ((4764 . 4770)) nil (25942 32557 415621 766000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4765) (undo-tree-id1172 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4766) (undo-tree-id1173 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4767) (undo-tree-id1174 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4768) (undo-tree-id1175 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4769) (undo-tree-id1176 . -1) 4770) nil (25942 32557 415620 754000) 0 nil])
([nil nil ((4765 . 4771)) nil (25942 32557 415617 288000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4765) (undo-tree-id1166 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4766) (undo-tree-id1167 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4767) (undo-tree-id1168 . -1) (#("N" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4768) (undo-tree-id1169 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4769) (undo-tree-id1170 . -1) (#("w" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4770) (undo-tree-id1171 . -1) 4771) nil (25942 32557 415616 476000) 0 nil])
([nil nil ((4765 . 4767)) nil (25942 32557 415613 260000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4784) (4784 . 4785) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4784) (4784 . 4785) (4767 . 4785)) nil (25942 32557 415612 399000) 0 nil])
([nil nil ((4784 . 4791)) nil (25942 32557 415611 667000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4789) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4790) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) 4791) nil (25942 32557 415610 866000) 0 nil])
([nil nil ((4789 . 4795)) nil (25942 32557 415608 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 4791 4805 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (4791 . 4805) (#("ResponseWriter" 0 14 (fontified nil)) . 4791) (4791 . 4805) (#("Resp" 0 4 (fontified nil)) . 4791) (4791 . 4795) (#("ResponseWriter" 0 14 (fontified nil)) . -4791) (4791 . 4805) (#("Resp" 0 4 (face tree-sitter-hl-face:type fontified t)) . -4791) (undo-tree-id1160 . -4) (undo-tree-id1161 . -4) 4795) nil (25942 32557 415607 980000) 0 nil])
([nil nil ((4805 . 4814)) nil (25942 32557 415605 886000) 0 nil])
([nil nil ((4814 . 4818)) nil (25942 32557 415605 225000) 0 nil])
([nil nil ((apply yas--snippet-revive 4815 4822 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (4815 . 4822) (#("Request" 0 7 (fontified nil)) . 4815) (4815 . 4822) (#("Req" 0 3 (fontified nil)) . 4815) (4815 . 4818) (#("Request" 0 7 (fontified nil)) . -4815) (4815 . 4822) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -4815) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) 4818) nil (25942 32557 415604 193000) 0 nil])
([nil nil ((4822 . 4837)) nil (25942 32557 415602 430000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4840) (4840 . 4841) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4840) (4840 . 4841) (4838 . 4841)) nil (25942 32557 415602 119000) 0 nil])
([nil nil ((4841 . 4842) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4841) (4841 . 4842) (4840 . 4842)) nil (25942 32557 415601 739000) 0 nil])
([nil nil ((4591 . 4597)) nil (25942 32557 415601 338000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4591) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4592) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4593) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4594) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4595) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4596) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) 4597) nil (25942 32557 415600 617000) 0 nil])
([nil nil ((4591 . 4594)) nil (25942 32557 415594 705000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4600 4612 nil nil nil nil nil)) nil 44 nil #s(yas--field 1 4600 4612 nil nil nil nil nil) nil nil)) (4591 . 4613) (#("sha3Hash(${1:input string})" 0 27 (fontified nil)) . 4591) (4591 . 4618) (#("sharefreshTokenObj" 0 3 (fontified nil) 3 18 (face tree-sitter-hl-face:variable fontified nil)) . 4591) (4591 . 4594) (#("sha3Hash" 0 8 (fontified nil)) . -4591) (4591 . 4599) (#("sha" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -4591) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) 4594) nil (25942 32557 415593 834000) 0 nil])
([nil nil ((apply yas--snippet-revive 4591 4613 #s(yas--snippet nil (#s(yas--field 1 4600 4612 nil nil nil nil nil)) nil 44 nil #s(yas--field 1 4600 4612 nil nil nil nil nil) nil nil))) nil (25942 32557 415592 251000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4600) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4601) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4602) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4603) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4604) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#(" " 0 1 (fontified t)) . -4605) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4606) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4607) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4608) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4609) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4610) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4611) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -4612) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . 1) (undo-tree-id1143 . -1) 4613) nil (25942 32557 415590 17000) 0 nil])
([nil nil ((4600 . 4603)) nil (25942 32557 415547 728000) 0 nil])
([nil nil ((apply yas--snippet-revive 4600 4628 #s(yas--snippet nil nil nil 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil nil nil)) (4600 . 4628) (#("refreshTokenObj.refreshToken" 0 28 (fontified nil)) . 4600) (4600 . 4628) (#("ref" 0 3 (fontified nil)) . 4600) (4600 . 4603) (#("refreshTokenObj.refreshToken" 0 28 (fontified nil)) . -4600) (4600 . 4628) (#("ref" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -4600) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) 4603) nil (25942 32557 415546 696000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4628)) nil (25942 32557 415543 590000) 0 nil])
([nil nil ((#("refreshToken" 0 12 (face tree-sitter-hl-face:property fontified t)) . 4628) (undo-tree-id1112 . -11) (undo-tree-id1113 . 12)) nil (25942 32557 415542 728000) 0 nil])
([nil nil ((4629 . 4630) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -4629) (4629 . 4630)) nil (25942 32557 415533 150000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4853 . 4854) (#("
" 0 1 (fontified nil)) . -5309) (4852 . 5310) 4851 (t 25942 32557 430314 967000)) nil (25942 32679 157225 130000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 4851) (undo-tree-id1281 . -1)) nil (25942 32679 157224 359000) 0 nil])
([nil nil ((#("}
" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t) 1 2 (fontified t)) . 5308) (undo-tree-id1276 . -1) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) (undo-tree-id1279 . 2) (undo-tree-id1280 . -1)) nil (25942 32679 157223 417000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4173) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4174) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (#("v" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4175) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4176) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4177) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4178) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) 4179) nil (25942 32679 157218 838000) 0 nil])
([nil nil ((4173 . 4179)) nil (25942 32679 157207 658000) 0 nil])
([nil nil ((4179 . 4181) (#("Tok" 0 3 (face tree-sitter-hl-face:type fontified t)) . 4179) (undo-tree-id1241 . 3) (undo-tree-id1242 . -1) (4183 . 4188) 4179 (4416 . 4418) (#("Tok" 0 3 (face tree-sitter-hl-face:type fontified t)) . 4416) (4420 . 4425) 4410 (4970 . 4972) (#("Tok" 0 3 (face tree-sitter-hl-face:type fontified t)) . 4970) (4974 . 4979) 4964) nil (25942 32679 157207 56000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4174) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("v" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4175) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4176) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4177) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4178) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) 4179) nil (25942 32679 157204 482000) 0 nil])
([nil nil ((4174 . 4179)) nil (25942 32679 157172 171000) 0 nil])
([nil nil ((4173 . 4174) (#("Rev" 0 1 (face tree-sitter-hl-face:type fontified t) 1 2 (face tree-sitter-hl-face:type fontified t) 2 3 (face tree-sitter-hl-face:type fontified t)) . 4173) (undo-tree-id1208 . -3) (undo-tree-id1209 . -2) (undo-tree-id1210 . -1) (4179 . 4180) (4414 . 4415) (#("Rev" 0 3 (face tree-sitter-hl-face:type fontified t)) . 4414) (4420 . 4421) 4414 (4972 . 4973) (#("Rev" 0 3 (face tree-sitter-hl-face:type fontified t)) . 4972) (4978 . 4979) 4972) nil (25942 32679 157171 560000) 0 nil])
([nil nil ((#("R" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5128) (undo-tree-id1202 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5129) (undo-tree-id1203 . -1) (#("v" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5130) (undo-tree-id1204 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5131) (undo-tree-id1205 . -1) (#("k" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5132) (undo-tree-id1206 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5133) (undo-tree-id1207 . -1) 5134) nil (25942 32679 157169 306000) 0 nil])
([nil nil ((5128 . 5131)) nil (25942 32679 157167 412000) 0 nil])
([nil nil ((#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4685) (undo-tree-id1199 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4686) (undo-tree-id1200 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4687) (undo-tree-id1201 . -1) 4688) nil (25942 32679 157166 771000) 0 nil])
([nil nil ((4685 . 4688)) nil (25942 32679 157165 569000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4685) (undo-tree-id1196 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4686) (undo-tree-id1197 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4687) (undo-tree-id1198 . -1) 4688) nil (25942 32679 157164 877000) 0 nil])
([nil nil ((4685 . 4688)) nil (25942 32679 157163 605000) 0 nil])
([nil nil ((4636 . 4639)) nil (25942 32679 157163 425000) 0 nil])
([nil nil ((4639 . 4648)) nil (25942 32679 157163 274000) 0 nil])
([nil nil ((4648 . 4667)) nil (25942 32679 157163 124000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4666) (undo-tree-id1195 . -1) 4667) nil (25942 32679 157162 753000) 0 nil])
([nil nil ((4666 . 4668)) nil (25942 32679 157162 152000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4716) (undo-tree-id1191 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4717) (undo-tree-id1192 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4718) (undo-tree-id1193 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -4719) (undo-tree-id1194 . -1) 4720) nil (25942 32679 157161 511000) 0 nil])
([nil nil ((4716 . 4720)) nil (25942 32679 157159 988000) 0 nil])
([nil nil ((#("N" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4723) (undo-tree-id1182 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4724) (undo-tree-id1183 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4725) (undo-tree-id1184 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -4726) (undo-tree-id1185 . -1) (#("F" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4727) (undo-tree-id1186 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4728) (undo-tree-id1187 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4729) (undo-tree-id1188 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4730) (undo-tree-id1189 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -4731) (undo-tree-id1190 . -1) 4732) nil (25942 32679 157158 465000) 0 nil])
([nil nil ((4723 . 4744)) nil (25942 32679 157154 458000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4665) (undo-tree-id1179 . -1) (#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4666) (undo-tree-id1180 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -4667) (undo-tree-id1181 . -1) 4668) nil (25942 32679 157153 536000) 0 nil])
([nil nil ((4665 . 4680)) nil (25942 32679 157142 986000) 0 nil])
([nil nil ((5326 . 5329) (t 25942 32679 265415 362000)) nil (25942 32744 525333 852000) 0 nil])
([nil nil ((4202 . 4203) (#("refreshT" 0 8 (face tree-sitter-hl-face:property fontified t)) . 4202) (undo-tree-id1282 . 1) (undo-tree-id1283 . -7) (undo-tree-id1284 . -7) (undo-tree-id1285 . -7) (undo-tree-id1286 . -7) (undo-tree-id1287 . -7) (undo-tree-id1288 . -7) (undo-tree-id1289 . -7) (undo-tree-id1290 . -6) (undo-tree-id1291 . -6) (undo-tree-id1292 . -6) (undo-tree-id1293 . -6) (undo-tree-id1294 . -6) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) (undo-tree-id1298 . -6) (undo-tree-id1299 . -6) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) 4208 (4622 . 4623) (#("refreshT" 0 8 (face tree-sitter-hl-face:property fontified t)) . 4622) (5232 . 5233) (#("refreshT" 0 8 (face tree-sitter-hl-face:property fontified t)) . 5232)) nil (25942 32744 525330 836000) 0 nil])
([nil nil ((5308 . 5318) (t 25942 32744 535236 998000)) nil (25942 32818 425970 132000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5314) (undo-tree-id1364 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5315) (undo-tree-id1365 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5316) (undo-tree-id1366 . -1) (#("A" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5317) (undo-tree-id1367 . -1) 5318) nil (25942 32818 425969 211000) 0 nil])
([nil nil ((5314 . 5331)) nil (25942 32818 425967 538000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5308) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5309) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5310) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5311) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5312) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5313) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) 5314) nil (25942 32818 425966 786000) 0 nil])
([nil nil ((#("N" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5308) (undo-tree-id1351 . -1) 5309) nil (25942 32818 425961 957000) 0 nil])
([nil nil ((5308 . 5309)) nil (25942 32818 425961 316000) 0 nil])
([nil nil ((5325 . 5332)) nil (25942 32818 425960 835000) 0 nil])
([nil nil ((apply yas--snippet-revive 5329 5347 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (5329 . 5347) (#("TokenOperationType" 0 18 (fontified nil)) . 5329) (5329 . 5347) (#("Tok" 0 3 (fontified nil)) . 5329) (5329 . 5332) (#("TokenOperationType" 0 18 (fontified nil)) . -5329) (5329 . 5347) (#("Tok" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5329) (undo-tree-id1349 . -3) (undo-tree-id1350 . -3) 5332) nil (25942 32818 425960 44000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5348) (5348 . 5349) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5348) (5348 . 5349) (5347 . 5349)) nil (25942 32818 425958 240000) 0 nil])
([nil nil ((5349 . 5352)) nil (25942 32818 425956 807000) 0 nil])
([nil nil ((5352 . 5355)) nil (25942 32818 425956 286000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5349) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("	" 0 1 (fontified t)) . -5350) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("	" 0 1 (fontified t)) . -5351) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5352) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5353) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5354) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) 5355) nil (25942 32818 425955 295000) 0 nil])
([nil nil ((5305 . 5308)) nil (25942 32818 425900 191000) 0 nil])
([nil nil ((5308 . 5312)) nil (25942 32818 425899 961000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5326 5335 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 5326 5335 nil nil nil nil nil) nil nil)) (5308 . 5336) (#("a.mintAccessToken(${1:id string})" 0 33 (fontified nil)) . 5308) (5308 . 5341) (#("mint" 0 4 (fontified nil)) . 5308) (5308 . 5312) (#("a.mintAccessToken" 0 17 (fontified nil)) . -5308) (5308 . 5325) (#("mint" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5308) (undo-tree-id1335 . -4) (undo-tree-id1336 . -4) 5312) nil (25942 32818 425899 279000) 0 nil])
([nil nil ((apply yas--snippet-revive 5308 5336 #s(yas--snippet nil (#s(yas--field 1 5326 5335 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 5326 5335 nil nil nil nil nil) nil nil))) nil (25942 32818 425897 937000) 0 nil])
([nil nil ((4881 . 4886)) nil (25942 32818 425897 706000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5331) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5332) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#(" " 0 1 (fontified t)) . -5333) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5334) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5335) (undo-tree-id1330 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5336) (undo-tree-id1331 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5337) (undo-tree-id1332 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5338) (undo-tree-id1333 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5339) (undo-tree-id1334 . -1) 5340) nil (25942 32818 425896 93000) 0 nil])
([nil nil ((5331 . 5336)) nil (25942 32818 425889 671000) 0 nil])
([nil nil ((apply yas--snippet-revive 5343 5346 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (5331 . 5338) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (5336 . 5339) (#("ID)" 0 3 (fontified nil)) . 5336) (5336 . 5339) (#("ID" 0 2 (fontified nil)) . -5336) (5336 . 5338)) nil (25942 32818 425889 130000) 0 nil])
([nil nil ((5345 . 5350)) nil (25942 32818 425888 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 5346 5354 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (5346 . 5354) (#("String()" 0 8 (fontified nil)) . 5346) (5346 . 5354) (#("Stri" 0 4 (fontified nil)) . 5346) (5346 . 5350) (#("String" 0 6 (fontified nil)) . -5346) (5346 . 5352) (#("Stri" 0 4 (face tree-sitter-hl-face:property fontified t)) . -5346) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4) 5350) nil (25942 32818 425887 848000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5331) (undo-tree-id1308 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5332) (undo-tree-id1309 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5333) (undo-tree-id1310 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5334) (undo-tree-id1311 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5335) (undo-tree-id1312 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5336) (undo-tree-id1313 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5337) (undo-tree-id1314 . -1) 5338) nil (25942 32818 425885 453000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -5348) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . 1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) 5349) nil (25942 32818 425880 754000) 0 nil])
([nil nil ((5348 . 5351) (t 25942 32818 530215 999000)) nil (25942 32890 625146 40000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5348) (undo-tree-id1391 . -1) (#("	" 0 1 (fontified t)) . -5349) (undo-tree-id1392 . -1) (#("	" 0 1 (fontified t)) . -5350) (undo-tree-id1393 . -1) 5351) nil (25942 32890 625145 409000) 0 nil])
([nil nil (5347) nil (25942 32890 625144 307000) 0 nil])
([nil nil ((5313 . 5327)) nil (25942 32890 625144 67000) 0 nil])
([nil nil ((5320 . 5321)) nil (25942 32890 625143 826000) 0 nil])
([nil nil ((5407 . 5410) (5408 . 5410) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 5407) (5407 . 5410) (5406 . 5408)) nil (25942 32890 625143 405000) 0 nil])
([nil nil ((5410 . 5411)) nil (25942 32890 625142 934000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5410) (undo-tree-id1390 . -1) 5411) nil (25942 32890 625142 173000) 0 nil])
([nil nil ((5410 . 5413)) nil (25942 32890 625141 161000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5417 5423 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 5417 5423 nil nil nil nil nil) nil nil)) (5410 . 5424) (#("token: ${1:string}," 0 19 (fontified nil)) . 5410) (5410 . 5429) (#("Tok" 0 3 (fontified nil)) . 5410) (5410 . 5413) (#("token" 0 5 (fontified nil)) . -5410) (5410 . 5415) (#("Tok" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5410) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) 5413) nil (25942 32890 625140 259000) 0 nil])
([nil nil ((apply yas--snippet-revive 5410 5424 #s(yas--snippet nil (#s(yas--field 1 5417 5423 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 5417 5423 nil nil nil nil nil) nil nil))) nil (25942 32890 625138 476000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5417) (undo-tree-id1382 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5418) (undo-tree-id1383 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5419) (undo-tree-id1384 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5420) (undo-tree-id1385 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5421) (undo-tree-id1386 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5422) (undo-tree-id1387 . -1) 5423) nil (25942 32890 625137 194000) 0 nil])
([nil nil ((5417 . 5422)) nil (25942 32890 625133 998000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -5460) (undo-tree-id1378 . -1) (#("O" 0 1 (fontified t)) . -5461) (undo-tree-id1379 . -1) (#("K" 0 1 (fontified t)) . -5462) (undo-tree-id1380 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5463) (undo-tree-id1381 . -1) 5464) nil (25942 32890 625133 366000) 0 nil])
([nil nil ((5460 . 5463)) nil (25942 32890 625131 864000) 0 nil])
([nil nil ((apply yas--snippet-revive 5460 5477 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (5460 . 5477) (#("newAccessTokenObj" 0 17 (fontified nil)) . 5460) (5460 . 5477) (#("new" 0 3 (fontified nil)) . 5460) (5460 . 5463) (#("newAccessTokenObj" 0 17 (fontified nil)) . -5460) (5460 . 5477) (#("new" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5460) (undo-tree-id1376 . -3) (undo-tree-id1377 . -3) 5463) nil (25942 32890 625131 252000) 0 nil])
([nil nil ((5363 . 5366)) nil (25942 32890 625130 40000) 0 nil])
([nil nil ((5366 . 5373)) nil (25942 32890 625129 890000) 0 nil])
([nil nil ((5373 . 5374)) nil (25942 32890 625129 750000) 0 nil])
([nil nil ((5374 . 5375)) nil (25942 32890 625129 599000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5382) (5382 . 5383) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5382) (5382 . 5383) (5375 . 5383)) nil (25942 32890 625129 149000) 0 nil])
([nil nil ((5383 . 5386) (5384 . 5386) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 5383) (5383 . 5386) (5382 . 5384)) nil (25942 32890 625128 427000) 0 nil])
([nil nil ((5386 . 5389)) nil (25942 32890 625127 866000) 0 nil])
([nil nil ((5389 . 5390)) nil (25942 32890 625127 626000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5389) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) 5390) nil (25942 32890 625127 315000) 0 nil])
([nil nil ((5389 . 5392)) nil (25942 32890 625126 103000) 0 nil])
([nil nil ((5392 . 5395)) nil (25942 32890 625125 782000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5409 5410 nil nil nil t #s(yas--field 2 5412 5415 nil nil nil t #s(yas--field 3 5417 5440 nil nil nil t nil))) #s(yas--field 2 5412 5415 nil nil nil t #s(yas--field 3 5417 5440 nil nil nil t nil)) #s(yas--field 3 5417 5440 nil nil nil t nil)) nil 52 nil #s(yas--field 3 5417 5440 nil nil nil t nil) nil nil)) (5392 . 5453) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5392) (5392 . 5468) (#("Res" 0 3 (fontified nil)) . 5392) (5392 . 5395) (#("RespondWithError" 0 16 (fontified nil)) . -5392) (5392 . 5408) (#("Res" 0 3 (face tree-sitter-hl-face:property fontified t)) . -5392) (undo-tree-id1372 . -3) (undo-tree-id1373 . -3) 5395) nil (25942 32890 625124 971000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 5410) (undo-tree-id1371 . -21) (5409 . 5410)) nil (25942 32890 625123 47000) 0 nil])
([nil nil ((5413 . 5415) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 5413) (undo-tree-id1370 . -8) (5412 . 5413)) nil (25942 32890 625121 184000) 0 nil])
([nil nil ((5418 . 5427) (5417 . 5419) (#("\"" 0 1 (fontified nil)) . -5417) (undo-tree-id1368 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 5418) (undo-tree-id1369 . -10) (5417 . 5418)) nil (25942 32890 625119 210000) 0 nil])
([nil nil ((5427 . 5439)) nil (25942 32890 625111 856000) 0 nil])
([nil nil ((apply yas--snippet-revive 5392 5441 #s(yas--snippet nil (#s(yas--field 1 5409 5410 nil nil nil t #s(yas--field 2 5412 5415 nil nil nil t #s(yas--field 3 5417 5440 nil nil nil t nil))) #s(yas--field 2 5412 5415 nil nil nil t #s(yas--field 3 5417 5440 nil nil nil t nil)) #s(yas--field 3 5417 5440 nil nil nil t nil)) nil 52 nil #s(yas--field 3 5417 5440 nil nil nil t nil) nil nil))) nil (25942 32890 625108 760000) 0 nil])
([nil nil ((5162 . 5163) (t 25942 32890 731336 447000)) nil (25942 32911 985957 398000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -5162) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) 5163) nil (25942 32911 985956 546000) 0 nil])
([nil nil ((5162 . 5165)) nil (25942 32911 985945 786000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1955) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1956) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1957) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1958) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1959) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1960) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1961) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1962) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (#("." 0 1 (fontified t)) . -1963) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#("N" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1964) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1965) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (#("w" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1966) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1967) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1968) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (#("." 0 1 (fontified t)) . -1969) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1970) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1971) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1972) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1973) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . 1) (undo-tree-id1905 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1974) (undo-tree-id1906 . -1) (undo-tree-id1907 . 1) (undo-tree-id1908 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1975) (undo-tree-id1909 . -1) (undo-tree-id1910 . 1) (undo-tree-id1911 . -1) 1976 (t 25942 32912 2393 198000)) nil (25942 32933 698805 686000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1934) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1935) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1936) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1937) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1938) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1939) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1940) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("." 0 1 (fontified t)) . -1941) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1942) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#("x" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1943) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1944) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1945) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1946) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1947) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1948) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("A" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1949) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1950) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (#("." 0 1 (fontified t)) . -1951) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1952) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1953) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("f" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1954) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) 1955) nil (25942 32933 698781 310000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1931) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#("|" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1932) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("|" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1933) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) 1934) nil (25942 32933 698450 618000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5158 . 5159) (5156 . 5293) (#("s" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . 5156) (undo-tree-id1966 . -1) 5157 (t 25942 32933 712459 684000)) nil (25942 32976 144531 174000) 0 nil])
([nil nil ((#("_" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5117) (undo-tree-id1965 . -1) 5118) nil (25942 32976 144530 452000) 0 nil])
([nil nil ((5117 . 5122)) nil (25942 32976 144529 871000) 0 nil])
([nil nil ((5159 . 5160) (#(")" 0 1 (fontified nil)) . -5159) (5159 . 5160)) nil (25942 32976 144529 581000) 0 nil])
([nil nil ((5159 . 5160)) nil (25942 32976 144529 80000) 0 nil])
([nil nil ((5160 . 5162)) nil (25942 32976 144528 489000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5160) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5161) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) 5162) nil (25942 32976 144527 577000) 0 nil])
([nil nil ((5160 . 5163)) nil (25942 32976 144519 582000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5169 5190 nil nil nil t nil)) nil 53 nil #s(yas--field 1 5169 5190 nil nil nil t nil) nil nil)) (5160 . 5182) (#("sha3Hash(${1:input string})" 0 27 (fontified nil)) . 5160) (5160 . 5187) (#("sha" 0 3 (fontified nil)) . 5160) (5160 . 5163) (#("sha3Hash" 0 8 (fontified nil)) . -5160) (5160 . 5168) (#("sha" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5160) (undo-tree-id1932 . -3) (undo-tree-id1933 . -3) (undo-tree-id1934 . -1) (undo-tree-id1935 . -2) (undo-tree-id1936 . -3) (undo-tree-id1937 . -3) (undo-tree-id1938 . -3) (undo-tree-id1939 . -3) (undo-tree-id1940 . -3) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) (undo-tree-id1943 . -3) 5163) nil (25942 32976 144518 169000) 0 nil])
([nil nil ((5170 . 5174) (#("input string" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 12 (face tree-sitter-hl-face:variable fontified nil)) . 5170) (undo-tree-id1929 . -12) (undo-tree-id1930 . -6) (undo-tree-id1931 . -7) (5169 . 5170)) nil (25942 32976 144511 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 5169 5190 #s(yas--snippet nil nil nil 54 nil nil #s(yas--field 1 5169 5190 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil #s(yas--field 1 5169 5190 nil nil nil t nil) nil)) (5169 . 5190) (#("refreshTokenObj.token" 0 21 (fontified nil)) . 5169) (undo-tree-id1912 . -21) (5169 . 5190) (#("refre" 0 5 (fontified nil)) . 5169) (undo-tree-id1913 . -5) (5169 . 5174) (#("refreshTokenObj.token" 0 21 (fontified nil)) . -5169) (undo-tree-id1914 . -21) (5169 . 5190) (#("refre" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -5169) (undo-tree-id1915 . -5) (undo-tree-id1916 . -5) (undo-tree-id1917 . -5) (undo-tree-id1918 . -4) (undo-tree-id1919 . -5) (undo-tree-id1920 . -5) (undo-tree-id1921 . -5) (undo-tree-id1922 . -5) (undo-tree-id1923 . -5) (undo-tree-id1924 . -5) (undo-tree-id1925 . -5) (undo-tree-id1926 . -5) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) 5174) nil (25942 32976 144509 112000) 0 nil])
([nil nil ((apply yas--snippet-revive 5160 5191 #s(yas--snippet nil (#s(yas--field 1 5169 5190 nil nil nil t nil)) nil 53 nil #s(yas--field 1 5169 5190 nil nil nil t nil) nil nil))) nil (25942 32976 144492 821000) 0 nil])
([nil nil ((#("ha3Hash(refreshTokenObj.token))
" 0 7 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 23 (face tree-sitter-hl-face:variable fontified t) 23 24 (fontified t) 24 25 (face tree-sitter-hl-face:property fontified t) 25 29 (face tree-sitter-hl-face:property fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 31 (face (rainbow-delimiters-mismatched-face) fontified t) 31 32 (fontified t)) . 5330) (undo-tree-id2010 . -31) (undo-tree-id2011 . 32) (undo-tree-id2012 . -30) (undo-tree-id2013 . 2) (undo-tree-id2014 . -31) 5360 (t 25942 32976 155612 27000)) nil (25942 33466 924041 268000) 0 nil])
([nil nil ((5199 . 5200)) nil (25942 33466 924038 924000) 0 nil])
([nil nil ((563 . 565)) nil (25942 33466 924038 583000) 0 nil])
([nil nil ((565 . 570)) nil (25942 33466 924038 162000) 0 nil])
([nil nil ((#("	hash.
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 564) (undo-tree-id2005 . -6) (undo-tree-id2006 . 1) (undo-tree-id2007 . -6) (undo-tree-id2008 . -5) (undo-tree-id2009 . 1) 569) nil (25942 33466 924037 611000) 0 nil])
([nil nil ((#("func sha3Hash(input string) string {

	// Create a new hash & write input string
	hash := sha3.New256()
	_, _ = hash.Write([]byte(input))

	// Get the resulting encoded byte slice
	sha3 := hash.Sum(nil)

	// Convert the encoded byte slice to a string
	return fmt.Sprintf(\"%x\", sha3)
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 13 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 19 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 19 20 (fontified t) 20 26 (face tree-sitter-hl-face:type fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (fontified t) 28 34 (face tree-sitter-hl-face:type fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 39 (fontified t) 39 80 (face tree-sitter-hl-face:comment fontified t) 80 82 (fontified t) 82 86 (face tree-sitter-hl-face:variable fontified t) 86 87 (fontified t) 87 89 (face tree-sitter-hl-face:operator fontified t) 89 90 (fontified t) 90 94 (face tree-sitter-hl-face:variable fontified t) 94 95 (fontified t) 95 101 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 101 102 (face (rainbow-delimiters-depth-2-face) fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (face tree-sitter-hl-face:variable fontified t) 106 108 (fontified t) 108 109 (face tree-sitter-hl-face:variable fontified t) 109 110 (fontified t) 110 111 (face tree-sitter-hl-face:operator fontified t) 111 112 (fontified t) 112 116 (face tree-sitter-hl-face:variable fontified t) 116 117 (fontified t) 117 122 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 122 123 (face (rainbow-delimiters-depth-2-face) fontified t) 123 124 (face (rainbow-delimiters-depth-3-face) fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t) 125 129 (face tree-sitter-hl-face:type fontified t) 129 130 (face (rainbow-delimiters-depth-3-face) fontified t) 130 135 (face tree-sitter-hl-face:variable fontified t) 135 136 (face (rainbow-delimiters-depth-3-face) fontified t) 136 137 (face (rainbow-delimiters-depth-2-face) fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 140 (fontified t) 140 179 (face tree-sitter-hl-face:comment fontified t) 179 181 (fontified t) 181 185 (face tree-sitter-hl-face:variable fontified t) 185 186 (fontified t) 186 188 (face tree-sitter-hl-face:operator fontified t) 188 189 (fontified t) 189 193 (face tree-sitter-hl-face:variable fontified t) 193 194 (fontified t) 194 197 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 197 198 (face (rainbow-delimiters-depth-2-face) fontified t) 198 201 (face tree-sitter-hl-face:constant\.builtin fontified t) 201 202 (face (rainbow-delimiters-depth-2-face) fontified t) 202 205 (fontified t) 205 250 (face tree-sitter-hl-face:comment fontified t) 250 252 (fontified t) 252 258 (face tree-sitter-hl-face:keyword fontified t) 258 259 (fontified t) 259 262 (face tree-sitter-hl-face:variable fontified t) 262 263 (fontified t) 263 270 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 270 271 (face (rainbow-delimiters-depth-2-face) fontified t) 271 275 (face tree-sitter-hl-face:string fontified t) 275 277 (fontified t) 277 281 (face tree-sitter-hl-face:variable fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 283 (fontified t) 283 284 (face (rainbow-delimiters-depth-1-face) fontified t) 284 285 (fontified t)) . 426) (undo-tree-id1996 . -283) (undo-tree-id1997 . -284) (undo-tree-id1998 . 147) (undo-tree-id1999 . -283) (undo-tree-id2000 . -138) (undo-tree-id2001 . -137) (undo-tree-id2002 . 147) (undo-tree-id2003 . -5) (undo-tree-id2004 . -283)) nil (25942 33466 924035 247000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 426) (undo-tree-id1993 . 1) (undo-tree-id1994 . 1) (undo-tree-id1995 . 1)) nil (25942 33466 924030 628000) 0 nil])
([nil nil ((#("	\"golang.org/x/crypto/sha3\"
" 0 1 (fontified t) 1 27 (face tree-sitter-hl-face:string fontified t) 27 28 (fontified t)) . 395) (undo-tree-id1967 . -27) (undo-tree-id1968 . -27) (undo-tree-id1969 . -27) (undo-tree-id1970 . -27) (undo-tree-id1971 . -27) (undo-tree-id1972 . -1) (undo-tree-id1973 . -27) (undo-tree-id1974 . -27) (undo-tree-id1975 . -26) (undo-tree-id1976 . -27) (undo-tree-id1977 . -27) (undo-tree-id1978 . -27) (undo-tree-id1979 . -27) (undo-tree-id1980 . -27) (undo-tree-id1981 . -27) (undo-tree-id1982 . -27) (undo-tree-id1983 . -27) (undo-tree-id1984 . 26) (undo-tree-id1985 . -26) (undo-tree-id1986 . -27) (undo-tree-id1987 . -27) (undo-tree-id1988 . -26) (undo-tree-id1989 . -26) (undo-tree-id1990 . -26) (undo-tree-id1991 . -26) (undo-tree-id1992 . -28) 421) nil (25942 33466 924027 72000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3593) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3594) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3595) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (#("3" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3596) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3597) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3598) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3599) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3600) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -3601) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) 3602 (t 25942 33466 935525 868000)) nil (25942 33477 929125 405000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -3604) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . 1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) 3605) nil (25942 33477 929104 165000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4836) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4837) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4838) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (#("3" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4839) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4840) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4841) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4842) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4843) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -4844) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) 4845 (t 25942 33478 38603 982000)) nil (25942 33509 556733 766000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -4858) (undo-tree-id2052 . -1) (undo-tree-id2053 . 1) (undo-tree-id2054 . -1) 4859) nil (25942 33509 556722 505000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4221) (undo-tree-id2126 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4222) (undo-tree-id2127 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4223) (undo-tree-id2128 . -1) (#("3" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4224) (undo-tree-id2129 . -1) (#("H" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4225) (undo-tree-id2130 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4226) (undo-tree-id2131 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4227) (undo-tree-id2132 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4228) (undo-tree-id2133 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -4229) (undo-tree-id2134 . -1) 4230 (t 25942 33509 665699 632000)) nil (25942 33698 818424 992000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -4242) (undo-tree-id2123 . -1) (undo-tree-id2124 . 1) (undo-tree-id2125 . -1) 4243) nil (25942 33698 818421 926000) 0 nil])
([nil nil ((4788 . 4789)) nil (25942 33698 818420 604000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4788) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 4789) nil (25942 33698 818420 133000) 0 nil])
([nil nil ((4788 . 4789)) nil (25942 33698 818419 191000) 0 nil])
([nil nil ((4789 . 4790)) nil (25942 33698 818418 951000) 0 nil])
([nil nil ((4790 . 4791)) nil (25942 33698 818418 700000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4788) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4789) (undo-tree-id2119 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4790) (undo-tree-id2120 . -1) 4791) nil (25942 33698 818418 159000) 0 nil])
([nil nil ((4876 . 4879)) nil (25942 33698 818416 536000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4876) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4877) (undo-tree-id2115 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4878) (undo-tree-id2116 . -1) 4879) nil (25942 33735 885409 38000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4848) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1)) ((4848 . 4849)) (25942 33737 229680 354000) 0 nil])
([nil nil ((#("		if derr != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 6 (face tree-sitter-hl-face:variable fontified t) 6 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 12 (face tree-sitter-hl-face:operator fontified t) 12 13 (fontified t) 13 16 (face tree-sitter-hl-face:constant\.builtin fontified t) 16 17 (fontified t) 17 19 (face tree-sitter-hl-face:operator fontified t) 19 20 (fontified t) 20 21 (face tree-sitter-hl-face:operator fontified t) 21 26 (face tree-sitter-hl-face:variable fontified t) 26 27 (fontified t) 27 32 (face tree-sitter-hl-face:property fontified t) 32 33 (fontified t) 33 35 (face tree-sitter-hl-face:operator fontified t) 35 36 (fontified t) 36 42 (face tree-sitter-hl-face:variable fontified t) 42 43 (fontified t) 43 49 (face tree-sitter-hl-face:property fontified t) 49 50 (fontified t) 50 52 (face tree-sitter-hl-face:operator fontified t) 52 53 (fontified t) 53 70 (face tree-sitter-hl-face:variable fontified t) 70 71 (fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 73 (fontified t) 73 75 (fontified t) 75 76 (fontified t rear-nonsticky t) 76 81 (face tree-sitter-hl-face:variable fontified t) 81 82 (fontified t) 82 98 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 98 99 (face (rainbow-delimiters-depth-4-face) fontified t) 99 100 (face tree-sitter-hl-face:variable fontified t) 100 102 (fontified t) 102 105 (face tree-sitter-hl-face:number fontified t) 105 107 (fontified t) 107 115 (face tree-sitter-hl-face:string fontified t) 115 121 (face tree-sitter-hl-face:string fontified t) 121 122 (face (rainbow-delimiters-depth-4-face) fontified t) 122 123 (fontified t) 123 126 (fontified t) 126 132 (face tree-sitter-hl-face:keyword fontified t) 132 133 (fontified t) 133 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-3-face) fontified t) 136 137 (fontified t)) . 4849) (undo-tree-id2161 . -135) (undo-tree-id2162 . -136) (undo-tree-id2163 . -135) (undo-tree-id2164 . -2) (undo-tree-id2165 . -2) (undo-tree-id2166 . -27) (undo-tree-id2167 . -32) (undo-tree-id2168 . -36) (undo-tree-id2169 . -42) (undo-tree-id2170 . -137) (undo-tree-id2171 . -2) (undo-tree-id2172 . -135) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -137) 4851) nil (25942 33751 72699 715000) 0 nil] [nil nil ((4848 . 4851)) (("
		" . 4848) (undo-tree-id2150 . -3) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1)) (25942 33734 45624 666000) 0 nil])
([nil nil ((4930 . 4932) (#("		" 0 2 (fontified nil)) . 4929) (undo-tree-id2156 . -2) (undo-tree-id2157 . -2) (undo-tree-id2158 . -2) (undo-tree-id2159 . -2) (undo-tree-id2160 . -2) (4928 . 4932)) nil (25942 33751 72692 782000) 0 nil])
([nil nil ((1350 . 1351)) ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . 1350) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1)) (25942 33732 633229 937000) 0 nil])
([nil nil ((4930 . 4932) (#("		" 0 2 (fontified nil)) . 4929) (4929 . 4931) (4929 . 4930)) nil (25942 33751 72681 722000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1350) (undo-tree-id2110 . -1) 1351) ((1350 . 1351)) (25942 33732 402151 589000) 0 nil])
([nil nil ((1106 . 1108) (t 25942 33751 181142 500000)) nil (25942 33896 551782 252000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4853 . 4854) (#("
" 0 1 (fontified nil)) . -5065) (4851 . 5066) 4850) ((#("
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (rear-nonsticky nil fontified nil) 3 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 12 (face tree-sitter-hl-face:operator fontified nil) 12 17 (fontified nil) 17 33 (face tree-sitter-hl-face:type fontified nil) 33 34 (face (rainbow-delimiters-depth-3-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 36 (fontified nil) 36 38 (fontified t) 38 43 (face tree-sitter-hl-face:variable fontified t) 43 45 (fontified t) 45 48 (face tree-sitter-hl-face:variable fontified t) 48 49 (fontified t) 49 51 (face tree-sitter-hl-face:operator fontified t) 51 52 (fontified t) 52 55 (face tree-sitter-hl-face:variable fontified t) 55 56 (fontified t) 56 71 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 80 (face tree-sitter-hl-face:variable fontified t) 80 82 (fontified t) 82 83 (face tree-sitter-hl-face:operator fontified t) 83 89 (face tree-sitter-hl-face:variable fontified t) 89 91 (fontified t) 91 95 (face tree-sitter-hl-face:keyword fontified t) 95 96 (face (rainbow-delimiters-depth-4-face) fontified t) 96 101 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 101 102 (fontified t) 102 103 (face tree-sitter-hl-face:operator fontified t) 103 107 (fontified t) 107 112 (face tree-sitter-hl-face:type fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-4-face) fontified t) 115 124 (face tree-sitter-hl-face:keyword fontified t) 124 125 (face (rainbow-delimiters-depth-5-face) fontified t) 125 126 (face (rainbow-delimiters-depth-5-face) fontified t) 126 128 (fontified t) 128 133 (face tree-sitter-hl-face:type fontified t) 133 134 (face (rainbow-delimiters-depth-4-face) fontified t) 134 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-4-face) fontified t) 136 140 (fontified t) 140 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 152 (face tree-sitter-hl-face:operator fontified t) 152 153 (fontified t) 153 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 162 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 162 163 (face (rainbow-delimiters-depth-5-face) fontified t) 163 175 (face tree-sitter-hl-face:string fontified t) 175 176 (face (rainbow-delimiters-depth-5-face) fontified t) 176 180 (fontified t) 180 186 (face tree-sitter-hl-face:keyword fontified t) 186 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-5-face) fontified t) 188 189 (face (rainbow-delimiters-depth-5-face) fontified t) 189 193 (face tree-sitter-hl-face:type fontified t) 193 194 (face (rainbow-delimiters-depth-5-face) fontified t) 194 203 (face tree-sitter-hl-face:variable fontified t) 203 204 (face (rainbow-delimiters-depth-5-face) fontified t) 204 206 (fontified t) 206 209 (face tree-sitter-hl-face:constant\.builtin fontified t) 209 210 (fontified t) 210 212 (fontified nil) 212 213 (face (rainbow-delimiters-depth-4-face) fontified nil) 213 214 (face (rainbow-delimiters-depth-3-face) fontified nil) 214 215 (fontified nil)) . 4851) (5065 . 5066) (nil rear-nonsticky t 4853 . 4854)) (25942 33731 807231 417000) 0 nil])
([nil nil ((1108 . 1119)) nil (25942 33896 551782 42000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 4849) (undo-tree-id2104 . -2) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -1) 4850) ((4849 . 4852)) (25942 33731 776354 650000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1116) (undo-tree-id2307 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1117) (undo-tree-id2308 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1118) (undo-tree-id2309 . -1) 1119) nil (25942 33896 551781 561000) 0 nil])
([nil nil ((4788 . 4794)) ((#("String" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (face tree-sitter-hl-face:variable fontified t)) . 4788) (undo-tree-id2145 . -6) (undo-tree-id2146 . -6)) (25942 33731 747658 287000) 0 nil])
([nil nil ((1116 . 1120)) nil (25942 33896 551780 419000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4783) (undo-tree-id2093 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4784) (undo-tree-id2094 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4785) (undo-tree-id2095 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4786) (undo-tree-id2096 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4787) (undo-tree-id2097 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4788) (undo-tree-id2098 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4789) (undo-tree-id2099 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4790) (undo-tree-id2100 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4791) (undo-tree-id2101 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4792) (undo-tree-id2102 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4793) (undo-tree-id2103 . -1) 4794) ((4783 . 4794)) (25942 33731 733234 620000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1119) (undo-tree-id2306 . -1) 1120) nil (25942 33896 551779 958000) 0 nil])
([nil nil ((4783 . 4791)) ((#("jwtToken" 0 8 (face tree-sitter-hl-face:variable fontified t)) . 4783)) (25942 33731 732786 232000) 0 nil])
([nil nil ((1119 . 1124)) nil (25942 33896 551779 327000) 0 nil])
([nil nil ((#("		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 11 (face tree-sitter-hl-face:operator fontified t) 11 16 (fontified t) 16 32 (face tree-sitter-hl-face:type fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 35 (fontified t) 35 37 (fontified t) 37 42 (face tree-sitter-hl-face:variable fontified t) 42 44 (fontified t) 44 47 (face tree-sitter-hl-face:variable fontified t) 47 48 (fontified t) 48 50 (face tree-sitter-hl-face:operator fontified t) 50 51 (fontified t) 51 54 (face tree-sitter-hl-face:variable fontified t) 54 55 (fontified t) 55 70 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 79 (face tree-sitter-hl-face:variable fontified t) 79 81 (fontified t) 81 82 (face tree-sitter-hl-face:operator fontified t) 82 88 (face tree-sitter-hl-face:variable fontified t) 88 90 (fontified t) 90 94 (face tree-sitter-hl-face:keyword fontified t) 94 95 (face (rainbow-delimiters-depth-4-face) fontified t) 95 100 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 100 101 (fontified t) 101 102 (face tree-sitter-hl-face:operator fontified t) 102 106 (fontified t) 106 111 (face tree-sitter-hl-face:type fontified t) 111 112 (face (rainbow-delimiters-depth-4-face) fontified t) 112 113 (fontified t) 113 114 (face (rainbow-delimiters-depth-4-face) fontified t) 114 123 (face tree-sitter-hl-face:keyword fontified t) 123 124 (face (rainbow-delimiters-depth-5-face) fontified t) 124 125 (face (rainbow-delimiters-depth-5-face) fontified t) 125 127 (fontified t) 127 132 (face tree-sitter-hl-face:type fontified t) 132 133 (face (rainbow-delimiters-depth-4-face) fontified t) 133 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 139 (fontified t) 139 148 (face tree-sitter-hl-face:variable fontified t) 148 149 (fontified t) 149 151 (face tree-sitter-hl-face:operator fontified t) 151 152 (fontified t) 152 154 (face tree-sitter-hl-face:variable fontified t) 154 155 (fontified t) 155 161 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 161 162 (face (rainbow-delimiters-depth-5-face) fontified t) 162 174 (face tree-sitter-hl-face:string fontified t) 174 175 (face (rainbow-delimiters-depth-5-face) fontified t) 175 179 (fontified t) 179 185 (face tree-sitter-hl-face:keyword fontified t) 185 186 (fontified t) 186 187 (face (rainbow-delimiters-depth-5-face) fontified t) 187 188 (face (rainbow-delimiters-depth-5-face) fontified t) 188 192 (face tree-sitter-hl-face:type fontified t) 192 193 (face (rainbow-delimiters-depth-5-face) fontified t) 193 202 (face tree-sitter-hl-face:variable fontified t) 202 203 (face (rainbow-delimiters-depth-5-face) fontified t) 203 205 (fontified t) 205 208 (face tree-sitter-hl-face:constant\.builtin fontified t) 208 211 (fontified t) 211 212 (face (rainbow-delimiters-depth-4-face) fontified t) 212 213 (face (rainbow-delimiters-depth-3-face) fontified t) 213 214 (fontified t)) . 4852) (undo-tree-id2085 . -213) (undo-tree-id2086 . -213) (undo-tree-id2087 . 203) (undo-tree-id2088 . -10) (undo-tree-id2089 . -213) (undo-tree-id2090 . -213) (undo-tree-id2091 . -10) (undo-tree-id2092 . -213) 5065) ((4852 . 5066)) (25942 33731 732274 937000) 0 nil])
([nil nil ((1124 . 1128)) nil (25942 33896 551779 66000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -5202) (4988 . 5203) 4987) ((#("
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t rear-nonsticky t) 3 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 12 (face tree-sitter-hl-face:operator fontified t) 12 17 (fontified t) 17 33 (face tree-sitter-hl-face:type fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (fontified t) 36 38 (fontified t) 38 43 (face tree-sitter-hl-face:variable fontified t) 43 45 (fontified t) 45 48 (face tree-sitter-hl-face:variable fontified t) 48 49 (fontified t) 49 51 (face tree-sitter-hl-face:operator fontified t) 51 52 (fontified t) 52 55 (face tree-sitter-hl-face:variable fontified t) 55 56 (fontified t) 56 71 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 80 (face tree-sitter-hl-face:variable fontified t) 80 82 (fontified t) 82 83 (face tree-sitter-hl-face:operator fontified t) 83 89 (face tree-sitter-hl-face:variable fontified t) 89 91 (fontified t) 91 95 (face tree-sitter-hl-face:keyword fontified t) 95 96 (face (rainbow-delimiters-depth-4-face) fontified t) 96 101 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 101 102 (fontified t) 102 103 (face tree-sitter-hl-face:operator fontified t) 103 107 (fontified t) 107 112 (face tree-sitter-hl-face:type fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-4-face) fontified t) 115 124 (face tree-sitter-hl-face:keyword fontified t) 124 125 (face (rainbow-delimiters-depth-5-face) fontified t) 125 126 (face (rainbow-delimiters-depth-5-face) fontified t) 126 128 (fontified t) 128 133 (face tree-sitter-hl-face:type fontified t) 133 134 (face (rainbow-delimiters-depth-4-face) fontified t) 134 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-4-face) fontified t) 136 137 (fontified t) 137 140 (fontified t) 140 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 152 (face tree-sitter-hl-face:operator fontified t) 152 153 (fontified t) 153 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 162 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 162 163 (face (rainbow-delimiters-depth-5-face) fontified t) 163 175 (face tree-sitter-hl-face:string fontified t) 175 176 (face (rainbow-delimiters-depth-5-face) fontified t) 176 180 (fontified t) 180 186 (face tree-sitter-hl-face:keyword fontified t) 186 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-5-face) fontified t) 188 189 (face (rainbow-delimiters-depth-5-face) fontified t) 189 193 (face tree-sitter-hl-face:type fontified t) 193 194 (face (rainbow-delimiters-depth-5-face) fontified t) 194 203 (face tree-sitter-hl-face:variable fontified t) 203 204 (face (rainbow-delimiters-depth-5-face) fontified t) 204 206 (fontified t) 206 209 (face tree-sitter-hl-face:constant\.builtin fontified t) 209 210 (fontified t) 210 212 (fontified nil) 212 213 (face (rainbow-delimiters-depth-4-face) fontified nil) 213 214 (face (rainbow-delimiters-depth-3-face) fontified nil) 214 215 (fontified nil)) . 4988) (undo-tree-id2137 . 214) (undo-tree-id2138 . -72) (undo-tree-id2139 . -80) (undo-tree-id2140 . -214) (undo-tree-id2141 . -214) (undo-tree-id2142 . -45) (undo-tree-id2143 . -45) (undo-tree-id2144 . -36) (5202 . 5203)) (25942 33731 626169 832000) 0 nil])
([nil nil ((#("V" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1119) (undo-tree-id2297 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1120) (undo-tree-id2298 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1121) (undo-tree-id2299 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1122) (undo-tree-id2300 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1123) (undo-tree-id2301 . -1) (#("J" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1124) (undo-tree-id2302 . -1) (#("W" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1125) (undo-tree-id2303 . -1) (#("T" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1126) (undo-tree-id2304 . -1) (#(" " 0 1 (fontified t)) . -1127) (undo-tree-id2305 . -1) 1128) nil (25942 33896 551777 824000) 0 nil])
([nil nil ((5033 . 5034)) ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5033)) (25942 33731 125443 223000) 0 nil])
([nil nil ((1119 . 1123)) nil (25942 33896 551773 75000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5209) (undo-tree-id2084 . -1) 5210) ((5209 . 5210)) (25942 33730 881657 897000) 0 nil])
([nil nil ((#("Z" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1122) (undo-tree-id2296 . -1) 1123) nil (25942 33896 551772 695000) 0 nil])
([nil nil ((5209 . 5210)) ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 5209)) (25942 33730 565394 648000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1123) (1123 . 1124) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1123) (1123 . 1124) (1122 . 1124)) nil (25942 33896 551771 873000) 0 nil])
([nil nil ((#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -5254) (undo-tree-id2083 . -1) 5255) ((5254 . 5255)) (25942 33730 253647 294000) 0 nil])
([nil nil ((1123 . 1127)) nil (25942 33896 551771 532000) 0 nil])
([nil nil ((5254 . 5255)) ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . 5254)) (25942 33729 943122 678000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1126) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) 1127) nil (25942 33896 551771 242000) 0 nil])
([nil nil ((#("N" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5258) (undo-tree-id2074 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5259) (undo-tree-id2075 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5260) (undo-tree-id2076 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -5261) (undo-tree-id2077 . -1) (#("F" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5262) (undo-tree-id2078 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5263) (undo-tree-id2079 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5264) (undo-tree-id2080 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5265) (undo-tree-id2081 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5266) (undo-tree-id2082 . -1) 5267) ((5258 . 5267)) (25942 33729 633572 761000) 0 nil])
([nil nil ((1126 . 1139)) nil (25942 33896 551770 450000) 0 nil])
([nil nil ((5258 . 5265)) ((#("Unauthr" 0 6 (face tree-sitter-hl-face:string fontified t) 6 7 (face tree-sitter-hl-face:string fontified t)) . 5258) (undo-tree-id2135 . -7) (undo-tree-id2136 . -7)) (25942 33729 325471 641000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1142) (1142 . 1143) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1142) (1142 . 1143) (1140 . 1143)) nil (25942 33896 551770 150000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5264) (undo-tree-id2073 . -1) 5265) ((5264 . 5265)) (25942 33729 13570 380000) 0 nil])
([nil nil ((1142 . 1145)) nil (25942 33896 551769 809000) 0 nil])
([nil nil ((5264 . 5270)) ((#("orized" 0 6 (face tree-sitter-hl-face:string fontified t)) . 5264) (t 25942 33698 924734 945000)) (25942 33698 818380 238000) 0 nil])
([nil nil ((apply yas--snippet-revive 1142 1151 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (1142 . 1151) (#("jwt.Token" 0 9 (fontified nil)) . 1142) (1142 . 1151) (#("JWT" 0 3 (fontified nil)) . 1142) (1142 . 1145) (#("jwt.Token" 0 9 (fontified nil)) . -1142) (1142 . 1151) (#("JWT" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1142) (undo-tree-id2292 . -3) (undo-tree-id2293 . -3) 1145) nil (25942 33896 551769 128000) 0 nil])
nil
([nil nil ((1151 . 1156)) nil (25942 33896 551767 885000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1159) (1159 . 1160) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1159) (1159 . 1160) (1157 . 1160)) nil (25942 33896 551767 525000) 0 nil])
([nil nil ((1160 . 1161) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1160) (1160 . 1161) (1159 . 1161)) nil (25942 33896 551766 964000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1163 . 1164) (#("
" 0 1 (fontified nil)) . -1511) (1161 . 1512) 1160) nil (25942 33896 551766 443000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1160) (undo-tree-id2291 . -1)) nil (25942 33896 551765 862000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1474) (undo-tree-id2268 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1475) (undo-tree-id2269 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1476) (undo-tree-id2270 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1477) (undo-tree-id2271 . -1) (#("," 0 1 (fontified t)) . -1478) (undo-tree-id2272 . -1) (#(" " 0 1 (fontified t)) . -1479) (undo-tree-id2273 . -1) (#("\"" 0 1 (fontified t)) . -1480) (undo-tree-id2274 . -1) (#("U" 0 1 (fontified t)) . -1481) (undo-tree-id2275 . -1) (#("n" 0 1 (fontified t)) . -1482) (undo-tree-id2276 . -1) (#("a" 0 1 (fontified t)) . -1483) (undo-tree-id2277 . -1) (#("u" 0 1 (fontified t)) . -1484) (undo-tree-id2278 . -1) (#("t" 0 1 (fontified t)) . -1485) (undo-tree-id2279 . -1) (#("h" 0 1 (fontified t)) . -1486) (undo-tree-id2280 . -1) (#("o" 0 1 (fontified t)) . -1487) (undo-tree-id2281 . -1) (#("r" 0 1 (fontified t)) . -1488) (undo-tree-id2282 . -1) (#("i" 0 1 (fontified t)) . -1489) (undo-tree-id2283 . -1) (#("z" 0 1 (fontified t)) . -1490) (undo-tree-id2284 . -1) (#("e" 0 1 (fontified t)) . -1491) (undo-tree-id2285 . -1) (#("d" 0 1 (fontified t)) . -1492) (undo-tree-id2286 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1493) (undo-tree-id2287 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1494) (undo-tree-id2288 . -1) (undo-tree-id2289 . 1) (undo-tree-id2290 . -1) 1495) nil (25942 33896 551763 46000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1453) (undo-tree-id2247 . -1) (#("." 0 1 (fontified t)) . -1454) (undo-tree-id2248 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1455) (undo-tree-id2249 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1456) (undo-tree-id2250 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1457) (undo-tree-id2251 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1458) (undo-tree-id2252 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1459) (undo-tree-id2253 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1460) (undo-tree-id2254 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1461) (undo-tree-id2255 . -1) (#("W" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1462) (undo-tree-id2256 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1463) (undo-tree-id2257 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1464) (undo-tree-id2258 . -1) (#("h" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1465) (undo-tree-id2259 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1466) (undo-tree-id2260 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1467) (undo-tree-id2261 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1468) (undo-tree-id2262 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1469) (undo-tree-id2263 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1470) (undo-tree-id2264 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1471) (undo-tree-id2265 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1472) (undo-tree-id2266 . -1) (#("," 0 1 (fontified nil)) . -1473) (undo-tree-id2267 . -1) 1474) nil (25942 33896 551752 126000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1445) (undo-tree-id2239 . -1) (#("	" 0 1 (fontified t)) . -1446) (undo-tree-id2240 . -1) (#("	" 0 1 (fontified t)) . -1447) (undo-tree-id2241 . -1) (#("	" 0 1 (fontified t rear-nonsticky t)) . -1448) (undo-tree-id2242 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1449) (undo-tree-id2243 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1450) (undo-tree-id2244 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1451) (undo-tree-id2245 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1452) (undo-tree-id2246 . -1) 1453) nil (25942 33896 551743 540000) 0 nil])
([nil nil ((1455 . 1460)) nil (25942 33896 551739 753000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1456) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1457) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1458) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (#("." 0 1 (fontified t)) . -1459) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) 1460) nil (25942 33896 551738 971000) 0 nil])
([nil nil ((1456 . 1462)) nil (25942 33896 551736 156000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1461) (undo-tree-id2230 . -1) 1462) nil (25942 33896 551735 876000) 0 nil])
([nil nil ((1461 . 1472)) nil (25942 33896 551735 254000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1463) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1464) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1465) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1466) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1467) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (#("." 0 1 (fontified t)) . -1468) (undo-tree-id2226 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1469) (undo-tree-id2227 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1470) (undo-tree-id2228 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1471) (undo-tree-id2229 . -1) 1472) nil (25942 33896 551733 882000) 0 nil])
([nil nil ((1463 . 1469)) nil (25942 33896 551727 420000) 0 nil])
([nil nil ((apply yas--snippet-revive 1469 1476 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1469 . 1476) (#("Error()" 0 7 (fontified nil)) . 1469) (1469 . 1476) (#("Error" 0 5 (fontified nil)) . -1469) (1469 . 1474)) nil (25942 33896 551726 909000) 0 nil])
([nil nil ((1475 . 1477) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1475) (1475 . 1476)) nil (25942 33896 551726 338000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1463) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1464) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1465) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1466) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1467) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (#("." 0 1 (fontified t)) . -1468) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1469) (undo-tree-id2205 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1470) (undo-tree-id2206 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1471) (undo-tree-id2207 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1472) (undo-tree-id2208 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1473) (undo-tree-id2209 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1474) (undo-tree-id2210 . -1) (#("\"" 0 1 (fontified t)) . -1475) (undo-tree-id2211 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1476) (undo-tree-id2212 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1477) (undo-tree-id2213 . -1) (undo-tree-id2214 . 1) (undo-tree-id2215 . -1) 1478) nil (25942 33896 551724 635000) 0 nil])
([nil nil ((1463 . 1472)) nil (25942 33896 551716 449000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1474 1489 nil nil nil t #s(yas--field 2 1489 1489 nil nil nil t nil)) #s(yas--field 2 1489 1489 nil nil nil t nil)) nil 57 nil #s(yas--field 2 1489 1489 nil nil nil t nil) nil nil)) (1467 . 1498) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 1467) (1467 . 1508) (#("Error" 0 5 (fontified nil)) . 1467) (1467 . 1472) (#("Errorf" 0 6 (fontified nil)) . -1467) (1467 . 1473) (#("Error" 0 5 (face tree-sitter-hl-face:property fontified t)) . -1467) (undo-tree-id2191 . -5) (undo-tree-id2192 . -5) 1472) nil (25942 33896 551715 888000) 0 nil])
([nil nil ((1475 . 1488) (1474 . 1476) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1474) (#("format string" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 13 (face tree-sitter-hl-face:variable fontified nil)) . 1475) (1474 . 1475)) nil (25942 33896 551714 516000) 0 nil])
([nil nil ((#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 5 (face tree-sitter-hl-face:operator fontified t) 5 8 (face tree-sitter-hl-face:variable fontified t)) . 1491)) nil (25942 33896 551713 944000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1489) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (#(" " 0 1 (fontified t)) . -1490) (undo-tree-id2187 . -1) (undo-tree-id2188 . 1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) 1491) nil (25942 33896 551713 424000) 0 nil])
([nil nil ((apply yas--snippet-revive 1467 1490 #s(yas--snippet nil (#s(yas--field 1 1474 1489 nil nil nil t #s(yas--field 2 1489 1489 nil nil nil t nil)) #s(yas--field 2 1489 1489 nil nil nil t nil)) nil 57 nil #s(yas--field 2 1489 1489 nil nil nil t nil) nil nil))) nil (25942 33896 551710 478000) 0 nil])
([nil nil ((#("f" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1472) (undo-tree-id2183 . -1) 1473) nil (25942 33896 551710 97000) 0 nil])
([nil nil ((1472 . 1473)) nil (25942 33896 551709 396000) 0 nil])
([nil nil ((#("F" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1472) (undo-tree-id2182 . -1) 1473) nil (25942 33896 551708 915000) 0 nil])
([nil nil ((1472 . 1473)) nil (25942 33896 551708 214000) 0 nil])
([nil nil ((1490 . 1492) (#("\"" 0 1 (fontified nil)) . -1490) (1489 . 1491)) nil (25942 33896 551707 833000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1490) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 1491)) nil (25942 33896 551707 132000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1489) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) 1490) nil (25942 33896 551705 619000) 0 nil])
([nil nil ((1142 . 1143)) nil (25942 33896 551697 604000) 0 nil])
([nil nil ((1157 . 1159)) nil (25942 33896 551695 189000) 0 nil])
([nil nil ((#("func handleJWT(jwtString string) (*jwt.Token, error) {
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
		if err != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
			return token, fmt.Errorf(\"Invalid Token\")
		}
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 14 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 24 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 24 25 (fontified t) 25 31 (face tree-sitter-hl-face:type fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (face tree-sitter-hl-face:operator fontified t) 35 39 (fontified t) 39 44 (face tree-sitter-hl-face:type fontified t) 44 46 (fontified t) 46 51 (face tree-sitter-hl-face:type fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (rear-nonsticky t fontified t) 57 63 (face tree-sitter-hl-face:variable fontified t) 63 64 (fontified t) 64 66 (face tree-sitter-hl-face:operator fontified t) 66 71 (fontified t) 71 87 (face tree-sitter-hl-face:type fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (fontified t) 90 92 (fontified t) 92 97 (face tree-sitter-hl-face:variable fontified t) 97 99 (fontified t) 99 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 105 (face tree-sitter-hl-face:operator fontified t) 105 106 (fontified t) 106 109 (face tree-sitter-hl-face:variable fontified t) 109 110 (fontified t) 110 125 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 125 126 (face (rainbow-delimiters-depth-2-face) fontified t) 126 134 (face tree-sitter-hl-face:variable fontified t) 134 136 (fontified t) 136 137 (face tree-sitter-hl-face:operator fontified t) 137 143 (face tree-sitter-hl-face:variable fontified t) 143 145 (fontified t) 145 149 (face tree-sitter-hl-face:keyword fontified t) 149 150 (face (rainbow-delimiters-depth-3-face) fontified t) 150 155 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 155 156 (fontified t) 156 157 (face tree-sitter-hl-face:operator fontified t) 157 161 (fontified t) 161 166 (face tree-sitter-hl-face:type fontified t) 166 167 (face (rainbow-delimiters-depth-3-face) fontified t) 167 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 178 (face tree-sitter-hl-face:keyword fontified t) 178 179 (face (rainbow-delimiters-depth-4-face) fontified t) 179 180 (face (rainbow-delimiters-depth-4-face) fontified t) 180 182 (fontified t) 182 187 (face tree-sitter-hl-face:type fontified t) 187 188 (face (rainbow-delimiters-depth-3-face) fontified t) 188 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-3-face) fontified t) 190 194 (fontified t) 194 203 (face tree-sitter-hl-face:variable fontified t) 203 204 (fontified t) 204 206 (face tree-sitter-hl-face:operator fontified t) 206 207 (fontified t) 207 209 (face tree-sitter-hl-face:variable fontified t) 209 210 (fontified t) 210 216 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 216 217 (face (rainbow-delimiters-depth-4-face) fontified t) 217 229 (face tree-sitter-hl-face:string fontified t) 229 230 (face (rainbow-delimiters-depth-4-face) fontified t) 230 234 (fontified t) 234 240 (face tree-sitter-hl-face:keyword fontified t) 240 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-4-face) fontified t) 242 243 (face (rainbow-delimiters-depth-4-face) fontified t) 243 247 (face tree-sitter-hl-face:type fontified t) 247 248 (face (rainbow-delimiters-depth-4-face) fontified t) 248 257 (face tree-sitter-hl-face:variable fontified t) 257 258 (face (rainbow-delimiters-depth-4-face) fontified t) 258 260 (fontified t) 260 263 (face tree-sitter-hl-face:constant\.builtin fontified t) 263 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-3-face) fontified t) 267 268 (face (rainbow-delimiters-depth-2-face) fontified t) 268 269 (fontified t) 269 271 (fontified t) 271 273 (face tree-sitter-hl-face:keyword fontified t) 273 274 (fontified t) 274 277 (face tree-sitter-hl-face:variable fontified t) 277 278 (fontified t) 278 280 (face tree-sitter-hl-face:operator fontified t) 280 281 (fontified t) 281 284 (face tree-sitter-hl-face:constant\.builtin fontified t) 284 285 (fontified t) 285 287 (face tree-sitter-hl-face:operator fontified t) 287 288 (fontified t) 288 289 (face tree-sitter-hl-face:operator fontified t) 289 294 (face tree-sitter-hl-face:variable fontified t) 294 295 (fontified t) 295 300 (face tree-sitter-hl-face:property fontified t) 300 301 (fontified t) 301 303 (face tree-sitter-hl-face:operator fontified t) 303 304 (fontified t) 304 310 (face tree-sitter-hl-face:variable fontified t) 310 311 (fontified t) 311 317 (face tree-sitter-hl-face:property fontified t) 317 318 (fontified t) 318 320 (face tree-sitter-hl-face:operator fontified t) 320 321 (fontified t) 321 338 (face tree-sitter-hl-face:variable fontified t) 338 339 (fontified t) 339 340 (face (rainbow-delimiters-depth-2-face) fontified t) 340 341 (fontified t) 341 344 (fontified t) 344 350 (face tree-sitter-hl-face:keyword fontified t) 350 351 (fontified t) 351 356 (face tree-sitter-hl-face:variable fontified t) 356 358 (fontified t) 358 361 (face tree-sitter-hl-face:variable fontified t) 361 362 (fontified t) 362 368 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 368 369 (face (rainbow-delimiters-depth-3-face) fontified t) 369 384 (face tree-sitter-hl-face:string fontified t) 384 385 (face (rainbow-delimiters-depth-3-face) fontified t) 385 386 (fontified t) 386 388 (fontified t) 388 389 (face (rainbow-delimiters-depth-2-face) fontified t) 389 390 (fontified t) 390 391 (face (rainbow-delimiters-depth-1-face) fontified t) 391 392 (fontified t)) . 1108) (undo-tree-id2326 . -390) (undo-tree-id2327 . -391) (undo-tree-id2328 . 7) (undo-tree-id2329 . -390) (undo-tree-id2330 . -384) (undo-tree-id2331 . -384) (undo-tree-id2332 . -390) (t 25942 33896 660892 920000)) nil (25942 33941 992419 938000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4932 . 4933) (#("
" 0 1 (fontified nil)) . -5280) (4930 . 5281)) nil (25942 33941 992416 862000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4930)) nil (25942 33941 992416 391000) 0 nil])
([nil nil ((4789 . 4795)) nil (25942 33941 992416 151000) 0 nil])
([nil nil ((4935 . 4938)) nil (25942 33941 992415 900000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5010) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5011) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5012) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5013) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5014) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5015) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5016) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5017) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) 5018) nil (25942 33941 992414 468000) 0 nil])
([nil nil ((5010 . 5021)) nil (25942 33941 992397 556000) 0 nil])
([nil nil ((5021 . 5022) (t 25942 33942 6606 56000)) nil (25942 33954 25195 183000) 0 nil])
([nil nil ((apply yas--snippet-revive 5022 5024 #s(yas--snippet nil nil nil 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 58 nil nil nil nil)) (5022 . 5024) (#("ID" 0 2 (fontified nil)) . 5022) (5022 . 5024) (#("ID" 0 2 (fontified nil)) . -5022) (5022 . 5024)) nil (25942 33954 25191 756000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5294) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (#("	" 0 1 (fontified t)) . -5295) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#("	" 0 1 (fontified t)) . -5296) (undo-tree-id2356 . -1) 5297 (t 25942 33954 132536 569000)) nil (25942 34013 287811 803000) 0 nil])
([nil nil ((5300 . 5309)) nil (25942 34013 287809 469000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5309) (undo-tree-id2349 . -1) 5310) nil (25942 34013 287809 58000) 0 nil])
([nil nil ((5309 . 5310)) nil (25942 34013 287808 557000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5495) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5496) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5497) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5498) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5499) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) 5500) nil (25942 34013 287807 695000) 0 nil])
([nil nil ((5495 . 5498)) nil (25942 34013 287803 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 5495 5509 #s(yas--snippet nil nil nil 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil nil nil)) (5495 . 5509) (#("newAccessToken" 0 14 (fontified nil)) . 5495) (5495 . 5509) (#("new" 0 3 (fontified nil)) . 5495) (5495 . 5498) (#("newAccessToken" 0 14 (fontified nil)) . -5495) (5495 . 5509) (#("new" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5495) (undo-tree-id2333 . -3) (undo-tree-id2334 . -3) (undo-tree-id2335 . -3) (undo-tree-id2336 . -3) (undo-tree-id2337 . -3) (undo-tree-id2338 . -3) 5498) nil (25942 34013 287800 873000) 0 nil])
([nil nil ((5565 . 5568) (t 25942 34013 303237 986000)) nil (25942 34118 805107 457000) 0 nil])
([nil nil ((5568 . 5575)) nil (25942 34118 805107 196000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5574) (undo-tree-id2366 . -1) 5575) nil (25942 34118 805106 875000) 0 nil])
([nil nil ((5437 . 5441)) nil (25942 34118 805106 134000) 0 nil])
([nil nil ((5441 . 5447)) nil (25942 34118 805105 823000) 0 nil])
([nil nil ((7823 . 7825)) nil (25942 34118 805105 653000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7823) (undo-tree-id2365 . -1) 7824) nil (25942 34118 805104 892000) 0 nil])
([nil nil ((7823 . 7826)) nil (25942 34118 805103 960000) 0 nil])
([nil nil ((apply yas--snippet-revive 7823 7845 #s(yas--snippet nil nil nil 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil nil nil)) (7823 . 7845) (#("apiCfg.registerHandler" 0 22 (fontified nil)) . 7823) (7823 . 7845) (#("api" 0 3 (fontified nil)) . 7823) (7823 . 7826) (#("apiCfg.registerHandler" 0 22 (fontified nil)) . -7823) (7823 . 7845) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7823) (undo-tree-id2363 . -3) (undo-tree-id2364 . -3) 7826) nil (25942 34118 805103 38000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7845) (undo-tree-id2362 . -1)) nil (25942 34118 805100 744000) 0 nil])
([nil nil ((#("registerHandler" 0 15 (face tree-sitter-hl-face:property fontified t)) . 7845) (undo-tree-id2357 . -14) (undo-tree-id2358 . 15) (undo-tree-id2359 . 6) (undo-tree-id2360 . -8) (undo-tree-id2361 . -15)) nil (25942 34118 805098 139000) 0 nil])
([nil nil ((7846 . 7848) (t 25942 34118 913854 245000)) nil (25950 25990 560002 714000) 0 nil])
([nil nil ((7848 . 7850)) nil (25950 25990 560001 762000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7846) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("	" 0 1 (fontified t)) . -7847) (undo-tree-id2 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7848) (undo-tree-id3 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7849) (undo-tree-id4 . -1) 7850) nil (25950 25990 559998 135000) 0 nil])
([nil nil ((95 . 5364) (#("strings\"
	\"thisweek/backend/internal/database\"
	\"thisweek/backend/internal/utils\"
	\"time\"

	\"github.com/go-chi/chi/v5\"
	\"github.com/go-chi/chi/v5/middleware\"
	\"github.com/go-chi/cors\"
	\"github.com/golang-jwt/jwt/v5\"
	\"github.com/google/uuid\"
	\"github.com/joho/godotenv\"
	\"golang.org/x/crypto/bcrypt\"
)

func readinessHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithJSON(w, 200, struct {
		Status string `json:\"status\"`
	}{Status: \"OK\"})
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithError(w, 500, \"Internal Server Error\")
}

// If no change will happen on this -> make a DB wrapper out of this
// If a change were to happen break the db related sutff to a different struct
// I don't auth to depend on server api config
type apiConfig struct {
	DB  *database.Queries
	ctx context.Context
}

const AccessTokenIssuer = \"thisweek-access\"
const RefreshTokenIssuer = \"thisweek-refresh\"

type authedHandler func(http.ResponseWriter, *http.Request, database.User)


func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		jwtToken := strings.Split(bearerToken, \" \")[1]
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
		if err != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		userId, perr := uuid.Parse(claims.Subject)
		if perr != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		user, derr := a.DB.GetUserById(a.ctx, userId)
		if derr != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		handler(w, r, user)
	}
}

func (a *apiConfig) registerHandler(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	createUserObject := database.CreateUserParams{}
	if err := decoder.Decode(&createUserObject); err != nil {
		utils.RespondWithError(w, 400, \"Bad request\")
		return
	}
	timestamp := time.Now()
	createUserObject.CreatedAt = timestamp
	createUserObject.UpdatedAt = timestamp
	pass, perr := bcrypt.GenerateFromPassword([]byte(createUserObject.Password), 8)
	createUserObject.Password = fmt.Sprintf(\"%x\", pass)
	if perr != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
	}
	user, err := a.DB.CreateUser(a.ctx, createUserObject)
	// check error if it is a database one (500) or client error (400)
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad request\")
	} else {
		utils.RespondWithJSON(w, 200, user)
	}
}

func (a *apiConfig) mintToken(id string, issuer string, expiresInSeconds int) (string, error) {
	godotenv.Load()
	jwtSecret := os.Getenv(\"JWT_SECRET\")
	claims := jwt.RegisteredClaims{}
	claims.Issuer = issuer
	claims.IssuedAt = jwt.NewNumericDate(time.Now().UTC())
	claims.ExpiresAt = jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))
	claims.Subject = id
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(jwtSecret))
}

func (a *apiConfig) mintRefreshToken(id string) (string, error) {
	tokenString, err := a.mintToken(id, RefreshTokenIssuer, 5184000)
	if err == nil {
		godotenv.Load()
		refreshObject := database.AddRefreshTokenParams{}
		refreshObject.IssuedAt = time.Now()
		refreshObject.ID = tokenString
		a.DB.AddRefreshToken(a.ctx, refreshObject)
	}
	return tokenString, err
}

func (a *apiConfig) mintAccessToken(id string) (string, error) {
	return a.mintToken(id, \"thisweek-access\", 86400)
}

type TokenOperationType struct {
	token string
}

func (a *apiConfig) revokeTokens(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		decoder := json.NewDecoder(r.Body)
		refreshTokenObj := TokenOperationType{}
		if err := decoder.Decode(&refreshTokenObj); err != nil {
			utils.RespondWithError(w, 400, \"Bad request\")
			return
		}
		derr := a.DB.RevokeRefreshToken(a.ctx, refreshTokenObj.token)
		// TODO: handle not found as not an error
		if derr != nil {
			utils.RespondWithError(w, 500, \"Internal Server Error\")
			return
		}
		utils.RespondWithJSON(w, 200, \"OK\")
	}
}

func (a *apiConfig) refreshAccessToken(w http.ResponseWriter, r *http.Request, user database.User) {
	return func(w http.ResponseWriter, r *http.Request) {
		decoder := json.NewDecoder(r.Body)
		refreshTokenObj := TokenOperationType{}
		if err := decoder.Decode(&refreshTokenObj); err != nil {
			utils.RespondWithError(w, 400, \"Bad request\")
			return
		}
		tokenString, derr := a.DB.GetRefreshToken(a.ctx, refreshTokenObj.token)
		if derr != nil {
			utils.RespondWithError(w, 404, \"Not Found\")
			return
		}
		
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(tokenString.ID, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
		if err != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		
		newAccessToken, terr := a.mintAccessToken(user.ID.String())
		if terr != nil {
			utils.RespondWithError(w, 500, \"Internal Server Error\")
			return
		}
		newAccessTokenObj := TokenOperationType{
			token: newAccessToken,
		}
		utils.RespondWithJSON(w, 200, newAccessTokenObj)
		return
	}
}

type AuthenticatedUser struct {
	database.User
	token string
}

type LoginReqUser struct {
	Email    string `json:\"email\"`
	Password string `json:\"password\"`
}

type LoginResUser struct {
	ID           uuid.UUID `json:\"id\"`
	CreatedAt    time.Time `json:\"created_at\"`
	UpdatedAt    time.Time `json:\"updated_at\"`
	Email        string    `json:\"email\"`
	AccessToken  string    `json:\"access_token\"`
	RefreshToken string    `json:\"refresh_token\"`
}

func (a *apiConfig) login(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	userReqParams := LoginReqUser{}
	if err := decoder.Decode(&userReqParams); err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\")
		return
	}
	user, err := a.DB.GetUserByEmail(a.ctx, userReqParams.Email)
	resUser := LoginResUser{}
	token, terr := a.mintAccessToken(user.ID.String())
	if terr != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
		return
	}
	refreshToken, cerr := a.mintRefreshToken(user.ID.String())
	if cerr != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
	}
	resUser.AccessToken = token
	resUser.CreatedAt = user.CreatedAt
	resUser.UpdatedAt = user.UpdatedAt
	resUser.Email = user.Email
	resUser.ID = user.ID
	resUser.RefreshToken = refreshToken
	// Handle user or database error
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
		return
	}
	if bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(userReqParams.Password)) == nil {
		utils.RespondWithJSON(w, 200, user)
	}
	utils.RespondWithJSON(w, 200, user)
}

func main() {
	godotenv.Load()
	port := os.Getenv(\"PORT\")

	dbURL := os.Getenv(\"CONN\")
	db, derr := sql.Open(\"postgres\", dbURL)
	if derr != nil {
		fmt.Println(derr.Error())
		return
	}

	dbQueries := database.New(db)
	apiCfg := apiConfig{}
	apiCfg.DB = dbQueries

	apiCfg.ctx = context.Background()

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins: []string{\"*\"},
		AllowedMethods: []string{\"GET, POST, OPTIONS, PUT, DELETE\"},
		AllowedHeaders: []string{\"*\"},
	}))

	v1Router := chi.NewRouter()
	r.Mount(\"/v1\", v1Router)

	v1Router.Get(\"/readiness\", readinessHandler)
	v1Router.Get(\"/err\", errorHandler)

	v1Router.Post(\"/register\", apiCfg.registerHandler" 0 8 (fontified t face tree-sitter-hl-face:string) 8 10 (fontified t) 10 46 (fontified t face tree-sitter-hl-face:string) 46 48 (fontified t) 48 81 (fontified t face tree-sitter-hl-face:string) 81 83 (fontified t) 83 89 (fontified t face tree-sitter-hl-face:string) 89 92 (fontified t) 92 118 (fontified t face tree-sitter-hl-face:string) 118 120 (fontified t) 120 157 (fontified t face tree-sitter-hl-face:string) 157 159 (fontified t) 159 183 (fontified t face tree-sitter-hl-face:string) 183 185 (fontified t) 185 215 (fontified t face tree-sitter-hl-face:string) 215 217 (fontified t) 217 241 (fontified t face tree-sitter-hl-face:string) 241 243 (fontified t) 243 269 (fontified t face tree-sitter-hl-face:string) 269 271 (fontified t) 271 299 (fontified t face tree-sitter-hl-face:string) 299 300 (fontified t) 300 301 (fontified t face (rainbow-delimiters-depth-1-face)) 301 303 (fontified t) 303 307 (fontified t face tree-sitter-hl-face:keyword) 307 308 (fontified t) 308 324 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 324 325 (fontified t face (rainbow-delimiters-depth-1-face)) 325 326 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 326 332 (fontified t) 332 346 (fontified t face tree-sitter-hl-face:type) 346 348 (fontified t) 348 349 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 349 350 (fontified t) 350 351 (fontified t face tree-sitter-hl-face:operator) 351 356 (fontified t) 356 363 (fontified t face tree-sitter-hl-face:type) 363 364 (fontified t face (rainbow-delimiters-depth-1-face)) 364 365 (fontified t) 365 366 (fontified t face (rainbow-delimiters-depth-1-face)) 366 368 (fontified t) 368 373 (fontified t face tree-sitter-hl-face:variable) 373 374 (fontified t) 374 389 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 389 390 (fontified t face (rainbow-delimiters-depth-2-face)) 390 391 (fontified t face tree-sitter-hl-face:variable) 391 393 (fontified t) 393 396 (fontified t face tree-sitter-hl-face:number) 396 398 (fontified t) 398 404 (fontified t face tree-sitter-hl-face:keyword) 404 405 (fontified t) 405 406 (fontified t face (rainbow-delimiters-depth-3-face)) 406 409 (fontified t) 409 415 (fontified t face tree-sitter-hl-face:property) 415 416 (fontified t) 416 422 (fontified t face tree-sitter-hl-face:type) 422 423 (fontified t) 423 438 (fontified t face tree-sitter-hl-face:string) 438 440 (fontified t) 440 441 (fontified t face (rainbow-delimiters-depth-3-face)) 441 442 (fontified t face (rainbow-delimiters-depth-3-face)) 442 448 (fontified t face tree-sitter-hl-face:variable) 448 450 (fontified t) 450 454 (fontified t face tree-sitter-hl-face:string) 454 455 (fontified t face (rainbow-delimiters-depth-3-face)) 455 456 (fontified t face (rainbow-delimiters-depth-2-face)) 456 457 (fontified t) 457 458 (fontified t face (rainbow-delimiters-depth-1-face)) 458 460 (fontified t) 460 464 (fontified t face tree-sitter-hl-face:keyword) 464 465 (fontified t) 465 477 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 477 478 (fontified t face (rainbow-delimiters-depth-1-face)) 478 479 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 479 485 (fontified t) 485 499 (fontified t face tree-sitter-hl-face:type) 499 501 (fontified t) 501 502 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 502 503 (fontified t) 503 504 (fontified t face tree-sitter-hl-face:operator) 504 509 (fontified t) 509 516 (fontified t face tree-sitter-hl-face:type) 516 517 (fontified t face (rainbow-delimiters-depth-1-face)) 517 518 (fontified t) 518 519 (fontified t face (rainbow-delimiters-depth-1-face)) 519 521 (fontified t) 521 526 (fontified t face tree-sitter-hl-face:variable) 526 527 (fontified t) 527 543 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 543 544 (fontified t face (rainbow-delimiters-depth-2-face)) 544 545 (fontified t face tree-sitter-hl-face:variable) 545 547 (fontified t) 547 550 (fontified t face tree-sitter-hl-face:number) 550 552 (fontified t) 552 575 (fontified t face tree-sitter-hl-face:string) 575 576 (fontified t face (rainbow-delimiters-depth-2-face)) 576 577 (fontified t) 577 578 (fontified t face (rainbow-delimiters-depth-1-face)) 578 580 (fontified t) 580 648 (fontified t face tree-sitter-hl-face:comment) 648 649 (fontified t) 649 727 (fontified t face tree-sitter-hl-face:comment) 727 728 (fontified t) 728 774 (fontified t face tree-sitter-hl-face:comment) 774 775 (fontified t) 775 779 (fontified t face tree-sitter-hl-face:keyword) 779 780 (fontified t) 780 789 (fontified t face tree-sitter-hl-face:type) 789 790 (fontified t) 790 796 (fontified t face tree-sitter-hl-face:keyword) 796 797 (fontified t) 797 798 (fontified t face (rainbow-delimiters-depth-1-face)) 798 800 (fontified t) 800 802 (fontified t face tree-sitter-hl-face:property) 802 804 (fontified t) 804 805 (fontified t face tree-sitter-hl-face:operator) 805 814 (fontified t) 814 821 (fontified t face tree-sitter-hl-face:type) 821 823 (fontified t) 823 826 (fontified t face tree-sitter-hl-face:property) 826 835 (fontified t) 835 842 (fontified t face tree-sitter-hl-face:type) 842 843 (fontified t) 843 844 (fontified t face (rainbow-delimiters-depth-1-face)) 844 846 (fontified t) 846 851 (fontified t face tree-sitter-hl-face:keyword) 851 852 (fontified t) 852 869 (fontified t face tree-sitter-hl-face:variable) 869 870 (fontified t) 870 871 (fontified t face tree-sitter-hl-face:operator) 871 872 (fontified t) 872 889 (fontified t face tree-sitter-hl-face:string) 889 890 (fontified t) 890 895 (fontified t face tree-sitter-hl-face:keyword) 895 896 (fontified t) 896 914 (fontified t face tree-sitter-hl-face:variable) 914 915 (fontified t) 915 916 (fontified t face tree-sitter-hl-face:operator) 916 917 (fontified t) 917 935 (fontified t face tree-sitter-hl-face:string) 935 937 (fontified t) 937 941 (fontified t face tree-sitter-hl-face:keyword) 941 942 (fontified t) 942 955 (fontified t face tree-sitter-hl-face:type) 955 956 (fontified t) 956 960 (fontified t face tree-sitter-hl-face:keyword) 960 961 (fontified t face (rainbow-delimiters-depth-1-face)) 961 966 (fontified t) 966 980 (fontified t face tree-sitter-hl-face:type) 980 982 (fontified t) 982 983 (fontified t face tree-sitter-hl-face:operator) 983 988 (fontified t) 988 995 (fontified t face tree-sitter-hl-face:type) 995 1006 (fontified t) 1006 1010 (fontified t face tree-sitter-hl-face:type) 1010 1011 (fontified t face (rainbow-delimiters-depth-1-face)) 1011 1014 (fontified t) 1014 1018 (fontified t face tree-sitter-hl-face:keyword) 1018 1019 (fontified t) 1019 1020 (fontified t face (rainbow-delimiters-depth-1-face)) 1020 1021 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1021 1022 (fontified t) 1022 1023 (fontified t face tree-sitter-hl-face:operator) 1023 1032 (fontified t face tree-sitter-hl-face:type) 1032 1033 (fontified t face (rainbow-delimiters-depth-1-face)) 1033 1034 (fontified t) 1034 1046 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 1046 1047 (fontified t face (rainbow-delimiters-depth-1-face)) 1047 1054 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1054 1055 (fontified t) 1055 1068 (fontified t face tree-sitter-hl-face:type) 1068 1069 (fontified t face (rainbow-delimiters-depth-1-face)) 1069 1075 (fontified t) 1075 1086 (fontified t face tree-sitter-hl-face:type) 1086 1087 (fontified t) 1087 1088 (fontified t face (rainbow-delimiters-depth-1-face)) 1088 1090 (fontified t) 1090 1096 (fontified t face tree-sitter-hl-face:keyword) 1096 1097 (fontified t) 1097 1101 (fontified t face tree-sitter-hl-face:keyword) 1101 1102 (fontified t face (rainbow-delimiters-depth-2-face)) 1102 1103 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1103 1109 (fontified t) 1109 1123 (fontified t face tree-sitter-hl-face:type) 1123 1125 (fontified t) 1125 1126 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1126 1127 (fontified t) 1127 1128 (fontified t face tree-sitter-hl-face:operator) 1128 1133 (fontified t) 1133 1140 (fontified t face tree-sitter-hl-face:type) 1140 1141 (fontified t face (rainbow-delimiters-depth-2-face)) 1141 1142 (fontified t) 1142 1143 (fontified t face (rainbow-delimiters-depth-2-face)) 1143 1146 (fontified t) 1146 1157 (fontified t face tree-sitter-hl-face:variable) 1157 1158 (fontified t) 1158 1160 (fontified t face tree-sitter-hl-face:operator) 1160 1161 (fontified t) 1161 1162 (fontified t face tree-sitter-hl-face:variable) 1162 1163 (fontified t) 1163 1169 (fontified t face tree-sitter-hl-face:property) 1169 1170 (fontified t) 1170 1173 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1173 1174 (fontified t face (rainbow-delimiters-depth-3-face)) 1174 1189 (fontified t face tree-sitter-hl-face:string) 1189 1190 (fontified t face (rainbow-delimiters-depth-3-face)) 1190 1193 (fontified t) 1193 1201 (fontified t face tree-sitter-hl-face:variable) 1201 1202 (fontified t) 1202 1204 (fontified t face tree-sitter-hl-face:operator) 1204 1205 (fontified t) 1205 1212 (fontified t face tree-sitter-hl-face:variable) 1212 1213 (fontified t) 1213 1218 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1218 1219 (fontified t face (rainbow-delimiters-depth-3-face)) 1219 1230 (fontified t face tree-sitter-hl-face:variable) 1230 1232 (fontified t) 1232 1235 (fontified t face tree-sitter-hl-face:string) 1235 1236 (fontified t face (rainbow-delimiters-depth-3-face)) 1236 1237 (fontified t face (rainbow-delimiters-depth-3-face)) 1237 1238 (fontified t face tree-sitter-hl-face:number) 1238 1239 (fontified t face (rainbow-delimiters-depth-3-face)) 1239 1242 (fontified t) 1242 1248 (fontified t face tree-sitter-hl-face:variable) 1248 1249 (fontified t) 1249 1251 (fontified t face tree-sitter-hl-face:operator) 1251 1256 (fontified t) 1256 1272 (fontified t face tree-sitter-hl-face:type) 1272 1273 (fontified t face (rainbow-delimiters-depth-3-face)) 1273 1274 (fontified t face (rainbow-delimiters-depth-3-face)) 1274 1277 (fontified t) 1277 1282 (fontified t face tree-sitter-hl-face:variable) 1282 1284 (fontified t) 1284 1287 (fontified t face tree-sitter-hl-face:variable) 1287 1288 (fontified t) 1288 1290 (fontified t face tree-sitter-hl-face:operator) 1290 1291 (fontified t) 1291 1294 (fontified t face tree-sitter-hl-face:variable) 1294 1295 (fontified t) 1295 1310 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1310 1311 (fontified t face (rainbow-delimiters-depth-3-face)) 1311 1319 (fontified t face tree-sitter-hl-face:variable) 1319 1321 (fontified t) 1321 1322 (fontified t face tree-sitter-hl-face:operator) 1322 1328 (fontified t face tree-sitter-hl-face:variable) 1328 1330 (fontified t) 1330 1334 (fontified t face tree-sitter-hl-face:keyword) 1334 1335 (fontified t face (rainbow-delimiters-depth-4-face)) 1335 1340 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1340 1341 (fontified t) 1341 1342 (fontified t face tree-sitter-hl-face:operator) 1342 1346 (fontified t) 1346 1351 (fontified t face tree-sitter-hl-face:type) 1351 1352 (fontified t face (rainbow-delimiters-depth-4-face)) 1352 1353 (fontified t) 1353 1354 (fontified t face (rainbow-delimiters-depth-4-face)) 1354 1363 (fontified t face tree-sitter-hl-face:keyword) 1363 1364 (fontified t face (rainbow-delimiters-depth-5-face)) 1364 1365 (fontified t face (rainbow-delimiters-depth-5-face)) 1365 1367 (fontified t) 1367 1372 (fontified t face tree-sitter-hl-face:type) 1372 1373 (fontified t face (rainbow-delimiters-depth-4-face)) 1373 1374 (fontified t) 1374 1375 (fontified t face (rainbow-delimiters-depth-4-face)) 1375 1379 (fontified t) 1379 1388 (fontified t face tree-sitter-hl-face:variable) 1388 1389 (fontified t) 1389 1391 (fontified t face tree-sitter-hl-face:operator) 1391 1392 (fontified t) 1392 1394 (fontified t face tree-sitter-hl-face:variable) 1394 1395 (fontified t) 1395 1401 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1401 1402 (fontified t face (rainbow-delimiters-depth-5-face)) 1402 1406 (fontified t face tree-sitter-hl-face:string) 1406 1414 (fontified t face tree-sitter-hl-face:string) 1414 1415 (fontified t face (rainbow-delimiters-depth-5-face)) 1415 1419 (fontified t) 1419 1425 (fontified t face tree-sitter-hl-face:keyword) 1425 1426 (fontified t) 1426 1427 (fontified t face (rainbow-delimiters-depth-5-face)) 1427 1428 (fontified t face (rainbow-delimiters-depth-5-face)) 1428 1432 (fontified t face tree-sitter-hl-face:type) 1432 1433 (fontified t face (rainbow-delimiters-depth-5-face)) 1433 1442 (fontified t face tree-sitter-hl-face:variable) 1442 1443 (fontified t face (rainbow-delimiters-depth-5-face)) 1443 1445 (fontified t) 1445 1448 (fontified t face tree-sitter-hl-face:constant\.builtin) 1448 1451 (fontified t) 1451 1452 (fontified t face (rainbow-delimiters-depth-4-face)) 1452 1453 (fontified t face (rainbow-delimiters-depth-3-face)) 1453 1456 (fontified t) 1456 1458 (fontified t face tree-sitter-hl-face:keyword) 1458 1459 (fontified t) 1459 1462 (fontified t face tree-sitter-hl-face:variable) 1462 1463 (fontified t) 1463 1465 (fontified t face tree-sitter-hl-face:operator) 1465 1466 (fontified t) 1466 1469 (fontified t face tree-sitter-hl-face:constant\.builtin) 1469 1470 (fontified t) 1470 1472 (fontified t face tree-sitter-hl-face:operator) 1472 1473 (fontified t) 1473 1474 (fontified t face tree-sitter-hl-face:operator) 1474 1479 (fontified t face tree-sitter-hl-face:variable) 1479 1480 (fontified t) 1480 1485 (fontified t face tree-sitter-hl-face:property) 1485 1486 (fontified t) 1486 1488 (fontified t face tree-sitter-hl-face:operator) 1488 1489 (fontified t) 1489 1495 (fontified t face tree-sitter-hl-face:variable) 1495 1496 (fontified t) 1496 1502 (fontified t face tree-sitter-hl-face:property) 1502 1503 (fontified t) 1503 1505 (fontified t face tree-sitter-hl-face:operator) 1505 1506 (fontified t) 1506 1523 (fontified t face tree-sitter-hl-face:variable) 1523 1524 (fontified t) 1524 1525 (fontified t face (rainbow-delimiters-depth-3-face)) 1525 1529 (fontified t) 1529 1534 (fontified t face tree-sitter-hl-face:variable) 1534 1535 (fontified t) 1535 1551 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1551 1552 (fontified t face (rainbow-delimiters-depth-4-face)) 1552 1553 (fontified t face tree-sitter-hl-face:variable) 1553 1555 (fontified t) 1555 1558 (fontified t face tree-sitter-hl-face:number) 1558 1560 (fontified t) 1560 1574 (fontified t face tree-sitter-hl-face:string) 1574 1575 (fontified t face (rainbow-delimiters-depth-4-face)) 1575 1579 (fontified t) 1579 1585 (fontified t face tree-sitter-hl-face:keyword) 1585 1588 (fontified t) 1588 1589 (fontified t face (rainbow-delimiters-depth-3-face)) 1589 1592 (fontified t) 1592 1598 (fontified t face tree-sitter-hl-face:variable) 1598 1600 (fontified t) 1600 1604 (fontified t face tree-sitter-hl-face:variable) 1604 1605 (fontified t) 1605 1607 (fontified t face tree-sitter-hl-face:operator) 1607 1608 (fontified t) 1608 1612 (fontified t face tree-sitter-hl-face:variable) 1612 1613 (fontified t) 1613 1618 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1618 1619 (fontified t face (rainbow-delimiters-depth-3-face)) 1619 1625 (fontified t face tree-sitter-hl-face:variable) 1625 1626 (fontified t) 1626 1633 (fontified t face tree-sitter-hl-face:property) 1633 1634 (fontified t face (rainbow-delimiters-depth-3-face)) 1634 1637 (fontified t) 1637 1639 (fontified t face tree-sitter-hl-face:keyword) 1639 1640 (fontified t) 1640 1644 (fontified t face tree-sitter-hl-face:variable) 1644 1645 (fontified t) 1645 1647 (fontified t face tree-sitter-hl-face:operator) 1647 1648 (fontified t) 1648 1651 (fontified t face tree-sitter-hl-face:constant\.builtin) 1651 1652 (fontified t) 1652 1653 (fontified t face (rainbow-delimiters-depth-3-face)) 1653 1657 (fontified t) 1657 1662 (fontified t face tree-sitter-hl-face:variable) 1662 1663 (fontified t) 1663 1679 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1679 1680 (fontified t face (rainbow-delimiters-depth-4-face)) 1680 1681 (fontified t face tree-sitter-hl-face:variable) 1681 1683 (fontified t) 1683 1686 (fontified t face tree-sitter-hl-face:number) 1686 1688 (fontified t) 1688 1702 (fontified t face tree-sitter-hl-face:string) 1702 1703 (fontified t face (rainbow-delimiters-depth-4-face)) 1703 1707 (fontified t) 1707 1713 (fontified t face tree-sitter-hl-face:keyword) 1713 1716 (fontified t) 1716 1717 (fontified t face (rainbow-delimiters-depth-3-face)) 1717 1720 (fontified t) 1720 1724 (fontified t face tree-sitter-hl-face:variable) 1724 1726 (fontified t) 1726 1730 (fontified t face tree-sitter-hl-face:variable) 1730 1731 (fontified t) 1731 1733 (fontified t face tree-sitter-hl-face:operator) 1733 1734 (fontified t) 1734 1735 (fontified t face tree-sitter-hl-face:variable) 1735 1736 (fontified t) 1736 1738 (fontified t face tree-sitter-hl-face:property) 1738 1739 (fontified t) 1739 1750 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1750 1751 (fontified t face (rainbow-delimiters-depth-3-face)) 1751 1752 (fontified t face tree-sitter-hl-face:variable) 1752 1753 (fontified t) 1753 1756 (fontified t face tree-sitter-hl-face:property) 1756 1758 (fontified t) 1758 1764 (fontified t face tree-sitter-hl-face:variable) 1764 1765 (fontified t face (rainbow-delimiters-depth-3-face)) 1765 1768 (fontified t) 1768 1770 (fontified t face tree-sitter-hl-face:keyword) 1770 1771 (fontified t) 1771 1775 (fontified t face tree-sitter-hl-face:variable) 1775 1776 (fontified t) 1776 1778 (fontified t face tree-sitter-hl-face:operator) 1778 1779 (fontified t) 1779 1782 (fontified t face tree-sitter-hl-face:constant\.builtin) 1782 1783 (fontified t) 1783 1784 (fontified t face (rainbow-delimiters-depth-3-face)) 1784 1788 (fontified t) 1788 1793 (fontified t face tree-sitter-hl-face:variable) 1793 1794 (fontified t) 1794 1810 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1810 1811 (fontified t face (rainbow-delimiters-depth-4-face)) 1811 1812 (fontified t face tree-sitter-hl-face:variable) 1812 1814 (fontified t) 1814 1817 (fontified t face tree-sitter-hl-face:number) 1817 1819 (fontified t) 1819 1833 (fontified t face tree-sitter-hl-face:string) 1833 1834 (fontified t face (rainbow-delimiters-depth-4-face)) 1834 1838 (fontified t) 1838 1844 (fontified t face tree-sitter-hl-face:keyword) 1844 1847 (fontified t) 1847 1848 (fontified t face (rainbow-delimiters-depth-3-face)) 1848 1851 (fontified t) 1851 1858 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 1858 1859 (fontified t face (rainbow-delimiters-depth-3-face)) 1859 1860 (fontified t face tree-sitter-hl-face:variable) 1860 1862 (fontified t) 1862 1863 (fontified t face tree-sitter-hl-face:variable) 1863 1865 (fontified t) 1865 1869 (fontified t face tree-sitter-hl-face:variable) 1869 1870 (fontified t face (rainbow-delimiters-depth-3-face)) 1870 1872 (fontified t) 1872 1873 (fontified t face (rainbow-delimiters-depth-2-face)) 1873 1874 (fontified t) 1874 1875 (fontified t face (rainbow-delimiters-depth-1-face)) 1875 1877 (fontified t) 1877 1881 (fontified t face tree-sitter-hl-face:keyword) 1881 1882 (fontified t) 1882 1883 (fontified t face (rainbow-delimiters-depth-1-face)) 1883 1884 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1884 1885 (fontified t) 1885 1886 (fontified t face tree-sitter-hl-face:operator) 1886 1895 (fontified t face tree-sitter-hl-face:type) 1895 1896 (fontified t face (rainbow-delimiters-depth-1-face)) 1896 1897 (fontified t) 1897 1912 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 1912 1913 (fontified t face (rainbow-delimiters-depth-1-face)) 1913 1914 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1914 1920 (fontified t) 1920 1934 (fontified t face tree-sitter-hl-face:type) 1934 1936 (fontified t) 1936 1937 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1937 1938 (fontified t) 1938 1939 (fontified t face tree-sitter-hl-face:operator) 1939 1944 (fontified t) 1944 1951 (fontified t face tree-sitter-hl-face:type) 1951 1952 (fontified t face (rainbow-delimiters-depth-1-face)) 1952 1953 (fontified t) 1953 1954 (fontified t face (rainbow-delimiters-depth-1-face)) 1954 1956 (fontified t) 1956 1963 (fontified t face tree-sitter-hl-face:variable) 1963 1964 (fontified t) 1964 1966 (fontified t face tree-sitter-hl-face:operator) 1966 1967 (fontified t) 1967 1971 (fontified t face tree-sitter-hl-face:variable) 1971 1972 (fontified t) 1972 1982 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1982 1983 (fontified t face (rainbow-delimiters-depth-2-face)) 1983 1984 (fontified t face tree-sitter-hl-face:variable) 1984 1985 (fontified t) 1985 1989 (fontified t face tree-sitter-hl-face:property) 1989 1990 (fontified t face (rainbow-delimiters-depth-2-face)) 1990 1992 (fontified t) 1992 2008 (fontified t face tree-sitter-hl-face:variable) 2008 2009 (fontified t) 2009 2011 (fontified t face tree-sitter-hl-face:operator) 2011 2021 (fontified t) 2021 2037 (fontified t face tree-sitter-hl-face:type) 2037 2038 (fontified t face (rainbow-delimiters-depth-2-face)) 2038 2039 (fontified t face (rainbow-delimiters-depth-2-face)) 2039 2041 (fontified t) 2041 2043 (fontified t face tree-sitter-hl-face:keyword) 2043 2044 (fontified t) 2044 2047 (fontified t face tree-sitter-hl-face:variable) 2047 2048 (fontified t) 2048 2050 (fontified t face tree-sitter-hl-face:operator) 2050 2051 (fontified t) 2051 2058 (fontified t face tree-sitter-hl-face:variable) 2058 2059 (fontified t) 2059 2065 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2065 2066 (fontified t face (rainbow-delimiters-depth-2-face)) 2066 2067 (fontified t face tree-sitter-hl-face:operator) 2067 2083 (fontified t face tree-sitter-hl-face:variable) 2083 2084 (fontified t face (rainbow-delimiters-depth-2-face)) 2084 2086 (fontified t) 2086 2089 (fontified t face tree-sitter-hl-face:variable) 2089 2090 (fontified t) 2090 2092 (fontified t face tree-sitter-hl-face:operator) 2092 2093 (fontified t) 2093 2096 (fontified t face tree-sitter-hl-face:constant\.builtin) 2096 2097 (fontified t) 2097 2098 (fontified t face (rainbow-delimiters-depth-2-face)) 2098 2101 (fontified t) 2101 2106 (fontified t face tree-sitter-hl-face:variable) 2106 2107 (fontified t) 2107 2123 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2123 2124 (fontified t face (rainbow-delimiters-depth-3-face)) 2124 2125 (fontified t face tree-sitter-hl-face:variable) 2125 2127 (fontified t) 2127 2130 (fontified t face tree-sitter-hl-face:number) 2130 2132 (fontified t) 2132 2145 (fontified t face tree-sitter-hl-face:string) 2145 2146 (fontified t face (rainbow-delimiters-depth-3-face)) 2146 2149 (fontified t) 2149 2155 (fontified t face tree-sitter-hl-face:keyword) 2155 2157 (fontified t) 2157 2158 (fontified t face (rainbow-delimiters-depth-2-face)) 2158 2160 (fontified t) 2160 2169 (fontified t face tree-sitter-hl-face:variable) 2169 2170 (fontified t) 2170 2172 (fontified t face tree-sitter-hl-face:operator) 2172 2173 (fontified t) 2173 2177 (fontified t face tree-sitter-hl-face:variable) 2177 2178 (fontified t) 2178 2181 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2181 2182 (fontified t face (rainbow-delimiters-depth-2-face)) 2182 2183 (fontified t face (rainbow-delimiters-depth-2-face)) 2183 2185 (fontified t) 2185 2201 (fontified t face tree-sitter-hl-face:variable) 2201 2202 (fontified t) 2202 2211 (fontified t face tree-sitter-hl-face:property) 2211 2212 (fontified t) 2212 2213 (fontified t face tree-sitter-hl-face:operator) 2213 2214 (fontified t) 2214 2223 (fontified t face tree-sitter-hl-face:variable) 2223 2225 (fontified t) 2225 2241 (fontified t face tree-sitter-hl-face:variable) 2241 2242 (fontified t) 2242 2251 (fontified t face tree-sitter-hl-face:property) 2251 2252 (fontified t) 2252 2253 (fontified t face tree-sitter-hl-face:operator) 2253 2254 (fontified t) 2254 2263 (fontified t face tree-sitter-hl-face:variable) 2263 2265 (fontified t) 2265 2269 (fontified t face tree-sitter-hl-face:variable) 2269 2271 (fontified t) 2271 2275 (fontified t face tree-sitter-hl-face:variable) 2275 2276 (fontified t) 2276 2278 (fontified t face tree-sitter-hl-face:operator) 2278 2279 (fontified t) 2279 2285 (fontified t face tree-sitter-hl-face:variable) 2285 2286 (fontified t) 2286 2306 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2306 2307 (fontified t face (rainbow-delimiters-depth-2-face)) 2307 2308 (fontified t face (rainbow-delimiters-depth-3-face)) 2308 2309 (fontified t face (rainbow-delimiters-depth-3-face)) 2309 2313 (fontified t face tree-sitter-hl-face:type) 2313 2314 (fontified t face (rainbow-delimiters-depth-3-face)) 2314 2330 (fontified t face tree-sitter-hl-face:variable) 2330 2331 (fontified t) 2331 2339 (fontified t face tree-sitter-hl-face:property) 2339 2340 (fontified t face (rainbow-delimiters-depth-3-face)) 2340 2342 (fontified t) 2342 2343 (fontified t face tree-sitter-hl-face:number) 2343 2344 (fontified t face (rainbow-delimiters-depth-2-face)) 2344 2346 (fontified t) 2346 2362 (fontified t face tree-sitter-hl-face:variable) 2362 2363 (fontified t) 2363 2371 (fontified t face tree-sitter-hl-face:property) 2371 2372 (fontified t) 2372 2373 (fontified t face tree-sitter-hl-face:operator) 2373 2374 (fontified t) 2374 2377 (fontified t face tree-sitter-hl-face:variable) 2377 2378 (fontified t) 2378 2385 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2385 2386 (fontified t face (rainbow-delimiters-depth-2-face)) 2386 2390 (fontified t face tree-sitter-hl-face:string) 2390 2392 (fontified t) 2392 2396 (fontified t face tree-sitter-hl-face:variable) 2396 2397 (fontified t face (rainbow-delimiters-depth-2-face)) 2397 2399 (fontified t) 2399 2401 (fontified t face tree-sitter-hl-face:keyword) 2401 2402 (fontified t) 2402 2406 (fontified t face tree-sitter-hl-face:variable) 2406 2407 (fontified t) 2407 2409 (fontified t face tree-sitter-hl-face:operator) 2409 2410 (fontified t) 2410 2413 (fontified t face tree-sitter-hl-face:constant\.builtin) 2413 2414 (fontified t) 2414 2415 (fontified t face (rainbow-delimiters-depth-2-face)) 2415 2418 (fontified t) 2418 2423 (fontified t face tree-sitter-hl-face:variable) 2423 2424 (fontified t) 2424 2440 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2440 2441 (fontified t face (rainbow-delimiters-depth-3-face)) 2441 2442 (fontified t face tree-sitter-hl-face:variable) 2442 2444 (fontified t) 2444 2447 (fontified t face tree-sitter-hl-face:number) 2447 2449 (fontified t) 2449 2472 (fontified t face tree-sitter-hl-face:string) 2472 2473 (fontified t face (rainbow-delimiters-depth-3-face)) 2473 2475 (fontified t) 2475 2476 (fontified t face (rainbow-delimiters-depth-2-face)) 2476 2478 (fontified t) 2478 2482 (fontified t face tree-sitter-hl-face:variable) 2482 2484 (fontified t) 2484 2487 (fontified t face tree-sitter-hl-face:variable) 2487 2488 (fontified t) 2488 2490 (fontified t face tree-sitter-hl-face:operator) 2490 2491 (fontified t) 2491 2492 (fontified t face tree-sitter-hl-face:variable) 2492 2493 (fontified t) 2493 2495 (fontified t face tree-sitter-hl-face:property) 2495 2496 (fontified t) 2496 2506 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2506 2507 (fontified t face (rainbow-delimiters-depth-2-face)) 2507 2508 (fontified t face tree-sitter-hl-face:variable) 2508 2509 (fontified t) 2509 2512 (fontified t face tree-sitter-hl-face:property) 2512 2514 (fontified t) 2514 2530 (fontified t face tree-sitter-hl-face:variable) 2530 2531 (fontified t face (rainbow-delimiters-depth-2-face)) 2531 2533 (fontified t) 2533 2599 (fontified t face tree-sitter-hl-face:comment) 2599 2601 (fontified t) 2601 2603 (fontified t face tree-sitter-hl-face:keyword) 2603 2604 (fontified t) 2604 2607 (fontified t face tree-sitter-hl-face:variable) 2607 2608 (fontified t) 2608 2610 (fontified t face tree-sitter-hl-face:operator) 2610 2611 (fontified t) 2611 2614 (fontified t face tree-sitter-hl-face:constant\.builtin) 2614 2615 (fontified t) 2615 2616 (fontified t face (rainbow-delimiters-depth-2-face)) 2616 2619 (fontified t) 2619 2624 (fontified t face tree-sitter-hl-face:variable) 2624 2625 (fontified t) 2625 2641 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2641 2642 (fontified t face (rainbow-delimiters-depth-3-face)) 2642 2643 (fontified t face tree-sitter-hl-face:variable) 2643 2645 (fontified t) 2645 2648 (fontified t face tree-sitter-hl-face:number) 2648 2650 (fontified t) 2650 2663 (fontified t face tree-sitter-hl-face:string) 2663 2664 (fontified t face (rainbow-delimiters-depth-3-face)) 2664 2666 (fontified t) 2666 2667 (fontified t face (rainbow-delimiters-depth-2-face)) 2667 2668 (fontified t) 2668 2672 (fontified t face tree-sitter-hl-face:keyword) 2672 2673 (fontified t) 2673 2674 (fontified t face (rainbow-delimiters-depth-2-face)) 2674 2677 (fontified t) 2677 2682 (fontified t face tree-sitter-hl-face:variable) 2682 2683 (fontified t) 2683 2698 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2698 2699 (fontified t face (rainbow-delimiters-depth-3-face)) 2699 2700 (fontified t face tree-sitter-hl-face:variable) 2700 2702 (fontified t) 2702 2705 (fontified t face tree-sitter-hl-face:number) 2705 2707 (fontified t) 2707 2711 (fontified t face tree-sitter-hl-face:variable) 2711 2712 (fontified t face (rainbow-delimiters-depth-3-face)) 2712 2714 (fontified t) 2714 2715 (fontified t face (rainbow-delimiters-depth-2-face)) 2715 2716 (fontified t) 2716 2717 (fontified t face (rainbow-delimiters-depth-1-face)) 2717 2719 (fontified t) 2719 2723 (fontified t face tree-sitter-hl-face:keyword) 2723 2724 (fontified t) 2724 2725 (fontified t face (rainbow-delimiters-depth-1-face)) 2725 2726 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2726 2727 (fontified t) 2727 2728 (fontified t face tree-sitter-hl-face:operator) 2728 2737 (fontified t face tree-sitter-hl-face:type) 2737 2738 (fontified t face (rainbow-delimiters-depth-1-face)) 2738 2739 (fontified t) 2739 2748 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 2748 2749 (fontified t face (rainbow-delimiters-depth-1-face)) 2749 2751 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2751 2752 (fontified t) 2752 2758 (fontified t face tree-sitter-hl-face:type) 2758 2760 (fontified t) 2760 2766 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2766 2767 (fontified t) 2767 2773 (fontified t face tree-sitter-hl-face:type) 2773 2775 (fontified t) 2775 2791 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2791 2792 (fontified t) 2792 2795 (fontified t face tree-sitter-hl-face:type) 2795 2796 (fontified t face (rainbow-delimiters-depth-1-face)) 2796 2797 (fontified t) 2797 2798 (fontified t face (rainbow-delimiters-depth-1-face)) 2798 2804 (fontified t face tree-sitter-hl-face:type) 2804 2806 (fontified t) 2806 2811 (fontified t face tree-sitter-hl-face:type) 2811 2812 (fontified t face (rainbow-delimiters-depth-1-face)) 2812 2813 (fontified t) 2813 2814 (fontified t face (rainbow-delimiters-depth-1-face)) 2814 2816 (fontified t) 2816 2824 (fontified t face tree-sitter-hl-face:variable) 2824 2825 (fontified t) 2825 2829 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2829 2830 (fontified t face (rainbow-delimiters-depth-2-face)) 2830 2831 (fontified t face (rainbow-delimiters-depth-2-face)) 2831 2833 (fontified t) 2833 2842 (fontified t face tree-sitter-hl-face:variable) 2842 2843 (fontified t) 2843 2845 (fontified t face tree-sitter-hl-face:operator) 2845 2846 (fontified t) 2846 2848 (fontified t face tree-sitter-hl-face:variable) 2848 2849 (fontified t) 2849 2855 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2855 2856 (fontified t face (rainbow-delimiters-depth-2-face)) 2856 2868 (fontified t face tree-sitter-hl-face:string) 2868 2869 (fontified t face (rainbow-delimiters-depth-2-face)) 2869 2871 (fontified t) 2871 2877 (fontified t face tree-sitter-hl-face:variable) 2877 2878 (fontified t) 2878 2880 (fontified t face tree-sitter-hl-face:operator) 2880 2885 (fontified t) 2885 2901 (fontified t face tree-sitter-hl-face:type) 2901 2902 (fontified t face (rainbow-delimiters-depth-2-face)) 2902 2903 (fontified t face (rainbow-delimiters-depth-2-face)) 2903 2905 (fontified t) 2905 2906 (fontified t face tree-sitter-hl-face:variable) 2906 2911 (fontified nil face tree-sitter-hl-face:variable) 2911 2919 (fontified nil) 2919 2920 (fontified nil face tree-sitter-hl-face:operator) 2920 7043 (fontified nil) 7043 7047 (fontified t face tree-sitter-hl-face:keyword) 7047 7048 (fontified t) 7048 7052 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 7052 7053 (fontified t face (rainbow-delimiters-depth-1-face)) 7053 7054 (fontified t face (rainbow-delimiters-depth-1-face)) 7054 7055 (fontified t) 7055 7056 (fontified t face (rainbow-delimiters-depth-1-face)) 7056 7057 (fontified t) 7057 7058 (fontified t) 7058 7066 (fontified t face tree-sitter-hl-face:variable) 7066 7067 (fontified t) 7067 7071 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7071 7072 (fontified t face (rainbow-delimiters-depth-2-face)) 7072 7073 (fontified t face (rainbow-delimiters-depth-2-face)) 7073 7075 (fontified t) 7075 7079 (fontified t face tree-sitter-hl-face:variable) 7079 7080 (fontified t) 7080 7082 (fontified t face tree-sitter-hl-face:operator) 7082 7083 (fontified t) 7083 7085 (fontified t face tree-sitter-hl-face:variable) 7085 7086 (fontified t) 7086 7092 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7092 7093 (fontified t face (rainbow-delimiters-depth-2-face)) 7093 7099 (fontified t face tree-sitter-hl-face:string) 7099 7100 (fontified t face (rainbow-delimiters-depth-2-face)) 7100 7103 (fontified t) 7103 7108 (fontified t face tree-sitter-hl-face:variable) 7108 7109 (fontified t) 7109 7111 (fontified t face tree-sitter-hl-face:operator) 7111 7112 (fontified t) 7112 7114 (fontified t face tree-sitter-hl-face:variable) 7114 7115 (fontified t) 7115 7121 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7121 7122 (fontified t face (rainbow-delimiters-depth-2-face)) 7122 7128 (fontified t face tree-sitter-hl-face:string) 7128 7129 (fontified t face (rainbow-delimiters-depth-2-face)) 7129 7131 (fontified t) 7131 7133 (fontified t face tree-sitter-hl-face:variable) 7133 7135 (fontified t) 7135 7139 (fontified t face tree-sitter-hl-face:variable) 7139 7140 (fontified t) 7140 7142 (fontified t face tree-sitter-hl-face:operator) 7142 7143 (fontified t) 7143 7146 (fontified t face tree-sitter-hl-face:variable) 7146 7147 (fontified t) 7147 7151 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7151 7152 (fontified t face (rainbow-delimiters-depth-2-face)) 7152 7162 (fontified t face tree-sitter-hl-face:string) 7162 7164 (fontified t) 7164 7169 (fontified t face tree-sitter-hl-face:variable) 7169 7170 (fontified t face (rainbow-delimiters-depth-2-face)) 7170 7172 (fontified t) 7172 7174 (fontified t face tree-sitter-hl-face:keyword) 7174 7175 (fontified t) 7175 7179 (fontified t face tree-sitter-hl-face:variable) 7179 7180 (fontified t) 7180 7182 (fontified t face tree-sitter-hl-face:operator) 7182 7183 (fontified t) 7183 7186 (fontified t face tree-sitter-hl-face:constant\.builtin) 7186 7187 (fontified t) 7187 7188 (fontified t face (rainbow-delimiters-depth-2-face)) 7188 7191 (fontified t) 7191 7194 (fontified t face tree-sitter-hl-face:variable) 7194 7195 (fontified t) 7195 7202 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7202 7203 (fontified t face (rainbow-delimiters-depth-3-face)) 7203 7207 (fontified t face tree-sitter-hl-face:variable) 7207 7208 (fontified t) 7208 7213 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7213 7214 (fontified t face (rainbow-delimiters-depth-4-face)) 7214 7215 (fontified t face (rainbow-delimiters-depth-4-face)) 7215 7216 (fontified t face (rainbow-delimiters-depth-3-face)) 7216 7219 (fontified t) 7219 7225 (fontified t face tree-sitter-hl-face:keyword) 7225 7227 (fontified t) 7227 7228 (fontified t face (rainbow-delimiters-depth-2-face)) 7228 7231 (fontified t) 7231 7240 (fontified t face tree-sitter-hl-face:variable) 7240 7241 (fontified t) 7241 7243 (fontified t face tree-sitter-hl-face:operator) 7243 7244 (fontified t) 7244 7252 (fontified t face tree-sitter-hl-face:variable) 7252 7253 (fontified t) 7253 7256 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7256 7257 (fontified t face (rainbow-delimiters-depth-2-face)) 7257 7259 (fontified t face tree-sitter-hl-face:variable) 7259 7260 (fontified t face (rainbow-delimiters-depth-2-face)) 7260 7262 (fontified t) 7262 7268 (fontified t face tree-sitter-hl-face:variable) 7268 7269 (fontified t) 7269 7271 (fontified t face tree-sitter-hl-face:operator) 7271 7272 (fontified t) 7272 7281 (fontified t face tree-sitter-hl-face:type) 7281 7282 (fontified t face (rainbow-delimiters-depth-2-face)) 7282 7283 (fontified t face (rainbow-delimiters-depth-2-face)) 7283 7285 (fontified t) 7285 7291 (fontified t face tree-sitter-hl-face:variable) 7291 7292 (fontified t) 7292 7294 (fontified t face tree-sitter-hl-face:property) 7294 7295 (fontified t) 7295 7296 (fontified t face tree-sitter-hl-face:operator) 7296 7297 (fontified t) 7297 7306 (fontified t face tree-sitter-hl-face:variable) 7306 7309 (fontified t) 7309 7315 (fontified t face tree-sitter-hl-face:variable) 7315 7316 (fontified t) 7316 7319 (fontified t face tree-sitter-hl-face:property) 7319 7320 (fontified t) 7320 7321 (fontified t face tree-sitter-hl-face:operator) 7321 7322 (fontified t) 7322 7329 (fontified t face tree-sitter-hl-face:variable) 7329 7330 (fontified t) 7330 7340 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7340 7341 (fontified t face (rainbow-delimiters-depth-2-face)) 7341 7342 (fontified t face (rainbow-delimiters-depth-2-face)) 7342 7345 (fontified t) 7345 7346 (fontified t face tree-sitter-hl-face:variable) 7346 7347 (fontified t) 7347 7349 (fontified t face tree-sitter-hl-face:operator) 7349 7350 (fontified t) 7350 7353 (fontified t face tree-sitter-hl-face:variable) 7353 7354 (fontified t) 7354 7363 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7363 7364 (fontified t face (rainbow-delimiters-depth-2-face)) 7364 7365 (fontified t face (rainbow-delimiters-depth-2-face)) 7365 7367 (fontified t) 7367 7368 (fontified t face tree-sitter-hl-face:variable) 7368 7369 (fontified t) 7369 7372 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7372 7373 (fontified t face (rainbow-delimiters-depth-2-face)) 7373 7383 (fontified t face tree-sitter-hl-face:variable) 7383 7384 (fontified t) 7384 7390 (fontified t face tree-sitter-hl-face:property) 7390 7391 (fontified t face (rainbow-delimiters-depth-2-face)) 7391 7393 (fontified t) 7393 7394 (fontified t face tree-sitter-hl-face:variable) 7394 7395 (fontified t) 7395 7398 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7398 7399 (fontified t face (rainbow-delimiters-depth-2-face)) 7399 7403 (fontified t face tree-sitter-hl-face:variable) 7403 7404 (fontified t) 7404 7411 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7411 7412 (fontified t face (rainbow-delimiters-depth-3-face)) 7412 7417 (fontified t) 7417 7424 (fontified t face tree-sitter-hl-face:type) 7424 7425 (fontified t face (rainbow-delimiters-depth-4-face)) 7425 7428 (fontified t) 7428 7442 (fontified t face tree-sitter-hl-face:variable) 7442 7444 (fontified t) 7444 7445 (fontified t face (rainbow-delimiters-depth-5-face)) 7445 7446 (fontified t face (rainbow-delimiters-depth-5-face)) 7446 7452 (fontified t face tree-sitter-hl-face:type) 7452 7453 (fontified t face (rainbow-delimiters-depth-5-face)) 7453 7456 (fontified t face tree-sitter-hl-face:string) 7456 7457 (fontified t face (rainbow-delimiters-depth-5-face)) 7457 7461 (fontified t) 7461 7475 (fontified t face tree-sitter-hl-face:variable) 7475 7477 (fontified t) 7477 7478 (fontified t face (rainbow-delimiters-depth-5-face)) 7478 7479 (fontified t face (rainbow-delimiters-depth-5-face)) 7479 7485 (fontified t face tree-sitter-hl-face:type) 7485 7486 (fontified t face (rainbow-delimiters-depth-5-face)) 7486 7519 (fontified t face tree-sitter-hl-face:string) 7519 7520 (fontified t face (rainbow-delimiters-depth-5-face)) 7520 7524 (fontified t) 7524 7538 (fontified t face tree-sitter-hl-face:variable) 7538 7540 (fontified t) 7540 7541 (fontified t face (rainbow-delimiters-depth-5-face)) 7541 7542 (fontified t face (rainbow-delimiters-depth-5-face)) 7542 7548 (fontified t face tree-sitter-hl-face:type) 7548 7549 (fontified t face (rainbow-delimiters-depth-5-face)) 7549 7552 (fontified t face tree-sitter-hl-face:string) 7552 7553 (fontified t face (rainbow-delimiters-depth-5-face)) 7553 7556 (fontified t) 7556 7557 (fontified t face (rainbow-delimiters-depth-4-face)) 7557 7558 (fontified t face (rainbow-delimiters-depth-3-face)) 7558 7559 (fontified t face (rainbow-delimiters-depth-2-face)) 7559 7562 (fontified t) 7562 7570 (fontified t face tree-sitter-hl-face:variable) 7570 7571 (fontified t) 7571 7573 (fontified t face tree-sitter-hl-face:operator) 7573 7574 (fontified t) 7574 7577 (fontified t face tree-sitter-hl-face:variable) 7577 7578 (fontified t) 7578 7587 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7587 7588 (fontified t face (rainbow-delimiters-depth-2-face)) 7588 7589 (fontified t face (rainbow-delimiters-depth-2-face)) 7589 7591 (fontified t) 7591 7592 (fontified t face tree-sitter-hl-face:variable) 7592 7593 (fontified t) 7593 7598 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7598 7599 (fontified t face (rainbow-delimiters-depth-2-face)) 7599 7604 (fontified t face tree-sitter-hl-face:string) 7604 7606 (fontified t) 7606 7614 (fontified t face tree-sitter-hl-face:variable) 7614 7615 (fontified t face (rainbow-delimiters-depth-2-face)) 7615 7618 (fontified t) 7618 7626 (fontified t face tree-sitter-hl-face:variable) 7626 7627 (fontified t) 7627 7630 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7630 7631 (fontified t face (rainbow-delimiters-depth-2-face)) 7631 7643 (fontified t face tree-sitter-hl-face:string) 7643 7645 (fontified t) 7645 7661 (fontified t face tree-sitter-hl-face:variable) 7661 7662 (fontified t face (rainbow-delimiters-depth-2-face)) 7662 7664 (fontified t) 7664 7672 (fontified t face tree-sitter-hl-face:variable) 7672 7673 (fontified t) 7673 7676 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7676 7677 (fontified t face (rainbow-delimiters-depth-2-face)) 7677 7683 (fontified t face tree-sitter-hl-face:string) 7683 7685 (fontified t) 7685 7697 (fontified t face tree-sitter-hl-face:variable) 7697 7698 (fontified t face (rainbow-delimiters-depth-2-face)) 7698 7700 (fontified t) 7700 7701 (fontified t) 7701 7709 (fontified t face tree-sitter-hl-face:variable) 7709 7710 (fontified t) 7710 7714 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7714 7715 (fontified t face (rainbow-delimiters-depth-2-face)) 7715 7726 (fontified t face tree-sitter-hl-face:string) 7726 7728 (fontified t) 7728 7734 (fontified t face tree-sitter-hl-face:variable) 7734 7735 (fontified t) 7735 7750 (fontified t face tree-sitter-hl-face:property)) . 95) (undo-tree-id71 . -7307) (undo-tree-id72 . -7614) (undo-tree-id73 . -7343) (undo-tree-id74 . -7614) (undo-tree-id75 . -7615) (undo-tree-id76 . -7614) (undo-tree-id77 . -7614) 7925 (t 25950 25990 581891 809000)) nil (25950 26771 543766 111000) 0 nil])
([nil nil ((5367 . 5368) (#("	" 0 1 (fontified nil)) . 5366) (undo-tree-id70 . -1) (5365 . 5368) (t 25950 26023 689156 895000)) nil (25950 26771 543763 696000) 0 nil])
([nil nil ((5368 . 5371)) nil (25950 26771 543762 734000) 0 nil])
([nil nil ((apply yas--snippet-revive 5368 5376 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (5368 . 5376) (#("v1Router" 0 8 (fontified nil)) . 5368) (5368 . 5376) (#("v1R" 0 3 (fontified nil)) . 5368) (5368 . 5371) (#("v1Router" 0 8 (fontified nil)) . -5368) (5368 . 5376) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5368) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 5371) nil (25950 26771 543761 803000) 0 nil])
([nil nil ((5382 . 5384) (5381 . 5383) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5381) (5381 . 5382) (5376 . 5382)) nil (25950 26771 543759 358000) 0 nil])
([nil nil ((5384 . 5387)) nil (25950 26771 543758 717000) 0 nil])
([nil nil ((5388 . 5394)) nil (25950 26771 543758 196000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5403 5410 nil nil nil t #s(yas--field 2 5412 5419 nil nil nil t nil)) #s(yas--field 2 5412 5419 nil nil nil t nil)) nil 1 nil #s(yas--field 2 5412 5419 nil nil nil t nil) nil nil)) (5390 . 5444) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 5390) (5390 . 5454) (#("auth" 0 4 (fontified nil)) . 5390) (5390 . 5394) (#("authenticate" 0 12 (fontified nil)) . -5390) (5390 . 5402) (#("auth" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5390) (undo-tree-id66 . -4) (undo-tree-id67 . -4) 5394) nil (25950 26771 543756 783000) 0 nil])
([nil nil ((5404 . 5405) (#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 5404) (5403 . 5404)) nil (25950 26771 543754 699000) 0 nil])
([nil nil ((5405 . 5407)) nil (25950 26771 543753 938000) 0 nil])
([nil nil ((apply yas--snippet-revive 5404 5410 #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 5403 5410 nil nil nil t #s(yas--field 2 5412 5419 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 5403 5410 nil nil nil t #s(yas--field 2 5412 5419 nil nil nil t nil)) nil)) (5404 . 5410) (#("apiCfg" 0 6 (fontified nil)) . 5404) (5404 . 5410) (#("api" 0 3 (fontified nil)) . 5404) (5404 . 5407) (#("apiCfg" 0 6 (fontified nil)) . -5404) (5404 . 5410) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5404) (undo-tree-id64 . -3) (undo-tree-id65 . -3) 5407) nil (25950 26771 543752 776000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 21 (fontified t face tree-sitter-hl-face:variable)) . 5412)) nil (25950 26771 543748 347000) 0 nil])
([nil nil ((5412 . 5417)) nil (25950 26771 543747 746000) 0 nil])
([nil nil ((apply yas--snippet-revive 5412 5419 #s(yas--snippet nil nil nil 3 nil nil #s(yas--field 2 5412 5419 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil #s(yas--field 2 5412 5419 nil nil nil t nil) nil)) (5412 . 5419) (#("getTags" 0 7 (fontified nil)) . 5412) (5412 . 5419) (#("getTa" 0 5 (fontified nil)) . 5412) (5412 . 5417) (#("getTags" 0 7 (fontified nil)) . -5412) (5412 . 5419) (#("getTa" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -5412) (undo-tree-id62 . -5) (undo-tree-id63 . -5) 5417) nil (25950 26771 543746 223000) 0 nil])
([nil nil ((apply yas--snippet-revive 5390 5420 #s(yas--snippet nil (#s(yas--field 1 5403 5410 nil nil nil t #s(yas--field 2 5412 5419 nil nil nil t nil)) #s(yas--field 2 5412 5419 nil nil nil t nil)) nil 1 nil #s(yas--field 2 5412 5419 nil nil nil t nil) nil nil))) nil (25950 26771 543743 899000) 0 nil])
([nil nil ((4466 . 4474)) nil (25950 26771 543743 588000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4471) (undo-tree-id59 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4472) (undo-tree-id60 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4473) (undo-tree-id61 . -1) 4474) nil (25950 26771 543742 727000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4481) (4481 . 4482) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4481) (4481 . 4482) (4471 . 4482)) nil (25950 26771 543740 232000) 0 nil])
([nil nil ((4481 . 4490)) nil (25950 26771 543739 731000) 0 nil])
([nil nil ((apply yas--snippet-revive 4490 4498 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (4490 . 4498) (#("DBConfig" 0 8 (fontified nil)) . 4490) (4490 . 4498) (#("DBConfig" 0 8 (fontified nil)) . -4490) (4490 . 4498)) nil (25950 26771 543739 60000) 0 nil])
([nil nil ((4498 . 4507)) nil (25950 26771 543738 619000) 0 nil])
([nil nil ((4507 . 4508)) nil (25950 26771 543738 308000) 0 nil])
([nil nil ((4508 . 4510)) nil (25950 26771 543738 128000) 0 nil])
([nil nil ((apply yas--snippet-revive 4507 4521 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (4507 . 4521) (#("ResponseWriter" 0 14 (fontified nil)) . 4507) (4507 . 4521) (#("Res" 0 3 (fontified nil)) . 4507) (4507 . 4510) (#("ResponseWriter" 0 14 (fontified nil)) . -4507) (4507 . 4521) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4507) (undo-tree-id57 . -3) (undo-tree-id58 . -3) 4510) nil (25950 26771 543737 507000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4524) (4524 . 4525) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4524) (4524 . 4525) (4522 . 4525)) nil (25950 26771 543735 453000) 0 nil])
([nil nil ((4521 . 4534)) nil (25950 26771 543735 122000) 0 nil])
([nil nil ((apply yas--snippet-revive 4531 4538 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (4531 . 4538) (#("Request" 0 7 (fontified nil)) . 4531) (4531 . 4538) (#("Req" 0 3 (fontified nil)) . 4531) (4531 . 4534) (#("Request" 0 7 (fontified nil)) . -4531) (4531 . 4538) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4531) (undo-tree-id55 . -3) (undo-tree-id56 . -3) 4534) nil (25950 26771 543734 401000) 0 nil])
([nil nil ((4538 . 4545)) nil (25950 26771 543732 948000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4544) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 4545) nil (25950 26771 543732 537000) 0 nil])
([nil nil ((4544 . 4558)) nil (25950 26771 543731 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 4555 4559 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (4555 . 4559) (#("User" 0 4 (fontified nil)) . 4555) (4555 . 4559) (#("Use" 0 3 (fontified nil)) . 4555) (4555 . 4558) (#("User" 0 4 (fontified nil)) . -4555) (4555 . 4559) (#("Use" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4555) (undo-tree-id51 . -3) (undo-tree-id52 . -3) 4558) nil (25950 26771 543730 664000) 0 nil])
([nil nil ((4563 . 4564) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4563) (4563 . 4564) (4562 . 4564)) nil (25950 26771 543729 221000) 0 nil])
([nil nil ((4564 . 4568)) nil (25950 26771 543728 450000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4567) (undo-tree-id50 . -1) 4568) nil (25950 26771 543727 247000) 0 nil])
([nil nil ((4567 . 4577)) nil (25950 26771 543725 464000) 0 nil])
([nil nil ((4575 . 4576)) nil (25950 26771 543724 823000) 0 nil])
([nil nil ((4578 . 4580)) nil (25950 26771 543724 232000) 0 nil])
([nil nil ((4580 . 4585)) nil (25950 26771 543723 130000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4591 4596 nil nil nil t #s(yas--field 2 4598 4600 nil nil nil t nil)) #s(yas--field 2 4598 4600 nil nil nil t nil)) nil 8 nil #s(yas--field 2 4598 4600 nil nil nil t nil) nil nil)) (4581 . 4641) (#("RenameTag(${1:ctx context.Context}, ${2:arg database.RenameTagParams})" 0 70 (fontified nil)) . 4581) (4581 . 4651) (#("Rena" 0 4 (fontified nil)) . 4581) (4581 . 4585) (#("RenameTag" 0 9 (fontified nil)) . -4581) (4581 . 4590) (#("Rena" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4581) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 4585) nil (25950 26771 543722 78000) 0 nil])
([nil nil ((4592 . 4593) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 4592) (4591 . 4592)) nil (25950 26771 543718 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 4593 4596 #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 4591 4596 nil nil nil t #s(yas--field 2 4598 4600 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 4591 4596 nil nil nil t #s(yas--field 2 4598 4600 nil nil nil t nil)) nil)) (4593 . 4596) (#("CTX" 0 3 (fontified nil)) . 4593) (4593 . 4596) (#("CTX" 0 3 (fontified nil)) . -4593) (4593 . 4596)) nil (25950 26771 543717 629000) 0 nil])
([nil nil ((4599 . 4602) (#("arg database.RenameTagParams" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 28 (fontified nil face tree-sitter-hl-face:property)) . 4599) (4598 . 4599)) nil (25950 26771 543716 156000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4598) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4599) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4600) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4601) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 4602) nil (25950 26771 543715 425000) 0 nil])
([nil nil ((4598 . 4600)) nil (25950 26771 543712 119000) 0 nil])
([nil nil ((apply yas--snippet-revive 4581 4601 #s(yas--snippet nil (#s(yas--field 1 4591 4596 nil nil nil t #s(yas--field 2 4598 4600 nil nil nil t nil)) #s(yas--field 2 4598 4600 nil nil nil t nil)) nil 8 nil #s(yas--field 2 4598 4600 nil nil nil t nil) nil nil))) nil (25950 26771 543711 638000) 0 nil])
([nil nil ((5558 . 5560)) nil (25950 26771 543711 157000) 0 nil])
([nil nil ((5560 . 5563)) nil (25950 26771 543710 516000) 0 nil])
([nil nil ((apply yas--snippet-revive 5560 5568 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (5560 . 5568) (#("v1Router" 0 8 (fontified nil)) . 5560) (5560 . 5568) (#("v1R" 0 3 (fontified nil)) . 5560) (5560 . 5563) (#("v1Router" 0 8 (fontified nil)) . -5560) (5560 . 5568) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5560) (undo-tree-id38 . -3) (undo-tree-id39 . -3) 5563) nil (25950 26771 543709 724000) 0 nil])
([nil nil ((5568 . 5569)) nil (25950 26771 543708 81000) 0 nil])
([nil nil ((5569 . 5573)) nil (25950 26771 543707 781000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5570) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5571) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5572) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 5573) nil (25950 26771 543707 260000) 0 nil])
([nil nil ((5570 . 5573)) nil (25950 26771 543704 3000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5570) (undo-tree-id29 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5571) (undo-tree-id30 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5572) (undo-tree-id31 . -1) 5573) nil (25950 26771 543703 472000) 0 nil])
([nil nil ((5570 . 5573)) nil (25950 26771 543700 677000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5572) (undo-tree-id28 . -1) 5573) nil (25950 26771 543700 186000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5573) (5573 . 5574) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5573) (5573 . 5574) (5572 . 5574)) nil (25950 26771 543698 203000) 0 nil])
([nil nil ((5574 . 5579) (5573 . 5575) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5573) (5573 . 5574)) nil (25950 26771 543697 181000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5581) (5581 . 5582) (#("}" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -5581) (5581 . 5582) (5579 . 5582)) nil (25950 26771 543696 660000) 0 nil])
([nil nil ((5581 . 5583)) nil (25950 26771 543696 319000) 0 nil])
([nil nil ((5585 . 5590)) nil (25950 26771 543696 8000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5588) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5589) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 5590) nil (25950 26771 543695 718000) 0 nil])
([nil nil ((5588 . 5591)) nil (25950 26771 543693 464000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5600 5607 nil nil nil t #s(yas--field 2 5609 5618 nil nil nil t nil)) #s(yas--field 2 5609 5618 nil nil nil t nil)) nil 11 nil #s(yas--field 2 5609 5618 nil nil nil t nil) nil nil)) (5587 . 5641) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 5587) (5587 . 5651) (#("auth" 0 4 (fontified nil)) . 5587) (5587 . 5591) (#("authenticate" 0 12 (fontified nil)) . -5587) (5587 . 5599) (#("auth" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5587) (undo-tree-id22 . -4) (undo-tree-id23 . -4) 5591) nil (25950 26771 543692 943000) 0 nil])
([nil nil ((5601 . 5604) (#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 5601) (5600 . 5601)) nil (25950 26771 543689 947000) 0 nil])
([nil nil ((apply yas--snippet-revive 5601 5607 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 1 5600 5607 nil nil nil t #s(yas--field 2 5609 5618 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 1 5600 5607 nil nil nil t #s(yas--field 2 5609 5618 nil nil nil t nil)) nil)) (5601 . 5607) (#("apiCfg" 0 6 (fontified nil)) . 5601) (5601 . 5607) (#("api" 0 3 (fontified nil)) . 5601) (5601 . 5604) (#("apiCfg" 0 6 (fontified nil)) . -5601) (5601 . 5607) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5601) (undo-tree-id20 . -3) (undo-tree-id21 . -3) 5604) nil (25950 26771 543689 5000) 0 nil])
([nil nil ((5610 . 5613) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 5610) (5609 . 5610)) nil (25950 26771 543686 811000) 0 nil])
([nil nil ((apply yas--snippet-revive 5609 5618 #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 5609 5618 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 5609 5618 nil nil nil t nil) nil)) (5609 . 5618) (#("RenameTag" 0 9 (fontified nil)) . 5609) (5609 . 5618) (#("rena" 0 4 (fontified nil)) . 5609) (5609 . 5613) (#("RenameTag" 0 9 (fontified nil)) . -5609) (5609 . 5618) (#("rena" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5609) (undo-tree-id18 . -4) (undo-tree-id19 . -4) 5613) nil (25950 26771 543685 629000) 0 nil])
([nil nil ((apply yas--snippet-revive 5587 5619 #s(yas--snippet nil (#s(yas--field 1 5600 5607 nil nil nil t #s(yas--field 2 5609 5618 nil nil nil t nil)) #s(yas--field 2 5609 5618 nil nil nil t nil)) nil 11 nil #s(yas--field 2 5609 5618 nil nil nil t nil) nil nil))) nil (25950 26771 543683 475000) 0 nil])
([nil nil ((4471 . 4472) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . 4471) 4476 (5609 . 5610) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 5609)) nil (25950 26771 543683 214000) 0 nil])
([nil nil ((4562 . 4564)) nil (25950 26771 543682 503000) 0 nil])
([nil nil ((4564 . 4566)) nil (25950 26771 543681 882000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4564) (undo-tree-id16 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4565) (undo-tree-id17 . -1) 4566) nil (25950 26771 543680 900000) 0 nil])
([nil nil ((4564 . 4570)) nil (25950 26771 543678 976000) 0 nil])
([nil nil ((4570 . 4577)) nil (25950 26771 543678 345000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4575) (undo-tree-id14 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4576) (undo-tree-id15 . -1) 4577) nil (25950 26771 543677 313000) 0 nil])
([nil nil ((4575 . 4577)) nil (25950 26771 543676 151000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4583 4584 nil nil nil t #s(yas--field 2 4586 4590 nil nil nil t nil)) #s(yas--field 2 4586 4590 nil nil nil t nil)) nil 14 nil #s(yas--field 2 4586 4590 nil nil nil t nil) nil nil)) (4574 . 4611) (#("URLParam(${1:r *http.Request}, ${2:key string})" 0 47 (fontified nil)) . 4574) (4574 . 4621) (#("Par" 0 3 (fontified nil)) . 4574) (4574 . 4577) (#("URLParam" 0 8 (fontified nil)) . -4574) (4574 . 4582) (#("Par" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4574) (undo-tree-id12 . -3) (undo-tree-id13 . -3) 4577) nil (25950 26771 543675 89000) 0 nil])
([nil nil ((#("r *http.Request" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 15 (fontified nil face tree-sitter-hl-face:property)) . 4584) (undo-tree-id11 . -15) (4583 . 4584)) nil (25950 26771 543672 905000) 0 nil])
([nil nil ((4587 . 4589) (4586 . 4588) (#("\"" 0 1 (fontified nil)) . -4586) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4587) (undo-tree-id8 . -10) (undo-tree-id9 . -4) (undo-tree-id10 . -5) (4586 . 4587)) nil (25950 26771 543671 41000) 0 nil])
([nil nil ((apply yas--snippet-revive 4574 4591 #s(yas--snippet nil (#s(yas--field 1 4583 4584 nil nil nil t #s(yas--field 2 4586 4590 nil nil nil t nil)) #s(yas--field 2 4586 4590 nil nil nil t nil)) nil 14 nil #s(yas--field 2 4586 4590 nil nil nil t nil) nil nil))) nil (25950 26771 543651 324000) 0 nil])
([nil nil ((4591 . 4593) (t 25950 26771 659358 689000)) nil (25950 26878 912890 149000) 0 nil])
([nil nil ((4593 . 4614)) nil (25950 26878 912889 37000) 0 nil])
([nil nil ((4614 . 4616)) nil (25950 26878 912888 416000) 0 nil])
([nil nil ((apply yas--snippet-revive 4612 4620 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (4612 . 4620) (#("database" 0 8 (fontified nil)) . 4612) (4612 . 4620) (#("data" 0 4 (fontified nil)) . 4612) (4612 . 4616) (#("database" 0 8 (fontified nil)) . -4612) (4612 . 4620) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4612) (undo-tree-id109 . -4) (undo-tree-id110 . -4) 4616) nil (25950 26878 912887 103000) 0 nil])
([nil nil ((4620 . 4621)) nil (25950 26878 912882 985000) 0 nil])
([nil nil ((4621 . 4625)) nil (25950 26878 912882 64000) 0 nil])
([nil nil ((apply yas--snippet-revive 4621 4636 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (4621 . 4636) (#("RenameTagParams" 0 15 (fontified nil)) . 4621) (4621 . 4636) (#("Rena" 0 4 (fontified nil)) . 4621) (4621 . 4625) (#("RenameTagParams" 0 15 (fontified nil)) . -4621) (4621 . 4636) (#("Rena" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4621) (undo-tree-id107 . -4) (undo-tree-id108 . -4) 4625) nil (25950 26878 912880 641000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4637) (4637 . 4638) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4637) (4637 . 4638) (4636 . 4638)) nil (25950 26878 912876 784000) 0 nil])
([nil nil ((4638 . 4640)) nil (25950 26878 912875 391000) 0 nil])
([nil nil ((4640 . 4642)) nil (25950 26878 912874 690000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4638) (undo-tree-id103 . -1) (#("	" 0 1 (fontified t)) . -4639) (undo-tree-id104 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4640) (undo-tree-id105 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4641) (undo-tree-id106 . -1) 4642) nil (25950 26878 912873 598000) 0 nil])
([nil nil ((4591 . 4593)) nil (25950 26878 912808 465000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4591) (undo-tree-id101 . -1) (#("	" 0 1 (fontified t)) . -4592) (undo-tree-id102 . -1) 4593) nil (25950 26878 912807 613000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4640 . 4641) (#("
" 0 1 (fontified nil)) . -4834) (4638 . 4835) 4637) nil (25950 26878 912806 90000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t rear-nonsticky t)) . -4640) (#("	" 0 1 (fontified t)) . 4677) (#("	" 0 1 (fontified t)) . 4715) (#("	" 0 1 (fontified t)) . 4772) (#("	" 0 1 (fontified t)) . 4821) (#("	" 0 1 (fontified t)) . 4831) 4642) nil (25950 26878 912804 918000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4676) (undo-tree-id87 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4677) (undo-tree-id88 . 1) (undo-tree-id89 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4678) (undo-tree-id90 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4679) (undo-tree-id91 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4680) (undo-tree-id92 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4681) (undo-tree-id93 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4682) (undo-tree-id94 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4683) (undo-tree-id95 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4684) (undo-tree-id96 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4685) (undo-tree-id97 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4686) (undo-tree-id98 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4687) (undo-tree-id99 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4688) (undo-tree-id100 . -1) 4689) nil (25950 26878 912801 612000) 0 nil])
([nil nil ((4676 . 4680)) nil (25950 26878 912792 825000) 0 nil])
([nil nil ((4464 . 4466)) nil (25950 26878 912792 104000) 0 nil])
([nil nil ((4466 . 4472)) nil (25950 26878 912791 803000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4466) (undo-tree-id81 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4467) (undo-tree-id82 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4468) (undo-tree-id83 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4469) (undo-tree-id84 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4470) (undo-tree-id85 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4471) (undo-tree-id86 . -1) 4472) nil (25950 26878 912790 311000) 0 nil])
([nil nil ((4466 . 4487)) nil (25950 26878 912786 93000) 0 nil])
([nil nil ((4487 . 4488)) nil (25950 26878 912785 451000) 0 nil])
([nil nil ((apply yas--snippet-revive 4485 4491 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (4485 . 4491) (#("struct" 0 6 (fontified nil)) . 4485) (4485 . 4491) (#("str" 0 3 (fontified nil)) . 4485) (4485 . 4488) (#("struct" 0 6 (fontified nil)) . -4485) (4485 . 4491) (#("str" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4485) (undo-tree-id79 . -3) (undo-tree-id80 . -3) 4488) nil (25950 26878 912784 79000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4493) (4493 . 4494) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4493) (4493 . 4494) (4491 . 4494)) nil (25950 26878 912779 230000) 0 nil])
([nil nil ((4494 . 4495) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4494) (4494 . 4495) (4493 . 4495)) nil (25950 26878 912777 286000) 0 nil])
([nil nil ((4495 . 4499)) nil (25950 26878 912775 623000) 0 nil])
([nil nil ((4499 . 4500)) nil (25950 26878 912774 230000) 0 nil])
([nil nil ((4500 . 4504)) nil (25950 26878 912773 459000) 0 nil])
([nil nil ((4504 . 4506)) nil (25950 26878 912773 8000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4495) (undo-tree-id78 . -1) 4496) nil (25950 26878 912772 126000) 0 nil])
([nil nil ((4495 . 4496)) nil (25950 26878 912760 655000) 0 nil])
([nil nil ((4514 . 4518) (4513 . 4515) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4513) (4508 . 4514) (4507 . 4509) (#("`" 0 1 (fontified nil)) . -4507) (4506 . 4508)) nil (25950 26878 912754 914000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4747) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4748) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4749) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4750) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4751) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4752) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4753) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4754) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4755) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4756) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4757) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4758) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 4759 (t 25950 26878 936267 252000)) nil (25950 27198 76842 197000) 0 nil])
([nil nil ((4747 . 4755)) nil (25950 27198 76831 937000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4742) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4743) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4744) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4745) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("." 0 1 (fontified t)) . -4746) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4747) (undo-tree-id221 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4748) (undo-tree-id222 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4749) (undo-tree-id223 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4750) (undo-tree-id224 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4751) (undo-tree-id225 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4752) (undo-tree-id226 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4753) (undo-tree-id227 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4754) (undo-tree-id228 . -1) 4755) nil (25950 27198 76829 743000) 0 nil])
([nil nil ((4742 . 4748)) nil (25950 27198 76814 414000) 0 nil])
([nil nil ((apply yas--snippet-revive 4742 4755 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (4742 . 4755) (#("RenameTagType" 0 13 (fontified nil)) . 4742) (4742 . 4755) (#("Rename" 0 6 (fontified nil)) . 4742) (4742 . 4748) (#("RenameTagType" 0 13 (fontified nil)) . -4742) (4742 . 4755) (#("Rename" 0 6 (fontified t face tree-sitter-hl-face:type)) . -4742) (undo-tree-id209 . -6) (undo-tree-id210 . -6) 4748) nil (25950 27198 76812 641000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4734) (undo-tree-id205 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4735) (undo-tree-id206 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4736) (undo-tree-id207 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4737) (undo-tree-id208 . -1) 4738) nil (25950 27198 76808 964000) 0 nil])
([nil nil ((4734 . 4744)) nil (25950 27198 76806 539000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4803) (undo-tree-id204 . -1) 4804) nil (25950 27198 76805 758000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4791) (undo-tree-id192 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4792) (undo-tree-id193 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4793) (undo-tree-id194 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4794) (undo-tree-id195 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4795) (undo-tree-id196 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4796) (undo-tree-id197 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4797) (undo-tree-id198 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4798) (undo-tree-id199 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4799) (undo-tree-id200 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4800) (undo-tree-id201 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4801) (undo-tree-id202 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4802) (undo-tree-id203 . -1) 4803) nil (25950 27198 76802 31000) 0 nil])
([nil nil ((4791 . 4795)) nil (25950 27198 76796 10000) 0 nil])
([nil nil ((apply yas--snippet-revive 4791 4801 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (4791 . 4801) (#("renameBody" 0 10 (fontified nil)) . 4791) (4791 . 4801) (#("rena" 0 4 (fontified nil)) . 4791) (4791 . 4795) (#("renameBody" 0 10 (fontified nil)) . -4791) (4791 . 4801) (#("rena" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4791) (undo-tree-id190 . -4) (undo-tree-id191 . -4) 4795) nil (25950 27198 76794 747000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4912) (undo-tree-id188 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4913) (undo-tree-id189 . -1) 4914) nil (25950 27198 76792 252000) 0 nil])
([nil nil ((4876 . 4878)) nil (25950 27198 76790 770000) 0 nil])
([nil nil ((4878 . 4884)) nil (25950 27198 76790 118000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4878) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4879) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4880) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4881) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4882) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4883) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 4884) nil (25950 27198 76788 656000) 0 nil])
([nil nil ((4878 . 4888)) nil (25950 27198 76782 935000) 0 nil])
([nil nil ((4888 . 4897)) nil (25950 27198 76782 223000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4891) (undo-tree-id170 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4892) (undo-tree-id171 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4893) (undo-tree-id172 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4894) (undo-tree-id173 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4895) (undo-tree-id174 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4896) (undo-tree-id175 . -1) 4897) nil (25950 27198 76780 600000) 0 nil])
([nil nil ((4891 . 4893)) nil (25950 27198 76776 903000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4886) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4887) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4888) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4889) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("." 0 1 (fontified t)) . -4890) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4891) (undo-tree-id168 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4892) (undo-tree-id169 . -1) 4893) nil (25950 27198 76775 531000) 0 nil])
([nil nil ((4886 . 4891)) nil (25950 27198 76769 419000) 0 nil])
([nil nil ((apply yas--snippet-revive 4886 4894 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (4886 . 4894) (#("database" 0 8 (fontified nil)) . 4886) (4886 . 4894) (#("datab" 0 5 (fontified nil)) . 4886) (4886 . 4891) (#("database" 0 8 (fontified nil)) . -4886) (4886 . 4894) (#("datab" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -4886) (undo-tree-id156 . -5) (undo-tree-id157 . -5) 4891) nil (25950 27198 76768 267000) 0 nil])
([nil nil ((4894 . 4899)) nil (25950 27198 76765 302000) 0 nil])
([nil nil ((apply yas--snippet-revive 4895 4910 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (4895 . 4910) (#("RenameTagParams" 0 15 (fontified nil)) . 4895) (4895 . 4910) (#("Rena" 0 4 (fontified nil)) . 4895) (4895 . 4899) (#("RenameTagParams" 0 15 (fontified nil)) . -4895) (4895 . 4910) (#("Rena" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4895) (undo-tree-id154 . -4) (undo-tree-id155 . -4) 4899) nil (25950 27198 76763 749000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4911) (4911 . 4912) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4911) (4911 . 4912) (4910 . 4912)) nil (25950 27198 76761 33000) 0 nil])
([nil nil ((4912 . 4914)) nil (25950 27198 76759 971000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4912) (undo-tree-id152 . -1) (#("	" 0 1 (fontified t)) . -4913) (undo-tree-id153 . -1) 4914) nil (25950 27198 76759 190000) 0 nil])
([nil nil ((4912 . 4914) (4913 . 4914) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4912) (4912 . 4914) (4911 . 4913)) nil (25950 27198 76651 356000) 0 nil])
([nil nil ((4914 . 4915)) nil (25950 27198 76650 204000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4914) (undo-tree-id151 . -1) 4915) nil (25950 27198 76649 613000) 0 nil])
([nil nil ((4914 . 4918)) nil (25950 27198 76648 321000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4920 4920 nil nil nil t nil)) nil 22 nil #s(yas--field 1 4920 4920 nil nil nil t nil) nil nil)) (4914 . 4927) (#("Name: ${1:string}," 0 18 (fontified nil)) . 4914) (4914 . 4932) (#("name" 0 4 (fontified nil)) . 4914) (4914 . 4918) (#("Name" 0 4 (fontified nil)) . -4914) (4914 . 4918) (#("name" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4914) (undo-tree-id149 . -4) (undo-tree-id150 . -4) 4918) nil (25950 27198 76647 269000) 0 nil])
([nil nil ((4921 . 4923) (#("string" 0 6 (fontified nil face tree-sitter-hl-face:variable)) . 4921) (4920 . 4921)) nil (25950 27198 76645 586000) 0 nil])
([nil nil ((4923 . 4926)) nil (25950 27198 76644 614000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4920) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4921) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4922) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4923) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4924) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4925) (undo-tree-id147 . -1) (undo-tree-id148 . -1) 4926) nil (25950 27198 76643 351000) 0 nil])
([nil nil ((apply yas--snippet-revive 4914 4921 #s(yas--snippet nil (#s(yas--field 1 4920 4920 nil nil nil t nil)) nil 22 nil #s(yas--field 1 4920 4920 nil nil nil t nil) nil nil))) nil (25950 27198 76638 432000) 0 nil])
([nil nil ((#("	renameTagParams := database.RenameTagParams{}
" 0 1 (fontified t) 1 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 19 (fontified t face tree-sitter-hl-face:operator) 19 20 (fontified t) 20 28 (fontified t) 28 29 (fontified t) 29 44 (fontified t face tree-sitter-hl-face:type) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 47 (fontified t)) . 4650) (undo-tree-id125 . 1) (undo-tree-id126 . -46) (undo-tree-id127 . -46) (undo-tree-id128 . -46) (undo-tree-id129 . -46) (undo-tree-id130 . -46) (undo-tree-id131 . -45) (undo-tree-id132 . -46) (undo-tree-id133 . 2) (undo-tree-id134 . -46) (undo-tree-id135 . 3) (undo-tree-id136 . -45) 4695) nil (25950 27198 76637 911000) 0 nil])
([nil nil ((4873 . 4878)) nil (25950 27198 76632 541000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4876) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4877) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 4878) nil (25950 27198 76631 940000) 0 nil])
([nil nil ((4876 . 4877)) nil (25950 27198 76629 816000) 0 nil])
([nil nil ((apply yas--snippet-revive 4873 4888 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (4873 . 4888) (#("renameBody.Name" 0 15 (fontified nil)) . 4873) (4873 . 4888) (#("rena" 0 4 (fontified nil)) . 4873) (4873 . 4877) (#("renameBody.Name" 0 15 (fontified nil)) . -4873) (4873 . 4888) (#("rena" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4873) (undo-tree-id119 . -4) (undo-tree-id120 . -4) 4877) nil (25950 27198 76628 834000) 0 nil])
([nil nil ((4889 . 4892)) nil (25950 27198 76625 758000) 0 nil])
([nil nil ((4892 . 4893)) nil (25950 27198 76623 354000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4892) (undo-tree-id118 . -1) 4893) nil (25950 27198 76622 752000) 0 nil])
([nil nil ((4892 . 4893)) nil (25950 27198 76620 328000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4892) (undo-tree-id117 . -1) 4893) nil (25950 27198 76618 274000) 0 nil])
([nil nil ((4892 . 4895)) nil (25950 27198 76615 689000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4903 4913 nil nil nil t nil)) nil 24 nil #s(yas--field 1 4903 4913 nil nil nil t nil) nil nil)) (4892 . 4913) (#("UpdatedAt: ${1:time.Time}," 0 26 (fontified nil)) . 4892) (4892 . 4918) (#("upd" 0 3 (fontified nil)) . 4892) (4892 . 4895) (#("UpdatedAt" 0 9 (fontified nil)) . -4892) (4892 . 4901) (#("upd" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4892) (undo-tree-id115 . -3) (undo-tree-id116 . -3) 4895) nil (25950 27198 76614 96000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4912) (4912 . 4913) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4912) (4912 . 4913) (4904 . 4913) (#("time.Time" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 9 (fontified nil face tree-sitter-hl-face:property)) . 4904) (4903 . 4904)) nil (25950 27198 76609 968000) 0 nil])
([nil nil ((apply yas--snippet-revive 4892 4914 #s(yas--snippet nil (#s(yas--field 1 4903 4913 nil nil nil t nil)) nil 24 nil #s(yas--field 1 4903 4913 nil nil nil t nil) nil nil))) nil (25950 27198 76608 566000) 0 nil])
([nil nil ((379 . 381)) nil (25950 27198 76607 874000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -378) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("
" 0 1 (fontified t)) . -379) (undo-tree-id113 . -1) (#("	" 0 1 (fontified t)) . -380) (undo-tree-id114 . -1) 381) nil (25950 27198 76607 263000) 0 nil])
([nil nil ((378 . 379) (#("\"" 0 1 (fontified nil)) . -378) (378 . 379)) nil (25950 27198 76593 317000) 0 nil])
([nil nil ((92 . 94)) nil (25950 27198 76592 525000) 0 nil])
([nil nil ((95 . 99) (94 . 96) (#("\"" 0 1 (fontified nil)) . -94) (94 . 95)) nil (25950 27198 76589 139000) 0 nil])
([nil nil ((4922 . 4925) (t 25950 27198 95982 596000)) nil (25950 27232 33434 741000) 0 nil])
([nil nil ((4925 . 4927)) nil (25950 27232 33433 819000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4925) (undo-tree-id296 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4926) (undo-tree-id297 . -1) 4927) nil (25950 27232 33432 968000) 0 nil])
([nil nil ((4925 . 4932)) nil (25950 27232 33431 335000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4931) (undo-tree-id295 . -1) 4932) nil (25950 27232 33430 453000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4924) (undo-tree-id288 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4925) (undo-tree-id289 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4926) (undo-tree-id290 . -1) (#(":" 0 1 (fontified t)) . -4927) (undo-tree-id291 . -1) (#(" " 0 1 (fontified t)) . -4928) (undo-tree-id292 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4929) (undo-tree-id293 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4930) (undo-tree-id294 . -1) 4931) nil (25950 27232 33428 580000) 0 nil])
([nil nil ((4924 . 4925)) nil (25950 27232 33424 732000) 0 nil])
([nil nil ((4872 . 4875)) nil (25950 27232 33424 161000) 0 nil])
([nil nil ((4875 . 4881)) nil (25950 27232 33423 480000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4931) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("	" 0 1 (fontified t)) . -4932) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#(" " 0 1 (fontified t)) . -4933) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 4934) nil (25950 27232 33421 616000) 0 nil])
([nil nil ((4881 . 4882)) nil (25950 27232 33397 832000) 0 nil])
([nil nil ((4879 . 4884) (t 25950 27232 52272 278000)) nil (25950 27394 209955 921000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4883) (undo-tree-id445 . -1) 4884) nil (25950 27394 209954 298000) 0 nil])
([nil nil ((4883 . 4884)) nil (25950 27394 209953 56000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4883) (undo-tree-id444 . -1) 4884) nil (25950 27394 209951 714000) 0 nil])
([nil nil ((4883 . 4884)) nil (25950 27394 209949 760000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4894 4902 nil nil nil nil nil)) nil 25 nil #s(yas--field 1 4894 4902 nil nil nil nil nil) nil nil)) (4884 . 4903) (#("MustParse(${1:s string})" 0 24 (fontified nil)) . 4884) (4884 . 4908) (#("MustParse" 0 9 (fontified nil)) . -4884) (4884 . 4893)) nil (25950 27394 209948 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 4884 4903 #s(yas--snippet nil (#s(yas--field 1 4894 4902 nil nil nil nil nil)) nil 25 nil #s(yas--field 1 4894 4902 nil nil nil nil nil) nil nil))) nil (25950 27394 209947 265000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4885) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4886) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4887) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4888) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4889) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4890) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4891) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4892) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4893) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4894) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#(" " 0 1 (fontified t)) . -4895) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4896) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4897) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4898) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4899) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4900) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4901) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4902) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4903) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4904) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("," 0 1 (fontified t)) . -4905) (undo-tree-id442 . -1) (undo-tree-id443 . -1) 4906) nil (25950 27394 209942 406000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4881) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4882) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("." 0 1 (fontified t)) . -4883) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4884) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) 4885) nil (25950 27394 209908 923000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4879) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4880) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) 4881) nil (25950 27394 209900 848000) 0 nil])
([nil nil ((4845 . 4846) (#(" " 0 1 (fontified nil)) . 4844) (undo-tree-id363 . -1) (4845 . 4846)) nil (25950 27394 209897 261000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4844) (undo-tree-id361 . -1) (#("	" 0 1 (fontified t)) . -4845) (undo-tree-id362 . -1) 4846) nil (25950 27394 209895 237000) 0 nil])
([nil nil ((4844 . 4845)) nil (25950 27394 209521 271000) 0 nil])
([nil nil ((4837 . 4839)) nil (25950 27394 209520 770000) 0 nil])
([nil nil ((4839 . 4842)) nil (25950 27394 209520 29000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4839) (undo-tree-id358 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4840) (undo-tree-id359 . -1) (#(" " 0 1 (fontified t)) . -4841) (undo-tree-id360 . -1) 4842) nil (25950 27394 209518 746000) 0 nil])
([nil nil ((4839 . 4842)) nil (25950 27394 209516 21000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4839) (undo-tree-id355 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4840) (undo-tree-id356 . -1) (#(" " 0 1 (fontified t)) . -4841) (undo-tree-id357 . -1) 4842) nil (25950 27394 209515 139000) 0 nil])
([nil nil ((4839 . 4844)) nil (25950 27394 209512 865000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4843) (undo-tree-id354 . -1) 4844) nil (25950 27394 209511 653000) 0 nil])
([nil nil ((4843 . 4857)) nil (25950 27394 209509 609000) 0 nil])
([nil nil ((4862 . 4863) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4862) (4857 . 4863)) nil (25950 27394 209508 266000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -4862) (undo-tree-id351 . -1) (undo-tree-id352 . 1) (undo-tree-id353 . -1) 4863) nil (25950 27394 209507 14000) 0 nil])
([nil nil ((4863 . 4864) (4862 . 4864)) nil (25950 27394 209503 287000) 0 nil])
([nil nil ((4864 . 4865)) nil (25950 27394 209502 265000) 0 nil])
([nil nil ((4866 . 4868)) nil (25950 27394 209501 474000) 0 nil])
([nil nil ((4875 . 4877) (#("'" 0 1 (fontified nil)) . -4875) (4868 . 4876)) nil (25950 27394 209500 171000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -4875) (undo-tree-id350 . -1) (#("'" 0 1 (fontified t)) . 4876)) nil (25950 27394 209498 308000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4883) (4883 . 4884) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4883) (4883 . 4884) (4875 . 4884)) nil (25950 27394 209496 284000) 0 nil])
([nil nil ((4884 . 4886) (4885 . 4886) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4884) (4884 . 4886) (4883 . 4885)) nil (25950 27394 209494 330000) 0 nil])
([nil nil ((4886 . 4888)) nil (25950 27394 209492 607000) 0 nil])
([nil nil ((4888 . 4891)) nil (25950 27394 209491 775000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4886) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4887) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4888) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4889) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4890) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 4891) nil (25950 27394 209489 992000) 0 nil])
([nil nil ((4886 . 4892)) nil (25950 27394 209483 209000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4909 4910 nil nil nil t #s(yas--field 2 4912 4915 nil nil nil t #s(yas--field 3 4917 4930 nil nil nil t nil))) #s(yas--field 2 4912 4915 nil nil nil t #s(yas--field 3 4917 4930 nil nil nil t nil)) #s(yas--field 3 4917 4930 nil nil nil t nil)) nil 26 nil #s(yas--field 3 4917 4930 nil nil nil t nil) nil nil)) (4892 . 4953) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4892) (4892 . 4968) (#("RespondWithError" 0 16 (fontified nil)) . -4892) (4892 . 4908)) nil (25950 27394 209482 47000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4910) (4909 . 4910)) nil (25950 27394 209479 883000) 0 nil])
([nil nil ((4913 . 4915) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4913) (4912 . 4913)) nil (25950 27394 209478 861000) 0 nil])
([nil nil ((4918 . 4921) (4917 . 4919) (#("\"" 0 1 (fontified nil)) . -4917) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4918) (4917 . 4918)) nil (25950 27394 209477 508000) 0 nil])
([nil nil ((4921 . 4929)) nil (25950 27394 209475 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 4892 4931 #s(yas--snippet nil (#s(yas--field 1 4909 4910 nil nil nil t #s(yas--field 2 4912 4915 nil nil nil t #s(yas--field 3 4917 4930 nil nil nil t nil))) #s(yas--field 2 4912 4915 nil nil nil t #s(yas--field 3 4917 4930 nil nil nil t nil)) #s(yas--field 3 4917 4930 nil nil nil t nil)) nil 26 nil #s(yas--field 3 4917 4930 nil nil nil t nil) nil nil))) nil (25950 27394 209474 583000) 0 nil])
([nil nil ((4931 . 4934)) nil (25950 27394 209473 481000) 0 nil])
([nil nil ((4934 . 4939)) nil (25950 27394 209472 98000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4936) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4937) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4938) (undo-tree-id338 . -1) (undo-tree-id339 . -1) 4939) nil (25950 27394 209470 195000) 0 nil])
([nil nil ((4936 . 4940)) nil (25950 27394 209461 168000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4938) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4939) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 4940) nil (25950 27394 209459 244000) 0 nil])
([nil nil ((4938 . 4940)) nil (25950 27394 209426 232000) 0 nil])
([nil nil ((4984 . 4989) (t 25950 27394 230657 351000)) nil (25950 27720 987364 489000) 0 nil])
([nil nil ((4989 . 4990)) nil (25950 27720 987363 607000) 0 nil])
([nil nil ((5080 . 5083)) nil (25950 27720 987362 996000) 0 nil])
([nil nil ((5083 . 5085)) nil (25950 27720 987362 174000) 0 nil])
([nil nil ((4951 . 4952)) nil (25950 27720 987360 972000) 0 nil])
([nil nil ((5087 . 5089)) nil (25950 27720 987360 551000) 0 nil])
([nil nil ((5089 . 5098)) nil (25950 27720 987360 391000) 0 nil])
([nil nil ((5092 . 5093)) nil (25950 27720 987359 910000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5104) (5104 . 5105) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5104) (5104 . 5105) (5098 . 5105)) nil (25950 27720 987359 199000) 0 nil])
([nil nil ((5105 . 5107) (5106 . 5107) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5105) (5105 . 5107) (5104 . 5106)) nil (25950 27720 987358 137000) 0 nil])
([nil nil ((5107 . 5109)) nil (25950 27720 987357 175000) 0 nil])
([nil nil ((5109 . 5113)) nil (25950 27720 987355 672000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5130 5131 nil nil nil t #s(yas--field 2 5133 5136 nil nil nil t #s(yas--field 3 5138 5161 nil nil nil t nil))) #s(yas--field 2 5133 5136 nil nil nil t #s(yas--field 3 5138 5161 nil nil nil t nil)) #s(yas--field 3 5138 5161 nil nil nil t nil)) nil 27 nil #s(yas--field 3 5138 5161 nil nil nil t nil) nil nil)) (5113 . 5174) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5113) (5113 . 5189) (#("RespondWithError" 0 16 (fontified nil)) . -5113) (5113 . 5129)) nil (25950 27720 987353 618000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5131) (5130 . 5131)) nil (25950 27720 987351 885000) 0 nil])
([nil nil ((5134 . 5136) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5134) (5133 . 5134)) nil (25950 27720 987350 723000) 0 nil])
([nil nil ((5138 . 5140) (#("\"" 0 1 (fontified nil)) . -5138) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 5139) (5138 . 5139)) nil (25950 27720 987349 681000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -5139) (5139 . 5140) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -5139) (5139 . 5140)) nil (25950 27720 987348 358000) 0 nil])
([nil nil ((5139 . 5144)) nil (25950 27720 987346 705000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5142) (undo-tree-id462 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5143) (undo-tree-id463 . -1) 5144) nil (25950 27720 987345 12000) 0 nil])
([nil nil ((5142 . 5160)) nil (25950 27720 987342 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 5113 5162 #s(yas--snippet nil (#s(yas--field 1 5130 5131 nil nil nil t #s(yas--field 2 5133 5136 nil nil nil t #s(yas--field 3 5138 5161 nil nil nil t nil))) #s(yas--field 2 5133 5136 nil nil nil t #s(yas--field 3 5138 5161 nil nil nil t nil)) #s(yas--field 3 5138 5161 nil nil nil t nil)) nil 27 nil #s(yas--field 3 5138 5161 nil nil nil t nil) nil nil))) nil (25950 27720 987341 986000) 0 nil])
([nil nil ((5087 . 5089)) nil (25950 27720 987340 914000) 0 nil])
([nil nil ((5089 . 5106)) nil (25950 27720 987339 682000) 0 nil])
([nil nil ((5106 . 5127)) nil (25950 27720 987338 510000) 0 nil])
([nil nil ((5127 . 5133)) nil (25950 27720 987337 407000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5118) (undo-tree-id447 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5119) (undo-tree-id448 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5120) (undo-tree-id449 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5121) (undo-tree-id450 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5122) (undo-tree-id451 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5123) (undo-tree-id452 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5124) (undo-tree-id453 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5125) (undo-tree-id454 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5126) (undo-tree-id455 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5127) (undo-tree-id456 . -1) (#("," 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5128) (undo-tree-id457 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5129) (undo-tree-id458 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5130) (undo-tree-id459 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5131) (undo-tree-id460 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5132) (undo-tree-id461 . -1) 5133) nil (25950 27720 987332 789000) 0 nil])
([nil nil ((5118 . 5125)) nil (25950 27720 987316 909000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5124) (undo-tree-id446 . -1) 5125) nil (25950 27720 987315 396000) 0 nil])
([nil nil ((5124 . 5132)) nil (25950 27720 987300 418000) 0 nil])
([nil nil ((5132 . 5146)) nil (25950 27720 987293 94000) 0 nil])
([nil nil ((5221 . 5224) (t 25950 27721 103454 552000)) nil (25950 27768 852298 722000) 0 nil])
([nil nil ((5224 . 5230)) nil (25950 27768 852298 211000) 0 nil])
([nil nil ((5234 . 5235) (#(" " 0 1 (fontified nil)) . -5234) (5233 . 5234)) nil (25950 27768 852297 740000) 0 nil])
([nil nil ((5235 . 5237)) nil (25950 27768 852297 239000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5235) (undo-tree-id650 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5236) (undo-tree-id651 . -1) 5237) nil (25950 27768 852296 538000) 0 nil])
([nil nil ((5235 . 5236)) nil (25950 27768 852295 486000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5235) (undo-tree-id649 . -1) 5236) nil (25950 27768 852294 985000) 0 nil])
([nil nil ((5235 . 5241)) nil (25950 27768 852294 354000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5257 5258 nil nil nil t #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil))) #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil 28 nil #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil nil)) (5241 . 5310) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 5241) (5241 . 5326) (#("RespondWithJSON" 0 15 (fontified nil)) . -5241) (5241 . 5256)) nil (25950 27768 852293 673000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5258) (5257 . 5258)) nil (25950 27768 852293 21000) 0 nil])
([nil nil ((5261 . 5263) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5261) (5260 . 5261)) nil (25950 27768 852292 140000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5261 5263 nil nil nil t nil)) nil 29 nil #s(yas--field 1 5261 5263 nil nil nil t nil) #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil)) (5260 . 5294) (#("tag.CreatedAt.Compare(${1:u time.Time})" 0 39 (fontified nil)) . 5260) (5260 . 5299) (#("tag" 0 3 (fontified nil)) . 5260) (5260 . 5263) (#("tag.CreatedAt.Compare" 0 21 (fontified nil)) . -5260) (5260 . 5281) (#("tag" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5260) (undo-tree-id647 . -3) (undo-tree-id648 . -3) 5263) nil (25950 27768 852290 897000) 0 nil])
([nil nil ((#("u time.Time" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 11 (fontified t face tree-sitter-hl-face:property)) . 5282)) nil (25950 27768 852288 743000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -5281) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . 1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 5282) (undo-tree-id644 . 1) (undo-tree-id645 . -1) (undo-tree-id646 . 1)) nil (25950 27768 852287 982000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5261) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5262) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("." 0 1 (fontified t)) . -5263) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5264) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -5265) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -5266) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -5267) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -5268) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5269) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5270) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5271) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5272) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#("." 0 1 (fontified t)) . -5273) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5274) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5275) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5276) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5277) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5278) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5279) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5280) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) 5281) nil (25950 27768 852278 464000) 0 nil])
([nil nil ((5261 . 5263)) nil (25950 27768 852046 486000) 0 nil])
([nil nil ((apply yas--snippet-revive 5241 5285 #s(yas--snippet nil (#s(yas--field 1 5257 5258 nil nil nil t #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil))) #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil 28 nil #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil nil)) (apply yas--snippet-revive 5260 5263 #s(yas--snippet nil (#s(yas--field 1 5261 5263 nil nil nil t nil)) nil 29 nil #s(yas--field 1 5261 5263 nil nil nil t nil) #s(yas--field 2 5260 5263 nil nil nil t #s(yas--field 3 5265 5284 nil nil nil nil nil)) nil))) nil (25950 27768 852045 855000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5260) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5261) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5262) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 5263) nil (25950 27768 852044 502000) 0 nil])
([nil nil ((5260 . 5263)) nil (25950 27768 852040 414000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5265) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -5266) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -5267) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5268) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5269) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5270) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5271) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#(" " 0 1 (fontified t)) . -5272) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5273) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5274) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5275) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5276) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5277) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5278) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5279) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5280) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -5281) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -5282) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -5283) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . 1) (undo-tree-id531 . -1) 5284) nil (25950 27768 852035 575000) 0 nil])
([nil nil ((5265 . 5268)) nil (25950 27768 851980 842000) 0 nil])
([nil nil ((6288 . 6290) (t 25950 27768 878863 827000)) nil (25950 28128 80826 550000) 0 nil])
([nil nil ((6290 . 6292)) nil (25950 28128 80825 789000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6288) (undo-tree-id694 . -1) (#("	" 0 1 (fontified t)) . -6289) (undo-tree-id695 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6290) (undo-tree-id696 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6291) (undo-tree-id697 . -1) 6292) nil (25950 28128 80824 687000) 0 nil])
([nil nil ((5042 . 5045)) nil (25950 28128 80822 442000) 0 nil])
([nil nil ((5045 . 5046)) nil (25950 28128 80821 791000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5045) (undo-tree-id693 . -1) 5046) nil (25950 28128 80820 929000) 0 nil])
([nil nil ((5045 . 5048)) nil (25950 28128 80819 988000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5053 5060 nil nil nil t nil)) nil 30 nil #s(yas--field 1 5053 5060 nil nil nil t nil) nil nil)) (5045 . 5063) (#("UserID: ${1:uuid.UUID}," 0 23 (fontified nil)) . 5045) (5045 . 5068) (#("Use" 0 3 (fontified nil)) . 5045) (5045 . 5048) (#("UserID" 0 6 (fontified nil)) . -5045) (5045 . 5051) (#("Use" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5045) (undo-tree-id691 . -3) (undo-tree-id692 . -3) 5048) nil (25950 28128 80818 866000) 0 nil])
([nil nil ((#("uuid.UUID" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 9 (fontified t face tree-sitter-hl-face:property)) . 5053)) nil (25950 28128 80816 822000) 0 nil])
([nil nil ((5053 . 5058)) nil (25950 28128 80816 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 5058 5060 #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 5053 5060 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 5053 5060 nil nil nil t nil) nil)) (5058 . 5060) (#("ID" 0 2 (fontified nil)) . 5058) (5058 . 5060) (#("ID" 0 2 (fontified nil)) . -5058) (5058 . 5060)) nil (25950 28128 80815 930000) 0 nil])
([nil nil ((apply yas--snippet-revive 5045 5061 #s(yas--snippet nil (#s(yas--field 1 5053 5060 nil nil nil t nil)) nil 30 nil #s(yas--field 1 5053 5060 nil nil nil t nil) nil nil))) nil (25950 28128 80815 219000) 0 nil])
([nil nil ((5290 . 5292)) nil (25950 28128 80814 658000) 0 nil])
([nil nil ((5292 . 5297)) nil (25950 28128 80814 157000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5307) (5307 . 5308) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5307) (5307 . 5308) (5297 . 5308)) nil (25950 28128 80813 75000) 0 nil])
([nil nil ((5307 . 5316)) nil (25950 28128 80811 762000) 0 nil])
([nil nil ((apply yas--snippet-revive 5316 5324 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (5316 . 5324) (#("DBConfig" 0 8 (fontified nil)) . 5316) (5316 . 5324) (#("DBConfig" 0 8 (fontified nil)) . -5316) (5316 . 5324)) nil (25950 28128 80810 991000) 0 nil])
([nil nil ((5324 . 5334)) nil (25950 28128 80809 909000) 0 nil])
([nil nil ((5334 . 5338)) nil (25950 28128 80809 528000) 0 nil])
([nil nil ((apply yas--snippet-revive 5333 5347 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (5333 . 5347) (#("ResponseWriter" 0 14 (fontified nil)) . 5333) (5333 . 5347) (#("Respo" 0 5 (fontified nil)) . 5333) (5333 . 5338) (#("ResponseWriter" 0 14 (fontified nil)) . -5333) (5333 . 5347) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -5333) (undo-tree-id689 . -5) (undo-tree-id690 . -5) 5338) nil (25950 28128 80808 115000) 0 nil])
([nil nil ((5347 . 5351)) nil (25950 28128 80805 290000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -5350) (undo-tree-id688 . -1) 5351) nil (25950 28128 80804 579000) 0 nil])
([nil nil ((5350 . 5360)) nil (25950 28128 80803 276000) 0 nil])
([nil nil ((apply yas--snippet-revive 5357 5364 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (5357 . 5364) (#("Request" 0 7 (fontified nil)) . 5357) (5357 . 5364) (#("Req" 0 3 (fontified nil)) . 5357) (5357 . 5360) (#("Request" 0 7 (fontified nil)) . -5357) (5357 . 5364) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -5357) (undo-tree-id686 . -3) (undo-tree-id687 . -3) 5360) nil (25950 28128 80801 994000) 0 nil])
([nil nil ((5364 . 5369)) nil (25950 28128 80799 289000) 0 nil])
([nil nil ((5369 . 5384)) nil (25950 28128 80798 577000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -5381) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -5382) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -5383) (undo-tree-id684 . -1) (undo-tree-id685 . -1) 5384) nil (25950 28128 80797 425000) 0 nil])
([nil nil ((5381 . 5385)) nil (25950 28128 80793 87000) 0 nil])
([nil nil ((5386 . 5389)) nil (25950 28128 80792 626000) 0 nil])
([nil nil ((5389 . 5390) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5389) (5389 . 5390) (5388 . 5390)) nil (25950 28128 80791 945000) 0 nil])
([nil nil ((6409 . 6411)) nil (25950 28128 80790 632000) 0 nil])
([nil nil ((6411 . 6414)) nil (25950 28128 80789 721000) 0 nil])
([nil nil ((apply yas--snippet-revive 6411 6419 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (6411 . 6419) (#("v1Router" 0 8 (fontified nil)) . 6411) (6411 . 6419) (#("v1R" 0 3 (fontified nil)) . 6411) (6411 . 6414) (#("v1Router" 0 8 (fontified nil)) . -6411) (6411 . 6419) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6411) (undo-tree-id678 . -3) (undo-tree-id679 . -3) 6414) nil (25950 28128 80788 27000) 0 nil])
([nil nil ((6419 . 6424)) nil (25950 28128 80785 833000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6427 6439 nil nil nil t #s(yas--field 2 6441 6473 nil nil nil t nil)) #s(yas--field 2 6441 6473 nil nil nil t nil)) nil 36 nil #s(yas--field 2 6441 6473 nil nil nil t nil) nil nil)) (6420 . 6470) (#("Delete(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 60 (fontified nil)) . 6420) (6420 . 6480) (#("DELE" 0 4 (fontified nil)) . 6420) (6420 . 6424) (#("Delete" 0 6 (fontified nil)) . -6420) (6420 . 6426) (#("DELE" 0 4 (fontified t face tree-sitter-hl-face:property)) . -6420) (undo-tree-id676 . -4) (undo-tree-id677 . -4) 6424) nil (25950 28128 80784 160000) 0 nil])
([nil nil ((6428 . 6434) (6427 . 6429) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6427) (undo-tree-id674 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 6428) (undo-tree-id675 . -14) (6427 . 6428)) nil (25950 28128 80781 335000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6435) (6435 . 6436) (#("}" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -6435) (6435 . 6436) (6434 . 6436)) nil (25950 28128 80778 449000) 0 nil])
([nil nil ((6435 . 6437)) nil (25950 28128 80776 976000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 26 (fontified t face tree-sitter-hl-face:property)) . 6441) (undo-tree-id673 . -26)) nil (25950 28128 80776 105000) 0 nil])
([nil nil ((6441 . 6445)) nil (25950 28128 80775 103000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6454 6461 nil nil nil t #s(yas--field 2 6463 6472 nil nil nil t nil)) #s(yas--field 2 6463 6472 nil nil nil t nil)) nil 37 nil #s(yas--field 2 6463 6472 nil nil nil t nil) #s(yas--field 2 6441 6473 nil nil nil t nil) nil)) (6441 . 6495) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 6441) (undo-tree-id667 . -64) (6441 . 6505) (#("auth" 0 4 (fontified nil)) . 6441) (undo-tree-id668 . -4) (6441 . 6445) (#("authenticate" 0 12 (fontified nil)) . -6441) (undo-tree-id669 . -12) (6441 . 6453) (#("auth" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6441) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) 6445) nil (25950 28128 80773 269000) 0 nil])
([nil nil ((6455 . 6458) (#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 6455) (undo-tree-id666 . -17) (6454 . 6455)) nil (25950 28128 80767 118000) 0 nil])
([nil nil ((apply yas--snippet-revive 6455 6461 #s(yas--snippet nil nil nil 38 nil nil #s(yas--field 1 6454 6461 nil nil nil t #s(yas--field 2 6463 6472 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil #s(yas--field 1 6454 6461 nil nil nil t #s(yas--field 2 6463 6472 nil nil nil t nil)) nil)) (6455 . 6461) (#("apiCfg" 0 6 (fontified nil)) . 6455) (undo-tree-id660 . -6) (6455 . 6461) (#("api" 0 3 (fontified nil)) . 6455) (undo-tree-id661 . -3) (6455 . 6458) (#("apiCfg" 0 6 (fontified nil)) . -6455) (undo-tree-id662 . -6) (6455 . 6461) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6455) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) 6458) nil (25950 28128 80764 553000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 21 (fontified t face tree-sitter-hl-face:variable)) . 6463) (undo-tree-id659 . -21)) nil (25950 28128 80758 121000) 0 nil])
([nil nil ((6463 . 6467)) nil (25950 28128 80756 848000) 0 nil])
([nil nil ((apply yas--snippet-revive 6463 6472 #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 2 6463 6472 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 2 6463 6472 nil nil nil t nil) nil)) (6463 . 6472) (#("deleteTag" 0 9 (fontified nil)) . 6463) (undo-tree-id652 . -9) (6463 . 6472) (#("dele" 0 4 (fontified nil)) . 6463) (undo-tree-id653 . -4) (6463 . 6467) (#("deleteTag" 0 9 (fontified nil)) . -6463) (undo-tree-id654 . -9) (6463 . 6472) (#("dele" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6463) (undo-tree-id655 . -4) (undo-tree-id656 . -4) (undo-tree-id657 . -4) (undo-tree-id658 . -4) 6467) nil (25950 28128 80755 5000) 0 nil])
([nil nil ((apply yas--snippet-revive 6441 6473 #s(yas--snippet nil (#s(yas--field 1 6454 6461 nil nil nil t #s(yas--field 2 6463 6472 nil nil nil t nil)) #s(yas--field 2 6463 6472 nil nil nil t nil)) nil 37 nil #s(yas--field 2 6463 6472 nil nil nil t nil) #s(yas--field 2 6441 6473 nil nil nil t nil) nil))) nil (25950 28128 80718 827000) 0 nil])
([nil nil ((apply yas--snippet-revive 6420 6474 #s(yas--snippet nil (#s(yas--field 1 6427 6439 nil nil nil t #s(yas--field 2 6441 6473 nil nil nil t nil)) #s(yas--field 2 6441 6473 nil nil nil t nil)) nil 36 nil #s(yas--field 2 6441 6473 nil nil nil t nil) nil nil))) nil (25950 28128 80712 4000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5391 . 5392) (#("
" 0 1 (fontified nil)) . -5419) (5390 . 5420) 5389 (t 25950 28128 104943 310000)) nil (25950 28230 187442 38000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 5389) (undo-tree-id724 . -1)) nil (25950 28230 187441 407000) 0 nil])
([nil nil ((5417 . 5419)) nil (25950 28230 187440 575000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5420 . 5421) (#("
" 0 1 (fontified nil)) . -5448) (5419 . 5449) 5418) nil (25950 28230 187439 764000) 0 nil])
([nil nil ((5392 . 5398)) nil (25950 28230 187439 223000) 0 nil])
([nil nil ((5453 . 5459)) nil (25950 28230 187438 381000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5427) (undo-tree-id722 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5428) (undo-tree-id723 . -1) 5429) nil (25950 28230 187437 229000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5423) (undo-tree-id720 . -1) (#("	" 0 1 (fontified t)) . -5424) (undo-tree-id721 . -1) 5425) nil (25950 28230 187435 396000) 0 nil])
([nil nil ((5456 . 5458) 5425) nil (25950 28230 187433 382000) 0 nil])
([nil nil ((5458 . 5459)) nil (25950 28230 187432 911000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5458) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) 5459) nil (25950 28230 187432 230000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5459 . 5460) (#("
" 0 1 (fontified nil)) . -5535) (5458 . 5536) 5457) nil (25950 28230 187426 540000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 5457) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -2)) nil (25950 28230 187421 741000) 0 nil])
([nil nil ((5533 . 5535) (t 25950 28230 211945 981000)) nil (25950 28233 455611 42000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5534) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) 5535) nil (25950 28233 455606 254000) 0 nil])
([nil nil ((5534 . 5536) (t 25950 28233 573664 382000)) nil (25950 28437 976575 708000) 0 nil])
([nil nil ((5536 . 5545)) nil (25950 28437 976575 337000) 0 nil])
([nil nil ((5545 . 5546)) nil (25950 28437 976575 17000) 0 nil])
([nil nil ((5546 . 5548)) nil (25950 28437 976574 636000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5547) (undo-tree-id790 . -1) (undo-tree-id791 . -1) 5548) nil (25950 28437 976573 865000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5536) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5537) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5538) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#(" " 0 1 (fontified t)) . -5539) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (#(":" 0 1 (fontified t)) . -5540) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -5541) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#(" " 0 1 (fontified t)) . -5542) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5543) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#("." 0 1 (fontified t)) . -5544) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5545) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5546) (undo-tree-id788 . -1) (undo-tree-id789 . -1) 5547) nil (25950 28437 976569 377000) 0 nil])
([nil nil ((5536 . 5551)) nil (25950 28437 976559 980000) 0 nil])
([nil nil ((5551 . 5554)) nil (25950 28437 976559 629000) 0 nil])
([nil nil ((5554 . 5558)) nil (25950 28437 976559 168000) 0 nil])
([nil nil ((apply yas--snippet-revive 5554 5569 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (5554 . 5569) (#("DeleteTagParams" 0 15 (fontified nil)) . 5554) (5554 . 5569) (#("Dele" 0 4 (fontified nil)) . 5554) (5554 . 5558) (#("DeleteTagParams" 0 15 (fontified nil)) . -5554) (5554 . 5569) (#("Dele" 0 4 (fontified t face tree-sitter-hl-face:property)) . -5554) (undo-tree-id766 . -4) (undo-tree-id767 . -4) 5558) nil (25950 28437 976558 76000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5570) (5570 . 5571) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5570) (5570 . 5571) (5569 . 5571)) nil (25950 28437 976556 163000) 0 nil])
([nil nil ((5571 . 5573)) nil (25950 28437 976555 712000) 0 nil])
([nil nil ((5571 . 5573) (5572 . 5573) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5571) (5571 . 5573) (5570 . 5572)) nil (25950 28437 976555 321000) 0 nil])
([nil nil ((5573 . 5580)) nil (25950 28437 976554 530000) 0 nil])
([nil nil ((5580 . 5583)) nil (25950 28437 976554 89000) 0 nil])
([nil nil ((5583 . 5587)) nil (25950 28437 976553 778000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5591 5598 nil nil nil t nil)) nil 41 nil #s(yas--field 1 5591 5598 nil nil nil t nil) nil nil)) (5583 . 5601) (#("UserID: ${1:uuid.UUID}," 0 23 (fontified nil)) . 5583) (5583 . 5606) (#("user" 0 4 (fontified nil)) . 5583) (5583 . 5587) (#("UserID" 0 6 (fontified nil)) . -5583) (5583 . 5589) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5583) (undo-tree-id764 . -4) (undo-tree-id765 . -4) 5587) nil (25950 28437 976552 756000) 0 nil])
([nil nil ((#("uuid.UUID" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 9 (fontified t face tree-sitter-hl-face:property)) . 5591)) nil (25950 28437 976551 224000) 0 nil])
([nil nil ((5591 . 5593)) nil (25950 28437 976550 853000) 0 nil])
([nil nil ((5593 . 5596)) nil (25950 28437 976550 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 5596 5598 #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 5591 5598 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 5591 5598 nil nil nil t nil) nil)) (5596 . 5598) (#("ID" 0 2 (fontified nil)) . 5596) (5596 . 5598) (#("ID" 0 2 (fontified nil)) . -5596) (5596 . 5598)) nil (25950 28437 976549 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 5583 5599 #s(yas--snippet nil (#s(yas--field 1 5591 5598 nil nil nil t nil)) nil 41 nil #s(yas--field 1 5591 5598 nil nil nil t nil) nil nil))) nil (25950 28437 976549 340000) 0 nil])
([nil nil ((5602 . 5604)) nil (25950 28437 976549 180000) 0 nil])
([nil nil ((5607 . 5609) (#("	" 0 1 (fontified nil)) . -5603) (5604 . 5608)) nil (25950 28437 976548 839000) 0 nil])
([nil nil ((5603 . 5605)) nil (25950 28437 976548 428000) 0 nil])
([nil nil ((5608 . 5609)) nil (25950 28437 976548 108000) 0 nil])
([nil nil ((5611 . 5621)) nil (25950 28437 976547 807000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5612) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5613) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5614) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5615) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5616) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5617) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5618) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5619) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("." 0 1 (fontified t)) . -5620) (undo-tree-id762 . -1) (undo-tree-id763 . -1) 5621) nil (25950 28437 976545 663000) 0 nil])
([nil nil ((5612 . 5617)) nil (25950 28437 976536 948000) 0 nil])
([nil nil ((5617 . 5621)) nil (25950 28437 976536 607000) 0 nil])
([nil nil ((#("K" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5619) (undo-tree-id744 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5620) (undo-tree-id745 . -1) 5621) nil (25950 28437 976536 66000) 0 nil])
([nil nil ((5619 . 5621)) nil (25950 28437 976534 233000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5627 5632 nil nil nil t #s(yas--field 2 5634 5639 nil nil nil t nil)) #s(yas--field 2 5634 5639 nil nil nil t nil)) nil 43 nil #s(yas--field 2 5634 5639 nil nil nil t nil) nil nil)) (5617 . 5677) (#("DeleteTag(${1:ctx context.Context}, ${2:arg database.DeleteTagParams})" 0 70 (fontified nil)) . 5617) (5617 . 5687) (#("DELE" 0 4 (fontified nil)) . 5617) (5617 . 5621) (#("DeleteTag" 0 9 (fontified nil)) . -5617) (5617 . 5626) (#("DELE" 0 4 (fontified t face tree-sitter-hl-face:property)) . -5617) (undo-tree-id742 . -4) (undo-tree-id743 . -4) 5621) nil (25950 28437 976533 60000) 0 nil])
([nil nil ((#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 5628) (5627 . 5628)) nil (25950 28437 976531 187000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5627) (undo-tree-id740 . -1) (undo-tree-id741 . -1) 5628) nil (25950 28437 976530 466000) 0 nil])
([nil nil ((5627 . 5632)) nil (25950 28437 976529 3000) 0 nil])
([nil nil ((apply yas--snippet-revive 5629 5632 #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 5627 5632 nil nil nil t #s(yas--field 2 5634 5639 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 5627 5632 nil nil nil t #s(yas--field 2 5634 5639 nil nil nil t nil)) nil)) (5629 . 5632) (#("CTX" 0 3 (fontified nil)) . 5629) (5629 . 5632) (#("CTX" 0 3 (fontified nil)) . 5629) (5629 . 5632) (#("CTX" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5629) (undo-tree-id738 . -3) (undo-tree-id739 . -3) 5632) nil (25950 28437 976528 232000) 0 nil])
([nil nil ((5635 . 5637) (#("arg database.DeleteTagParams" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 28 (fontified nil face tree-sitter-hl-face:property)) . 5635) (5634 . 5635)) nil (25950 28437 976526 348000) 0 nil])
([nil nil ((apply yas--snippet-revive 5634 5639 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 2 5634 5639 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 2 5634 5639 nil nil nil t nil) nil)) (5634 . 5639) (#("dbObj" 0 5 (fontified nil)) . 5634) (5634 . 5639) (#("dbO" 0 3 (fontified nil)) . 5634) (5634 . 5637) (#("dbObj" 0 5 (fontified nil)) . -5634) (5634 . 5639) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5634) (undo-tree-id736 . -3) (undo-tree-id737 . -3) 5637) nil (25950 28437 976525 116000) 0 nil])
([nil nil ((apply yas--snippet-revive 5617 5640 #s(yas--snippet nil (#s(yas--field 1 5627 5632 nil nil nil t #s(yas--field 2 5634 5639 nil nil nil t nil)) #s(yas--field 2 5634 5639 nil nil nil t nil)) nil 43 nil #s(yas--field 2 5634 5639 nil nil nil t nil) nil nil))) nil (25950 28437 976523 193000) 0 nil])
([nil nil ((5641 . 5642) (#(" " 0 1 (fontified nil)) . -5641) (5640 . 5641)) nil (25950 28437 976522 812000) 0 nil])
([nil nil ((5642 . 5649)) nil (25950 28437 976522 571000) 0 nil])
([nil nil ((5605 . 5606)) nil (25950 28437 976522 421000) 0 nil])
([nil nil ((5646 . 5647)) nil (25950 28437 976522 261000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5659) (5659 . 5660) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5659) (5659 . 5660) (5650 . 5660)) nil (25950 28437 976521 489000) 0 nil])
([nil nil ((5660 . 5662) (5661 . 5662) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5660) (5660 . 5662) (5659 . 5661)) nil (25950 28437 976520 798000) 0 nil])
([nil nil ((5662 . 5668)) nil (25950 28437 976520 337000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5685 5686 nil nil nil t #s(yas--field 2 5688 5691 nil nil nil t #s(yas--field 3 5693 5716 nil nil nil t nil))) #s(yas--field 2 5688 5691 nil nil nil t #s(yas--field 3 5693 5716 nil nil nil t nil)) #s(yas--field 3 5693 5716 nil nil nil t nil)) nil 46 nil #s(yas--field 3 5693 5716 nil nil nil t nil) nil nil)) (5668 . 5729) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5668) (5668 . 5744) (#("RespondWithError" 0 16 (fontified nil)) . -5668) (5668 . 5684)) nil (25950 28437 976519 656000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5686) (undo-tree-id735 . -21) (5685 . 5686)) nil (25950 28437 976518 935000) 0 nil])
([nil nil ((5689 . 5691) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5689) (undo-tree-id734 . -8) (5688 . 5689)) nil (25950 28437 976517 492000) 0 nil])
([nil nil ((5694 . 5706) (5693 . 5695) (#("\"" 0 1 (fontified nil)) . -5693) (undo-tree-id732 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 5694) (undo-tree-id733 . -10) (5693 . 5694)) nil (25950 28437 976516 130000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5703) (undo-tree-id729 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5704) (undo-tree-id730 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5705) (undo-tree-id731 . -1) 5706) nil (25950 28437 976513 124000) 0 nil])
([nil nil ((5703 . 5715)) nil (25950 28437 976500 281000) 0 nil])
([nil nil ((apply yas--snippet-revive 5668 5717 #s(yas--snippet nil (#s(yas--field 1 5685 5686 nil nil nil t #s(yas--field 2 5688 5691 nil nil nil t #s(yas--field 3 5693 5716 nil nil nil t nil))) #s(yas--field 2 5688 5691 nil nil nil t #s(yas--field 3 5693 5716 nil nil nil t nil)) #s(yas--field 3 5693 5716 nil nil nil t nil)) nil 46 nil #s(yas--field 3 5693 5716 nil nil nil t nil) nil nil))) nil (25950 28437 976499 800000) 0 nil])
([nil nil ((5717 . 5720)) nil (25950 28437 976499 329000) 0 nil])
([nil nil ((5720 . 5726)) nil (25950 28437 976494 270000) 0 nil])
([nil nil ((5730 . 5731) (#(" " 0 1 (fontified nil)) . -5730) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (5729 . 5730) (t 25950 28438 2427 907000)) nil (25950 28503 457049 190000) 0 nil])
([nil nil ((5731 . 5737)) nil (25950 28503 457040 805000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5753 5754 nil nil nil t #s(yas--field 2 5756 5759 nil nil nil t #s(yas--field 3 5761 5765 nil nil nil t nil))) #s(yas--field 2 5756 5759 nil nil nil t #s(yas--field 3 5761 5765 nil nil nil t nil)) #s(yas--field 3 5761 5765 nil nil nil t nil)) nil 47 nil #s(yas--field 3 5761 5765 nil nil nil t nil) nil nil)) (5737 . 5806) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 5737) (5737 . 5822) (#("RespondWithJSON" 0 15 (fontified nil)) . -5737) (5737 . 5752)) nil (25950 28503 457040 284000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5754) (5753 . 5754)) nil (25950 28503 457039 733000) 0 nil])
([nil nil ((5757 . 5759) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5757) (5756 . 5757)) nil (25950 28503 457039 332000) 0 nil])
([nil nil ((5761 . 5763) (#("\"" 0 1 (fontified nil)) . -5761) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 5762) (5761 . 5762)) nil (25950 28503 457038 481000) 0 nil])
([nil nil ((5762 . 5764)) nil (25950 28503 457037 769000) 0 nil])
([nil nil ((apply yas--snippet-revive 5737 5766 #s(yas--snippet nil (#s(yas--field 1 5753 5754 nil nil nil t #s(yas--field 2 5756 5759 nil nil nil t #s(yas--field 3 5761 5765 nil nil nil t nil))) #s(yas--field 2 5756 5759 nil nil nil t #s(yas--field 3 5761 5765 nil nil nil t nil)) #s(yas--field 3 5761 5765 nil nil nil t nil)) nil 47 nil #s(yas--field 3 5761 5765 nil nil nil t nil) nil nil))) nil (25950 28503 457037 379000) 0 nil])
([nil nil ((5766 . 5768)) nil (25950 28503 457036 497000) 0 nil])
([nil nil ((5768 . 5774)) nil (25950 28503 457033 321000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 5775) (undo-tree-id796 . -1) (undo-tree-id797 . 2) (undo-tree-id798 . -2) (t 25950 28503 570870 958000)) nil (25950 28506 345288 669000) 0 nil])
([nil nil ((5776 . 5778) (t 25950 28506 464723 371000)) nil (25950 28609 44460 164000) 0 nil])
([nil nil ((5778 . 5783)) nil (25950 28609 44459 463000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5793) (5793 . 5794) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5793) (5793 . 5794) (5783 . 5794)) nil (25950 28609 44458 721000) 0 nil])
([nil nil ((5793 . 5802)) nil (25950 28609 44458 10000) 0 nil])
([nil nil ((apply yas--snippet-revive 5802 5810 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (5802 . 5810) (#("DBConfig" 0 8 (fontified nil)) . 5802) (5802 . 5810) (#("DBConfig" 0 8 (fontified nil)) . -5802) (5802 . 5810)) nil (25950 28609 44457 88000) 0 nil])
([nil nil ((5810 . 5819)) nil (25950 28609 44456 197000) 0 nil])
([nil nil ((5819 . 5824)) nil (25950 28609 44455 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 5819 5833 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (5819 . 5833) (#("ResponseWriter" 0 14 (fontified nil)) . 5819) (5819 . 5833) (#("Respo" 0 5 (fontified nil)) . 5819) (5819 . 5824) (#("ResponseWriter" 0 14 (fontified nil)) . -5819) (5819 . 5833) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -5819) (undo-tree-id818 . -5) (undo-tree-id819 . -5) 5824) nil (25950 28609 44454 654000) 0 nil])
([nil nil ((5833 . 5854)) nil (25950 28609 44356 494000) 0 nil])
([nil nil ((5854 . 5859)) nil (25950 28609 44356 13000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5857) (undo-tree-id817 . -1) 5858) nil (25950 28609 44355 522000) 0 nil])
([nil nil ((5858 . 5871)) nil (25950 28609 44354 851000) 0 nil])
([nil nil ((5872 . 5873)) nil (25950 28609 44354 510000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5874) (5874 . 5875) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5874) (5874 . 5875) (5873 . 5875)) nil (25950 28609 44353 608000) 0 nil])
([nil nil ((5875 . 5876) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5875) (5875 . 5876) (5874 . 5876)) nil (25950 28609 44352 787000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4479) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4480) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4481) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4482) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4483) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4484) (undo-tree-id815 . -1) (undo-tree-id816 . -1) 4485) nil (25950 28609 44350 883000) 0 nil])
([nil nil ((4482 . 4489)) nil (25950 28609 44343 830000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4710) (undo-tree-id799 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4711) (undo-tree-id800 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4712) (undo-tree-id801 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4713) (undo-tree-id802 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4714) (undo-tree-id803 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4715) (undo-tree-id804 . -1) 4716) nil (25950 28609 44340 394000) 0 nil])
([nil nil ((4713 . 4720)) nil (25950 28609 44314 116000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5877 . 5878) (#("
" 0 1 (fontified nil)) . -6057) (5876 . 6058) 5807 (t 25950 28609 163946 94000)) nil (25950 28858 273066 42000) 0 nil])
([nil nil ((#("ime\"
	\"t" 0 4 (fontified t face tree-sitter-hl-face:string) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:string) 7 8 (fontified t face tree-sitter-hl-face:string)) . -96) (undo-tree-id923 . -7) (undo-tree-id924 . -7) (undo-tree-id925 . -7) (undo-tree-id926 . -7) (undo-tree-id927 . -7) (undo-tree-id928 . -7) (#("
" 0 1 (fontified t)) . -208) (211 . 212) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -211) 212 (213 . 222) (4987 . 4989) (4988 . 4993) (#(" " 0 1 (fontified t)) . 4993) (5002 . 5007) (5054 . 5057) (5536 . 5537) (#("  " 0 2 (fontified t)) . -5536) 5538 (5578 . 5582) (5605 . 5606) (#("  " 0 2 (fontified t)) . -5605) 5607 (#("	" 0 1 (fontified t)) . 6058) 5878) nil (25950 28858 273063 257000) 0 nil])
([nil nil ((5930 . 5931) (#("ren" 0 3 (fontified t face tree-sitter-hl-face:variable)) . 5930) (5934 . 5935) (#("me" 0 2 (fontified t face tree-sitter-hl-face:variable)) . 5934) 5930 (5988 . 5989) (#("ren" 0 3 (fontified t face tree-sitter-hl-face:variable)) . 5988) (5992 . 5993) (#("me" 0 2 (fontified t face tree-sitter-hl-face:variable)) . 5992) 5988) nil (25950 28858 273054 10000) 0 nil])
([nil nil ((6067 . 6069)) nil (25950 28858 273052 567000) 0 nil])
([nil nil ((6069 . 6073)) nil (25950 28858 273051 926000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6072) (undo-tree-id922 . -1) 6073) nil (25950 28858 273051 45000) 0 nil])
([nil nil ((6072 . 6081)) nil (25950 28858 273050 464000) 0 nil])
([nil nil ((6081 . 6088)) nil (25950 28858 273050 43000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6087) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) 6088) nil (25950 28858 273048 590000) 0 nil])
([nil nil ((6087 . 6088)) nil (25950 28858 273044 883000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6087) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 6088) nil (25950 28858 273043 921000) 0 nil])
([nil nil ((6087 . 6089)) nil (25950 28858 273041 587000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil nil)) (6086 . 6148) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 6086) (6086 . 6158) (#("Cre" 0 3 (fontified nil)) . 6086) (6086 . 6089) (#("CreateUser" 0 10 (fontified nil)) . -6086) (6086 . 6096) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6086) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 6089) nil (25950 28858 273039 714000) 0 nil])
([nil nil ((apply yas--snippet-revive 6086 6148 #s(yas--snippet nil (#s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil nil))) nil (25950 28858 273032 771000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil nil))) nil (25950 28858 273032 330000) 0 nil])
([nil nil ((6086 . 6089) (#("CreateUser" 0 10 (fontified nil)) . 6086) (6086 . 6096) (#("Cre" 0 3 (fontified nil)) . 6086) (6086 . 6089) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 6086) (6086 . 6158) (#("CreateUser(ctx context.Context, arg database.CreateUserParams)" 0 10 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 10 11 (fontified t face (rainbow-delimiters-depth-2-face)) 11 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 30 (fontified t face tree-sitter-hl-face:property) 30 32 (fontified t) 32 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 44 (fontified t face tree-sitter-hl-face:variable) 44 45 (fontified t) 45 61 (fontified t face tree-sitter-hl-face:property) 61 62 (fontified t face (rainbow-delimiters-depth-2-face))) . 6086) (undo-tree-id896 . 51) (undo-tree-id897 . -11) (undo-tree-id898 . -11) (apply yas--snippet-revive 6086 6148 #s(yas--snippet nil (#s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil 50 nil #s(yas--field 1 6097 6116 nil nil nil nil #s(yas--field 2 6118 6147 nil nil nil nil nil)) nil nil))) nil (25950 28858 273030 797000) 0 nil])
([nil nil ((6089 . 6095)) nil (25950 28858 273028 12000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6086) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6087) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6088) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6089) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6090) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6091) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6092) (undo-tree-id893 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6093) (undo-tree-id894 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6094) (undo-tree-id895 . -1) 6095) nil (25950 28858 273024 776000) 0 nil])
([nil nil ((6086 . 6089)) nil (25950 28858 273011 592000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6093 6098 nil nil nil t #s(yas--field 2 6100 6100 nil nil nil t nil)) #s(yas--field 2 6100 6100 nil nil nil t nil)) nil 51 nil #s(yas--field 2 6100 6100 nil nil nil t nil) nil nil)) (6086 . 6140) (#("AddTag(${1:ctx context.Context}, ${2:arg database.AddTagParams})" 0 64 (fontified nil)) . 6086) (6086 . 6150) (#("Add" 0 3 (fontified nil)) . 6086) (6086 . 6089) (#("AddTag" 0 6 (fontified nil)) . -6086) (6086 . 6092) (#("Add" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6086) (undo-tree-id871 . -3) (undo-tree-id872 . -3) 6089) nil (25950 28858 273010 710000) 0 nil])
([nil nil ((6094 . 6098) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 6094) (6093 . 6094)) nil (25950 28858 273008 506000) 0 nil])
([nil nil ((apply yas--snippet-revive 6095 6098 #s(yas--snippet nil nil nil 52 nil nil #s(yas--field 1 6093 6098 nil nil nil t #s(yas--field 2 6100 6100 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil #s(yas--field 1 6093 6098 nil nil nil t #s(yas--field 2 6100 6100 nil nil nil t nil)) nil)) (6095 . 6098) (#("CTX" 0 3 (fontified nil)) . 6095) (6095 . 6098) (#("CTX" 0 3 (fontified nil)) . 6095) (6095 . 6098) (#("CTX" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6095) (undo-tree-id869 . -3) (undo-tree-id870 . -3) 6098) nil (25950 28858 273006 262000) 0 nil])
([nil nil ((#("arg database.AddTagParams" 0 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 25 (fontified t face tree-sitter-hl-face:property)) . 6100)) nil (25950 28858 273003 286000) 0 nil])
([nil nil ((apply yas--snippet-revive 6086 6101 #s(yas--snippet nil (#s(yas--field 1 6093 6098 nil nil nil t #s(yas--field 2 6100 6100 nil nil nil t nil)) #s(yas--field 2 6100 6100 nil nil nil t nil)) nil 51 nil #s(yas--field 2 6100 6100 nil nil nil t nil) nil nil))) nil (25950 28858 273002 274000) 0 nil])
([nil nil ((6067 . 6069)) nil (25950 28858 273001 313000) 0 nil])
([nil nil ((6069 . 6090)) nil (25950 28858 273000 842000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6091) (6091 . 6092) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6091) (6091 . 6092) (6090 . 6092)) nil (25950 28858 272999 549000) 0 nil])
([nil nil ((6092 . 6094)) nil (25950 28858 272997 846000) 0 nil])
([nil nil ((6094 . 6097)) nil (25950 28858 272997 395000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6096) (undo-tree-id867 . -1) (undo-tree-id868 . -1) 6097) nil (25950 28858 272996 524000) 0 nil])
([nil nil ((6096 . 6115)) nil (25950 28858 272994 600000) 0 nil])
([nil nil ((apply yas--snippet-revive 6112 6124 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (6112 . 6124) (#("AddTagParams" 0 12 (fontified nil)) . 6112) (6112 . 6124) (#("Add" 0 3 (fontified nil)) . 6112) (6112 . 6115) (#("AddTagParams" 0 12 (fontified nil)) . -6112) (6112 . 6124) (#("Add" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6112) (undo-tree-id865 . -3) (undo-tree-id866 . -3) 6115) nil (25950 28858 272992 767000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6125) (6125 . 6126) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6125) (6125 . 6126) (6124 . 6126)) nil (25950 28858 272988 599000) 0 nil])
([nil nil ((6126 . 6128) (6127 . 6128) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6126) (6126 . 6128) (6125 . 6127)) nil (25950 28858 272987 66000) 0 nil])
([nil nil ((6128 . 6137)) nil (25950 28858 272985 824000) 0 nil])
([nil nil ((apply yas--snippet-revive 6137 6142 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (6137 . 6142) (#("New()" 0 5 (fontified nil)) . 6137) (6137 . 6142) (#("New" 0 3 (fontified nil)) . -6137) (6137 . 6140)) nil (25950 28858 272984 481000) 0 nil])
([nil nil ((6142 . 6143)) nil (25950 28858 272983 540000) 0 nil])
([nil nil ((6143 . 6146)) nil (25950 28858 272983 129000) 0 nil])
([nil nil ((6146 . 6155)) nil (25950 28858 272982 528000) 0 nil])
([nil nil ((apply yas--snippet-revive 6152 6159 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (6152 . 6159) (#("tagBody" 0 7 (fontified nil)) . 6152) (6152 . 6159) (#("tag" 0 3 (fontified nil)) . 6152) (6152 . 6155) (#("tagBody" 0 7 (fontified nil)) . -6152) (6152 . 6159) (#("tag" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6152) (undo-tree-id863 . -3) (undo-tree-id864 . -3) 6155) nil (25950 28858 272980 514000) 0 nil])
([nil nil ((6159 . 6160)) nil (25950 28858 272977 338000) 0 nil])
([nil nil ((apply yas--snippet-revive 6160 6164 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (6160 . 6164) (#("Name" 0 4 (fontified nil)) . 6160) (6160 . 6164) (#("Name" 0 4 (fontified nil)) . -6160) (6160 . 6164)) nil (25950 28858 272976 216000) 0 nil])
([nil nil ((6164 . 6165)) nil (25950 28858 272974 623000) 0 nil])
([nil nil ((6165 . 6168)) nil (25950 28858 272974 152000) 0 nil])
([nil nil ((6168 . 6172)) nil (25950 28858 272973 651000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6176 6183 nil nil nil t nil)) nil 57 nil #s(yas--field 1 6176 6183 nil nil nil t nil) nil nil)) (6168 . 6186) (#("UserID: ${1:uuid.UUID}," 0 23 (fontified nil)) . 6168) (6168 . 6191) (#("user" 0 4 (fontified nil)) . 6168) (6168 . 6172) (#("UserID" 0 6 (fontified nil)) . -6168) (6168 . 6174) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6168) (undo-tree-id861 . -4) (undo-tree-id862 . -4) 6172) nil (25950 28858 272972 399000) 0 nil])
([nil nil ((6177 . 6181) (#("uuid.UUID" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 9 (fontified nil face tree-sitter-hl-face:property)) . 6177) (6176 . 6177)) nil (25950 28858 272970 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 6181 6183 #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 6176 6183 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 6176 6183 nil nil nil t nil) nil)) (6181 . 6183) (#("ID" 0 2 (fontified nil)) . 6181) (6181 . 6183) (#("ID" 0 2 (fontified nil)) . -6181) (6181 . 6183)) nil (25950 28858 272969 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 6168 6184 #s(yas--snippet nil (#s(yas--field 1 6176 6183 nil nil nil t nil)) nil 57 nil #s(yas--field 1 6176 6183 nil nil nil t nil) nil nil))) nil (25950 28858 272969 393000) 0 nil])
([nil nil ((6184 . 6187)) nil (25950 28858 272969 123000) 0 nil])
([nil nil ((6187 . 6188)) nil (25950 28858 272968 702000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6187) (undo-tree-id860 . -1) 6188) nil (25950 28858 272967 770000) 0 nil])
([nil nil ((6187 . 6190)) nil (25950 28858 272966 648000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6198 6207 nil nil nil t nil)) nil 59 nil #s(yas--field 1 6198 6207 nil nil nil t nil) nil nil)) (6187 . 6208) (#("CreatedAt: ${1:time.Time}," 0 26 (fontified nil)) . 6187) (6187 . 6213) (#("cre" 0 3 (fontified nil)) . 6187) (6187 . 6190) (#("CreatedAt" 0 9 (fontified nil)) . -6187) (6187 . 6196) (#("cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6187) (undo-tree-id858 . -3) (undo-tree-id859 . -3) 6190) nil (25950 28858 272965 446000) 0 nil])
([nil nil ((6199 . 6202) (#("time.Time" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 9 (fontified nil face tree-sitter-hl-face:property)) . 6199) (6198 . 6199)) nil (25950 28858 272962 871000) 0 nil])
([nil nil ((apply yas--snippet-revive 6198 6207 #s(yas--snippet nil nil nil 60 nil nil #s(yas--field 1 6198 6207 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil #s(yas--field 1 6198 6207 nil nil nil t nil) nil)) (6198 . 6207) (#("timeStamp" 0 9 (fontified nil)) . 6198) (6198 . 6207) (#("time" 0 4 (fontified nil)) . 6198) (6198 . 6202) (#("timeStamp" 0 9 (fontified nil)) . -6198) (6198 . 6207) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6198) (undo-tree-id856 . -4) (undo-tree-id857 . -4) 6202) nil (25950 28858 272961 589000) 0 nil])
([nil nil ((apply yas--snippet-revive 6187 6208 #s(yas--snippet nil (#s(yas--field 1 6198 6207 nil nil nil t nil)) nil 59 nil #s(yas--field 1 6198 6207 nil nil nil t nil) nil nil))) nil (25950 28858 272960 357000) 0 nil])
([nil nil ((6208 . 6211)) nil (25950 28858 272960 46000) 0 nil])
([nil nil ((6211 . 6214)) nil (25950 28858 272959 595000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6222 6231 nil nil nil t nil)) nil 61 nil #s(yas--field 1 6222 6231 nil nil nil t nil) nil nil)) (6211 . 6232) (#("UpdatedAt: ${1:time.Time}," 0 26 (fontified nil)) . 6211) (6211 . 6237) (#("Upd" 0 3 (fontified nil)) . 6211) (6211 . 6214) (#("UpdatedAt" 0 9 (fontified nil)) . -6211) (6211 . 6220) (#("Upd" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6211) (undo-tree-id854 . -3) (undo-tree-id855 . -3) 6214) nil (25950 28858 272958 223000) 0 nil])
([nil nil ((6223 . 6226) (#("time.Time" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 9 (fontified nil face tree-sitter-hl-face:property)) . 6223) (6222 . 6223)) nil (25950 28858 272955 548000) 0 nil])
([nil nil ((apply yas--snippet-revive 6222 6231 #s(yas--snippet nil nil nil 62 nil nil #s(yas--field 1 6222 6231 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 62 nil nil #s(yas--field 1 6222 6231 nil nil nil t nil) nil)) (6222 . 6231) (#("timeStamp" 0 9 (fontified nil)) . 6222) (6222 . 6231) (#("time" 0 4 (fontified nil)) . 6222) (6222 . 6226) (#("timeStamp" 0 9 (fontified nil)) . -6222) (6222 . 6231) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6222) (undo-tree-id852 . -4) (undo-tree-id853 . -4) 6226) nil (25950 28858 272954 5000) 0 nil])
([nil nil ((apply yas--snippet-revive 6211 6232 #s(yas--snippet nil (#s(yas--field 1 6222 6231 nil nil nil t nil)) nil 61 nil #s(yas--field 1 6222 6231 nil nil nil t nil) nil nil))) nil (25950 28858 272952 262000) 0 nil])
([nil nil ((6268 . 6270)) nil (25950 28858 272951 480000) 0 nil])
([nil nil ((6270 . 6271)) nil (25950 28858 272950 659000) 0 nil])
([nil nil ((apply yas--snippet-revive 6268 6273 #s(yas--snippet nil nil nil 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 63 nil nil nil nil)) (6268 . 6273) (#("dbObj" 0 5 (fontified nil)) . 6268) (6268 . 6273) (#("dbO" 0 3 (fontified nil)) . 6268) (6268 . 6271) (#("dbObj" 0 5 (fontified nil)) . -6268) (6268 . 6273) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6268) (undo-tree-id850 . -3) (undo-tree-id851 . -3) 6271) nil (25950 28858 272948 976000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6128) (undo-tree-id848 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6129) (undo-tree-id849 . -1) 6130) nil (25950 28858 272945 910000) 0 nil])
([nil nil ((6128 . 6130)) nil (25950 28858 272943 966000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6146) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6147) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6148) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6149) (undo-tree-id847 . -1) 6150) nil (25950 28858 272942 534000) 0 nil])
([nil nil ((6146 . 6149)) nil (25950 28858 272937 294000) 0 nil])
([nil nil ((apply yas--snippet-revive 6146 6150 #s(yas--snippet nil nil nil 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 64 nil nil nil nil)) (6146 . 6150) (#("Name" 0 4 (fontified nil)) . 6146) (6146 . 6150) (#("Nam" 0 3 (fontified nil)) . 6146) (6146 . 6149) (#("Name" 0 4 (fontified nil)) . -6146) (6146 . 6150) (#("Nam" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6146) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -1) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) 6149) nil (25950 28858 272931 924000) 0 nil])
([nil nil ((6275 . 6279) (t 25950 28858 393334 852000)) nil (25950 28988 808019 32000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6292) (6292 . 6293) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6292) (6292 . 6293) (6279 . 6293)) nil (25950 28988 808017 610000) 0 nil])
([nil nil ((6293 . 6295) (6294 . 6295) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 6293) (6293 . 6295) (6292 . 6294)) nil (25950 28988 808015 866000) 0 nil])
([nil nil ((6295 . 6301)) nil (25950 28988 808014 253000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6301 6301 nil nil nil t #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil))) #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil)) #s(yas--field 3 6313 6332 nil nil nil nil nil)) nil 65 nil #s(yas--field 1 6301 6301 nil nil nil t #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil))) nil nil)) (6301 . 6370) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 6301) (6301 . 6386) (#("RespondWithJSON" 0 15 (fontified nil)) . -6301) (6301 . 6316)) nil (25950 28988 808012 751000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 21 (fontified t face tree-sitter-hl-face:property)) . 6317)) nil (25950 28988 808010 787000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6301) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6302) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6303) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6304) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6305) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6306) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6307) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6308) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6309) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6310) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6311) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (#("J" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6312) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6313) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6314) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6315) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6316) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . 1) (undo-tree-id1177 . -1) 6317) nil (25950 28988 808007 260000) 0 nil])
([nil nil ((apply yas--snippet-revive 6301 6333 #s(yas--snippet nil (#s(yas--field 1 6301 6301 nil nil nil t #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil))) #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil)) #s(yas--field 3 6313 6332 nil nil nil nil nil)) nil 65 nil #s(yas--field 1 6301 6301 nil nil nil t #s(yas--field 2 6303 6311 nil nil nil nil #s(yas--field 3 6313 6332 nil nil nil nil nil))) nil nil))) nil (25950 28988 807985 129000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6284) (undo-tree-id1128 . -1) 6285) nil (25950 28988 807983 857000) 0 nil])
([nil nil ((6284 . 6285)) nil (25950 28988 807982 304000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6300) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) 6301) nil (25950 28988 807981 82000) 0 nil])
([nil nil ((6300 . 6301)) nil (25950 28988 807979 178000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6318 6339 nil nil nil nil #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil))) #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil)) #s(yas--field 3 6351 6361 nil nil nil nil nil)) nil 66 nil #s(yas--field 1 6318 6339 nil nil nil nil #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil))) nil nil)) (6301 . 6362) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 6301) (6301 . 6377) (#("RespondWithError" 0 16 (fontified nil)) . -6301) (6301 . 6317)) nil (25950 28988 807977 846000) 0 nil])
([nil nil ((apply yas--snippet-revive 6301 6362 #s(yas--snippet nil (#s(yas--field 1 6318 6339 nil nil nil nil #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil))) #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil)) #s(yas--field 3 6351 6361 nil nil nil nil nil)) nil 66 nil #s(yas--field 1 6318 6339 nil nil nil nil #s(yas--field 2 6341 6349 nil nil nil nil #s(yas--field 3 6351 6361 nil nil nil nil nil))) nil nil))) nil (25950 28988 807975 882000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6373) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6374) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6375) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6376) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6377) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6378) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6379) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6380) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (#(" " 0 1 (fontified t)) . -6381) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6382) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6383) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6384) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6385) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6386) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6387) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6388) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6389) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -6390) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6391) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . 1) (undo-tree-id1117 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6392) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . 1) (undo-tree-id1121 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6393) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . 1) (undo-tree-id1125 . -1) 6394) nil (25950 28988 807970 61000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6362) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (#(" " 0 1 (fontified t)) . -6363) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6364) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6365) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6366) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6367) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#(" " 0 1 (fontified t)) . -6368) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6369) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6370) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6371) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (#("," 0 1 (fontified t)) . -6372) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) 6373) nil (25950 28988 807927 783000) 0 nil])
([nil nil ((6362 . 6365)) nil (25950 28988 807901 745000) 0 nil])
([nil nil ((6365 . 6371)) nil (25950 28988 807900 953000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6319) (undo-tree-id977 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6320) (undo-tree-id978 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6321) (undo-tree-id979 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6322) (undo-tree-id980 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6323) (undo-tree-id981 . -1) (#("." 0 1 (fontified t)) . -6324) (undo-tree-id982 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6325) (undo-tree-id983 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6326) (undo-tree-id984 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6327) (undo-tree-id985 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6328) (undo-tree-id986 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6329) (undo-tree-id987 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6330) (undo-tree-id988 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6331) (undo-tree-id989 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6332) (undo-tree-id990 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6333) (undo-tree-id991 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6334) (undo-tree-id992 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6335) (undo-tree-id993 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6336) (undo-tree-id994 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6337) (undo-tree-id995 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6338) (undo-tree-id996 . -1) 6339) nil (25950 28988 807895 894000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6321) (undo-tree-id969 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6322) (undo-tree-id970 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6323) (undo-tree-id971 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6324) (undo-tree-id972 . -1) (#(" " 0 1 (fontified t)) . -6325) (undo-tree-id973 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6326) (undo-tree-id974 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6327) (undo-tree-id975 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6328) (undo-tree-id976 . -1) 6329) nil (25950 28988 807876 488000) 0 nil])
([nil nil ((6321 . 6324)) nil (25950 28988 807868 853000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6329) (undo-tree-id962 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6330) (undo-tree-id963 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6331) (undo-tree-id964 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6332) (undo-tree-id965 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6333) (undo-tree-id966 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6334) (undo-tree-id967 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6335) (undo-tree-id968 . -1) 6336) nil (25950 28988 807866 589000) 0 nil])
([nil nil ((5659 . 5661)) nil (25950 28988 807366 912000) 0 nil])
([nil nil ((5661 . 5682)) nil (25950 28988 807366 100000) 0 nil])
([nil nil ((5682 . 5693)) nil (25950 28988 807365 269000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5690) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5691) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -5692) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) 5693) nil (25950 28988 807363 405000) 0 nil])
([nil nil ((5690 . 5691)) nil (25950 28988 807327 879000) 0 nil])
([nil nil ((5691 . 5699)) nil (25950 28988 807320 475000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6366) (undo-tree-id1209 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6367) (undo-tree-id1210 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6368) (undo-tree-id1211 . -1) 6369 (t 25950 28988 833059 770000)) nil (25950 29028 505757 842000) 0 nil])
([nil nil ((6367 . 6369) (6366 . 6368) (#("\"" 0 1 (fontified nil)) . -6366) (6366 . 6367)) nil (25950 29028 505754 706000) 0 nil])
([nil nil ((6369 . 6386)) nil (25950 29028 505753 164000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6385) (undo-tree-id1208 . -1) 6386) nil (25950 29028 505751 350000) 0 nil])
([nil nil ((6385 . 6387)) nil (25950 29028 505749 226000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6384) (undo-tree-id1205 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6385) (undo-tree-id1206 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6386) (undo-tree-id1207 . -1) 6387) nil (25950 29028 505747 934000) 0 nil])
([nil nil ((6384 . 6388)) nil (25950 29028 505745 479000) 0 nil])
([nil nil ((6314 . 6316)) nil (25950 29028 505745 169000) 0 nil])
([nil nil ((6316 . 6322)) nil (25950 29028 505744 718000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6321) (undo-tree-id1204 . -1) 6322) nil (25950 29028 505744 247000) 0 nil])
([nil nil ((6321 . 6326)) nil (25950 29028 505742 895000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6321) (undo-tree-id1199 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6322) (undo-tree-id1200 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6323) (undo-tree-id1201 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -6324) (undo-tree-id1202 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6325) (undo-tree-id1203 . -1) 6326) nil (25950 29028 505740 911000) 0 nil])
([nil nil ((6321 . 6339)) nil (25950 29028 505737 635000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6337) (undo-tree-id1197 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6338) (undo-tree-id1198 . -1) 6339) nil (25950 29028 505736 543000) 0 nil])
([nil nil ((6337 . 6353)) nil (25950 29028 505734 459000) 0 nil])
([nil nil ((6441 . 6443)) nil (25950 29028 505733 457000) 0 nil])
([nil nil ((6443 . 6449)) nil (25950 29028 505732 665000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6465 6466 nil nil nil t #s(yas--field 2 6468 6471 nil nil nil t #s(yas--field 3 6473 6476 nil nil nil t nil))) #s(yas--field 2 6468 6471 nil nil nil t #s(yas--field 3 6473 6476 nil nil nil t nil)) #s(yas--field 3 6473 6476 nil nil nil t nil)) nil 67 nil #s(yas--field 3 6473 6476 nil nil nil t nil) nil nil)) (6449 . 6518) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 6449) (6449 . 6534) (#("RespondWithJSON" 0 15 (fontified nil)) . -6449) (6449 . 6464)) nil (25950 29028 505731 343000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 6466) (undo-tree-id1196 . -21) (6465 . 6466)) nil (25950 29028 505728 969000) 0 nil])
([nil nil ((#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 6469) (undo-tree-id1193 . -8) (undo-tree-id1194 . -5) (undo-tree-id1195 . -6) (6468 . 6469)) nil (25950 29028 505726 53000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -6468) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) 6469) nil (25950 29028 505722 376000) 0 nil])
([nil nil ((6468 . 6471)) nil (25950 29028 505713 981000) 0 nil])
([nil nil ((#("payload interface{}" 0 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 16 (fontified t face tree-sitter-hl-face:keyword) 16 17 (fontified t face tree-sitter-hl-face:keyword) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 19 (fontified t face (rainbow-delimiters-depth-3-face))) . 6473) (undo-tree-id1178 . -19) (undo-tree-id1179 . -8) (undo-tree-id1180 . -9) (undo-tree-id1181 . -7)) nil (25950 29028 505712 137000) 0 nil])
([nil nil ((6473 . 6475)) nil (25950 29028 505697 580000) 0 nil])
([nil nil ((6475 . 6476)) nil (25950 29028 505696 428000) 0 nil])
([nil nil ((apply yas--snippet-revive 6449 6477 #s(yas--snippet nil (#s(yas--field 1 6465 6466 nil nil nil t #s(yas--field 2 6468 6471 nil nil nil t #s(yas--field 3 6473 6476 nil nil nil t nil))) #s(yas--field 2 6468 6471 nil nil nil t #s(yas--field 3 6473 6476 nil nil nil t nil)) #s(yas--field 3 6473 6476 nil nil nil t nil)) nil 67 nil #s(yas--field 3 6473 6476 nil nil nil t nil) nil nil))) nil (25950 29028 505689 726000) 0 nil])
([nil nil ((7561 . 7563) (t 25950 29028 531189 641000)) nil (25951 28284 155170 195000) 0 nil])
([nil nil ((7563 . 7566)) nil (25951 28284 155169 694000) 0 nil])
([nil nil ((apply yas--snippet-revive 7563 7571 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (7563 . 7571) (#("v1Router" 0 8 (fontified nil)) . 7563) (7563 . 7571) (#("v1R" 0 3 (fontified nil)) . 7563) (7563 . 7566) (#("v1Router" 0 8 (fontified nil)) . -7563) (7563 . 7571) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7563) (undo-tree-id12 . -3) (undo-tree-id13 . -3) 7566) nil (25951 28284 155168 963000) 0 nil])
([nil nil ((7571 . 7575)) nil (25951 28284 155167 570000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7577 7584 nil nil nil t #s(yas--field 2 7586 7618 nil nil nil t nil)) #s(yas--field 2 7586 7618 nil nil nil t nil)) nil 1 nil #s(yas--field 2 7586 7618 nil nil nil t nil) nil nil)) (7572 . 7620) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 7572) (7572 . 7630) (#("Pos" 0 3 (fontified nil)) . 7572) (7572 . 7575) (#("Post" 0 4 (fontified nil)) . -7572) (7572 . 7576) (#("Pos" 0 3 (face tree-sitter-hl-face:property fontified t)) . -7572) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 7575) nil (25951 28284 155167 29000) 0 nil])
([nil nil ((7578 . 7579) (7577 . 7579) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7577) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 7578) (7577 . 7578)) nil (25951 28284 155164 775000) 0 nil])
([nil nil ((#("6" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7578) (undo-tree-id9 . -1) 7579) nil (25951 28284 155164 154000) 0 nil])
([nil nil ((7578 . 7581)) nil (25951 28284 155163 623000) 0 nil])
([nil nil ((7581 . 7584)) nil (25951 28284 155163 352000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7583) (undo-tree-id8 . -1) 7584) nil (25951 28284 155163 72000) 0 nil])
([nil nil ((7587 . 7591) (#("handlerFn http.HandlerFunc" 0 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 14 (face tree-sitter-hl-face:variable fontified nil) 14 15 (fontified nil) 15 26 (face tree-sitter-hl-face:property fontified nil)) . 7587) (7586 . 7587)) nil (25951 28284 155162 240000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7590) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 7591) nil (25951 28284 155161 679000) 0 nil])
([nil nil ((7590 . 7591)) nil (25951 28284 155160 477000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7599 7606 nil nil nil t #s(yas--field 2 7608 7617 nil nil nil t nil)) #s(yas--field 2 7608 7617 nil nil nil t nil)) nil 2 nil #s(yas--field 2 7608 7617 nil nil nil t nil) #s(yas--field 2 7586 7618 nil nil nil t nil) nil)) (7586 . 7640) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 7586) (7586 . 7650) (#("authe" 0 5 (fontified nil)) . 7586) (7586 . 7591) (#("authenticate" 0 12 (fontified nil)) . -7586) (7586 . 7598) (#("authe" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -7586) (undo-tree-id4 . -5) (undo-tree-id5 . -5) 7591) nil (25951 28284 155158 974000) 0 nil])
([nil nil ((7600 . 7603) (#("a *utils.DBConfig" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 3 (face tree-sitter-hl-face:operator fontified nil) 3 8 (face tree-sitter-hl-face:variable fontified nil) 8 9 (fontified nil) 9 17 (face tree-sitter-hl-face:property fontified nil)) . 7600) (7599 . 7600)) nil (25951 28284 155156 429000) 0 nil])
([nil nil ((apply yas--snippet-revive 7600 7606 #s(yas--snippet nil nil nil 3 nil nil #s(yas--field 1 7599 7606 nil nil nil t #s(yas--field 2 7608 7617 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil #s(yas--field 1 7599 7606 nil nil nil t #s(yas--field 2 7608 7617 nil nil nil t nil)) nil)) (7600 . 7606) (#("apiCfg" 0 6 (fontified nil)) . 7600) (7600 . 7606) (#("api" 0 3 (fontified nil)) . 7600) (7600 . 7603) (#("apiCfg" 0 6 (fontified nil)) . -7600) (7600 . 7606) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7600) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 7603) nil (25951 28284 155155 468000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 21 (face tree-sitter-hl-face:variable fontified t)) . 7608)) nil (25951 28284 155153 794000) 0 nil])
([nil nil ((7608 . 7614)) nil (25951 28284 155153 524000) 0 nil])
([nil nil ((apply yas--snippet-revive 7608 7617 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 2 7608 7617 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 2 7608 7617 nil nil nil t nil) nil)) (7608 . 7617) (#("createTag" 0 9 (fontified nil)) . 7608) (7608 . 7617) (#("create" 0 6 (fontified nil)) . 7608) (7608 . 7614) (#("createTag" 0 9 (fontified nil)) . -7608) (7608 . 7617) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -7608) (undo-tree-id0 . -6) (undo-tree-id1 . -6) 7614) nil (25951 28284 155152 171000) 0 nil])
([nil nil ((apply yas--snippet-revive 7586 7618 #s(yas--snippet nil (#s(yas--field 1 7599 7606 nil nil nil t #s(yas--field 2 7608 7617 nil nil nil t nil)) #s(yas--field 2 7608 7617 nil nil nil t nil)) nil 2 nil #s(yas--field 2 7608 7617 nil nil nil t nil) #s(yas--field 2 7586 7618 nil nil nil t nil) nil))) nil (25951 28284 155121 504000) 0 nil])
([nil nil ((apply yas--snippet-revive 7572 7619 #s(yas--snippet nil (#s(yas--field 1 7577 7584 nil nil nil t #s(yas--field 2 7586 7618 nil nil nil t nil)) #s(yas--field 2 7586 7618 nil nil nil t nil)) nil 1 nil #s(yas--field 2 7586 7618 nil nil nil t nil) nil nil))) nil (25951 28284 155118 138000) 0 nil])
([nil nil ((7622 . 7623) (#("	" 0 1 (fontified nil)) . 7621) (undo-tree-id84 . -1) (7621 . 7623) (#("	" 0 1 (fontified nil)) . 7620) (undo-tree-id85 . -1) (7619 . 7622) (t 25951 28284 176705 155000)) nil (25951 28423 508594 910000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7621) (undo-tree-id82 . -1) (#("	" 0 1 (fontified t)) . -7622) (undo-tree-id83 . -1) 7623) nil (25951 28423 508593 718000) 0 nil])
([nil nil ((7621 . 7626)) nil (25951 28423 508592 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 7623 7631 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (7623 . 7631) (#("v1Router" 0 8 (fontified nil)) . 7623) (7623 . 7631) (#("v1R" 0 3 (fontified nil)) . 7623) (7623 . 7626) (#("v1Router" 0 8 (fontified nil)) . -7623) (7623 . 7631) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7623) (undo-tree-id80 . -3) (undo-tree-id81 . -3) 7626) nil (25951 28423 508592 35000) 0 nil])
([nil nil ((7631 . 7635)) nil (25951 28423 508590 321000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7620) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#(" " 0 1 (fontified nil)) . -7621) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#(" " 0 1 (fontified t)) . -7622) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7623) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7624) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7625) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7626) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7627) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7628) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7629) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7630) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("." 0 1 (fontified t)) . -7631) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7632) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7633) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7634) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 7635) nil (25951 28423 508588 518000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7619) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 7620) nil (25951 28423 508578 970000) 0 nil])
([nil nil ((6479 . 6481)) nil (25951 28423 508578 149000) 0 nil])
([nil nil ((6481 . 6488)) nil (25951 28423 508577 828000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6486) (undo-tree-id46 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6487) (undo-tree-id47 . -1) 6488) nil (25951 28423 508577 277000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6495) (6495 . 6496) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -6495) (6495 . 6496) (6486 . 6496)) nil (25951 28423 508575 944000) 0 nil])
([nil nil ((6495 . 6496)) nil (25951 28423 508575 504000) 0 nil])
([nil nil ((6496 . 6504)) nil (25951 28423 508575 333000) 0 nil])
([nil nil ((apply yas--snippet-revive 6504 6512 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (6504 . 6512) (#("DBConfig" 0 8 (fontified nil)) . 6504) (6504 . 6512) (#("DBConfig" 0 8 (fontified nil)) . -6504) (6504 . 6512)) nil (25951 28423 508574 842000) 0 nil])
([nil nil ((6512 . 6522)) nil (25951 28423 508573 911000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6519) (undo-tree-id43 . -1) (#("ő" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6520) (undo-tree-id44 . -1) (#("." 0 1 (fontified t)) . -6521) (undo-tree-id45 . -1) 6522) nil (25951 28423 508573 149000) 0 nil])
([nil nil ((6519 . 6524)) nil (25951 28423 508571 155000) 0 nil])
([nil nil ((apply yas--snippet-revive 6521 6535 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (6521 . 6535) (#("ResponseWriter" 0 14 (fontified nil)) . 6521) (6521 . 6535) (#("Res" 0 3 (fontified nil)) . 6521) (6521 . 6524) (#("ResponseWriter" 0 14 (fontified nil)) . -6521) (6521 . 6535) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -6521) (undo-tree-id41 . -3) (undo-tree-id42 . -3) 6524) nil (25951 28423 508570 234000) 0 nil])
([nil nil ((6535 . 6548)) nil (25951 28423 508568 541000) 0 nil])
([nil nil ((apply yas--snippet-revive 6545 6552 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (6545 . 6552) (#("Request" 0 7 (fontified nil)) . 6545) (6545 . 6552) (#("Req" 0 3 (fontified nil)) . 6545) (6545 . 6548) (#("Request" 0 7 (fontified nil)) . -6545) (6545 . 6552) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -6545) (undo-tree-id39 . -3) (undo-tree-id40 . -3) 6548) nil (25951 28423 508567 699000) 0 nil])
([nil nil ((6552 . 6564)) nil (25951 28423 508565 585000) 0 nil])
([nil nil ((apply yas--snippet-revive 6560 6572 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (6560 . 6572) (#("database.Tag" 0 12 (fontified nil)) . 6560) (6560 . 6572) (#("data" 0 4 (fontified nil)) . 6560) (6560 . 6564) (#("database.Tag" 0 12 (fontified nil)) . -6560) (6560 . 6572) (#("data" 0 4 (face tree-sitter-hl-face:type fontified t)) . -6560) (undo-tree-id37 . -4) (undo-tree-id38 . -4) 6564) nil (25951 28423 508564 804000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6569) (undo-tree-id34 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6570) (undo-tree-id35 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6571) (undo-tree-id36 . -1) 6572) nil (25951 28423 508562 229000) 0 nil])
([nil nil ((6569 . 6573)) nil (25951 28423 508561 127000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6576) (6576 . 6577) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -6576) (6576 . 6577) (6574 . 6577)) nil (25951 28423 508560 656000) 0 nil])
([nil nil ((6577 . 6578) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 6577) (6577 . 6578) (6576 . 6578)) nil (25951 28423 508559 954000) 0 nil])
([nil nil ((6578 . 6583)) nil (25951 28423 508559 464000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6580) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6581) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("," 0 1 (fontified t)) . -6582) (undo-tree-id33 . -1) 6583) nil (25951 28423 508558 973000) 0 nil])
([nil nil ((6580 . 6599)) nil (25951 28423 508557 420000) 0 nil])
([nil nil ((6599 . 6600)) nil (25951 28423 508557 109000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6614 6619 nil nil nil t #s(yas--field 2 6621 6628 nil nil nil t nil)) #s(yas--field 2 6621 6628 nil nil nil t nil)) nil 10 nil #s(yas--field 2 6621 6628 nil nil nil t nil) nil nil)) (6597 . 6652) (#("GetTasksByUserId(${1:ctx context.Context}, ${2:userID uuid.UUID})" 0 65 (fontified nil)) . 6597) (6597 . 6662) (#("Get" 0 3 (fontified nil)) . 6597) (6597 . 6600) (#("GetTasksByUserId" 0 16 (fontified nil)) . -6597) (6597 . 6613) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -6597) (undo-tree-id27 . -3) (undo-tree-id28 . -3) 6600) nil (25951 28423 508556 278000) 0 nil])
([nil nil ((6615 . 6619) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 6615) (6614 . 6615)) nil (25951 28423 508554 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 6616 6619 #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 1 6614 6619 nil nil nil t #s(yas--field 2 6621 6628 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 1 6614 6619 nil nil nil t #s(yas--field 2 6621 6628 nil nil nil t nil)) nil)) (6616 . 6619) (#("CTX" 0 3 (fontified nil)) . 6616) (6616 . 6619) (#("CTX" 0 3 (fontified nil)) . 6616) (6616 . 6619) (#("CTX" 0 3 (face tree-sitter-hl-face:property fontified t)) . -6616) (undo-tree-id25 . -3) (undo-tree-id26 . -3) 6619) nil (25951 28423 508553 603000) 0 nil])
([nil nil ((#("userID uuid.UUID" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (fontified t) 7 11 (face tree-sitter-hl-face:variable fontified t) 11 12 (fontified t) 12 16 (face tree-sitter-hl-face:property fontified t)) . 6621)) nil (25951 28423 508489 172000) 0 nil])
([nil nil ((6621 . 6626)) nil (25951 28423 508488 831000) 0 nil])
([nil nil ((apply yas--snippet-revive 6626 6628 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 6621 6628 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 6621 6628 nil nil nil t nil) nil)) (6626 . 6628) (#("ID" 0 2 (fontified nil)) . 6626) (6626 . 6628) (#("ID" 0 2 (fontified nil)) . -6626) (6626 . 6628)) nil (25951 28423 508488 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 6597 6629 #s(yas--snippet nil (#s(yas--field 1 6614 6619 nil nil nil t #s(yas--field 2 6621 6628 nil nil nil t nil)) #s(yas--field 2 6621 6628 nil nil nil t nil)) nil 10 nil #s(yas--field 2 6621 6628 nil nil nil t nil) nil nil))) nil (25951 28423 508487 779000) 0 nil])
([nil nil ((6629 . 6631)) nil (25951 28423 508487 258000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6646) (6646 . 6647) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -6646) (6646 . 6647) (6631 . 6647)) nil (25951 28423 508486 307000) 0 nil])
([nil nil ((6647 . 6649) (6648 . 6649) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 6647) (6647 . 6649) (6646 . 6648)) nil (25951 28423 508484 974000) 0 nil])
([nil nil ((6649 . 6656)) nil (25951 28423 508483 752000) 0 nil])
([nil nil ((6646 . 6649)) nil (25951 28423 508483 171000) 0 nil])
([nil nil ((6649 . 6658)) nil (25951 28423 508482 650000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6672 6673 nil nil nil t #s(yas--field 2 6675 6678 nil nil nil t #s(yas--field 3 6680 6703 nil nil nil t nil))) #s(yas--field 2 6675 6678 nil nil nil t #s(yas--field 3 6680 6703 nil nil nil t nil)) #s(yas--field 3 6680 6703 nil nil nil t nil)) nil 13 nil #s(yas--field 3 6680 6703 nil nil nil t nil) nil nil)) (6655 . 6716) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 6655) (6655 . 6731) (#("Res" 0 3 (fontified nil)) . 6655) (6655 . 6658) (#("RespondWithError" 0 16 (fontified nil)) . -6655) (6655 . 6671) (#("Res" 0 3 (face tree-sitter-hl-face:property fontified t)) . -6655) (undo-tree-id23 . -3) (undo-tree-id24 . -3) 6658) nil (25951 28423 508481 648000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 6673) (6672 . 6673)) nil (25951 28423 508479 113000) 0 nil])
([nil nil ((6676 . 6678) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 6676) (6675 . 6676)) nil (25951 28423 508478 372000) 0 nil])
([nil nil ((6680 . 6682) (#("\"" 0 1 (fontified nil)) . -6680) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 6681) (6680 . 6681)) nil (25951 28423 508477 610000) 0 nil])
([nil nil ((6681 . 6702)) nil (25951 28423 508476 568000) 0 nil])
([nil nil ((apply yas--snippet-revive 6655 6704 #s(yas--snippet nil (#s(yas--field 1 6672 6673 nil nil nil t #s(yas--field 2 6675 6678 nil nil nil t #s(yas--field 3 6680 6703 nil nil nil t nil))) #s(yas--field 2 6675 6678 nil nil nil t #s(yas--field 3 6680 6703 nil nil nil t nil)) #s(yas--field 3 6680 6703 nil nil nil t nil)) nil 13 nil #s(yas--field 3 6680 6703 nil nil nil t nil) nil nil))) nil (25951 28423 508476 198000) 0 nil])
([nil nil ((6717 . 6719)) nil (25951 28423 508476 47000) 0 nil])
([nil nil ((6719 . 6725)) nil (25951 28423 508475 697000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6741 6742 nil nil nil t #s(yas--field 2 6744 6747 nil nil nil t #s(yas--field 3 6749 6754 nil nil nil t nil))) #s(yas--field 2 6744 6747 nil nil nil t #s(yas--field 3 6749 6754 nil nil nil t nil)) #s(yas--field 3 6749 6754 nil nil nil t nil)) nil 14 nil #s(yas--field 3 6749 6754 nil nil nil t nil) nil nil)) (6725 . 6794) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 6725) (6725 . 6810) (#("RespondWithJSON" 0 15 (fontified nil)) . -6725) (6725 . 6740)) nil (25951 28423 508474 765000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 6742) (undo-tree-id22 . -21) (6741 . 6742)) nil (25951 28423 508473 433000) 0 nil])
([nil nil ((6745 . 6747) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 6745) (undo-tree-id21 . -8) (6744 . 6745)) nil (25951 28423 508471 870000) 0 nil])
([nil nil ((6750 . 6754) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 6750) (undo-tree-id20 . -19) (6749 . 6750)) nil (25951 28423 508470 146000) 0 nil])
([nil nil ((apply yas--snippet-revive 6749 6754 #s(yas--snippet nil nil nil 15 nil nil #s(yas--field 3 6749 6754 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil #s(yas--field 3 6749 6754 nil nil nil t nil) nil)) (6749 . 6754) (#("tasks" 0 5 (fontified nil)) . 6749) (undo-tree-id14 . -5) (6749 . 6754) (#("tasks" 0 5 (fontified nil)) . 6749) (undo-tree-id15 . -5) (6749 . 6754) (#("tasks" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -6749) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) 6754) nil (25951 28423 508468 283000) 0 nil])
([nil nil ((apply yas--snippet-revive 6725 6755 #s(yas--snippet nil (#s(yas--field 1 6741 6742 nil nil nil t #s(yas--field 2 6744 6747 nil nil nil t #s(yas--field 3 6749 6754 nil nil nil t nil))) #s(yas--field 2 6744 6747 nil nil nil t #s(yas--field 3 6749 6754 nil nil nil t nil)) #s(yas--field 3 6749 6754 nil nil nil t nil)) nil 14 nil #s(yas--field 3 6749 6754 nil nil nil t nil) nil nil))) nil (25951 28423 508457 202000) 0 nil])
([nil nil ((6757 . 6759) (t 25951 28423 621205 458000)) nil (25951 28429 372581 762000) 0 nil])
([nil nil ((6759 . 6764)) nil (25951 28429 372578 516000) 0 nil])
([nil nil ((6764 . 6770) (t 25951 28429 388163 641000)) nil (25951 28618 301922 528000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6764) (undo-tree-id122 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6765) (undo-tree-id123 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6766) (undo-tree-id124 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6767) (undo-tree-id125 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -6768) (undo-tree-id126 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -6769) (undo-tree-id127 . -1) 6770) nil (25951 28618 301921 616000) 0 nil])
([nil nil ((#("G" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -6486) (undo-tree-id121 . -1) 6487) nil (25951 28618 301919 692000) 0 nil])
([nil nil ((6486 . 6487)) nil (25951 28618 301919 101000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6763) (undo-tree-id119 . -1) (undo-tree-id120 . -1) 6764) nil (25951 28618 301918 721000) 0 nil])
([nil nil ((6763 . 6775)) nil (25951 28618 301917 899000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6776) (6776 . 6777) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -6776) (6776 . 6777) (6775 . 6777)) nil (25951 28618 301917 488000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -6775) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . 1) (undo-tree-id115 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -6776) (undo-tree-id116 . -1) (undo-tree-id117 . 1) (undo-tree-id118 . -1) 6777) nil (25951 28618 301916 927000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6854 . 6855) (nil fontified nil 6775 . 6855) (6775 . 6855) 6774) nil (25951 28618 301914 42000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6857) (6857 . 6858) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -6857) (6857 . 6858) (6855 . 6858)) nil (25951 28618 301913 501000) 0 nil])
([nil nil ((6858 . 6859) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 6858) (6858 . 6859) (6857 . 6859)) nil (25951 28618 301913 40000) 0 nil])
([nil nil ((6859 . 6864)) nil (25951 28618 301912 689000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6863) (undo-tree-id111 . -1) 6864) nil (25951 28618 301912 88000) 0 nil])
([nil nil ((6863 . 6869)) nil (25951 28618 301911 537000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6859) (undo-tree-id101 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6860) (undo-tree-id102 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6861) (undo-tree-id103 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6862) (undo-tree-id104 . -1) (#("," 0 1 (fontified t)) . -6863) (undo-tree-id105 . -1) (#(" " 0 1 (fontified t)) . -6864) (undo-tree-id106 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6865) (undo-tree-id107 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6866) (undo-tree-id108 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6867) (undo-tree-id109 . -1) (#(" " 0 1 (fontified t)) . -6868) (undo-tree-id110 . -1) 6869) nil (25951 28618 301910 305000) 0 nil])
([nil nil ((6757 . 6759)) nil (25951 28618 301758 971000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6757) (undo-tree-id99 . -1) (#("
" 0 1 (fontified t)) . -6758) (undo-tree-id100 . -1) 6759) nil (25951 28618 301758 440000) 0 nil])
([nil nil ((6757 . 6759)) nil (25951 28618 301757 578000) 0 nil])
([nil nil ((6759 . 6769)) nil (25951 28618 301757 328000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6768) (undo-tree-id98 . -1) 6769) nil (25951 28618 301756 967000) 0 nil])
([nil nil ((6768 . 6769)) nil (25951 28618 301756 366000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6768) (undo-tree-id97 . -1) 6769) nil (25951 28618 301755 905000) 0 nil])
([nil nil ((6768 . 6775)) nil (25951 28618 301755 394000) 0 nil])
([nil nil ((#("q" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6770) (undo-tree-id92 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6771) (undo-tree-id93 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6772) (undo-tree-id94 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6773) (undo-tree-id95 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6774) (undo-tree-id96 . -1) 6775) nil (25951 28618 301754 883000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6769) (undo-tree-id91 . -1) 6770) nil (25951 28618 301753 30000) 0 nil])
([nil nil ((6769 . 6775)) nil (25951 28618 301752 339000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6773) (undo-tree-id89 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6774) (undo-tree-id90 . -1) 6775) nil (25951 28618 301751 888000) 0 nil])
([nil nil ((6773 . 6777)) nil (25951 28618 301750 385000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6776) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 6777) nil (25951 28618 301749 904000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6788) (6788 . 6789) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -6788) (6788 . 6789) (6776 . 6789)) nil (25951 28618 301740 897000) 0 nil])
([nil nil ((6789 . 6790) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 6789) (6789 . 6790) (6788 . 6790)) nil (25951 28618 301737 641000) 0 nil])
([nil nil ((6894 . 6915) (t 25951 28618 321172 501000)) nil (25951 29232 127006 820000) 0 nil])
([nil nil ((apply yas--snippet-revive 6911 6919 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (6911 . 6919) (#("database" 0 8 (fontified nil)) . 6911) (6911 . 6919) (#("data" 0 4 (fontified nil)) . 6911) (6911 . 6915) (#("database" 0 8 (fontified nil)) . -6911) (6911 . 6919) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -6911) (undo-tree-id147 . -4) (undo-tree-id148 . -4) 6915) nil (25951 29232 127005 498000) 0 nil])
([nil nil ((6919 . 6926)) nil (25951 29232 127003 113000) 0 nil])
([nil nil ((apply yas--snippet-revive 6920 6936 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (6920 . 6936) (#("UpdateTaskParams" 0 16 (fontified nil)) . 6920) (6920 . 6936) (#("update" 0 6 (fontified nil)) . 6920) (6920 . 6926) (#("UpdateTaskParams" 0 16 (fontified nil)) . -6920) (6920 . 6936) (#("update" 0 6 (face tree-sitter-hl-face:property fontified t)) . -6920) (undo-tree-id145 . -6) (undo-tree-id146 . -6) 6926) nil (25951 29232 127001 851000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6937) (6937 . 6938) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -6937) (6937 . 6938) (6936 . 6938)) nil (25951 29232 126999 356000) 0 nil])
([nil nil ((6809 . 6811) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6809) (6804 . 6810) (6803 . 6805) (#("`" 0 1 (fontified nil)) . -6803) (6790 . 6804)) nil (25951 29232 126998 24000) 0 nil])
([nil nil ((6810 . 6815)) nil (25951 29232 126997 42000) 0 nil])
([nil nil ((6817 . 6819)) nil (25951 29232 126996 651000) 0 nil])
([nil nil ((6819 . 6831)) nil (25951 29232 126996 100000) 0 nil])
([nil nil ((6838 . 6849) (6837 . 6839) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6837) (6832 . 6838) (6831 . 6833) (#("`" 0 1 (fontified nil)) . -6831) (6831 . 6832)) nil (25951 29232 126995 439000) 0 nil])
([nil nil ((6851 . 6853)) nil (25951 29232 126994 567000) 0 nil])
([nil nil ((6830 . 6837)) nil (25951 29232 126993 595000) 0 nil])
([nil nil ((6858 . 6860)) nil (25951 29232 126993 24000) 0 nil])
([nil nil ((6879 . 6881) (6878 . 6880) (#("`" 0 1 (fontified nil)) . -6878) (6860 . 6879)) nil (25951 29232 126992 493000) 0 nil])
([nil nil ((6884 . 6886) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6884) (6881 . 6885)) nil (25951 29232 126991 882000) 0 nil])
([nil nil ((6885 . 6896)) nil (25951 29232 126991 481000) 0 nil])
([nil nil ((6898 . 6900)) nil (25951 29232 126991 81000) 0 nil])
([nil nil ((6900 . 6902)) nil (25951 29232 126990 620000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6901) (undo-tree-id144 . -1) 6902) nil (25951 29232 126990 19000) 0 nil])
([nil nil ((6901 . 6906)) nil (25951 29232 126989 127000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6903) (undo-tree-id141 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6904) (undo-tree-id142 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6905) (undo-tree-id143 . -1) 6906) nil (25951 29232 126988 125000) 0 nil])
([nil nil ((6903 . 6916)) nil (25951 29232 126986 462000) 0 nil])
([nil nil ((6923 . 6932) (6922 . 6924) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6922) (6917 . 6923) (6916 . 6918) (#("`" 0 1 (fontified nil)) . -6916) (6916 . 6917)) nil (25951 29232 126985 761000) 0 nil])
([nil nil ((6934 . 6936)) nil (25951 29232 126985 59000) 0 nil])
([nil nil ((6936 . 6954)) nil (25951 29232 126984 579000) 0 nil])
([nil nil ((6956 . 6962) (6955 . 6957) (#("`" 0 1 (fontified nil)) . -6955) (6954 . 6956)) nil (25951 29232 126983 737000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -6961) (undo-tree-id140 . -1) 6962) nil (25951 29232 126983 116000) 0 nil])
([nil nil ((6962 . 6966) (6961 . 6963) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6961) (6961 . 6962)) nil (25951 29232 126982 84000) 0 nil])
([nil nil ((6966 . 6973)) nil (25951 29232 126981 282000) 0 nil])
([nil nil ((6975 . 6977)) nil (25951 29232 126980 801000) 0 nil])
([nil nil ((6977 . 6987)) nil (25951 29232 126980 321000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6986) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 6987) nil (25951 29232 126979 850000) 0 nil])
([nil nil ((6986 . 6991)) nil (25951 29232 126978 167000) 0 nil])
([nil nil ((#("<" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -6990) (undo-tree-id137 . -1) 6991) nil (25951 29232 126977 385000) 0 nil])
([nil nil ((6990 . 6992) (#("`" 0 1 (fontified nil)) . -6990) (6990 . 6991)) nil (25951 29232 126976 223000) 0 nil])
([nil nil ((6997 . 7003) (6996 . 6998) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -6996) (6991 . 6997)) nil (25951 29232 126975 21000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7005) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("	" 0 1 (fontified t)) . -7006) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 7007) nil (25951 29232 126972 155000) 0 nil])
([nil nil ((7107 . 7109) (t 25951 29232 148846 512000)) nil (25951 29379 303266 282000) 0 nil])
([nil nil ((7109 . 7113)) nil (25951 29379 303265 861000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7110) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7111) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7112) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 7113) nil (25951 29379 303264 909000) 0 nil])
([nil nil ((7110 . 7113)) nil (25951 29379 303262 174000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7111) (undo-tree-id183 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7112) (undo-tree-id184 . -1) 7113) nil (25951 29379 303261 763000) 0 nil])
([nil nil ((7111 . 7117)) nil (25951 29379 303260 340000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7116) (undo-tree-id182 . -1) 7117) nil (25951 29379 303259 268000) 0 nil])
([nil nil ((7116 . 7126)) nil (25951 29379 303258 206000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7125) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 7126) nil (25951 29379 303257 365000) 0 nil])
([nil nil ((7125 . 7126)) nil (25951 29379 303255 792000) 0 nil])
([nil nil ((apply yas--snippet-revive 7123 7138 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (7123 . 7138) (#("TaskRequestType" 0 15 (fontified nil)) . 7123) (7123 . 7138) (#("Tas" 0 3 (fontified nil)) . 7123) (7123 . 7126) (#("TaskRequestType" 0 15 (fontified nil)) . -7123) (7123 . 7138) (#("Tas" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7123) (undo-tree-id178 . -3) (undo-tree-id179 . -3) 7126) nil (25951 29379 303254 730000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7139) (7139 . 7140) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7139) (7139 . 7140) (7138 . 7140)) nil (25951 29379 303252 486000) 0 nil])
([nil nil ((7140 . 7142)) nil (25951 29379 303251 414000) 0 nil])
([nil nil ((7142 . 7147)) nil (25951 29379 303250 803000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7146) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 7147) nil (25951 29379 303250 51000) 0 nil])
([nil nil ((7146 . 7150)) nil (25951 29379 303248 639000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7142) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7143) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7144) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7145) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#(" " 0 1 (fontified t)) . -7146) (undo-tree-id172 . -1) (#(":" 0 1 (fontified t)) . -7147) (undo-tree-id173 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -7148) (undo-tree-id174 . -1) (#(" " 0 1 (fontified t)) . -7149) (undo-tree-id175 . -1) 7150) nil (25951 29379 303247 296000) 0 nil])
([nil nil ((7142 . 7147)) nil (25951 29379 303242 437000) 0 nil])
([nil nil ((7147 . 7162)) nil (25951 29379 303241 736000) 0 nil])
([nil nil ((apply yas--snippet-revive 7158 7165 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (7158 . 7165) (#("Decoder" 0 7 (fontified nil)) . 7158) (7158 . 7165) (#("Deco" 0 4 (fontified nil)) . 7158) (7158 . 7162) (#("Decoder" 0 7 (fontified nil)) . -7158) (7158 . 7165) (#("Deco" 0 4 (face tree-sitter-hl-face:property fontified t)) . -7158) (undo-tree-id162 . -4) (undo-tree-id163 . -4) 7162) nil (25951 29379 303240 463000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7166) (7166 . 7167) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7166) (7166 . 7167) (7165 . 7167)) nil (25951 29379 303237 868000) 0 nil])
([nil nil ((7167 . 7169)) nil (25951 29379 303236 696000) 0 nil])
([nil nil ((7169 . 7178)) nil (25951 29379 303236 265000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -7176) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t)) . -7177) (undo-tree-id161 . -1) 7178) nil (25951 29379 303235 294000) 0 nil])
([nil nil ((7176 . 7190)) nil (25951 29379 303150 515000) 0 nil])
([nil nil ((7190 . 7191)) nil (25951 29379 303149 744000) 0 nil])
([nil nil ((7158 . 7161)) nil (25951 29379 303149 112000) 0 nil])
([nil nil ((7169 . 7171)) nil (25951 29379 303148 571000) 0 nil])
([nil nil ((apply yas--snippet-revive 7171 7175 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (7171 . 7175) (#("Body" 0 4 (fontified nil)) . 7171) (7171 . 7175) (#("Body" 0 4 (fontified nil)) . -7171) (7171 . 7175)) nil (25951 29379 303147 519000) 0 nil])
([nil nil ((7200 . 7201)) nil (25951 29379 303146 67000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7203 7214 nil nil nil t nil)) nil 21 nil #s(yas--field 1 7203 7214 nil nil nil t nil) nil nil)) (7196 . 7209) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 7196) (7196 . 7214) (#("Decod" 0 5 (fontified nil)) . 7196) (7196 . 7201) (#("Decode" 0 6 (fontified nil)) . -7196) (7196 . 7202) (#("Decod" 0 5 (face tree-sitter-hl-face:type fontified t)) . -7196) (undo-tree-id158 . -5) (undo-tree-id159 . -5) 7201) nil (25951 29379 303145 295000) 0 nil])
([nil nil ((#("v any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:variable fontified nil)) . 7204) (7203 . 7204)) nil (25951 29379 303142 911000) 0 nil])
([nil nil ((7204 . 7205)) nil (25951 29379 303142 89000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7204) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 7205) nil (25951 29379 303141 488000) 0 nil])
([nil nil ((7204 . 7208)) nil (25951 29379 303139 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 7204 7214 #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 7203 7214 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil #s(yas--field 1 7203 7214 nil nil nil t nil) nil)) (7204 . 7214) (#("taskReqObj" 0 10 (fontified nil)) . 7204) (7204 . 7214) (#("task" 0 4 (fontified nil)) . 7204) (7204 . 7208) (#("taskReqObj" 0 10 (fontified nil)) . -7204) (7204 . 7214) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7204) (undo-tree-id154 . -4) (undo-tree-id155 . -4) 7208) nil (25951 29379 303138 913000) 0 nil])
([nil nil ((apply yas--snippet-revive 7196 7215 #s(yas--snippet nil (#s(yas--field 1 7203 7214 nil nil nil t nil)) nil 21 nil #s(yas--field 1 7203 7214 nil nil nil t nil) nil nil))) nil (25951 29379 303136 258000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7229) (7229 . 7230) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7229) (7229 . 7230) (7215 . 7230)) nil (25951 29379 303135 176000) 0 nil])
([nil nil ((7230 . 7232) (7231 . 7232) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 7230) (7230 . 7232) (7229 . 7231)) nil (25951 29379 303133 794000) 0 nil])
([nil nil ((7232 . 7238)) nil (25951 29379 303132 862000) 0 nil])
([nil nil ((7229 . 7232) 7185) nil (25951 29379 303132 361000) 0 nil])
([nil nil ((7232 . 7238)) nil (25951 29379 303131 549000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7255 7256 nil nil nil t #s(yas--field 2 7258 7261 nil nil nil t #s(yas--field 3 7263 7286 nil nil nil t nil))) #s(yas--field 2 7258 7261 nil nil nil t #s(yas--field 3 7263 7286 nil nil nil t nil)) #s(yas--field 3 7263 7286 nil nil nil t nil)) nil 23 nil #s(yas--field 3 7263 7286 nil nil nil t nil) nil nil)) (7238 . 7299) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 7238) (7238 . 7314) (#("RespondWithError" 0 16 (fontified nil)) . -7238) (7238 . 7254)) nil (25951 29379 303130 688000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 7256) (undo-tree-id153 . -21) (7255 . 7256)) nil (25951 29379 303129 215000) 0 nil])
([nil nil ((7259 . 7260) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 7259) (undo-tree-id152 . -8) (7258 . 7259)) nil (25951 29379 303127 863000) 0 nil])
([nil nil ((7260 . 7261)) nil (25951 29379 303126 540000) 0 nil])
([nil nil ((7264 . 7271) (7263 . 7265) (#("\"" 0 1 (fontified nil)) . -7263) (undo-tree-id150 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 7264) (undo-tree-id151 . -10) (7263 . 7264)) nil (25951 29379 303125 789000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7270) (undo-tree-id149 . -1) 7271) nil (25951 29379 303122 843000) 0 nil])
([nil nil ((7270 . 7285)) nil (25951 29379 303115 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 7238 7287 #s(yas--snippet nil (#s(yas--field 1 7255 7256 nil nil nil t #s(yas--field 2 7258 7261 nil nil nil t #s(yas--field 3 7263 7286 nil nil nil t nil))) #s(yas--field 2 7258 7261 nil nil nil t #s(yas--field 3 7263 7286 nil nil nil t nil)) #s(yas--field 3 7263 7286 nil nil nil t nil)) nil 23 nil #s(yas--field 3 7263 7286 nil nil nil t nil) nil nil))) nil (25951 29379 303113 125000) 0 nil])
([nil nil ((7345 . 7347) (7346 . 7347) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 7345) (7345 . 7347) (7344 . 7346) (t 25951 29379 325544 513000)) nil (25951 29618 673362 767000) 0 nil])
([nil nil ((7299 . 7301)) nil (25951 29618 673362 407000) 0 nil])
([nil nil ((7301 . 7305)) nil (25951 29618 673362 176000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7299) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("	" 0 1 (fontified t)) . -7300) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7301) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7302) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7303) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7304) (undo-tree-id353 . -1) (undo-tree-id354 . -1) 7305) nil (25951 29618 673361 245000) 0 nil])
([nil nil ((7347 . 7351)) nil (25951 29618 673347 639000) 0 nil])
([nil nil ((7351 . 7356)) nil (25951 29618 673347 489000) 0 nil])
([nil nil ((7356 . 7357)) nil (25951 29618 673347 248000) 0 nil])
([nil nil ((7357 . 7359)) nil (25951 29618 673347 98000) 0 nil])
([nil nil ((apply yas--snippet-revive 7356 7361 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (7356 . 7361) (#("New()" 0 5 (fontified nil)) . 7356) (7356 . 7361) (#("New" 0 3 (fontified nil)) . 7356) (7356 . 7359) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -7356) (undo-tree-id341 . -3) (undo-tree-id342 . -3) 7359) nil (25951 29618 673346 507000) 0 nil])
([nil nil ((7361 . 7362)) nil (25951 29618 673344 844000) 0 nil])
([nil nil ((7362 . 7365)) nil (25951 29618 673344 293000) 0 nil])
([nil nil ((7365 . 7369)) nil (25951 29618 673343 311000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7373 7380 nil nil nil t nil)) nil 25 nil #s(yas--field 1 7373 7380 nil nil nil t nil) nil nil)) (7365 . 7383) (#("UserID: ${1:uuid.UUID}," 0 23 (fontified nil)) . 7365) (7365 . 7388) (#("user" 0 4 (fontified nil)) . 7365) (7365 . 7369) (#("UserID" 0 6 (fontified nil)) . -7365) (7365 . 7371) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7365) (undo-tree-id339 . -4) (undo-tree-id340 . -4) 7369) nil (25951 29618 673342 229000) 0 nil])
([nil nil ((7374 . 7378) (#("uuid.UUID" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 7374) (7373 . 7374)) nil (25951 29618 673339 975000) 0 nil])
([nil nil ((7378 . 7379)) nil (25951 29618 673339 13000) 0 nil])
([nil nil ((7379 . 7380)) nil (25951 29618 673338 462000) 0 nil])
([nil nil ((apply yas--snippet-revive 7365 7381 #s(yas--snippet nil (#s(yas--field 1 7373 7380 nil nil nil t nil)) nil 25 nil #s(yas--field 1 7373 7380 nil nil nil t nil) nil nil))) nil (25951 29618 673338 111000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7378) (undo-tree-id337 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7379) (undo-tree-id338 . -1) 7380) nil (25951 29618 673337 119000) 0 nil])
([nil nil ((7378 . 7380)) nil (25951 29618 673335 667000) 0 nil])
([nil nil ((7381 . 7384)) nil (25951 29618 673335 106000) 0 nil])
([nil nil ((7384 . 7385)) nil (25951 29618 673334 414000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7384) (undo-tree-id336 . -1) 7385) nil (25951 29618 673333 643000) 0 nil])
([nil nil ((7384 . 7387)) nil (25951 29618 673332 922000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7391 7407 nil nil nil t nil)) nil 26 nil #s(yas--field 1 7391 7407 nil nil nil t nil) nil nil)) (7384 . 7398) (#("Title: ${1:string}," 0 19 (fontified nil)) . 7384) (7384 . 7403) (#("Tit" 0 3 (fontified nil)) . 7384) (7384 . 7387) (#("Title" 0 5 (fontified nil)) . -7384) (7384 . 7389) (#("Tit" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7384) (undo-tree-id334 . -3) (undo-tree-id335 . -3) 7387) nil (25951 29618 673332 240000) 0 nil])
([nil nil ((#("string" 0 6 (face tree-sitter-hl-face:variable fontified t)) . 7391)) nil (25951 29618 673331 88000) 0 nil])
([nil nil ((7391 . 7395)) nil (25951 29618 673330 798000) 0 nil])
([nil nil ((apply yas--snippet-revive 7391 7407 #s(yas--snippet nil nil nil 27 nil nil #s(yas--field 1 7391 7407 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil #s(yas--field 1 7391 7407 nil nil nil t nil) nil)) (7391 . 7407) (#("taskReqObj.Title" 0 16 (fontified nil)) . 7391) (7391 . 7407) (#("task" 0 4 (fontified nil)) . 7391) (7391 . 7395) (#("taskReqObj.Title" 0 16 (fontified nil)) . -7391) (7391 . 7407) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7391) (undo-tree-id332 . -4) (undo-tree-id333 . -4) 7395) nil (25951 29618 673329 846000) 0 nil])
([nil nil ((apply yas--snippet-revive 7384 7408 #s(yas--snippet nil (#s(yas--field 1 7391 7407 nil nil nil t nil)) nil 26 nil #s(yas--field 1 7391 7407 nil nil nil t nil) nil nil))) nil (25951 29618 673327 191000) 0 nil])
([nil nil ((7408 . 7411)) nil (25951 29618 673326 900000) 0 nil])
([nil nil ((7411 . 7414)) nil (25951 29618 673326 479000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7423 7470 nil nil nil t nil)) nil 28 nil #s(yas--field 1 7423 7470 nil nil nil t nil) nil nil)) (7411 . 7433) (#("EventStart: ${1:time.Time}," 0 27 (fontified nil)) . 7411) (7411 . 7438) (#("Eve" 0 3 (fontified nil)) . 7411) (7411 . 7414) (#("EventStart" 0 10 (fontified nil)) . -7411) (7411 . 7421) (#("Eve" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7411) (undo-tree-id330 . -3) (undo-tree-id331 . -3) 7414) nil (25951 29618 673325 838000) 0 nil])
([nil nil ((7424 . 7426) (#("time.Time" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 7424) (7423 . 7424)) nil (25951 29618 673324 706000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7425) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 7426) nil (25951 29618 673324 25000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7423) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7424) (undo-tree-id326 . -1) (undo-tree-id327 . -1) 7425) nil (25951 29618 673322 983000) 0 nil])
([nil nil ((7423 . 7427)) nil (25951 29618 673321 781000) 0 nil])
([nil nil ((7427 . 7428)) nil (25951 29618 673321 500000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7427) (undo-tree-id323 . -1) 7428) nil (25951 29618 673321 160000) 0 nil])
([nil nil ((7427 . 7428)) nil (25951 29618 673320 649000) 0 nil])
([nil nil ((7428 . 7429)) nil (25951 29618 673320 398000) 0 nil])
([nil nil ((7429 . 7431)) nil (25951 29618 673320 158000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7430) (undo-tree-id321 . -1) (undo-tree-id322 . -1) 7431) nil (25951 29618 673319 787000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7423) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7424) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7425) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7426) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("." 0 1 (fontified t)) . -7427) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("F" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7428) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7429) (undo-tree-id319 . -1) (undo-tree-id320 . -1) 7430) nil (25951 29618 673318 354000) 0 nil])
([nil nil ((7423 . 7427)) nil (25951 29618 673313 275000) 0 nil])
([nil nil ((7427 . 7428)) nil (25951 29618 673313 44000) 0 nil])
([nil nil ((7428 . 7431)) nil (25951 29618 673312 774000) 0 nil])
([nil nil ((7431 . 7432)) nil (25951 29618 673312 523000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7431) (undo-tree-id305 . -1) (undo-tree-id306 . -1) 7432) nil (25951 29618 673312 153000) 0 nil])
([nil nil ((7431 . 7433)) nil (25951 29618 673311 411000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7434 7444 nil nil nil t #s(yas--field 2 7446 7467 nil nil nil t nil)) #s(yas--field 2 7446 7467 nil nil nil t nil)) nil 29 nil #s(yas--field 2 7446 7467 nil nil nil t nil) #s(yas--field 1 7423 7470 nil nil nil t nil) nil)) (7428 . 7462) (#("Parse(${1:layout string}, ${2:value string})" 0 44 (fontified nil)) . 7428) (7428 . 7472) (#("Parse" 0 5 (fontified nil)) . 7428) (7428 . 7433) (#("Parse" 0 5 (face tree-sitter-hl-face:property fontified t)) . -7428) (undo-tree-id303 . -5) (undo-tree-id304 . -5) 7433) nil (25951 29618 673310 730000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7434) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7435) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7436) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7437) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7438) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7439) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#(" " 0 1 (fontified t)) . -7440) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7441) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7442) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7443) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7444) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7445) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7446) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) 7447) nil (25951 29618 673308 125000) 0 nil])
([nil nil ((7434 . 7437)) nil (25951 29618 673295 471000) 0 nil])
([nil nil ((#("9" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7435) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("9" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7436) (undo-tree-id262 . -1) (undo-tree-id263 . -1) 7437) nil (25951 29618 673295 11000) 0 nil])
([nil nil ((7435 . 7444)) nil (25951 29618 673293 758000) 0 nil])
([nil nil ((7447 . 7450) (#("value string" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 12 (face tree-sitter-hl-face:variable fontified nil)) . 7447) (7446 . 7447)) nil (25951 29618 673293 438000) 0 nil])
([nil nil ((apply yas--snippet-revive 7446 7467 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 2 7446 7467 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 2 7446 7467 nil nil nil t nil) nil)) (7446 . 7467) (#("taskReqObj.EventStart" 0 21 (fontified nil)) . 7446) (7446 . 7467) (#("task" 0 4 (fontified nil)) . 7446) (7446 . 7450) (#("taskReqObj.EventStart" 0 21 (fontified nil)) . -7446) (7446 . 7467) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7446) (undo-tree-id258 . -4) (undo-tree-id259 . -4) 7450) nil (25951 29618 673292 686000) 0 nil])
([nil nil ((apply yas--snippet-revive 7428 7468 #s(yas--snippet nil (#s(yas--field 1 7434 7444 nil nil nil t #s(yas--field 2 7446 7467 nil nil nil t nil)) #s(yas--field 2 7446 7467 nil nil nil t nil)) nil 29 nil #s(yas--field 2 7446 7467 nil nil nil t nil) #s(yas--field 1 7423 7470 nil nil nil t nil) nil))) nil (25951 29618 673290 602000) 0 nil])
([nil nil ((7434 . 7436) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -7434) (7434 . 7435)) nil (25951 29618 673289 941000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7435) (undo-tree-id257 . -1) 7436) nil (25951 29618 673288 989000) 0 nil])
([nil nil ((7445 . 7446) (#("\"" 0 1 (fontified nil)) . -7445) (7445 . 7446)) nil (25951 29618 673287 967000) 0 nil])
([nil nil ((apply yas--snippet-revive 7411 7471 #s(yas--snippet nil (#s(yas--field 1 7423 7470 nil nil nil t nil)) nil 28 nil #s(yas--field 1 7423 7470 nil nil nil t nil) nil nil))) nil (25951 29618 673287 316000) 0 nil])
([nil nil ((#("time.Parse(\"1990-02-12\", taskReqObj.EventStart)" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 10 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 12 (face tree-sitter-hl-face:string fontified t) 12 16 (face tree-sitter-hl-face:string fontified t) 16 17 (face tree-sitter-hl-face:string fontified t) 17 19 (face tree-sitter-hl-face:string fontified t) 19 20 (face tree-sitter-hl-face:string fontified t) 20 22 (face tree-sitter-hl-face:string fontified t) 22 23 (face tree-sitter-hl-face:string fontified t) 23 25 (fontified t) 25 35 (face tree-sitter-hl-face:variable fontified t) 35 36 (fontified t) 36 46 (face tree-sitter-hl-face:property fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t)) . 7423) (undo-tree-id245 . -46) (undo-tree-id246 . 46) (undo-tree-id247 . -46) (undo-tree-id248 . -46) (undo-tree-id249 . -46) (undo-tree-id250 . -11) (undo-tree-id251 . -47) (undo-tree-id252 . -46) (undo-tree-id253 . 1) (undo-tree-id254 . -47) (undo-tree-id255 . 37) (undo-tree-id256 . -11) 7469) nil (25951 29618 673286 825000) 0 nil])
([nil nil ((7299 . 7301)) nil (25951 29618 673282 367000) 0 nil])
([nil nil ((7301 . 7304)) nil (25951 29618 673281 846000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7301) (undo-tree-id242 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -7302) (undo-tree-id243 . -1) (#(" " 0 1 (fontified t)) . -7303) (undo-tree-id244 . -1) 7304) nil (25951 29618 673281 24000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7347 . 7348) (nil fontified nil 7301 . 7348) (7301 . 7348) 7300) nil (25951 29618 673279 782000) 0 nil])
([nil nil ((7301 . 7303)) nil (25951 29618 673279 291000) 0 nil])
([nil nil ((7303 . 7305)) nil (25951 29618 673278 961000) 0 nil])
([nil nil ((7305 . 7307)) nil (25951 29618 673278 570000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7303) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7304) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7305) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7306) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 7307) nil (25951 29618 673277 618000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7301) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7302) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 7303) nil (25951 29618 673223 928000) 0 nil])
([nil nil ((7301 . 7306)) nil (25951 29618 673222 515000) 0 nil])
([nil nil ((7306 . 7307)) nil (25951 29618 673222 284000) 0 nil])
([nil nil ((7307 . 7311)) nil (25951 29618 673222 24000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7310) (undo-tree-id229 . -1) 7311) nil (25951 29618 673221 673000) 0 nil])
([nil nil ((7310 . 7311)) nil (25951 29618 673221 2000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7310) (undo-tree-id228 . -1) 7311) nil (25951 29618 673220 441000) 0 nil])
([nil nil ((7310 . 7315)) nil (25951 29618 673219 800000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7314) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 7315) nil (25951 29618 673219 379000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7312) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7313) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 7314) nil (25951 29618 673218 197000) 0 nil])
([nil nil ((7312 . 7318)) nil (25951 29618 673216 804000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7317) (undo-tree-id221 . -1) 7318) nil (25951 29618 673216 253000) 0 nil])
([nil nil ((7317 . 7321)) nil (25951 29618 673215 482000) 0 nil])
([nil nil ((7368 . 7370)) nil (25951 29618 673214 810000) 0 nil])
([nil nil ((7370 . 7375)) nil (25951 29618 673214 340000) 0 nil])
([nil nil ((7306 . 7311)) nil (25951 29618 673213 758000) 0 nil])
([nil nil ((7380 . 7383)) nil (25951 29618 673213 268000) 0 nil])
([nil nil ((7383 . 7384)) nil (25951 29618 673212 837000) 0 nil])
([nil nil ((7384 . 7394)) nil (25951 29618 673212 165000) 0 nil])
([nil nil ((7394 . 7395)) nil (25951 29618 673211 755000) 0 nil])
([nil nil ((7395 . 7403)) nil (25951 29618 673211 224000) 0 nil])
([nil nil ((7403 . 7404)) nil (25951 29618 673210 663000) 0 nil])
([nil nil ((7404 . 7407)) nil (25951 29618 673210 172000) 0 nil])
([nil nil ((7407 . 7410)) nil (25951 29618 673209 661000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7409) (7409 . 7410) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7409) (7409 . 7410)) nil (25951 29618 673209 190000) 0 nil])
([nil nil ((7410 . 7420) (7409 . 7411) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7409) (7409 . 7410)) nil (25951 29618 673208 729000) 0 nil])
([nil nil ((7421 . 7424)) nil (25951 29618 673208 338000) 0 nil])
([nil nil ((7424 . 7427)) nil (25951 29618 673208 68000) 0 nil])
([nil nil ((apply yas--snippet-revive 7423 7445 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (7423 . 7445) (#("taskReqObj.Description" 0 22 (fontified nil)) . 7423) (7423 . 7445) (#("task" 0 4 (fontified nil)) . 7423) (7423 . 7427) (#("taskReqObj.Description" 0 22 (fontified nil)) . -7423) (7423 . 7445) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7423) (undo-tree-id219 . -4) (undo-tree-id220 . -4) 7427) nil (25951 29618 673207 507000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7434) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7435) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7436) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7437) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7438) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7439) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7440) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7441) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7442) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7443) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -7444) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 7445) nil (25951 29618 673204 922000) 0 nil])
([nil nil ((7434 . 7438)) nil (25951 29618 673198 450000) 0 nil])
([nil nil ((apply yas--snippet-revive 7434 7442 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (7434 . 7442) (#("EventEnd" 0 8 (fontified nil)) . 7434) (7434 . 7442) (#("Even" 0 4 (fontified nil)) . 7434) (7434 . 7438) (#("EventEnd" 0 8 (fontified nil)) . -7434) (7434 . 7442) (#("Even" 0 4 (face tree-sitter-hl-face:property fontified t)) . -7434) (undo-tree-id195 . -4) (undo-tree-id196 . -4) 7438) nil (25951 29618 673197 759000) 0 nil])
([nil nil ((7373 . 7375)) nil (25951 29618 673195 855000) 0 nil])
([nil nil ((7375 . 7381)) nil (25951 29618 673195 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 7378 7383 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (7378 . 7383) (#("eserr" 0 5 (fontified nil)) . 7378) (7378 . 7383) (#("ese" 0 3 (fontified nil)) . 7378) (7378 . 7381) (#("eserr" 0 5 (fontified nil)) . -7378) (7378 . 7383) (#("ese" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7378) (undo-tree-id193 . -3) (undo-tree-id194 . -3) 7381) nil (25951 29618 673194 813000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7392) (7392 . 7393) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7392) (7392 . 7393) (7383 . 7393)) nil (25951 29618 673193 80000) 0 nil])
([nil nil ((7393 . 7395) (7394 . 7395) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 7393) (7393 . 7395) (7392 . 7394)) nil (25951 29618 673192 469000) 0 nil])
([nil nil ((7395 . 7401)) nil (25951 29618 673191 517000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7418 7419 nil nil nil t #s(yas--field 2 7421 7424 nil nil nil t #s(yas--field 3 7426 7460 nil nil nil t nil))) #s(yas--field 2 7421 7424 nil nil nil t #s(yas--field 3 7426 7460 nil nil nil t nil)) #s(yas--field 3 7426 7460 nil nil nil t nil)) nil 34 nil #s(yas--field 3 7426 7460 nil nil nil t nil) nil nil)) (7401 . 7462) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 7401) (7401 . 7477) (#("RespondWithError" 0 16 (fontified nil)) . -7401) (7401 . 7417)) nil (25951 29618 673190 745000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 7419) (7418 . 7419)) nil (25951 29618 673189 774000) 0 nil])
([nil nil ((7422 . 7424) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 7422) (7421 . 7422)) nil (25951 29618 673188 822000) 0 nil])
([nil nil ((7427 . 7447) (7426 . 7428) (#("\"" 0 1 (fontified nil)) . -7426) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 7427) (7426 . 7427)) nil (25951 29618 673187 800000) 0 nil])
([nil nil ((7447 . 7454)) nil (25951 29618 673186 878000) 0 nil])
([nil nil ((7454 . 7459)) nil (25951 29618 673186 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 7401 7461 #s(yas--snippet nil (#s(yas--field 1 7418 7419 nil nil nil t #s(yas--field 2 7421 7424 nil nil nil t #s(yas--field 3 7426 7460 nil nil nil t nil))) #s(yas--field 2 7421 7424 nil nil nil t #s(yas--field 3 7426 7460 nil nil nil t nil)) #s(yas--field 3 7426 7460 nil nil nil t nil)) nil 34 nil #s(yas--field 3 7426 7460 nil nil nil t nil) nil nil))) nil (25951 29618 673185 826000) 0 nil])
([nil nil ((7464 . 7466)) nil (25951 29618 673185 315000) 0 nil])
([nil nil ((7466 . 7477)) nil (25951 29618 673185 15000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7483) (7483 . 7484) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7483) (7483 . 7484) (7477 . 7484)) nil (25951 29618 673184 404000) 0 nil])
([nil nil ((7484 . 7486) (7485 . 7486) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 7484) (7484 . 7486) (7483 . 7485)) nil (25951 29618 673183 442000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7488 . 7489) (#("
" 0 1 (fontified nil)) . -7555) (7486 . 7556) 7485) nil (25951 29618 673182 630000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 7484) (undo-tree-id191 . -2) (undo-tree-id192 . -1) 7485) nil (25951 29618 673181 759000) 0 nil])
([nil nil ((7552 . 7555) 7485) nil (25951 29618 673174 285000) 0 nil])
([nil nil ((7555 . 7561)) nil (25951 29618 673173 493000) 0 nil])
([nil nil ((7461 . 7464) 7393) nil (25951 29618 673172 822000) 0 nil])
([nil nil ((7464 . 7470)) nil (25951 29618 673169 556000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7533) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7534) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7535) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7536) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7537) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 7538 (t 25951 29618 695739 129000)) nil (25951 29626 731453 540000) 0 nil])
([nil nil ((7533 . 7536)) nil (25951 29626 731433 722000) 0 nil])
([nil nil ((#("	eventEndTime, eeerr := time.Parse(\"1990-02-12\", taskReqObj.EventEnd)
" 0 1 (fontified t) 1 13 (face tree-sitter-hl-face:variable fontified t) 13 15 (fontified t) 15 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 23 (face tree-sitter-hl-face:operator fontified t) 23 24 (fontified t) 24 28 (face tree-sitter-hl-face:variable fontified t) 28 29 (fontified t) 29 34 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 47 (face tree-sitter-hl-face:string fontified t) 47 49 (fontified t) 49 59 (face tree-sitter-hl-face:variable fontified t) 59 60 (fontified t) 60 68 (face tree-sitter-hl-face:property fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t)) . 7572) (undo-tree-id405 . 30) (undo-tree-id406 . -69) (undo-tree-id407 . -39) 7611 (t 25951 29626 752682 297000)) nil (25951 29723 153194 471000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7474 . 7475) (#("
" 0 1 (fontified nil)) . -7543) (7473 . 7544) 7472) nil (25951 29723 153192 528000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -7337) (undo-tree-id393 . -1) (#("1" 0 1 (fontified t)) . -7338) (undo-tree-id394 . -1) (#("9" 0 1 (fontified t)) . -7339) (undo-tree-id395 . -1) (#("9" 0 1 (fontified t)) . -7340) (undo-tree-id396 . -1) (#("0" 0 1 (fontified t)) . -7341) (undo-tree-id397 . -1) (#("-" 0 1 (fontified t)) . -7342) (undo-tree-id398 . -1) (#("0" 0 1 (fontified nil)) . -7343) (undo-tree-id399 . -1) (#("2" 0 1 (fontified nil)) . -7344) (undo-tree-id400 . -1) (#("-" 0 1 (fontified t)) . -7345) (undo-tree-id401 . -1) (#("1" 0 1 (fontified t)) . -7346) (undo-tree-id402 . -1) (#("2" 0 1 (fontified t)) . -7347) (undo-tree-id403 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7348) (undo-tree-id404 . -1) 7349) nil (25951 29723 153190 664000) 0 nil])
([nil nil ((7337 . 7343)) nil (25951 29723 153183 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 7343 7357 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (7343 . 7357) (#("BaseDateString" 0 14 (fontified nil)) . 7343) (7343 . 7357) (#("BaseDateString" 0 14 (fontified nil)) . -7343) (7343 . 7357)) nil (25951 29723 153182 409000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -7517) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("1" 0 1 (fontified t)) . -7518) (undo-tree-id382 . -1) (#("9" 0 1 (fontified t)) . -7519) (undo-tree-id383 . -1) (#("9" 0 1 (fontified t)) . -7520) (undo-tree-id384 . -1) (#("0" 0 1 (fontified t)) . -7521) (undo-tree-id385 . -1) (#("-" 0 1 (fontified t)) . -7522) (undo-tree-id386 . -1) (#("0" 0 1 (fontified t)) . -7523) (undo-tree-id387 . -1) (#("2" 0 1 (fontified t)) . -7524) (undo-tree-id388 . -1) (#("-" 0 1 (fontified t)) . -7525) (undo-tree-id389 . -1) (#("1" 0 1 (fontified t)) . -7526) (undo-tree-id390 . -1) (#("2" 0 1 (fontified t)) . -7527) (undo-tree-id391 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7528) (undo-tree-id392 . -1) 7529) nil (25951 29723 153180 54000) 0 nil])
([nil nil ((7517 . 7523)) nil (25951 29723 153163 694000) 0 nil])
([nil nil ((apply yas--snippet-revive 7523 7537 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (7523 . 7537) (#("BaseDateString" 0 14 (fontified nil)) . 7523) (7523 . 7537) (#("BaseDateString" 0 14 (fontified nil)) . -7523) (7523 . 7537)) nil (25951 29723 153160 488000) 0 nil])
([nil nil ((7781 . 7785) (t 25951 29723 171014 636000)) nil (25951 29858 126195 673000) 0 nil])
([nil nil ((apply yas--snippet-revive 7781 7795 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (7781 . 7795) (#("eventStartTime" 0 14 (fontified nil)) . 7781) (7781 . 7795) (#("even" 0 4 (fontified nil)) . 7781) (7781 . 7785) (#("eventStartTime" 0 14 (fontified nil)) . -7781) (7781 . 7795) (#("even" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7781) (undo-tree-id470 . -4) (undo-tree-id471 . -4) 7785) nil (25951 29858 126194 982000) 0 nil])
([nil nil ((7796 . 7799)) nil (25951 29858 126193 810000) 0 nil])
([nil nil ((7799 . 7804)) nil (25951 29858 126193 459000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7809 7821 nil nil nil t nil)) nil 38 nil #s(yas--field 1 7809 7821 nil nil nil t nil) nil nil)) (7799 . 7819) (#("EventEnd: ${1:time.Time}," 0 25 (fontified nil)) . 7799) (7799 . 7824) (#("Event" 0 5 (fontified nil)) . 7799) (7799 . 7804) (#("EventEnd" 0 8 (fontified nil)) . -7799) (7799 . 7807) (#("Event" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -7799) (undo-tree-id468 . -5) (undo-tree-id469 . -5) 7804) nil (25951 29858 126192 457000) 0 nil])
([nil nil ((7810 . 7812) (#("time.Time" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 7810) (7809 . 7810)) nil (25951 29858 126190 734000) 0 nil])
([nil nil ((apply yas--snippet-revive 7809 7821 #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 7809 7821 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 7809 7821 nil nil nil t nil) nil)) (7809 . 7821) (#("eventEndTime" 0 12 (fontified nil)) . 7809) (7809 . 7821) (#("eve" 0 3 (fontified nil)) . 7809) (7809 . 7812) (#("eventEndTime" 0 12 (fontified nil)) . -7809) (7809 . 7821) (#("eve" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7809) (undo-tree-id466 . -3) (undo-tree-id467 . -3) 7812) nil (25951 29858 126190 2000) 0 nil])
([nil nil ((apply yas--snippet-revive 7799 7822 #s(yas--snippet nil (#s(yas--field 1 7809 7821 nil nil nil t nil)) nil 38 nil #s(yas--field 1 7809 7821 nil nil nil t nil) nil nil))) nil (25951 29858 126188 890000) 0 nil])
([nil nil ((7822 . 7825)) nil (25951 29858 126188 650000) 0 nil])
([nil nil ((7825 . 7826)) nil (25951 29858 126188 409000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7825) (undo-tree-id465 . -1) 7826) nil (25951 29858 126188 49000) 0 nil])
([nil nil ((7825 . 7829)) nil (25951 29858 126187 508000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7836 7846 nil nil nil t nil)) nil 40 nil #s(yas--field 1 7836 7846 nil nil nil t nil) nil nil)) (7825 . 7846) (#("UpdatedAt: ${1:time.Time}," 0 26 (fontified nil)) . 7825) (7825 . 7851) (#("Upda" 0 4 (fontified nil)) . 7825) (7825 . 7829) (#("UpdatedAt" 0 9 (fontified nil)) . -7825) (7825 . 7834) (#("Upda" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7825) (undo-tree-id463 . -4) (undo-tree-id464 . -4) 7829) nil (25951 29858 126186 816000) 0 nil])
([nil nil ((7837 . 7844) (#("time.Time" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 7837) (7836 . 7837)) nil (25951 29858 126185 674000) 0 nil])
([nil nil ((apply yas--snippet-revive 7841 7846 #s(yas--snippet nil nil nil 41 nil nil #s(yas--field 1 7836 7846 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil #s(yas--field 1 7836 7846 nil nil nil t nil) nil)) (7841 . 7846) (#("Now()" 0 5 (fontified nil)) . 7841) (7841 . 7846) (#("Now" 0 3 (fontified nil)) . 7841) (7841 . 7844) (#("Now" 0 3 (face tree-sitter-hl-face:property fontified t)) . -7841) (undo-tree-id461 . -3) (undo-tree-id462 . -3) 7844) nil (25951 29858 126184 873000) 0 nil])
([nil nil ((apply yas--snippet-revive 7825 7847 #s(yas--snippet nil (#s(yas--field 1 7836 7846 nil nil nil t nil)) nil 40 nil #s(yas--field 1 7836 7846 nil nil nil t nil) nil nil))) nil (25951 29858 126183 710000) 0 nil])
([nil nil ((7847 . 7850)) nil (25951 29858 126183 420000) 0 nil])
([nil nil ((7850 . 7854)) nil (25951 29858 126183 179000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7863 7885 nil nil nil t nil)) nil 42 nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil nil)) (7850 . 7875) (#("Repetitions: ${1:interface{\\}}," 0 31 (fontified nil)) . 7850) (7850 . 7881) (#("Repe" 0 4 (fontified nil)) . 7850) (7850 . 7854) (#("Repetitions" 0 11 (fontified nil)) . -7850) (7850 . 7861) (#("Repe" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7850) (undo-tree-id459 . -4) (undo-tree-id460 . -4) 7854) nil (25951 29858 126182 478000) 0 nil])
([nil nil ((7864 . 7867) (#("interface{}" 0 8 (face tree-sitter-hl-face:keyword fontified nil) 8 9 (face tree-sitter-hl-face:keyword fontified nil) 9 10 (face (rainbow-delimiters-depth-3-face) fontified nil) 10 11 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 7864) (7863 . 7864)) nil (25951 29858 126181 206000) 0 nil])
([nil nil ((apply yas--snippet-revive 7863 7873 #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil)) (7863 . 7873) (#("taskReqObj" 0 10 (fontified nil)) . 7863) (7863 . 7873) (#("task" 0 4 (fontified nil)) . 7863) (7863 . 7867) (#("taskReqObj" 0 10 (fontified nil)) . -7863) (7863 . 7873) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7863) (undo-tree-id457 . -4) (undo-tree-id458 . -4) 7867) nil (25951 29858 126180 374000) 0 nil])
([nil nil ((7873 . 7874)) nil (25951 29858 126179 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 7874 7885 #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil)) (7874 . 7885) (#("Repetitions" 0 11 (fontified nil)) . 7874) (7874 . 7885) (#("Repetitions" 0 11 (fontified nil)) . -7874) (7874 . 7885)) nil (25951 29858 126178 961000) 0 nil])
([nil nil ((apply yas--snippet-revive 7850 7886 #s(yas--snippet nil (#s(yas--field 1 7863 7885 nil nil nil t nil)) nil 42 nil #s(yas--field 1 7863 7885 nil nil nil t nil) nil nil))) nil (25951 29858 126178 511000) 0 nil])
([nil nil ((7886 . 7889)) nil (25951 29858 126178 360000) 0 nil])
([nil nil ((7889 . 7890)) nil (25951 29858 126178 110000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7889) (undo-tree-id456 . -1) 7890) nil (25951 29858 126177 819000) 0 nil])
([nil nil ((7889 . 7892)) nil (25951 29858 126176 777000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7896 7905 nil nil nil nil nil)) nil 45 nil #s(yas--field 1 7896 7905 nil nil nil nil nil) nil nil)) (7889 . 7906) (#("TagID: ${1:uuid.UUID}," 0 22 (fontified nil)) . 7889) (7889 . 7911) (#("Tag" 0 3 (fontified nil)) . 7889) (7889 . 7892) (#("TagID" 0 5 (fontified nil)) . -7889) (7889 . 7894) (#("Tag" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -7889) (undo-tree-id454 . -3) (undo-tree-id455 . -3) 7892) nil (25951 29858 126176 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 7889 7906 #s(yas--snippet nil (#s(yas--field 1 7896 7905 nil nil nil nil nil)) nil 45 nil #s(yas--field 1 7896 7905 nil nil nil nil nil) nil nil))) nil (25951 29858 126174 653000) 0 nil])
([nil nil ((7657 . 7659)) nil (25951 29858 126174 433000) 0 nil])
([nil nil ((7659 . 7662)) nil (25951 29858 126174 152000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7659) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7660) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7661) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 7662) nil (25951 29858 126173 631000) 0 nil])
([nil nil ((7664 . 7673) (#("	" 0 1 (fontified nil)) . -7658) (7659 . 7665)) nil (25951 29858 126171 507000) 0 nil])
([nil nil ((7673 . 7676)) nil (25951 29858 126171 207000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7677 7693 nil nil nil t nil)) nil 46 nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil nil)) (7671 . 7686) (#("Parse(${1:s string})" 0 20 (fontified nil)) . 7671) (7671 . 7691) (#("Parse" 0 5 (fontified nil)) . 7671) (7671 . 7676) (#("Parse" 0 5 (face tree-sitter-hl-face:property fontified t)) . -7671) (undo-tree-id446 . -5) (undo-tree-id447 . -5) 7676) nil (25951 29858 126170 596000) 0 nil])
([nil nil ((7678 . 7681) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 7678) (7677 . 7678)) nil (25951 29858 126169 453000) 0 nil])
([nil nil ((apply yas--snippet-revive 7677 7687 #s(yas--snippet nil nil nil 47 nil nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil)) (7677 . 7687) (#("taskReqObj" 0 10 (fontified nil)) . 7677) (7677 . 7687) (#("task" 0 4 (fontified nil)) . 7677) (7677 . 7681) (#("taskReqObj" 0 10 (fontified nil)) . -7677) (7677 . 7687) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7677) (undo-tree-id444 . -4) (undo-tree-id445 . -4) 7681) nil (25951 29858 126168 462000) 0 nil])
([nil nil ((7687 . 7688)) nil (25951 29858 126167 390000) 0 nil])
([nil nil ((apply yas--snippet-revive 7688 7693 #s(yas--snippet nil nil nil 48 nil nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil)) (7688 . 7693) (#("TagID" 0 5 (fontified nil)) . 7688) (7688 . 7693) (#("TagID" 0 5 (fontified nil)) . -7688) (7688 . 7693)) nil (25951 29858 126166 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 7671 7694 #s(yas--snippet nil (#s(yas--field 1 7677 7693 nil nil nil t nil)) nil 46 nil #s(yas--field 1 7677 7693 nil nil nil t nil) nil nil))) nil (25951 29858 126166 468000) 0 nil])
([nil nil ((7658 . 7660)) nil (25951 29858 126166 227000) 0 nil])
([nil nil ((7665 . 7670)) nil (25951 29858 126165 987000) 0 nil])
([nil nil ((7701 . 7703)) nil (25951 29858 126165 746000) 0 nil])
([nil nil ((7703 . 7716)) nil (25951 29858 126165 486000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7715) (undo-tree-id442 . -1) (undo-tree-id443 . -1) 7716) nil (25951 29858 126165 35000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7717) (7717 . 7718) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -7717) (7717 . 7718) (7715 . 7718)) nil (25951 29858 126163 943000) 0 nil])
([nil nil ((7718 . 7720) (7719 . 7720) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 7718) (7718 . 7720) (7717 . 7719)) nil (25951 29858 126163 412000) 0 nil])
([nil nil ((7720 . 7726)) nil (25951 29858 126162 951000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7743 7744 nil nil nil t #s(yas--field 2 7746 7749 nil nil nil t #s(yas--field 3 7751 7767 nil nil nil t nil))) #s(yas--field 2 7746 7749 nil nil nil t #s(yas--field 3 7751 7767 nil nil nil t nil)) #s(yas--field 3 7751 7767 nil nil nil t nil)) nil 49 nil #s(yas--field 3 7751 7767 nil nil nil t nil) nil nil)) (7726 . 7787) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 7726) (7726 . 7802) (#("RespondWithError" 0 16 (fontified nil)) . -7726) (7726 . 7742)) nil (25951 29858 126162 370000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 7744) (undo-tree-id441 . -21) (7743 . 7744)) nil (25951 29858 126161 749000) 0 nil])
([nil nil ((7747 . 7749) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 7747) (undo-tree-id440 . -8) (7746 . 7747)) nil (25951 29858 126161 108000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7746) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7747) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7748) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) 7749) nil (25951 29858 126159 985000) 0 nil])
([nil nil ((7746 . 7749)) nil (25951 29858 126157 70000) 0 nil])
([nil nil ((7752 . 7760) (7751 . 7753) (#("\"" 0 1 (fontified nil)) . -7751) (undo-tree-id429 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 7752) (undo-tree-id430 . -10) (7751 . 7752)) nil (25951 29858 126156 589000) 0 nil])
([nil nil ((7760 . 7762)) nil (25951 29858 126155 547000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7761) (undo-tree-id428 . -1) 7762) nil (25951 29858 126155 196000) 0 nil])
([nil nil ((7761 . 7769)) nil (25951 29858 126154 565000) 0 nil])
([nil nil ((#("I" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7752) (undo-tree-id411 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7753) (undo-tree-id412 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7754) (undo-tree-id413 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7755) (undo-tree-id414 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7756) (undo-tree-id415 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7757) (undo-tree-id416 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7758) (undo-tree-id417 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7759) (undo-tree-id418 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -7760) (undo-tree-id419 . -1) (#("S" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7761) (undo-tree-id420 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7762) (undo-tree-id421 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7763) (undo-tree-id422 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7764) (undo-tree-id423 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7765) (undo-tree-id424 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7766) (undo-tree-id425 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -7767) (undo-tree-id426 . -1) (#("E" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7768) (undo-tree-id427 . -1) 7769) nil (25951 29858 126152 161000) 0 nil])
([nil nil ((7752 . 7755)) nil (25951 29858 126145 939000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7752) (undo-tree-id408 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7753) (undo-tree-id409 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -7754) (undo-tree-id410 . -1) 7755) nil (25951 29858 126145 37000) 0 nil])
([nil nil ((7752 . 7760)) nil (25951 29858 126137 433000) 0 nil])
([nil nil ((7760 . 7766)) nil (25951 29858 126137 22000) 0 nil])
([nil nil ((apply yas--snippet-revive 7726 7768 #s(yas--snippet nil (#s(yas--field 1 7743 7744 nil nil nil t #s(yas--field 2 7746 7749 nil nil nil t #s(yas--field 3 7751 7767 nil nil nil t nil))) #s(yas--field 2 7746 7749 nil nil nil t #s(yas--field 3 7751 7767 nil nil nil t nil)) #s(yas--field 3 7751 7767 nil nil nil t nil)) nil 49 nil #s(yas--field 3 7751 7767 nil nil nil t nil) nil nil))) nil (25951 29858 126133 826000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8010) (undo-tree-id514 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8011) (undo-tree-id515 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8012) (undo-tree-id516 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8013) (undo-tree-id517 . -1) (#("." 0 1 (fontified t)) . -8014) (undo-tree-id518 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -8015) (undo-tree-id519 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -8016) (undo-tree-id520 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -8017) (undo-tree-id521 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -8018) (undo-tree-id522 . -1) 8019 (t 25951 29858 148015 952000)) nil (25951 30788 19915 977000) 0 nil])
([nil nil ((8010 . 8013)) nil (25951 30788 19911 910000) 0 nil])
([nil nil ((apply yas--snippet-revive 8010 8015 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (8010 . 8015) (#("tagId" 0 5 (fontified nil)) . 8010) (8010 . 8015) (#("tag" 0 3 (fontified nil)) . 8010) (8010 . 8013) (#("tagId" 0 5 (fontified nil)) . -8010) (8010 . 8015) (#("tag" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -8010) (undo-tree-id512 . -3) (undo-tree-id513 . -3) 8013) nil (25951 30788 19911 389000) 0 nil])
([nil nil ((7768 . 7771)) nil (25951 30788 19909 996000) 0 nil])
([nil nil ((7771 . 7777)) nil (25951 30788 19909 856000) 0 nil])
([nil nil ((8028 . 8030)) nil (25951 30788 19909 706000) 0 nil])
([nil nil ((8030 . 8035)) nil (25951 30788 19909 555000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8034) (undo-tree-id511 . -1) 8035) nil (25951 30788 19909 275000) 0 nil])
([nil nil ((8034 . 8043)) nil (25951 30788 19908 844000) 0 nil])
([nil nil ((8043 . 8048)) nil (25951 30788 19908 634000) 0 nil])
([nil nil ((8048 . 8054)) nil (25951 30788 19908 393000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8059 8064 nil nil nil t #s(yas--field 2 8066 8079 nil nil nil t nil)) #s(yas--field 2 8066 8079 nil nil nil t nil)) nil 51 nil #s(yas--field 2 8066 8079 nil nil nil t nil) nil nil)) (8048 . 8110) (#("UpdateTask(${1:ctx context.Context}, ${2:arg database.UpdateTaskParams})" 0 72 (fontified nil)) . 8048) (8048 . 8120) (#("Update" 0 6 (fontified nil)) . 8048) (8048 . 8054) (#("UpdateTask" 0 10 (fontified nil)) . -8048) (8048 . 8058) (#("Update" 0 6 (face tree-sitter-hl-face:property fontified t)) . -8048) (undo-tree-id509 . -6) (undo-tree-id510 . -6) 8054) nil (25951 30788 19907 772000) 0 nil])
([nil nil ((8060 . 8061) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 8060) (8059 . 8060)) nil (25951 30788 19906 710000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -8060) (undo-tree-id507 . -1) (undo-tree-id508 . -1) 8061) nil (25951 30788 19906 339000) 0 nil])
([nil nil ((8060 . 8061)) nil (25951 30788 19905 568000) 0 nil])
([nil nil ((apply yas--snippet-revive 8061 8064 #s(yas--snippet nil nil nil 52 nil nil #s(yas--field 1 8059 8064 nil nil nil t #s(yas--field 2 8066 8079 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil #s(yas--field 1 8059 8064 nil nil nil t #s(yas--field 2 8066 8079 nil nil nil t nil)) nil)) (8061 . 8064) (#("CTX" 0 3 (fontified nil)) . 8061) (8061 . 8064) (#("CTX" 0 3 (fontified nil)) . -8061) (8061 . 8064)) nil (25951 30788 19904 866000) 0 nil])
([nil nil ((8067 . 8072) (#("arg database.UpdateTaskParams" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 29 (face tree-sitter-hl-face:property fontified nil)) . 8067) (8066 . 8067)) nil (25951 30788 19904 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 8066 8079 #s(yas--snippet nil nil nil 53 nil nil #s(yas--field 2 8066 8079 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil #s(yas--field 2 8066 8079 nil nil nil t nil) nil)) (8066 . 8079) (#("updateTaskObj" 0 13 (fontified nil)) . 8066) (8066 . 8079) (#("update" 0 6 (fontified nil)) . 8066) (8066 . 8072) (#("updateTaskObj" 0 13 (fontified nil)) . -8066) (8066 . 8079) (#("update" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -8066) (undo-tree-id505 . -6) (undo-tree-id506 . -6) 8072) nil (25951 30788 19903 524000) 0 nil])
([nil nil ((apply yas--snippet-revive 8048 8080 #s(yas--snippet nil (#s(yas--field 1 8059 8064 nil nil nil t #s(yas--field 2 8066 8079 nil nil nil t nil)) #s(yas--field 2 8066 8079 nil nil nil t nil)) nil 51 nil #s(yas--field 2 8066 8079 nil nil nil t nil) nil nil))) nil (25951 30788 19902 272000) 0 nil])
([nil nil ((8080 . 8082)) nil (25951 30788 19902 31000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -8097) (8097 . 8098) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -8097) (8097 . 8098) (8082 . 8098)) nil (25951 30788 19901 560000) 0 nil])
([nil nil ((8098 . 8100) (8099 . 8100) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 8098) (8098 . 8100) (8097 . 8099)) nil (25951 30788 19900 929000) 0 nil])
([nil nil ((8100 . 8107)) nil (25951 30788 19897 733000) 0 nil])
([nil nil ((8107 . 8119)) nil (25951 30788 19897 543000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8129 8130 nil nil nil t #s(yas--field 2 8132 8135 nil nil nil t #s(yas--field 3 8137 8160 nil nil nil t nil))) #s(yas--field 2 8132 8135 nil nil nil t #s(yas--field 3 8137 8160 nil nil nil t nil)) #s(yas--field 3 8137 8160 nil nil nil t nil)) nil 54 nil #s(yas--field 3 8137 8160 nil nil nil t nil) nil nil)) (8113 . 8182) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 8113) (8113 . 8198) (#("Respon" 0 6 (fontified nil)) . 8113) (8113 . 8119) (#("RespondWithJSON" 0 15 (fontified nil)) . -8113) (8113 . 8128) (#("Respon" 0 6 (face tree-sitter-hl-face:property fontified t)) . -8113) (undo-tree-id503 . -6) (undo-tree-id504 . -6) 8119) nil (25951 30788 19896 912000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 8130) (8129 . 8130)) nil (25951 30788 19895 519000) 0 nil])
([nil nil ((8133 . 8135) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 8133) (8132 . 8133)) nil (25951 30788 19895 128000) 0 nil])
([nil nil ((8138 . 8148) (8137 . 8139) (#("\"" 0 1 (fontified nil)) . -8137) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 8138) (8137 . 8138)) nil (25951 30788 19894 527000) 0 nil])
([nil nil ((8148 . 8159)) nil (25951 30788 19894 86000) 0 nil])
([nil nil ((apply yas--snippet-revive 8113 8161 #s(yas--snippet nil (#s(yas--field 1 8129 8130 nil nil nil t #s(yas--field 2 8132 8135 nil nil nil t #s(yas--field 3 8137 8160 nil nil nil t nil))) #s(yas--field 2 8132 8135 nil nil nil t #s(yas--field 3 8137 8160 nil nil nil t nil)) #s(yas--field 3 8137 8160 nil nil nil t nil)) nil 54 nil #s(yas--field 3 8137 8160 nil nil nil t nil) nil nil))) nil (25951 30788 19893 826000) 0 nil])
([nil nil ((8161 . 8164)) nil (25951 30788 19893 555000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8161) (undo-tree-id500 . -1) (#("	" 0 1 (fontified t)) . -8162) (undo-tree-id501 . -1) (#("	" 0 1 (fontified t)) . -8163) (undo-tree-id502 . -1) 8164) nil (25951 30788 19893 24000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8100) (undo-tree-id493 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8101) (undo-tree-id494 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8102) (undo-tree-id495 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8103) (undo-tree-id496 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8104) (undo-tree-id497 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8105) (undo-tree-id498 . -1) (#(" " 0 1 (fontified t)) . -8106) (undo-tree-id499 . -1) 8107) nil (25951 30788 19891 131000) 0 nil])
([nil nil ((8154 . 8157)) nil (25951 30788 19888 476000) 0 nil])
([nil nil ((8157 . 8163)) nil (25951 30788 19888 285000) 0 nil])
([nil nil ((8166 . 8168)) nil (25951 30788 19887 875000) 0 nil])
([nil nil ((8168 . 8174)) nil (25951 30788 19887 614000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8190 8191 nil nil nil t #s(yas--field 2 8193 8196 nil nil nil t #s(yas--field 3 8198 8202 nil nil nil t nil))) #s(yas--field 2 8193 8196 nil nil nil t #s(yas--field 3 8198 8202 nil nil nil t nil)) #s(yas--field 3 8198 8202 nil nil nil t nil)) nil 55 nil #s(yas--field 3 8198 8202 nil nil nil t nil) nil nil)) (8174 . 8243) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 8174) (8174 . 8259) (#("RespondWithJSON" 0 15 (fontified nil)) . -8174) (8174 . 8189)) nil (25951 30788 19887 163000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 8191) (undo-tree-id492 . -21) (8190 . 8191)) nil (25951 30788 19886 582000) 0 nil])
([nil nil ((8194 . 8196) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 8194) (undo-tree-id489 . -8) (undo-tree-id490 . -5) (undo-tree-id491 . -6) (8193 . 8194)) nil (25951 30788 19885 771000) 0 nil])
([nil nil ((8199 . 8202) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 8199) (undo-tree-id486 . -19) (undo-tree-id487 . -8) (undo-tree-id488 . -9) (8198 . 8199)) nil (25951 30788 19884 308000) 0 nil])
([nil nil ((apply yas--snippet-revive 8198 8202 #s(yas--snippet nil nil nil 56 nil nil #s(yas--field 3 8198 8202 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil #s(yas--field 3 8198 8202 nil nil nil t nil) nil)) (8198 . 8202) (#("task" 0 4 (fontified nil)) . 8198) (undo-tree-id472 . -4) (8198 . 8202) (#("task" 0 4 (fontified nil)) . 8198) (undo-tree-id473 . -4) (8198 . 8202) (#("task" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -8198) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -1) (undo-tree-id478 . -2) (undo-tree-id479 . -3) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) 8202) nil (25951 30788 19882 244000) 0 nil])
([nil nil ((apply yas--snippet-revive 8174 8203 #s(yas--snippet nil (#s(yas--field 1 8190 8191 nil nil nil t #s(yas--field 2 8193 8196 nil nil nil t #s(yas--field 3 8198 8202 nil nil nil t nil))) #s(yas--field 2 8193 8196 nil nil nil t #s(yas--field 3 8198 8202 nil nil nil t nil)) #s(yas--field 3 8198 8202 nil nil nil t nil)) nil 55 nil #s(yas--field 3 8198 8202 nil nil nil t nil) nil nil))) nil (25951 30788 19869 330000) 0 nil])
([nil nil ((8205 . 8207) (t 25951 30788 41409 180000)) nil (25951 32428 948340 996000) 0 nil])
([nil nil ((8207 . 8215)) nil (25951 32428 948340 686000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8212) (undo-tree-id540 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8213) (undo-tree-id541 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8214) (undo-tree-id542 . -1) 8215) nil (25951 32428 948340 85000) 0 nil])
([nil nil ((8212 . 8222)) nil (25951 32428 948338 452000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8301 . 8302) (nil fontified nil 8222 . 8302) (8222 . 8302) 8221) nil (25951 32428 948338 131000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -8304) (8304 . 8305) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -8304) (8304 . 8305) (8302 . 8305)) nil (25951 32428 948337 410000) 0 nil])
([nil nil ((8305 . 8306) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 8305) (8305 . 8306) (8304 . 8306)) nil (25951 32428 948336 849000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8307 . 8308) (#("
" 0 1 (fontified nil)) . -8979) (8306 . 8980) 8305) nil (25951 32428 948336 358000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 8305) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1)) nil (25951 32428 948335 887000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8978 . 8979) (#("
" 0 1 (fontified nil)) . -9400) (8977 . 9401) 8976) nil (25951 32428 948334 43000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9005) (undo-tree-id529 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9006) (undo-tree-id530 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9007) (undo-tree-id531 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9008) (undo-tree-id532 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9009) (undo-tree-id533 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -9010) (undo-tree-id534 . -1) 9011) nil (25951 32428 948332 871000) 0 nil])
([nil nil ((9005 . 9008)) nil (25951 32428 948330 166000) 0 nil])
([nil nil ((9164 . 9167)) nil (25951 32428 948329 906000) 0 nil])
([nil nil ((9167 . 9170)) nil (25951 32428 948329 645000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9178 9188 nil nil nil t nil)) nil 57 nil #s(yas--field 1 9178 9188 nil nil nil t nil) nil nil)) (9167 . 9188) (#("CreatedAt: ${1:time.Time}," 0 26 (fontified nil)) . 9167) (9167 . 9193) (#("Cre" 0 3 (fontified nil)) . 9167) (9167 . 9170) (#("CreatedAt" 0 9 (fontified nil)) . -9167) (9167 . 9176) (#("Cre" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -9167) (undo-tree-id527 . -3) (undo-tree-id528 . -3) 9170) nil (25951 32428 948328 934000) 0 nil])
([nil nil ((9179 . 9183) (#("time.Time" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 9179) (undo-tree-id525 . -9) (undo-tree-id526 . -9) (9178 . 9179)) nil (25951 32428 948327 90000) 0 nil])
([nil nil ((apply yas--snippet-revive 9183 9188 #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 9178 9188 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 9178 9188 nil nil nil t nil) nil)) (9183 . 9188) (#("Now()" 0 5 (fontified nil)) . 9183) (undo-tree-id523 . -5) (9183 . 9188) (#("Now" 0 3 (fontified nil)) . -9183) (undo-tree-id524 . -3) (9183 . 9186)) nil (25951 32428 948325 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 9167 9189 #s(yas--snippet nil (#s(yas--field 1 9178 9188 nil nil nil t nil)) nil 57 nil #s(yas--field 1 9178 9188 nil nil nil t nil) nil nil))) nil (25951 32428 948314 136000) 0 nil])
([nil nil ((8977 . 8979) (t 25951 32428 969642 645000)) nil (25951 32450 913122 527000) 0 nil])
([nil nil ((8979 . 8987)) nil (25951 32450 913122 206000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8985) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -8986) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 8987) nil (25951 32450 913121 615000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9001) (9001 . 9002) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -9001) (9001 . 9002) (8985 . 9002)) nil (25951 32450 912987 684000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -9182) (undo-tree-id563 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9183) (undo-tree-id564 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9184) (undo-tree-id565 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9185) (undo-tree-id566 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -9186) (undo-tree-id567 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -9187) (undo-tree-id568 . -1) (undo-tree-id569 . 1) (undo-tree-id570 . -1) 9188) nil (25951 32450 912986 592000) 0 nil])
([nil nil ((9182 . 9183)) nil (25951 32450 912983 476000) 0 nil])
([nil nil ((apply yas--snippet-revive 9178 9187 #s(yas--snippet nil nil nil 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil nil nil)) (9178 . 9187) (#("timeStamp" 0 9 (fontified nil)) . 9178) (9178 . 9187) (#("timeS" 0 5 (fontified nil)) . 9178) (9178 . 9183) (#("timeStamp" 0 9 (fontified nil)) . -9178) (9178 . 9187) (#("timeS" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -9178) (undo-tree-id561 . -5) (undo-tree-id562 . -5) 9183) nil (25951 32450 912982 504000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -9206) (undo-tree-id548 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9207) (undo-tree-id549 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9208) (undo-tree-id550 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9209) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -9210) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . 1) (undo-tree-id557 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -9211) (undo-tree-id558 . -1) (undo-tree-id559 . 1) (undo-tree-id560 . -1) 9212) nil (25951 32450 912980 140000) 0 nil])
([nil nil ((9206 . 9207)) nil (25951 32450 912973 978000) 0 nil])
([nil nil ((apply yas--snippet-revive 9202 9211 #s(yas--snippet nil nil nil 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil nil nil)) (9202 . 9211) (#("timeStamp" 0 9 (fontified nil)) . 9202) (9202 . 9211) (#("timeS" 0 5 (fontified nil)) . 9202) (9202 . 9207) (#("timeStamp" 0 9 (fontified nil)) . -9202) (9202 . 9211) (#("timeS" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -9202) (undo-tree-id543 . -5) (undo-tree-id544 . -5) (undo-tree-id545 . -5) (undo-tree-id546 . -5) (undo-tree-id547 . -5) 9207) nil (25951 32450 912971 614000) 0 nil])
([nil nil ((#("U" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9290) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9291) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9292) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9293) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9294) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -9295) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 9296 (t 25951 32450 933618 999000)) nil (25951 32472 34571 179000) 0 nil])
([nil nil ((9290 . 9293)) nil (25951 32472 34558 154000) 0 nil])
([nil nil ((#("upd" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 9004) (9008 . 9010) (#("te" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 9008) 9012 (#("upd" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 9305) (9309 . 9311) (#("te" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 9309) 9305) nil (25951 32472 34554 337000) 0 nil])
([nil nil ((9438 . 9440) (t 25951 32472 58594 797000)) nil (25951 32575 322130 655000) 0 nil])
([nil nil ((9440 . 9445)) nil (25951 32575 322130 184000) 0 nil])
([nil nil ((9445 . 9451)) nil (25951 32575 322129 734000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9456) (9456 . 9457) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -9456) (9456 . 9457) (9451 . 9457)) nil (25951 32575 322128 882000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -9455) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . 1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -9456) (undo-tree-id615 . -1) (undo-tree-id616 . 1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) 9457) nil (25951 32575 322127 660000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9456 . 9457) (#("
" 0 1 (fontified nil)) . -9878) (9455 . 9879) 9454) nil (25951 32575 322118 182000) 0 nil])
([nil nil ((#("
	updateTaskObj := database.UpdateTaskParams{
		ID: uuid.New(),
		UserID: user.ID,
		Title: taskReqObj.Title,
		EventStart: eventStartTime,
		EventEnd: eventEndTime,
		UpdatedAt: time.Now(),
		Repetitions: taskReqObj.Repetitions,
		TagID: tagId,
	}
	task, err := a.DB.UpdateTask(a.CTX, updateTaskObj)
	if err != nil {
		utils.RespondWithJSON(w, 500, \"Internal Server Error\")
		return
	}
	utils.RespondWithJSON(w, 200, task)
" 0 1 (fontified t) 1 2 (rear-nonsticky nil fontified nil) 2 15 (face tree-sitter-hl-face:variable fontified nil) 15 16 (fontified nil) 16 18 (face tree-sitter-hl-face:operator fontified nil) 18 19 (fontified nil) 19 27 (face tree-sitter-hl-face:variable fontified nil) 27 28 (fontified nil) 28 44 (face tree-sitter-hl-face:variable fontified nil) 44 45 (face (rainbow-delimiters-depth-1-face) fontified nil) 45 46 (fontified nil) 46 48 (fontified t) 48 50 (face tree-sitter-hl-face:variable fontified t) 50 52 (fontified t) 52 56 (face tree-sitter-hl-face:variable fontified t) 56 57 (fontified t) 57 60 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 64 (fontified t) 64 66 (fontified t) 66 72 (fontified t) 72 74 (fontified t) 74 78 (face tree-sitter-hl-face:variable fontified t) 78 79 (fontified t) 79 81 (face tree-sitter-hl-face:property fontified t) 81 83 (fontified t) 83 85 (fontified t) 85 90 (face tree-sitter-hl-face:variable fontified t) 90 92 (fontified t) 92 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 108 (face tree-sitter-hl-face:property fontified t) 108 110 (fontified t) 110 112 (fontified t) 112 122 (face tree-sitter-hl-face:variable fontified t) 122 124 (fontified t) 124 138 (face tree-sitter-hl-face:variable fontified t) 138 140 (fontified t) 140 142 (fontified t) 142 150 (face tree-sitter-hl-face:variable fontified t) 150 152 (fontified t) 152 164 (face tree-sitter-hl-face:variable fontified t) 164 166 (fontified t) 166 168 (fontified t) 168 177 (face tree-sitter-hl-face:variable fontified t) 177 179 (fontified t) 179 183 (face tree-sitter-hl-face:variable fontified t) 183 184 (fontified t) 184 187 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 187 188 (face (rainbow-delimiters-depth-2-face) fontified t) 188 189 (face (rainbow-delimiters-depth-2-face) fontified t) 189 191 (fontified t) 191 193 (fontified t) 193 204 (face tree-sitter-hl-face:variable fontified t) 204 206 (fontified t) 206 216 (face tree-sitter-hl-face:variable fontified t) 216 217 (fontified t) 217 228 (face tree-sitter-hl-face:property fontified t) 228 230 (fontified t) 230 232 (fontified t) 232 237 (face tree-sitter-hl-face:variable fontified t) 237 239 (fontified t) 239 244 (face tree-sitter-hl-face:variable fontified t) 244 245 (fontified t) 245 246 (fontified t) 246 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 249 (fontified t) 249 250 (fontified t) 250 254 (face tree-sitter-hl-face:variable fontified t) 254 256 (fontified t) 256 259 (face tree-sitter-hl-face:variable fontified t) 259 260 (fontified t) 260 262 (face tree-sitter-hl-face:operator fontified t) 262 263 (fontified t) 263 264 (face tree-sitter-hl-face:variable fontified t) 264 265 (fontified t) 265 267 (face tree-sitter-hl-face:property fontified t) 267 268 (fontified t) 268 278 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 278 279 (face (rainbow-delimiters-depth-1-face) fontified t) 279 280 (face tree-sitter-hl-face:variable fontified t) 280 281 (fontified t) 281 284 (face tree-sitter-hl-face:property fontified t) 284 286 (fontified t) 286 299 (face tree-sitter-hl-face:variable fontified t) 299 300 (face (rainbow-delimiters-depth-1-face) fontified t) 300 301 (fontified t) 301 302 (fontified t) 302 304 (face tree-sitter-hl-face:keyword fontified t) 304 305 (fontified t) 305 308 (face tree-sitter-hl-face:variable fontified t) 308 309 (fontified t) 309 311 (face tree-sitter-hl-face:operator fontified t) 311 312 (fontified t) 312 315 (face tree-sitter-hl-face:constant\.builtin fontified t) 315 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-1-face) fontified t) 317 318 (fontified t) 318 320 (fontified t) 320 325 (face tree-sitter-hl-face:variable fontified t) 325 326 (fontified t) 326 341 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 341 342 (face (rainbow-delimiters-depth-2-face) fontified t) 342 343 (face tree-sitter-hl-face:variable fontified t) 343 345 (fontified t) 345 348 (face tree-sitter-hl-face:number fontified t) 348 350 (fontified t) 350 373 (face tree-sitter-hl-face:string fontified t) 373 374 (face (rainbow-delimiters-depth-2-face) fontified t) 374 375 (fontified t) 375 377 (fontified t) 377 383 (face tree-sitter-hl-face:keyword fontified t) 383 384 (fontified t) 384 385 (fontified t) 385 386 (face (rainbow-delimiters-depth-1-face) fontified t) 386 387 (fontified t) 387 388 (fontified nil) 388 393 (face tree-sitter-hl-face:variable fontified nil) 393 394 (fontified nil) 394 409 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 409 410 (face (rainbow-delimiters-depth-1-face) fontified nil) 410 411 (face tree-sitter-hl-face:variable fontified nil) 411 413 (fontified nil) 413 416 (face tree-sitter-hl-face:number fontified nil) 416 418 (fontified nil) 418 422 (face tree-sitter-hl-face:variable fontified nil) 422 423 (face (rainbow-delimiters-depth-1-face) fontified nil) 423 424 (fontified nil)) . 9455) (undo-tree-id593 . -1) (undo-tree-id594 . -423) (undo-tree-id595 . -2) (undo-tree-id596 . -1) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -1) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) (9878 . 9879) (nil rear-nonsticky t 9456 . 9457)) nil (25951 32575 322114 926000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9456 . 9457) (#("
" 0 1 (fontified nil)) . -9878) (9455 . 9879) 9454 (t 25951 32575 438457 680000)) nil (25951 52479 156814 807000) 0 nil])
([nil nil ((#("
	updateTaskObj := database.UpdateTaskParams{
		ID: uuid.New(),
		UserID: user.ID,
		Title: taskReqObj.Title,
		EventStart: eventStartTime,
		EventEnd: eventEndTime,
		UpdatedAt: time.Now(),
		Repetitions: taskReqObj.Repetitions,
		TagID: tagId,
	}
	task, err := a.DB.UpdateTask(a.CTX, updateTaskObj)
	if err != nil {
		utils.RespondWithJSON(w, 500, \"Internal Server Error\")
		return
	}
	utils.RespondWithJSON(w, 200, task)
" 0 1 (fontified t) 1 2 (rear-nonsticky nil fontified nil) 2 15 (face tree-sitter-hl-face:variable fontified nil) 15 16 (fontified nil) 16 18 (face tree-sitter-hl-face:operator fontified nil) 18 19 (fontified nil) 19 27 (face tree-sitter-hl-face:variable fontified nil) 27 28 (fontified nil) 28 44 (face tree-sitter-hl-face:variable fontified nil) 44 45 (face (rainbow-delimiters-depth-1-face) fontified nil) 45 46 (fontified nil) 46 48 (fontified t) 48 50 (face tree-sitter-hl-face:variable fontified t) 50 52 (fontified t) 52 56 (face tree-sitter-hl-face:variable fontified t) 56 57 (fontified t) 57 60 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 64 (fontified t) 64 66 (fontified t) 66 72 (fontified t) 72 74 (fontified t) 74 78 (face tree-sitter-hl-face:variable fontified t) 78 79 (fontified t) 79 81 (face tree-sitter-hl-face:property fontified t) 81 83 (fontified t) 83 85 (fontified t) 85 90 (face tree-sitter-hl-face:variable fontified t) 90 92 (fontified t) 92 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 108 (face tree-sitter-hl-face:property fontified t) 108 110 (fontified t) 110 112 (fontified t) 112 122 (face tree-sitter-hl-face:variable fontified t) 122 124 (fontified t) 124 138 (face tree-sitter-hl-face:variable fontified t) 138 140 (fontified t) 140 142 (fontified t) 142 150 (face tree-sitter-hl-face:variable fontified t) 150 152 (fontified t) 152 164 (face tree-sitter-hl-face:variable fontified t) 164 166 (fontified t) 166 168 (fontified t) 168 177 (face tree-sitter-hl-face:variable fontified t) 177 179 (fontified t) 179 183 (face tree-sitter-hl-face:variable fontified t) 183 184 (fontified t) 184 187 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 187 188 (face (rainbow-delimiters-depth-2-face) fontified t) 188 189 (face (rainbow-delimiters-depth-2-face) fontified t) 189 191 (fontified t) 191 193 (fontified t) 193 204 (face tree-sitter-hl-face:variable fontified t) 204 206 (fontified t) 206 216 (face tree-sitter-hl-face:variable fontified t) 216 217 (fontified t) 217 228 (face tree-sitter-hl-face:property fontified t) 228 230 (fontified t) 230 232 (fontified t) 232 237 (face tree-sitter-hl-face:variable fontified t) 237 239 (fontified t) 239 244 (face tree-sitter-hl-face:variable fontified t) 244 245 (fontified t) 245 246 (fontified t) 246 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 249 (fontified t) 249 250 (fontified t) 250 254 (face tree-sitter-hl-face:variable fontified t) 254 256 (fontified t) 256 259 (face tree-sitter-hl-face:variable fontified t) 259 260 (fontified t) 260 262 (face tree-sitter-hl-face:operator fontified t) 262 263 (fontified t) 263 264 (face tree-sitter-hl-face:variable fontified t) 264 265 (fontified t) 265 267 (face tree-sitter-hl-face:property fontified t) 267 268 (fontified t) 268 278 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 278 279 (face (rainbow-delimiters-depth-1-face) fontified t) 279 280 (face tree-sitter-hl-face:variable fontified t) 280 281 (fontified t) 281 284 (face tree-sitter-hl-face:property fontified t) 284 286 (fontified t) 286 299 (face tree-sitter-hl-face:variable fontified t) 299 300 (face (rainbow-delimiters-depth-1-face) fontified t) 300 301 (fontified t) 301 302 (fontified t) 302 304 (face tree-sitter-hl-face:keyword fontified t) 304 305 (fontified t) 305 308 (face tree-sitter-hl-face:variable fontified t) 308 309 (fontified t) 309 311 (face tree-sitter-hl-face:operator fontified t) 311 312 (fontified t) 312 315 (face tree-sitter-hl-face:constant\.builtin fontified t) 315 316 (fontified t) 316 317 (face (rainbow-delimiters-depth-1-face) fontified t) 317 318 (fontified t) 318 320 (fontified t) 320 325 (face tree-sitter-hl-face:variable fontified t) 325 326 (fontified t) 326 341 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 341 342 (face (rainbow-delimiters-depth-2-face) fontified t) 342 343 (face tree-sitter-hl-face:variable fontified t) 343 345 (fontified t) 345 348 (face tree-sitter-hl-face:number fontified t) 348 350 (fontified t) 350 373 (face tree-sitter-hl-face:string fontified t) 373 374 (face (rainbow-delimiters-depth-2-face) fontified t) 374 375 (fontified t) 375 377 (fontified t) 377 383 (face tree-sitter-hl-face:keyword fontified t) 383 384 (fontified t) 384 385 (fontified t) 385 386 (face (rainbow-delimiters-depth-1-face) fontified t) 386 387 (fontified t) 387 388 (fontified nil) 388 393 (face tree-sitter-hl-face:variable fontified nil) 393 394 (fontified nil) 394 409 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 409 410 (face (rainbow-delimiters-depth-1-face) fontified nil) 410 411 (face tree-sitter-hl-face:variable fontified nil) 411 413 (fontified nil) 413 416 (face tree-sitter-hl-face:number fontified nil) 416 418 (fontified nil) 418 422 (face tree-sitter-hl-face:variable fontified nil) 422 423 (face (rainbow-delimiters-depth-1-face) fontified nil) 423 424 (fontified nil)) . 9455) (undo-tree-id688 . -1) (undo-tree-id689 . -423) (undo-tree-id690 . -2) (9878 . 9879) (nil rear-nonsticky t 9456 . 9457)) nil (25951 52479 156814 336000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9534 . 9535) (nil fontified nil 9455 . 9535) (9455 . 9535) 9454 (t 25951 32575 438457 680000)) nil (25951 52479 156813 74000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -9537) (9537 . 9538) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -9537) (9537 . 9538) (9535 . 9538)) nil (25951 52479 156812 192000) 0 nil])
([nil nil ((9538 . 9539) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 9538) (9538 . 9539) (9537 . 9539)) nil (25951 52479 156811 711000) 0 nil])
([nil nil ((9539 . 9543)) nil (25951 52479 156811 290000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9539) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9540) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9541) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9542) (undo-tree-id686 . -1) (undo-tree-id687 . -1) 9543) nil (25951 52479 156810 629000) 0 nil])
([nil nil ((9539 . 9551)) nil (25951 52479 156806 391000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9562 9567 nil nil nil t #s(yas--field 2 9569 9619 nil nil nil t nil)) #s(yas--field 2 9569 9619 nil nil nil t nil)) nil 61 nil #s(yas--field 2 9569 9619 nil nil nil t nil) nil nil)) (9551 . 9613) (#("DeleteTask(${1:ctx context.Context}, ${2:arg database.DeleteTaskParams})" 0 72 (fontified nil)) . 9551) (9551 . 9623) (#("DeleteTask" 0 10 (fontified nil)) . -9551) (9551 . 9561)) nil (25951 52479 156805 820000) 0 nil])
([nil nil ((9563 . 9564) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 9563) (9562 . 9563)) nil (25951 52479 156805 239000) 0 nil])
([nil nil ((apply yas--snippet-revive 9564 9567 #s(yas--snippet nil nil nil 62 nil nil #s(yas--field 1 9562 9567 nil nil nil t #s(yas--field 2 9569 9619 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 62 nil nil #s(yas--field 1 9562 9567 nil nil nil t #s(yas--field 2 9569 9619 nil nil nil t nil)) nil)) (9564 . 9567) (#("CTX" 0 3 (fontified nil)) . 9564) (9564 . 9567) (#("CTX" 0 3 (fontified nil)) . -9564) (9564 . 9567)) nil (25951 52479 156804 487000) 0 nil])
([nil nil ((#("arg database.DeleteTaskParams" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (fontified t) 4 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 29 (face tree-sitter-hl-face:property fontified t)) . 9569)) nil (25951 52479 156803 616000) 0 nil])
([nil nil ((9569 . 9574)) nil (25951 52479 156803 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 9569 9596 #s(yas--snippet nil nil #s(yas--exit 9595 nil) 63 nil nil #s(yas--field 2 9569 9619 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9595 nil) 63 nil nil #s(yas--field 2 9569 9619 nil nil nil t nil) nil)) (9569 . 9596) (#("database.DeleteTaskParams{$0\\}" 0 30 (fontified nil)) . 9569) (9569 . 9599) (#("datab" 0 5 (fontified nil)) . 9569) (9569 . 9574) (#("database.DeleteTaskParams{}" 0 27 (fontified nil)) . -9569) (9569 . 9596) (#("datab" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -9569) (undo-tree-id678 . -5) (undo-tree-id679 . -5) 9574) nil (25951 52479 156801 943000) 0 nil])
([nil nil ((9595 . 9597)) nil (25951 52479 156799 869000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9595) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9596) (undo-tree-id676 . -1) (undo-tree-id677 . -1) 9597) nil (25951 52479 156799 197000) 0 nil])
([nil nil ((9595 . 9599)) nil (25951 52479 156796 953000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9603 9610 nil nil nil t nil)) nil 64 nil #s(yas--field 1 9603 9610 nil nil nil t nil) #s(yas--field 2 9569 9619 nil nil nil t nil) nil)) (9595 . 9612) (#("UserID: ${1:uuid.UUID}" 0 22 (fontified nil)) . 9595) (9595 . 9617) (#("User" 0 4 (fontified nil)) . 9595) (9595 . 9599) (#("UserID" 0 6 (fontified nil)) . -9595) (9595 . 9601) (#("User" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -9595) (undo-tree-id672 . -4) (undo-tree-id673 . -4) 9599) nil (25951 52479 156796 172000) 0 nil])
([nil nil ((9604 . 9608) (#("uuid.UUID" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 9 (face tree-sitter-hl-face:property fontified nil)) . 9604) (9603 . 9604)) nil (25951 52479 156794 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 9608 9610 #s(yas--snippet nil nil nil 65 nil nil #s(yas--field 1 9603 9610 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 65 nil nil #s(yas--field 1 9603 9610 nil nil nil t nil) nil)) (9608 . 9610) (#("ID" 0 2 (fontified nil)) . 9608) (9608 . 9610) (#("ID" 0 2 (fontified nil)) . -9608) (9608 . 9610)) nil (25951 52479 156793 356000) 0 nil])
([nil nil ((9610 . 9612)) nil (25951 52479 156792 234000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -9610) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#(" " 0 1 (fontified t)) . -9611) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 9612) nil (25951 52479 156791 423000) 0 nil])
([nil nil ((apply yas--snippet-revive 9595 9610 #s(yas--snippet nil (#s(yas--field 1 9603 9610 nil nil nil t nil)) nil 64 nil #s(yas--field 1 9603 9610 nil nil nil t nil) #s(yas--field 2 9569 9619 nil nil nil t nil) nil))) nil (25951 52479 156789 228000) 0 nil])
([nil nil ((9610 . 9615)) nil (25951 52479 156788 617000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9612) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9613) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9614) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 9615) nil (25951 52479 156787 876000) 0 nil])
([nil nil ((9612 . 9615)) nil (25951 52479 156784 920000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9612) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9613) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9614) (undo-tree-id660 . -1) (undo-tree-id661 . -1) 9615) nil (25951 52479 156784 39000) 0 nil])
([nil nil ((9612 . 9618)) nil (25951 52479 156781 53000) 0 nil])
([nil nil ((apply yas--snippet-revive 9551 9620 #s(yas--snippet nil (#s(yas--field 1 9562 9567 nil nil nil t #s(yas--field 2 9569 9619 nil nil nil t nil)) #s(yas--field 2 9569 9619 nil nil nil t nil)) nil 61 nil #s(yas--field 2 9569 9619 nil nil nil t nil) nil nil))) nil (25951 52479 156780 492000) 0 nil])
([nil nil ((9537 . 9539)) nil (25951 52479 156779 810000) 0 nil])
([nil nil ((9539 . 9555)) nil (25951 52479 156779 139000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9549) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9550) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9551) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9552) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9553) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -9554) (undo-tree-id654 . -1) (undo-tree-id655 . -1) 9555) nil (25951 52479 156777 807000) 0 nil])
([nil nil ((9549 . 9552)) nil (25951 52479 156773 519000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9558 9559 nil nil nil t #s(yas--field 2 9561 9565 nil nil nil t nil)) #s(yas--field 2 9561 9565 nil nil nil t nil)) nil 66 nil #s(yas--field 2 9561 9565 nil nil nil t nil) nil nil)) (9549 . 9586) (#("URLParam(${1:r *http.Request}, ${2:key string})" 0 47 (fontified nil)) . 9549) (9549 . 9596) (#("Url" 0 3 (fontified nil)) . 9549) (9549 . 9552) (#("URLParam" 0 8 (fontified nil)) . -9549) (9549 . 9557) (#("Url" 0 3 (face tree-sitter-hl-face:property fontified t)) . -9549) (undo-tree-id642 . -3) (undo-tree-id643 . -3) 9552) nil (25951 52479 156772 617000) 0 nil])
([nil nil ((#("r *http.Request" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 3 (face tree-sitter-hl-face:operator fontified nil) 3 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 15 (face tree-sitter-hl-face:property fontified nil)) . 9559) (9558 . 9559)) nil (25951 52479 156770 783000) 0 nil])
([nil nil ((9562 . 9564) (9561 . 9563) (#("\"" 0 1 (fontified nil)) . -9561) (#("key string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 9562) (9561 . 9562)) nil (25951 52479 156769 912000) 0 nil])
([nil nil ((apply yas--snippet-revive 9549 9566 #s(yas--snippet nil (#s(yas--field 1 9558 9559 nil nil nil t #s(yas--field 2 9561 9565 nil nil nil t nil)) #s(yas--field 2 9561 9565 nil nil nil t nil)) nil 66 nil #s(yas--field 2 9561 9565 nil nil nil t nil) nil nil))) nil (25951 52479 156768 699000) 0 nil])
([nil nil ((9541 . 9544)) nil (25951 52479 156767 998000) 0 nil])
([nil nil ((9544 . 9547)) nil (25951 52479 156767 126000) 0 nil])
([nil nil ((9572 . 9574)) nil (25951 52479 156766 696000) 0 nil])
([nil nil ((9574 . 9595)) nil (25951 52479 156766 205000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9596) (9596 . 9597) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -9596) (9596 . 9597) (9595 . 9597)) nil (25951 52479 156765 233000) 0 nil])
([nil nil ((9596 . 9599)) nil (25951 52479 156764 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 9596 9604 #s(yas--snippet nil nil nil 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 67 nil nil nil nil)) (9596 . 9604) (#("idstring" 0 8 (fontified nil)) . 9596) (9596 . 9604) (#("ids" 0 3 (fontified nil)) . 9596) (9596 . 9599) (#("idstring" 0 8 (fontified nil)) . -9596) (9596 . 9604) (#("ids" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -9596) (undo-tree-id640 . -3) (undo-tree-id641 . -3) 9599) nil (25951 52479 156763 339000) 0 nil])
([nil nil ((9605 . 9607)) nil (25951 52479 156760 894000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -9622) (9622 . 9623) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -9622) (9622 . 9623) (9607 . 9623)) nil (25951 52479 156760 494000) 0 nil])
([nil nil ((9623 . 9625) (9624 . 9625) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 9623) (9623 . 9625) (9622 . 9624)) nil (25951 52479 156759 291000) 0 nil])
([nil nil ((9625 . 9631)) nil (25951 52479 156758 590000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9648 9649 nil nil nil t #s(yas--field 2 9651 9654 nil nil nil t #s(yas--field 3 9656 9658 nil nil nil t nil))) #s(yas--field 2 9651 9654 nil nil nil t #s(yas--field 3 9656 9658 nil nil nil t nil)) #s(yas--field 3 9656 9658 nil nil nil t nil)) nil 68 nil #s(yas--field 3 9656 9658 nil nil nil t nil) nil nil)) (9631 . 9692) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 9631) (9631 . 9707) (#("RespondWithError" 0 16 (fontified nil)) . -9631) (9631 . 9647)) nil (25951 52479 156757 949000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 9649) (9648 . 9649)) nil (25951 52479 156757 358000) 0 nil])
([nil nil ((9652 . 9654) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 9652) (9651 . 9652)) nil (25951 52479 156756 917000) 0 nil])
([nil nil ((9656 . 9658) (#("\"" 0 1 (fontified nil)) . -9656) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 9657) (9656 . 9657)) nil (25951 52479 156756 135000) 0 nil])
([nil nil ((apply yas--snippet-revive 9631 9659 #s(yas--snippet nil (#s(yas--field 1 9648 9649 nil nil nil t #s(yas--field 2 9651 9654 nil nil nil t #s(yas--field 3 9656 9658 nil nil nil t nil))) #s(yas--field 2 9651 9654 nil nil nil t #s(yas--field 3 9656 9658 nil nil nil t nil)) #s(yas--field 3 9656 9658 nil nil nil t nil)) nil 68 nil #s(yas--field 3 9656 9658 nil nil nil t nil) nil nil))) nil (25951 52479 156755 394000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -9651) (undo-tree-id639 . -1) 9652) nil (25951 52479 156754 853000) 0 nil])
([nil nil ((9651 . 9652)) nil (25951 52479 156754 242000) 0 nil])
([nil nil ((9657 . 9659)) nil (25951 52479 156753 801000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -9658) (undo-tree-id638 . -1) 9659) nil (25951 52479 156753 290000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -9657) (undo-tree-id637 . -1) 9658) nil (25951 52479 156752 308000) 0 nil])
([nil nil ((9657 . 9676)) nil (25951 52479 156751 547000) 0 nil])
([nil nil ((9678 . 9681)) nil (25951 52479 156751 126000) 0 nil])
([nil nil ((9681 . 9687)) nil (25951 52479 156750 815000) 0 nil])
([nil nil ((9692 . 9693)) nil (25951 52479 156750 435000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9692) (undo-tree-id636 . -1) 9693) nil (25951 52479 156749 984000) 0 nil])
([nil nil ((9692 . 9693)) nil (25951 52479 156749 112000) 0 nil])
([nil nil ((9774 . 9776)) nil (25951 52479 156748 321000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -9792) (9792 . 9793) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -9792) (9792 . 9793) (9776 . 9793)) nil (25951 52479 156747 679000) 0 nil])
([nil nil ((9793 . 9795) (9794 . 9795) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 9793) (9793 . 9795) (9792 . 9794)) nil (25951 52479 156747 138000) 0 nil])
([nil nil ((9795 . 9801)) nil (25951 52479 156746 387000) 0 nil])
([nil nil ((9792 . 9795)) nil (25951 52479 156746 146000) 0 nil])
([nil nil ((9795 . 9797)) nil (25951 52479 156745 856000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -9796) (undo-tree-id635 . -1) 9797) nil (25951 52479 156745 405000) 0 nil])
([nil nil ((9796 . 9801)) nil (25951 52479 156744 894000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9818 9819 nil nil nil t #s(yas--field 2 9821 9824 nil nil nil t #s(yas--field 3 9826 9849 nil nil nil t nil))) #s(yas--field 2 9821 9824 nil nil nil t #s(yas--field 3 9826 9849 nil nil nil t nil)) #s(yas--field 3 9826 9849 nil nil nil t nil)) nil 69 nil #s(yas--field 3 9826 9849 nil nil nil t nil) nil nil)) (9801 . 9862) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 9801) (9801 . 9877) (#("RespondWithError" 0 16 (fontified nil)) . -9801) (9801 . 9817)) nil (25951 52479 156743 822000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 9819) (9818 . 9819)) nil (25951 52479 156743 91000) 0 nil])
([nil nil ((9822 . 9824) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 9822) (9821 . 9822)) nil (25951 52479 156742 500000) 0 nil])
([nil nil ((9827 . 9829) (#("\"" 0 1 (fontified nil)) . -9827) (9827 . 9828) (9826 . 9828) (#("'" 0 1 (fontified nil)) . -9826) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 9827) (9826 . 9827)) nil (25951 52479 156741 668000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -9826) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("'" 0 1 (fontified t)) . 9827) (#("\"" 0 1 (fontified nil)) . -9827) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("\"" 0 1 (fontified t)) . 9828)) nil (25951 52479 156740 646000) 0 nil])
([nil nil ((9827 . 9836) (9826 . 9828) (#("\"" 0 1 (fontified nil)) . -9826) (9826 . 9827)) nil (25951 52479 156739 173000) 0 nil])
([nil nil ((9836 . 9848)) nil (25951 52479 156738 722000) 0 nil])
([nil nil ((apply yas--snippet-revive 9801 9850 #s(yas--snippet nil (#s(yas--field 1 9818 9819 nil nil nil t #s(yas--field 2 9821 9824 nil nil nil t #s(yas--field 3 9826 9849 nil nil nil t nil))) #s(yas--field 2 9821 9824 nil nil nil t #s(yas--field 3 9826 9849 nil nil nil t nil)) #s(yas--field 3 9826 9849 nil nil nil t nil)) nil 69 nil #s(yas--field 3 9826 9849 nil nil nil t nil) nil nil))) nil (25951 52479 156738 372000) 0 nil])
([nil nil ((9862 . 9864)) nil (25951 52479 156738 121000) 0 nil])
([nil nil ((9864 . 9870)) nil (25951 52479 156737 871000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 9886 9887 nil nil nil t #s(yas--field 2 9889 9892 nil nil nil t #s(yas--field 3 9894 9898 nil nil nil t nil))) #s(yas--field 2 9889 9892 nil nil nil t #s(yas--field 3 9894 9898 nil nil nil t nil)) #s(yas--field 3 9894 9898 nil nil nil t nil)) nil 70 nil #s(yas--field 3 9894 9898 nil nil nil t nil) nil nil)) (9870 . 9939) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 9870) (9870 . 9955) (#("RespondWithJSON" 0 15 (fontified nil)) . -9870) (9870 . 9885)) nil (25951 52479 156737 360000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 9887) (undo-tree-id630 . -21) (9886 . 9887)) nil (25951 52479 156736 568000) 0 nil])
([nil nil ((9890 . 9891) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 9890) (undo-tree-id629 . -8) (9889 . 9890)) nil (25951 52479 156735 827000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -9889) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -9890) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) 9891) nil (25951 52479 156734 915000) 0 nil])
([nil nil ((9889 . 9892)) nil (25951 52479 156732 280000) 0 nil])
([nil nil ((#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 16 (face tree-sitter-hl-face:keyword fontified t) 16 17 (face tree-sitter-hl-face:keyword fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t)) . 9894) (undo-tree-id620 . -19) (undo-tree-id621 . -8) (undo-tree-id622 . -9)) nil (25951 52479 156731 839000) 0 nil])
([nil nil ((9895 . 9897) (9894 . 9896) (#("\"" 0 1 (fontified nil)) . -9894) (undo-tree-id619 . -1) (9894 . 9895)) nil (25951 52479 156729 355000) 0 nil])
([nil nil ((apply yas--snippet-revive 9870 9899 #s(yas--snippet nil (#s(yas--field 1 9886 9887 nil nil nil t #s(yas--field 2 9889 9892 nil nil nil t #s(yas--field 3 9894 9898 nil nil nil t nil))) #s(yas--field 2 9889 9892 nil nil nil t #s(yas--field 3 9894 9898 nil nil nil t nil)) #s(yas--field 3 9894 9898 nil nil nil t nil)) nil 70 nil #s(yas--field 3 9894 9898 nil nil nil t nil) nil nil))) nil (25951 52479 156718 53000) 0 nil])
([nil nil ((11043 . 11044) (#("	" 0 1 (fontified nil)) . 11042) (undo-tree-id912 . -1) (11041 . 11044) (t 25951 52479 179973 962000)) nil (25951 52535 514639 564000) 0 nil])
([nil nil ((11044 . 11047)) nil (25951 52535 514637 831000) 0 nil])
([nil nil ((apply yas--snippet-revive 11044 11052 #s(yas--snippet nil nil nil 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 71 nil nil nil nil)) (11044 . 11052) (#("v1Router" 0 8 (fontified nil)) . 11044) (11044 . 11052) (#("v1R" 0 3 (fontified nil)) . 11044) (11044 . 11047) (#("v1Router" 0 8 (fontified nil)) . -11044) (11044 . 11052) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -11044) (undo-tree-id910 . -3) (undo-tree-id911 . -3) 11047) nil (25951 52535 514636 909000) 0 nil])
([nil nil ((11052 . 11053)) nil (25951 52535 514634 955000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11057 11065 nil nil nil t #s(yas--field 2 11067 11098 nil nil nil t nil)) #s(yas--field 2 11067 11098 nil nil nil t nil)) nil 72 nil #s(yas--field 2 11067 11098 nil nil nil t nil) nil nil)) (11053 . 11100) (#("Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 57 (fontified nil)) . 11053) (11053 . 11110) (#("Get" 0 3 (fontified nil)) . -11053) (11053 . 11056)) nil (25951 52535 514634 334000) 0 nil])
([nil nil ((11058 . 11064) (11057 . 11059) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -11057) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 11058) (11057 . 11058)) nil (25951 52535 514633 162000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 26 (face tree-sitter-hl-face:property fontified t)) . 11067)) nil (25951 52535 514632 80000) 0 nil])
([nil nil ((11067 . 11068)) nil (25951 52535 514631 679000) 0 nil])
([nil nil ((11068 . 11071)) nil (25951 52535 514631 218000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11080 11087 nil nil nil t #s(yas--field 2 11089 11097 nil nil nil t nil)) #s(yas--field 2 11089 11097 nil nil nil t nil)) nil 73 nil #s(yas--field 2 11089 11097 nil nil nil t nil) #s(yas--field 2 11067 11098 nil nil nil t nil) nil)) (11067 . 11121) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 11067) (11067 . 11131) (#("auth" 0 4 (fontified nil)) . 11067) (11067 . 11071) (#("authenticate" 0 12 (fontified nil)) . -11067) (11067 . 11079) (#("auth" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -11067) (undo-tree-id908 . -4) (undo-tree-id909 . -4) 11071) nil (25951 52535 514630 347000) 0 nil])
([nil nil ((11081 . 11084) (#("a *utils.DBConfig" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 3 (face tree-sitter-hl-face:operator fontified nil) 3 8 (face tree-sitter-hl-face:variable fontified nil) 8 9 (fontified nil) 9 17 (face tree-sitter-hl-face:property fontified nil)) . 11081) (11080 . 11081)) nil (25951 52535 514628 2000) 0 nil])
([nil nil ((apply yas--snippet-revive 11081 11087 #s(yas--snippet nil nil nil 74 nil nil #s(yas--field 1 11080 11087 nil nil nil t #s(yas--field 2 11089 11097 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 74 nil nil #s(yas--field 1 11080 11087 nil nil nil t #s(yas--field 2 11089 11097 nil nil nil t nil)) nil)) (11081 . 11087) (#("apiCfg" 0 6 (fontified nil)) . 11081) (11081 . 11087) (#("api" 0 3 (fontified nil)) . 11081) (11081 . 11084) (#("apiCfg" 0 6 (fontified nil)) . -11081) (11081 . 11087) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -11081) (undo-tree-id906 . -3) (undo-tree-id907 . -3) 11084) nil (25951 52535 514627 70000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 21 (face tree-sitter-hl-face:variable fontified t)) . 11089)) nil (25951 52535 514624 946000) 0 nil])
([nil nil ((11089 . 11093)) nil (25951 52535 514624 275000) 0 nil])
([nil nil ((apply yas--snippet-revive 11089 11097 #s(yas--snippet nil nil nil 75 nil nil #s(yas--field 2 11089 11097 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 75 nil nil #s(yas--field 2 11089 11097 nil nil nil t nil) nil)) (11089 . 11097) (#("getTasks" 0 8 (fontified nil)) . 11089) (11089 . 11097) (#("getT" 0 4 (fontified nil)) . 11089) (11089 . 11093) (#("getTasks" 0 8 (fontified nil)) . -11089) (11089 . 11097) (#("getT" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -11089) (undo-tree-id904 . -4) (undo-tree-id905 . -4) 11093) nil (25951 52535 514623 624000) 0 nil])
([nil nil ((apply yas--snippet-revive 11067 11098 #s(yas--snippet nil (#s(yas--field 1 11080 11087 nil nil nil t #s(yas--field 2 11089 11097 nil nil nil t nil)) #s(yas--field 2 11089 11097 nil nil nil t nil)) nil 73 nil #s(yas--field 2 11089 11097 nil nil nil t nil) #s(yas--field 2 11067 11098 nil nil nil t nil) nil))) nil (25951 52535 514621 209000) 0 nil])
([nil nil ((apply yas--snippet-revive 11053 11099 #s(yas--snippet nil (#s(yas--field 1 11057 11065 nil nil nil t #s(yas--field 2 11067 11098 nil nil nil t nil)) #s(yas--field 2 11067 11098 nil nil nil t nil)) nil 72 nil #s(yas--field 2 11067 11098 nil nil nil t nil) nil nil))) nil (25951 52535 514620 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11100 . 11101) (#("
" 0 1 (fontified nil)) . -11284) (11099 . 11285) 11098) nil (25951 52535 514620 348000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -11118) (undo-tree-id902 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -11119) (undo-tree-id903 . -1) 11120) nil (25951 52535 514619 216000) 0 nil])
([nil nil ((11118 . 11121)) nil (25951 52535 514618 123000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11151) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11152) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11153) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11154) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11155) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11156) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11157) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11158) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11159) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) 11160) nil (25951 52535 514615 989000) 0 nil])
([nil nil ((11151 . 11155)) nil (25951 52535 514573 599000) 0 nil])
([nil nil ((apply yas--snippet-revive 11151 11162 #s(yas--snippet nil nil nil 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 76 nil nil nil nil)) (11151 . 11162) (#("updateTasks" 0 11 (fontified nil)) . 11151) (11151 . 11162) (#("upda" 0 4 (fontified nil)) . 11151) (11151 . 11155) (#("updateTasks" 0 11 (fontified nil)) . -11151) (11151 . 11162) (#("upda" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -11151) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -1) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) 11155) nil (25951 52535 514572 367000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11224) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11225) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11226) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) 11227) nil (25951 52535 514563 941000) 0 nil])
([nil nil ((11224 . 11227)) nil (25951 52535 514263 680000) 0 nil])
([nil nil ((apply yas--snippet-revive 11218 11228 #s(yas--snippet nil nil nil 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 77 nil nil nil nil)) (11218 . 11228) (#("deleteTask" 0 10 (fontified nil)) . 11218) (11218 . 11228) (#("deleteTas" 0 9 (fontified nil)) . 11218) (11218 . 11227) (#("deleteTask" 0 10 (fontified nil)) . -11218) (11218 . 11228) (#("deleteTas" 0 5 (face tree-sitter-hl-face:variable fontified t) 5 9 (face tree-sitter-hl-face:variable fontified t)) . -11218) (undo-tree-id716 . -9) (undo-tree-id717 . -9) (undo-tree-id718 . -6) (undo-tree-id719 . -6) (undo-tree-id720 . -6) (undo-tree-id721 . -6) (undo-tree-id722 . -6) (undo-tree-id723 . -6) (undo-tree-id724 . -6) (undo-tree-id725 . -6) (undo-tree-id726 . -6) (undo-tree-id727 . -6) (undo-tree-id728 . -6) (undo-tree-id729 . -6) (undo-tree-id730 . -6) (undo-tree-id731 . -6) (undo-tree-id732 . -6) (undo-tree-id733 . -6) (undo-tree-id734 . -7) (undo-tree-id735 . -8) (undo-tree-id736 . -9) (undo-tree-id737 . -9) (undo-tree-id738 . -9) (undo-tree-id739 . -9) (undo-tree-id740 . -9) (undo-tree-id741 . -9) (undo-tree-id742 . -9) 11227) nil (25951 52535 514262 678000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -11285) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) 11286) nil (25951 52535 514251 687000) 0 nil])
([nil nil ((11285 . 11286)) nil (25951 52535 514248 261000) 0 nil])
([nil nil ((apply yas--snippet-revive 11277 11287 #s(yas--snippet nil nil nil 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 78 nil nil nil nil)) (11277 . 11287) (#("createTask" 0 10 (fontified nil)) . 11277) (11277 . 11287) (#("createTas" 0 9 (fontified nil)) . 11277) (11277 . 11286) (#("createTask" 0 10 (fontified nil)) . -11277) (11277 . 11287) (#("createTas" 0 9 (face tree-sitter-hl-face:variable fontified t)) . -11277) (undo-tree-id691 . -9) (undo-tree-id692 . -9) (undo-tree-id693 . -8) (undo-tree-id694 . -8) (undo-tree-id695 . -8) (undo-tree-id696 . -8) (undo-tree-id697 . -8) (undo-tree-id698 . -8) (undo-tree-id699 . -9) (undo-tree-id700 . -9) (undo-tree-id701 . -9) (undo-tree-id702 . -9) (undo-tree-id703 . -9) (undo-tree-id704 . -9) (undo-tree-id705 . -9) (undo-tree-id706 . -9) (undo-tree-id707 . -9) 11286) nil (25951 52535 514245 616000) 0 nil])
([nil nil ((9901 . 9903) (t 25951 52535 537185 748000)) nil (25952 58583 299388 929000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9903 . 9904) (#("
" 0 1 (fontified nil)) . -13324) (9903 . 13325)) nil (25952 58583 299387 987000) 0 nil])
([nil nil ((9912 . 9917)) nil (25952 58583 299386 314000) 0 nil])
([nil nil ((10028 . 10033)) nil (25952 58583 299385 312000) 0 nil])
([nil nil ((#("	EventEnd string `json:\"event_end\"`
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t) 10 16 (fontified t face tree-sitter-hl-face:type) 16 17 (fontified t) 17 35 (fontified t face tree-sitter-hl-face:string) 35 36 (fontified t)) . 10332) (undo-tree-id2 . -35) (undo-tree-id3 . 36)) nil (25952 58583 299384 731000) 0 nil])
([nil nil ((10197 . 10202)) nil (25952 58583 299382 517000) 0 nil])
([nil nil ((10006 . 10012) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -10006) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 10007 (10182 . 10188) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 10182)) nil (25952 58583 299377 488000) 0 nil])
([nil nil ((10432 . 10437) (t 25952 58583 329190 705000)) nil (25952 58718 187296 266000) 0 nil])
([nil nil ((10540 . 10545)) nil (25952 58718 187295 424000) 0 nil])
([nil nil ((10526 . 10532) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 10526) 10531 (10626 . 10632) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 10626) (10781 . 10787) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 10781) (10961 . 10967) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 10961) (11106 . 11112) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 11106) (11294 . 11300) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 11294) (11408 . 11414) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 11408)) nil (25952 58718 187294 142000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10308) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10309) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10310) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10311) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10312) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 10313) nil (25952 58718 187289 413000) 0 nil])
([nil nil ((10308 . 10312)) nil (25952 58718 187251 852000) 0 nil])
([nil nil ((#("	eventEndTime, eeerr := time.Parse(utils.BaseDateString, dailyTaskReqObj.EventEnd)
	if eeerr != nil {
		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
		return
	}
" 0 1 (fontified t) 1 13 (fontified t face tree-sitter-hl-face:variable) 13 15 (fontified t) 15 20 (fontified t face tree-sitter-hl-face:variable) 20 21 (fontified t) 21 23 (fontified t face tree-sitter-hl-face:operator) 23 24 (fontified t) 24 28 (fontified t face tree-sitter-hl-face:variable) 28 29 (fontified t) 29 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 40 (fontified t face tree-sitter-hl-face:variable) 40 41 (fontified t) 41 55 (fontified t face tree-sitter-hl-face:property) 55 57 (fontified t) 57 63 (fontified t face tree-sitter-hl-face:variable) 63 72 (fontified t face tree-sitter-hl-face:variable) 72 73 (fontified t) 73 81 (fontified t face tree-sitter-hl-face:property) 81 82 (fontified t face (rainbow-delimiters-depth-2-face)) 82 84 (fontified t) 84 86 (fontified t face tree-sitter-hl-face:keyword) 86 87 (fontified t) 87 92 (fontified t face tree-sitter-hl-face:variable) 92 93 (fontified t) 93 95 (fontified t face tree-sitter-hl-face:operator) 95 96 (fontified t) 96 99 (fontified t face tree-sitter-hl-face:constant\.builtin) 99 100 (fontified t) 100 101 (fontified t face (rainbow-delimiters-depth-2-face)) 101 104 (fontified t) 104 109 (fontified t face tree-sitter-hl-face:variable) 109 110 (fontified t) 110 126 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 128 (fontified t face tree-sitter-hl-face:variable) 128 130 (fontified t) 130 133 (fontified t face tree-sitter-hl-face:number) 133 135 (fontified t) 135 167 (fontified t face tree-sitter-hl-face:string) 167 168 (fontified t face (rainbow-delimiters-depth-3-face)) 168 171 (fontified t) 171 177 (fontified t face tree-sitter-hl-face:keyword) 177 179 (fontified t) 179 180 (fontified t face (rainbow-delimiters-depth-2-face)) 180 181 (fontified t)) . 10918) (undo-tree-id68 . -179) (undo-tree-id69 . -179) (undo-tree-id70 . -1) (undo-tree-id71 . -180) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -179) 10919 (t 25952 58718 217802 94000)) nil (25952 58754 960231 642000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10806) (undo-tree-id58 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10807) (undo-tree-id59 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10808) (undo-tree-id60 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10809) (undo-tree-id61 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10810) (undo-tree-id62 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10811) (undo-tree-id63 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10812) (undo-tree-id64 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10813) (undo-tree-id65 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10814) (undo-tree-id66 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -10815) (undo-tree-id67 . -1) 10816) nil (25952 58754 960226 392000) 0 nil])
([nil nil ((10806 . 10810)) nil (25952 58754 960218 657000) 0 nil])
([nil nil ((apply yas--snippet-revive 10806 10815 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (10806 . 10815) (#("DateStart" 0 9 (fontified nil)) . 10806) (10806 . 10815) (#("Date" 0 4 (fontified nil)) . 10806) (10806 . 10810) (#("DateStart" 0 9 (fontified nil)) . -10806) (10806 . 10815) (#("Date" 0 4 (fontified t face tree-sitter-hl-face:property)) . -10806) (undo-tree-id56 . -4) (undo-tree-id57 . -4) 10810) nil (25952 58754 960217 635000) 0 nil])
([nil nil (10814) nil (25952 58754 960214 499000) 0 nil])
([nil nil ((10732 . 10734) (#("even" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 10732) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (10737 . 10738) 10736 (11173 . 11175) (#("even" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 11173) (11178 . 11179) 11173) nil (25952 58754 960213 237000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -10869) (undo-tree-id49 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -10870) (undo-tree-id50 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -10871) (undo-tree-id51 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -10872) (undo-tree-id52 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -10873) (undo-tree-id53 . -1) 10874) nil (25952 58754 960209 380000) 0 nil])
([nil nil ((10869 . 10873)) nil (25952 58754 960122 115000) 0 nil])
([nil nil ((#("		EventEnd: eventEndTime,
" 0 2 (fontified t) 2 10 (fontified t face tree-sitter-hl-face:variable) 10 12 (fontified t) 12 24 (fontified t face tree-sitter-hl-face:variable) 24 26 (fontified t)) . 11186) (undo-tree-id84 . -25) (undo-tree-id85 . -24) 11210 (t 25952 58754 990073 909000)) nil (25952 58803 819392 419000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11159) (undo-tree-id79 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11160) (undo-tree-id80 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11161) (undo-tree-id81 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11162) (undo-tree-id82 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11163) (undo-tree-id83 . -1) 11164) nil (25952 58803 819390 115000) 0 nil])
([nil nil ((11159 . 11163)) nil (25952 58803 819385 607000) 0 nil])
([nil nil ((11076 . 11079)) nil (25952 58803 819384 925000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11078) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 11079) nil (25952 58803 819384 384000) 0 nil])
([nil nil ((11078 . 11080)) nil (25952 58803 819382 400000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11079) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 11080) nil (25952 58803 819381 849000) 0 nil])
([nil nil ((11079 . 11081)) nil (25952 58803 819369 166000) 0 nil])
([nil nil ((11279 . 11285) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 11279) 11281 (11447 . 11453) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 11447)) nil (25952 58803 819367 843000) 0 nil])
([nil nil ((11308 . 11313)) nil (25952 58803 819362 62000) 0 nil])
([nil nil ((11482 . 11487) (t 25952 58803 850234 68000)) nil (25952 58842 908742 235000) 0 nil])
([nil nil ((11589 . 11594)) nil (25952 58842 908741 33000) 0 nil])
([nil nil ((#("	eventEndTime, eeerr := time.Parse(utils.BaseDateString, taskReqObj.EventEnd)
	if eeerr != nil {
		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
		return
	}
" 0 1 (fontified t) 1 13 (fontified t face tree-sitter-hl-face:variable) 13 15 (fontified t) 15 20 (fontified t face tree-sitter-hl-face:variable) 20 21 (fontified t) 21 23 (fontified t face tree-sitter-hl-face:operator) 23 24 (fontified t) 24 28 (fontified t face tree-sitter-hl-face:variable) 28 29 (fontified t) 29 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 40 (fontified t face tree-sitter-hl-face:variable) 40 41 (fontified t) 41 51 (fontified t face tree-sitter-hl-face:property) 51 55 (fontified t face tree-sitter-hl-face:property) 55 57 (fontified t) 57 67 (fontified t face tree-sitter-hl-face:variable) 67 68 (fontified t) 68 76 (fontified t face tree-sitter-hl-face:property) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 79 (fontified t) 79 81 (fontified t face tree-sitter-hl-face:keyword) 81 82 (fontified t) 82 87 (fontified t face tree-sitter-hl-face:variable) 87 88 (fontified t) 88 90 (fontified t face tree-sitter-hl-face:operator) 90 91 (fontified t) 91 94 (fontified t face tree-sitter-hl-face:constant\.builtin) 94 95 (fontified t) 95 96 (fontified t face (rainbow-delimiters-depth-2-face)) 96 99 (fontified t) 99 104 (fontified t face tree-sitter-hl-face:variable) 104 105 (fontified t) 105 121 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 123 (fontified t face tree-sitter-hl-face:variable) 123 125 (fontified t) 125 128 (fontified t face tree-sitter-hl-face:number) 128 130 (fontified t) 130 162 (fontified t face tree-sitter-hl-face:string) 162 163 (fontified t face (rainbow-delimiters-depth-3-face)) 163 166 (fontified t) 166 172 (fontified t face tree-sitter-hl-face:keyword) 172 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-2-face)) 175 176 (fontified t)) . 11953) (undo-tree-id96 . -174) (undo-tree-id97 . -174) (undo-tree-id98 . -1) (undo-tree-id99 . -175) (undo-tree-id100 . 1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -174) 11954) nil (25952 58842 908740 1000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11841) (undo-tree-id91 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11842) (undo-tree-id92 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11843) (undo-tree-id93 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11844) (undo-tree-id94 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11845) (undo-tree-id95 . -1) 11846) nil (25952 58842 908734 721000) 0 nil])
([nil nil ((11841 . 11845)) nil (25952 58842 908730 954000) 0 nil])
([nil nil (11845) nil (25952 58842 908730 413000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11772) (undo-tree-id86 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11773) (undo-tree-id87 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11774) (undo-tree-id88 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11775) (undo-tree-id89 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11776) (undo-tree-id90 . -1) 11777) nil (25952 58842 908728 710000) 0 nil])
([nil nil ((11772 . 11776)) nil (25952 58842 908708 121000) 0 nil])
([nil nil ((#("		EventEnd: eventEndTime,
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 10 (fontified t face tree-sitter-hl-face:variable) 10 12 (fontified t) 12 24 (fontified t face tree-sitter-hl-face:variable) 24 26 (fontified t)) . 12232) (undo-tree-id109 . -25) (undo-tree-id110 . -4) 12236 (t 25952 58843 30276 198000)) nil (25952 58856 859961 645000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12216) (undo-tree-id104 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12217) (undo-tree-id105 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12218) (undo-tree-id106 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12219) (undo-tree-id107 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12220) (undo-tree-id108 . -1) 12221) nil (25952 58856 859959 521000) 0 nil])
([nil nil ((12216 . 12220)) nil (25952 58856 859937 29000) 0 nil])
([nil nil ((12520 . 12525) (t 25952 58856 887280 586000)) nil (25952 58997 255462 686000) 0 nil])
([nil nil ((12812 . 12817)) nil (25952 58997 255461 323000) 0 nil])
([nil nil ((12785 . 12790)) nil (25952 58997 255460 582000) 0 nil])
([nil nil ((12822 . 12823)) nil (25952 58997 255460 71000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12822) (undo-tree-id113 . -1) 12823) nil (25952 58997 255459 289000) 0 nil])
([nil nil ((12822 . 12823)) nil (25952 58997 255456 995000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12821) (undo-tree-id111 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -12822) (undo-tree-id112 . -1) 12823) nil (25952 58997 255455 752000) 0 nil])
([nil nil ((12821 . 12822)) nil (25952 58997 255436 965000) 0 nil])
([nil nil ((14375 . 14376) (#("	" 0 1 (fontified nil)) . 14374) (14374 . 14375) (14374 . 14375) (t 25952 58997 287855 730000)) nil (25952 59058 530165 61000) 0 nil])
([nil nil ((14375 . 14376) (#("	" 0 1 (fontified nil)) . 14374) (14374 . 14375) (14374 . 14375)) nil (25952 59058 530163 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14377 . 14378) (#("
" 0 1 (fontified nil)) . -14623) (14376 . 14624) 14375) nil (25952 59058 530161 654000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 14375) (undo-tree-id114 . -1)) nil (25952 59058 530160 271000) 0 nil])
([nil nil ((14424 . 14429)) nil (25952 59058 530148 819000) 0 nil])
([nil nil ((14494 . 14499)) nil (25952 59058 530147 767000) 0 nil])
([nil nil ((14566 . 14571)) nil (25952 59058 530146 574000) 0 nil])
([nil nil ((14630 . 14635)) nil (25952 59058 530140 412000) 0 nil])
([nil nil ((4531 . 4533) (t 25952 59058 561888 649000)) nil (25952 60041 801982 56000) 0 nil])
([nil nil ((4533 . 4541)) nil (25952 60041 801980 863000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4538) (undo-tree-id154 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4539) (undo-tree-id155 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4540) (undo-tree-id156 . -1) 4541) nil (25952 60041 801979 962000) 0 nil])
([nil nil ((4538 . 4551)) nil (25952 60041 801977 818000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4550) (undo-tree-id153 . -1) 4551) nil (25952 60041 801976 505000) 0 nil])
([nil nil ((4550 . 4566)) nil (25952 60041 801975 32000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4559) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4560) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4561) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4562) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4563) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4564) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4565) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 4566) nil (25952 60041 801973 600000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4560) (4560 . 4561) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4560) (4560 . 4561) (4559 . 4561)) nil (25952 60041 801966 85000) 0 nil])
([nil nil ((4560 . 4569)) nil (25952 60041 801965 143000) 0 nil])
([nil nil ((apply yas--snippet-revive 4564 4578 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (4564 . 4578) (#("TagRequestType" 0 14 (fontified nil)) . 4564) (4564 . 4578) (#("TagRe" 0 5 (fontified nil)) . 4564) (4564 . 4569) (#("TagRequestType" 0 14 (fontified nil)) . -4564) (4564 . 4578) (#("TagRe" 0 5 (fontified t face tree-sitter-hl-face:type)) . -4564) (undo-tree-id137 . -5) (undo-tree-id138 . -5) 4569) nil (25952 60041 801964 101000) 0 nil])
([nil nil ((4578 . 4580)) nil (25952 60041 801817 41000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4578) (undo-tree-id135 . -1) (#(" " 0 1 (fontified t)) . -4579) (undo-tree-id136 . -1) 4580) nil (25952 60041 801816 640000) 0 nil])
([nil nil ((4579 . 4586)) nil (25952 60041 801815 819000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4580) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4581) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4582) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4583) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4584) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4585) (undo-tree-id133 . -1) (undo-tree-id134 . -1) 4586) nil (25952 60041 801814 246000) 0 nil])
([nil nil ((4580 . 4595)) nil (25952 60041 801809 196000) 0 nil])
([nil nil ((apply yas--snippet-revive 4589 4604 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (4589 . 4604) (#("RenameTagParams" 0 15 (fontified nil)) . 4589) (4589 . 4604) (#("Rename" 0 6 (fontified nil)) . 4589) (4589 . 4595) (#("RenameTagParams" 0 15 (fontified nil)) . -4589) (4589 . 4604) (#("Rename" 0 6 (fontified t face tree-sitter-hl-face:type)) . -4589) (undo-tree-id121 . -6) (undo-tree-id122 . -6) 4595) nil (25952 60041 801808 184000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4606) (4606 . 4607) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4606) (4606 . 4607) (4604 . 4607)) nil (25952 60041 801805 138000) 0 nil])
([nil nil ((4607 . 4608) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4607) (4607 . 4608) (4606 . 4608)) nil (25952 60041 801803 636000) 0 nil])
([nil nil ((4578 . 4591)) nil (25952 60041 801803 55000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4589) (undo-tree-id119 . -1) (#(" " 0 1 (fontified t)) . -4590) (undo-tree-id120 . -1) 4591) nil (25952 60041 801802 213000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4620 . 4621) (#("
" 0 1 (fontified nil)) . -4860) (4619 . 4861) 4618) nil (25952 60041 801798 987000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 4618) (undo-tree-id118 . -1)) nil (25952 60041 801797 935000) 0 nil])
([nil nil ((4591 . 4593)) nil (25952 60041 801796 422000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4592) (undo-tree-id115 . -1) (undo-tree-id116 . 1) (undo-tree-id117 . -1) 4593) nil (25952 60041 801795 931000) 0 nil])
([nil nil ((4617 . 4618) (#(")" 0 1 (fontified nil)) . -4617) (4616 . 4618)) nil (25952 60041 801781 2000) 0 nil])
([nil nil ((4617 . 4623)) nil (25952 60041 801773 869000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -4708) (undo-tree-id250 . -1) (#("d" 0 1 (fontified t)) . -4709) (undo-tree-id251 . -1) (#(" " 0 1 (fontified t)) . -4710) (undo-tree-id252 . -1) (#("R" 0 1 (fontified t)) . -4711) (undo-tree-id253 . -1) (#("e" 0 1 (fontified t)) . -4712) (undo-tree-id254 . -1) (#("q" 0 1 (fontified t)) . -4713) (undo-tree-id255 . -1) (#("u" 0 1 (fontified t)) . -4714) (undo-tree-id256 . -1) (#("e" 0 1 (fontified t)) . -4715) (undo-tree-id257 . -1) (#("s" 0 1 (fontified t)) . -4716) (undo-tree-id258 . -1) (#("t" 0 1 (fontified t)) . -4717) (undo-tree-id259 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4718) (undo-tree-id260 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4719) (undo-tree-id261 . -1) (#("
" 0 1 (fontified t)) . -4720) (undo-tree-id262 . -1) (#("	" 0 1 (fontified t)) . -4721) (undo-tree-id263 . -1) (#("	" 0 1 (fontified t)) . -4722) (undo-tree-id264 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4723) (undo-tree-id265 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4724) (undo-tree-id266 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4725) (undo-tree-id267 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4726) (undo-tree-id268 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4727) (undo-tree-id269 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4728) (undo-tree-id270 . -1) 4729 (t 25952 60041 827993 179000)) nil (25952 60086 942029 189000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4687) (undo-tree-id229 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4688) (undo-tree-id230 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4689) (undo-tree-id231 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4690) (undo-tree-id232 . -1) (#("h" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4691) (undo-tree-id233 . -1) (#("E" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4692) (undo-tree-id234 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4693) (undo-tree-id235 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4694) (undo-tree-id236 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4695) (undo-tree-id237 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4696) (undo-tree-id238 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4697) (undo-tree-id239 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4698) (undo-tree-id240 . -1) (#("," 0 1 (fontified t)) . -4699) (undo-tree-id241 . -1) (#(" " 0 1 (fontified t)) . -4700) (undo-tree-id242 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4701) (undo-tree-id243 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4702) (undo-tree-id244 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4703) (undo-tree-id245 . -1) (#("," 0 1 (fontified t)) . -4704) (undo-tree-id246 . -1) (#(" " 0 1 (fontified t)) . -4705) (undo-tree-id247 . -1) (#("\"" 0 1 (fontified t)) . -4706) (undo-tree-id248 . -1) (#("B" 0 1 (fontified t)) . -4707) (undo-tree-id249 . -1) 4708) nil (25952 60086 942008 790000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4675) (undo-tree-id217 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4676) (undo-tree-id218 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4677) (undo-tree-id219 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4678) (undo-tree-id220 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4679) (undo-tree-id221 . -1) (#("." 0 1 (fontified t)) . -4680) (undo-tree-id222 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4681) (undo-tree-id223 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4682) (undo-tree-id224 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4683) (undo-tree-id225 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4684) (undo-tree-id226 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4685) (undo-tree-id227 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4686) (undo-tree-id228 . -1) 4687) nil (25952 60086 941996 366000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4676) (4676 . 4677) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4676) (4676 . 4677) (4675 . 4677)) nil (25952 60086 941988 782000) 0 nil])
([nil nil ((4675 . 4682)) nil (25952 60086 941987 289000) 0 nil])
([nil nil ((4683 . 4691)) nil (25952 60086 941986 347000) 0 nil])
([nil nil ((4695 . 4703)) nil (25952 60086 941985 976000) 0 nil])
([nil nil ((4703 . 4705) (4704 . 4705) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4703) (4703 . 4705) (4702 . 4704)) nil (25952 60086 941985 576000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -4710) (undo-tree-id208 . -1) (#("b" 0 1 (fontified t)) . -4711) (undo-tree-id209 . -1) (#("O" 0 1 (fontified t)) . -4712) (undo-tree-id210 . -1) (#("b" 0 1 (fontified t)) . -4713) (undo-tree-id211 . -1) (#("j" 0 1 (fontified t)) . -4714) (undo-tree-id212 . -1) (#(" " 0 1 (fontified t)) . -4715) (undo-tree-id213 . -1) (#(":" 0 1 (fontified t)) . -4716) (undo-tree-id214 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4717) (undo-tree-id215 . -1) (#(" " 0 1 (fontified t)) . -4718) (undo-tree-id216 . -1) 4719) nil (25952 60086 941984 293000) 0 nil])
([nil nil ((#("	database.RenameTagParams{
		ID:        uuid,
		Name:      renameBody.Name,
		UpdatedAt: time.Now(),
		UserID:    user.ID,
	}
" 0 1 (fontified t) 1 10 (fontified t) 10 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 29 (fontified t) 29 31 (fontified t face tree-sitter-hl-face:variable) 31 40 (fontified t) 40 44 (fontified t face tree-sitter-hl-face:variable) 44 48 (fontified t) 48 52 (fontified t face tree-sitter-hl-face:variable) 52 59 (fontified t) 59 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 74 (fontified t face tree-sitter-hl-face:property) 74 78 (fontified t) 78 87 (fontified t face tree-sitter-hl-face:variable) 87 89 (fontified t) 89 93 (fontified t face tree-sitter-hl-face:variable) 93 94 (fontified t) 94 97 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 97 98 (fontified t face (rainbow-delimiters-depth-3-face)) 98 99 (fontified t face (rainbow-delimiters-depth-3-face)) 99 103 (fontified t) 103 109 (fontified t face tree-sitter-hl-face:variable) 109 114 (fontified t) 114 118 (fontified t face tree-sitter-hl-face:variable) 118 119 (fontified t) 119 121 (fontified t face tree-sitter-hl-face:property) 121 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-2-face)) 125 126 (fontified t)) . 4709) (undo-tree-id202 . -123) (undo-tree-id203 . -123) (undo-tree-id204 . -125) (undo-tree-id205 . 125) (undo-tree-id206 . -123) (undo-tree-id207 . -123) 4832) nil (25952 60086 941979 294000) 0 nil])
([nil nil ((4704 . 4713)) nil (25952 60086 941973 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4715 . 4716) (#("
" 0 1 (fontified nil)) . -4840) (4714 . 4841) 4712) nil (25952 60086 941972 922000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4713) (undo-tree-id157 . -1) (undo-tree-id158 . 1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("
" 0 1 (fontified t)) . -4714) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("	" 0 1 (fontified t rear-nonsticky t)) . -4715) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) 4716) nil (25952 60086 941967 972000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4682) (undo-tree-id308 . -1) 4683 (t 25952 60087 64188 31000)) nil (25952 60145 465044 941000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4689) (undo-tree-id307 . -1) 4690) nil (25952 60145 465044 139000) 0 nil])
([nil nil ((4689 . 4690)) nil (25952 60145 465043 538000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -4690) (undo-tree-id304 . -1) (undo-tree-id305 . 1) (undo-tree-id306 . -1) 4691) nil (25952 60145 465043 137000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4682) (undo-tree-id301 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4683) (undo-tree-id302 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:constant\.builtin)) . -4684) (undo-tree-id303 . -1) 4685) nil (25952 60145 465041 174000) 0 nil])
([nil nil ((4682 . 4692)) nil (25952 60145 465039 430000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4690) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("." 0 1 (fontified t)) . -4691) (undo-tree-id299 . -1) (undo-tree-id300 . -1) 4692) nil (25952 60145 465038 739000) 0 nil])
([nil nil ((4690 . 4694)) nil (25952 60145 465036 164000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4693) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 4694) nil (25952 60145 465035 102000) 0 nil])
([nil nil ((4693 . 4697)) nil (25952 60145 465034 130000) 0 nil])
([nil nil ((apply yas--snippet-revive 4691 4708 #s(yas--snippet nil nil #s(yas--exit 4707 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4707 nil) 3 nil nil nil nil)) (4691 . 4708) (#("RenameTagParams{$0\\}" 0 20 (fontified nil)) . 4691) (4691 . 4711) (#("Rename" 0 6 (fontified nil)) . 4691) (4691 . 4697) (#("RenameTagParams{}" 0 17 (fontified nil)) . -4691) (4691 . 4708) (#("Rename" 0 6 (fontified t face tree-sitter-hl-face:property)) . -4691) (undo-tree-id293 . -6) (undo-tree-id294 . -6) 4697) nil (25952 60145 465032 928000) 0 nil])
([nil nil ((4725 . 4726) (#("  " 0 2 (fontified t)) . 4725) (4762 . 4763) (4781 . 4782) (4811 . 4812) (4836 . 4837) (4857 . 4858) (6504 . 6511) (6524 . 6529) (6547 . 6548) (6548 . 6550) (6686 . 6687) ("  " . 6686) (" " . 7045) (7128 . 7134) (7203 . 7204) (7240 . 7242) (7241 . 7242) (7314 . 7315) (7315 . 7320) (7990 . 7991) ("  " . 7990) (8002 . 8003) (8041 . 8042) (8163 . 8164) (8164 . 8172) (8185 . 8188) (8186 . 8188) (8203 . 8207) (8204 . 8206) (8235 . 8236) (8263 . 8266) (8291 . 8293) (8350 . 8354) (8351 . 8353) (9187 . 9188) ("  " . 9187) (9199 . 9200) (9238 . 9239) (9379 . 9388) (9402 . 9407) (9419 . 9425) (9452 . 9453) (9479 . 9481) (9480 . 9481) (9506 . 9508) (9531 . 9533) (9589 . 9593) (9590 . 9592) ("
" . 10233) (" " . 10483) (10575 . 10577) (10576 . 10580) (10649 . 10650) (10650 . 10651) (10725 . 10730) (10726 . 10727) (11247 . 11248) ("  " . 11247) (11259 . 11260) (11303 . 11304) (11430 . 11435) (11431 . 11435) (11452 . 11453) (11453 . 11457) (11470 . 11472) (11471 . 11475) (11506 . 11508) (11535 . 11537) (11599 . 11603) (11600 . 11602) (12283 . 12284) ("  " . 12283) (12295 . 12296) (12334 . 12335) (12475 . 12484) (12498 . 12503) (12515 . 12521) 6524 (12547 . 12548) (12575 . 12577) (12599 . 12601) (12658 . 12664) ("	" . 14974) 4707) nil (25952 60145 465029 862000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4795) (undo-tree-id285 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4796) (undo-tree-id286 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4797) (undo-tree-id287 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4798) (undo-tree-id288 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4799) (undo-tree-id289 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4800) (undo-tree-id290 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4801) (undo-tree-id291 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4802) (undo-tree-id292 . -1) 4803) nil (25952 60145 465018 300000) 0 nil])
([nil nil ((4795 . 4796)) nil (25952 60145 465015 144000) 0 nil])
([nil nil ((4589 . 4598)) nil (25952 60145 465014 793000) 0 nil])
([nil nil ((4598 . 4604)) nil (25952 60145 465014 72000) 0 nil])
([nil nil ((4598 . 4599)) nil (25952 60145 465013 581000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4595) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4596) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 4597) nil (25952 60145 465012 669000) 0 nil])
([nil nil ((4595 . 4596)) nil (25952 60145 464990 788000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4858) (undo-tree-id329 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4859) (undo-tree-id330 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4860) (undo-tree-id331 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4861) (undo-tree-id332 . -1) (#("." 0 1 (fontified t)) . -4862) (undo-tree-id333 . -1) 4863 (t 25952 60145 589733 492000)) nil (25952 60154 209041 812000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4858) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4859) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 4860) nil (25952 60154 209037 403000) 0 nil])
([nil nil ((4858 . 4862)) nil (25952 60154 209029 588000) 0 nil])
([nil nil ((apply yas--snippet-revive 4858 4864 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (4858 . 4864) (#("userId" 0 6 (fontified nil)) . 4858) (4858 . 4864) (#("user" 0 4 (fontified nil)) . 4858) (4858 . 4862) (#("userId" 0 6 (fontified nil)) . -4858) (4858 . 4864) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4858) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -1) (undo-tree-id312 . -2) (undo-tree-id313 . -3) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) 4862) nil (25952 60154 209025 591000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4598) (undo-tree-id334 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4599) (undo-tree-id335 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4600) (undo-tree-id336 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4601) (undo-tree-id337 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4602) (undo-tree-id338 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4603) (undo-tree-id339 . -1) 4604 (t 25952 60154 238961 860000)) nil (25952 60169 135004 289000) 0 nil])
([nil nil ((4598 . 4602)) nil (25952 60169 134988 900000) 0 nil])
([nil nil ((4602 . 4607)) nil (25952 60169 134982 708000) 0 nil])
([nil nil ((#("	uuid, err := uuid.Parse(id)
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\")
		return
	}
	dbObj := database.RenameTagParams{
		ID:        uuid,
		Name:      renameBody.Name,
		UpdatedAt: time.Now(),
		UserID:    user.ID,
	}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t) 7 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 27 (fontified t face tree-sitter-hl-face:variable) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 30 (fontified t) 30 32 (fontified t face tree-sitter-hl-face:keyword) 32 33 (fontified t) 33 36 (fontified t face tree-sitter-hl-face:variable) 36 37 (fontified t) 37 39 (fontified t face tree-sitter-hl-face:operator) 39 40 (fontified t) 40 43 (fontified t face tree-sitter-hl-face:constant\.builtin) 43 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 48 (fontified t) 48 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t) 54 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-3-face)) 71 72 (fontified t face tree-sitter-hl-face:variable) 72 74 (fontified t) 74 77 (fontified t face tree-sitter-hl-face:number) 77 79 (fontified t) 79 92 (fontified t face tree-sitter-hl-face:string) 92 93 (fontified t face (rainbow-delimiters-depth-3-face)) 93 96 (fontified t) 96 102 (fontified t face tree-sitter-hl-face:keyword) 102 104 (fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-2-face)) 105 106 (fontified t) 106 107 (fontified t) 107 112 (fontified t face tree-sitter-hl-face:variable) 112 113 (fontified t) 113 115 (fontified t face tree-sitter-hl-face:operator) 115 125 (fontified t) 125 140 (fontified t face tree-sitter-hl-face:type) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 142 (fontified t) 142 144 (fontified t) 144 146 (fontified t face tree-sitter-hl-face:variable) 146 155 (fontified t) 155 159 (fontified t face tree-sitter-hl-face:variable) 159 163 (fontified t) 163 167 (fontified t face tree-sitter-hl-face:variable) 167 174 (fontified t) 174 184 (fontified t face tree-sitter-hl-face:variable) 184 185 (fontified t) 185 189 (fontified t face tree-sitter-hl-face:property) 189 193 (fontified t) 193 202 (fontified t face tree-sitter-hl-face:variable) 202 204 (fontified t) 204 208 (fontified t face tree-sitter-hl-face:variable) 208 209 (fontified t) 209 212 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 212 213 (fontified t face (rainbow-delimiters-depth-3-face)) 213 214 (fontified t face (rainbow-delimiters-depth-3-face)) 214 218 (fontified t) 218 224 (fontified t face tree-sitter-hl-face:variable) 224 229 (fontified t) 229 233 (fontified t face tree-sitter-hl-face:variable) 233 234 (fontified t) 234 236 (fontified t face tree-sitter-hl-face:property) 236 239 (fontified t) 239 240 (fontified t face (rainbow-delimiters-depth-2-face)) 240 241 (fontified t)) . 5186) (undo-tree-id348 . -239) (undo-tree-id349 . -239) (undo-tree-id350 . -1) (undo-tree-id351 . -240) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -239) 5187 (t 25952 60169 257358 386000)) nil (25952 60224 753047 51000) 0 nil])
([nil nil ((5185 . 5187)) nil (25952 60224 753043 584000) 0 nil])
([nil nil ((5187 . 5196)) nil (25952 60224 753042 953000) 0 nil])
([nil nil ((5192 . 5197)) nil (25952 60224 753042 502000) 0 nil])
([nil nil ((5201 . 5204)) nil (25952 60224 753041 591000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5223 5233 nil nil nil t #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil))) #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil)) #s(yas--field 3 5239 5246 nil nil nil t nil)) nil 5 nil #s(yas--field 3 5239 5246 nil nil nil t nil) nil nil)) (5201 . 5271) (#("TagRequestToRenameTag(${1:req TagRequestType}, ${2:id string}, ${3:userId uuid.UUID})" 0 85 (fontified nil)) . 5201) (5201 . 5286) (#("Tag" 0 3 (fontified nil)) . 5201) (5201 . 5204) (#("TagRequestToRenameTag" 0 21 (fontified nil)) . -5201) (5201 . 5222) (#("Tag" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5201) (undo-tree-id346 . -3) (undo-tree-id347 . -3) 5204) nil (25952 60224 753040 288000) 0 nil])
([nil nil ((5224 . 5226) (#("req TagRequestType" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 18 (fontified nil face tree-sitter-hl-face:variable)) . 5224) (5223 . 5224)) nil (25952 60224 753037 733000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5224) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5225) (undo-tree-id344 . -1) (undo-tree-id345 . -1) 5226) nil (25952 60224 753036 381000) 0 nil])
([nil nil ((5224 . 5229)) nil (25952 60224 753033 74000) 0 nil])
([nil nil ((apply yas--snippet-revive 5223 5233 #s(yas--snippet nil nil nil 6 nil nil #s(yas--field 1 5223 5233 nil nil nil t #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil #s(yas--field 1 5223 5233 nil nil nil t #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil))) nil)) (5223 . 5233) (#("renameBody" 0 10 (fontified nil)) . 5223) (5223 . 5233) (#("rename" 0 6 (fontified nil)) . 5223) (5223 . 5229) (#("renameBody" 0 10 (fontified nil)) . -5223) (5223 . 5233) (#("rename" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -5223) (undo-tree-id340 . -6) (undo-tree-id341 . -6) 5229) nil (25952 60224 753032 353000) 0 nil])
([nil nil ((5236 . 5237) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 5236) (5235 . 5236)) nil (25952 60224 753019 178000) 0 nil])
([nil nil ((5240 . 5244) (#("userId uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 5240) (5239 . 5240)) nil (25952 60224 753017 956000) 0 nil])
([nil nil ((apply yas--snippet-revive 5244 5246 #s(yas--snippet nil nil nil 7 nil nil #s(yas--field 3 5239 5246 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil #s(yas--field 3 5239 5246 nil nil nil t nil) nil)) (5244 . 5246) (#("ID" 0 2 (fontified nil)) . 5244) (5244 . 5246) (#("ID" 0 2 (fontified nil)) . -5244) (5244 . 5246)) nil (25952 60224 753016 383000) 0 nil])
([nil nil ((apply yas--snippet-revive 5201 5247 #s(yas--snippet nil (#s(yas--field 1 5223 5233 nil nil nil t #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil))) #s(yas--field 2 5235 5237 nil nil nil t #s(yas--field 3 5239 5246 nil nil nil t nil)) #s(yas--field 3 5239 5246 nil nil nil t nil)) nil 5 nil #s(yas--field 3 5239 5246 nil nil nil t nil) nil nil))) nil (25952 60224 753009 9000) 0 nil])
([nil nil ((5247 . 5249) (t 25952 60224 876826 733000)) nil (25952 60311 383704 743000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5264) (5264 . 5265) (#("}" 0 1 (fontified nil)) . -5264) (5264 . 5265) (5249 . 5265)) nil (25952 60311 383703 501000) 0 nil])
([nil nil ((5265 . 5267) (5266 . 5267) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5265) (5265 . 5267) (5264 . 5266)) nil (25952 60311 383702 378000) 0 nil])
([nil nil ((5267 . 5273)) nil (25952 60311 383701 547000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5290 5291 nil nil nil t #s(yas--field 2 5293 5296 nil nil nil t #s(yas--field 3 5298 5311 nil nil nil t nil))) #s(yas--field 2 5293 5296 nil nil nil t #s(yas--field 3 5298 5311 nil nil nil t nil)) #s(yas--field 3 5298 5311 nil nil nil t nil)) nil 8 nil #s(yas--field 3 5298 5311 nil nil nil t nil) nil nil)) (5273 . 5334) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5273) (5273 . 5349) (#("RespondWithError" 0 16 (fontified nil)) . -5273) (5273 . 5289)) nil (25952 60311 383700 695000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5291) (undo-tree-id364 . -21) (5290 . 5291)) nil (25952 60311 383699 32000) 0 nil])
([nil nil ((5294 . 5296) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5294) (undo-tree-id361 . -8) (undo-tree-id362 . -5) (undo-tree-id363 . -6) (5293 . 5294)) nil (25952 60311 383697 379000) 0 nil])
([nil nil ((5299 . 5310) (5298 . 5300) (#("\"" 0 1 (fontified nil)) . -5298) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 5299) (undo-tree-id358 . -10) (undo-tree-id359 . -4) (undo-tree-id360 . -5) (5298 . 5299)) nil (25952 60311 383692 740000) 0 nil])
([nil nil ((apply yas--snippet-revive 5273 5312 #s(yas--snippet nil (#s(yas--field 1 5290 5291 nil nil nil t #s(yas--field 2 5293 5296 nil nil nil t #s(yas--field 3 5298 5311 nil nil nil t nil))) #s(yas--field 2 5293 5296 nil nil nil t #s(yas--field 3 5298 5311 nil nil nil t nil)) #s(yas--field 3 5298 5311 nil nil nil t nil)) nil 8 nil #s(yas--field 3 5298 5311 nil nil nil t nil) nil nil))) nil (25952 60311 383672 431000) 0 nil])
([nil nil ((6069 . 6071) (t 25952 60311 509113 551000)) nil (25952 60656 597099 592000) 0 nil])
([nil nil ((6071 . 6077)) nil (25952 60656 597099 231000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6071) (undo-tree-id409 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6072) (undo-tree-id410 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6073) (undo-tree-id411 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6074) (undo-tree-id412 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6075) (undo-tree-id413 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6076) (undo-tree-id414 . -1) 6077) nil (25952 60656 597098 280000) 0 nil])
([nil nil ((6071 . 6076)) nil (25952 60656 597095 534000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6074) (undo-tree-id407 . -1) (#(" " 0 1 (fontified t)) . -6075) (undo-tree-id408 . -1) 6076) nil (25952 60656 597095 3000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6072) (undo-tree-id405 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6073) (undo-tree-id406 . -1) 6074) nil (25952 60656 597093 961000) 0 nil])
([nil nil ((4530 . 4531)) nil (25952 60656 597093 250000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4530) (undo-tree-id404 . -1) 4531) nil (25952 60656 597092 899000) 0 nil])
([nil nil ((4531 . 4533)) nil (25952 60656 597092 108000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4539) (4539 . 4540) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4539) (4539 . 4540) (4533 . 4540)) nil (25952 60656 597091 427000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4531) (undo-tree-id393 . -1) (#("
" 0 1 (fontified t)) . -4532) (undo-tree-id394 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4533) (undo-tree-id395 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4534) (undo-tree-id396 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4535) (undo-tree-id397 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4536) (undo-tree-id398 . -1) (#(" " 0 1 (fontified t)) . -4537) (undo-tree-id399 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4538) (undo-tree-id400 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4539) (undo-tree-id401 . -1) (undo-tree-id402 . 1) (undo-tree-id403 . -1) 4540) nil (25952 60656 597090 4000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4560) (undo-tree-id375 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4561) (undo-tree-id376 . -1) (#("q" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4562) (undo-tree-id377 . -1) (#(" " 0 1 (fontified t)) . -4563) (undo-tree-id378 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4564) (undo-tree-id379 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4565) (undo-tree-id380 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4566) (undo-tree-id381 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4567) (undo-tree-id382 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4568) (undo-tree-id383 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4569) (undo-tree-id384 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4570) (undo-tree-id385 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4571) (undo-tree-id386 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4572) (undo-tree-id387 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4573) (undo-tree-id388 . -1) (#("T" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4574) (undo-tree-id389 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4575) (undo-tree-id390 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4576) (undo-tree-id391 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4577) (undo-tree-id392 . -1) 4578) nil (25952 60656 597081 518000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4560) (undo-tree-id373 . -1) (#(" " 0 1 (fontified t)) . -4561) (undo-tree-id374 . -1) 4562) nil (25952 60656 597075 496000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4539) (4539 . 4540) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4539) (4539 . 4540) (4537 . 4540)) nil (25952 60656 597074 204000) 0 nil])
([nil nil ((4539 . 4543)) nil (25952 60656 597073 653000) 0 nil])
([nil nil ((4543 . 4547)) nil (25952 60656 597073 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 4544 4558 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (4544 . 4558) (#("TagRequestType" 0 14 (fontified nil)) . 4544) (4544 . 4558) (#("Tag" 0 3 (fontified nil)) . 4544) (4544 . 4547) (#("TagRequestType" 0 14 (fontified nil)) . -4544) (4544 . 4558) (#("Tag" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4544) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -1) (undo-tree-id368 . -2) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) 4547) nil (25952 60656 597068 323000) 0 nil])
([nil nil ((4879 . 4881) (t 25952 60656 643222 829000)) nil (25952 60829 449300 915000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4887) (4887 . 4888) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4887) (4887 . 4888) (4881 . 4888)) nil (25952 60829 449300 134000) 0 nil])
([nil nil ((4887 . 4895)) nil (25952 60829 449299 212000) 0 nil])
([nil nil ((apply yas--snippet-revive 4892 4906 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (4892 . 4906) (#("TagRequestType" 0 14 (fontified nil)) . 4892) (4892 . 4906) (#("Tag" 0 3 (fontified nil)) . 4892) (4892 . 4895) (#("TagRequestType" 0 14 (fontified nil)) . -4892) (4892 . 4906) (#("Tag" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4892) (undo-tree-id510 . -3) (undo-tree-id511 . -3) 4895) nil (25952 60829 449298 210000) 0 nil])
([nil nil ((4907 . 4908)) nil (25952 60829 449295 605000) 0 nil])
([nil nil ((4908 . 4922)) nil (25952 60829 449294 974000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4919) (undo-tree-id507 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4920) (undo-tree-id508 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4921) (undo-tree-id509 . -1) 4922) nil (25952 60829 449293 942000) 0 nil])
([nil nil ((4919 . 4922)) nil (25952 60829 449291 978000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4569) (undo-tree-id505 . -1) (undo-tree-id506 . -1) 4570) nil (25952 60829 449291 97000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4560) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4561) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4562) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4563) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4564) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("q" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4565) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4566) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4567) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4568) (undo-tree-id503 . -1) (undo-tree-id504 . -1) 4569) nil (25952 60829 449288 712000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4899) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4900) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4901) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("e" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4902) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("q" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4903) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("u" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4904) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("e" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4905) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4906) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4907) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("T" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4908) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4909) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4910) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4911) (undo-tree-id485 . -1) (undo-tree-id486 . -1) 4912) nil (25952 60829 449278 773000) 0 nil])
([nil nil ((4899 . 4900)) nil (25952 60829 449266 279000) 0 nil])
([nil nil ((4900 . 4908)) nil (25952 60829 449265 929000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4906) (undo-tree-id459 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -4907) (undo-tree-id460 . -1) 4908) nil (25952 60829 449265 348000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4910) (4910 . 4911) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4910) (4910 . 4911) (4906 . 4911)) nil (25952 60829 449263 193000) 0 nil])
([nil nil ((4910 . 4928)) nil (25952 60829 449262 312000) 0 nil])
([nil nil ((4928 . 4929)) nil (25952 60829 449262 11000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4928) (undo-tree-id458 . -1) 4929) nil (25952 60829 449261 661000) 0 nil])
([nil nil ((4928 . 4932)) nil (25952 60829 449260 909000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4931) (undo-tree-id456 . -1) (undo-tree-id457 . -1) 4932) nil (25952 60829 449260 368000) 0 nil])
([nil nil ((4931 . 4934)) nil (25952 60829 449259 376000) 0 nil])
([nil nil ((4934 . 4937)) nil (25952 60829 449259 66000) 0 nil])
([nil nil ((4938 . 4939)) nil (25952 60829 449258 635000) 0 nil])
([nil nil ((4939 . 4944)) nil (25952 60829 449258 334000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4943) (undo-tree-id454 . -1) (undo-tree-id455 . -1) 4944) nil (25952 60829 449258 104000) 0 nil])
([nil nil ((4943 . 4951)) nil (25952 60829 449257 102000) 0 nil])
([nil nil ((apply yas--snippet-revive 4948 4960 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (4948 . 4960) (#("AddTagParams" 0 12 (fontified nil)) . 4948) (4948 . 4960) (#("Add" 0 3 (fontified nil)) . 4948) (4948 . 4951) (#("AddTagParams" 0 12 (fontified nil)) . -4948) (4948 . 4960) (#("Add" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4948) (undo-tree-id452 . -3) (undo-tree-id453 . -3) 4951) nil (25952 60829 449256 240000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4962) (4962 . 4963) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4962) (4962 . 4963) (4960 . 4963)) nil (25952 60829 449254 657000) 0 nil])
([nil nil ((4963 . 4964) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4963) (4963 . 4964) (4962 . 4964)) nil (25952 60829 449254 256000) 0 nil])
([nil nil ((#("func (req *TagRequestType) ToCreateTag(id string, userId uuid.UUID) database.AddTagParams {
	
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 9 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:operator) 11 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t) 27 38 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 41 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 41 42 (fontified t) 42 48 (fontified t face tree-sitter-hl-face:type) 48 50 (fontified t) 50 56 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 56 57 (fontified t) 57 61 (fontified t) 61 62 (fontified t) 62 66 (fontified t face tree-sitter-hl-face:type) 66 67 (fontified t face (rainbow-delimiters-depth-1-face)) 67 68 (fontified t) 68 77 (fontified t) 77 89 (fontified t face tree-sitter-hl-face:type) 89 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-1-face)) 91 94 (fontified t) 94 95 (fontified t face (rainbow-delimiters-depth-1-face)) 95 96 (fontified t)) . 4871) (undo-tree-id441 . -94) (undo-tree-id442 . -94) (undo-tree-id443 . -95) (undo-tree-id444 . 1) (undo-tree-id445 . -77) (undo-tree-id446 . -94) (undo-tree-id447 . -94) (undo-tree-id448 . 2) (undo-tree-id449 . -95) (undo-tree-id450 . 6) (undo-tree-id451 . -91) 4965) nil (25952 60829 449253 595000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6065 . 6066) (#("
" 0 1 (fontified nil)) . -6161) (6065 . 6162) 6064) nil (25952 60829 449141 912000) 0 nil])
([nil nil ((#("f
" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t rear-nonsticky t)) . 6064) (undo-tree-id440 . -1)) nil (25952 60829 449141 461000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6158 . 6159) (#("
" 0 1 (fontified nil)) . -6340) (6157 . 6341) 6156) nil (25952 60829 449140 720000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6155) (undo-tree-id438 . -1) (#("	" 0 1 (fontified t)) . -6156) (undo-tree-id439 . -1) 6157) nil (25952 60829 449140 49000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6256) (undo-tree-id435 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6257) (undo-tree-id436 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6258) (undo-tree-id437 . -1) 6259) nil (25952 60829 449137 925000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6252) (undo-tree-id431 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6253) (undo-tree-id432 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6254) (undo-tree-id433 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6255) (undo-tree-id434 . -1) 6256) nil (25952 60829 449136 382000) 0 nil])
([nil nil ((6252 . 6255)) nil (25952 60829 449134 168000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6279) (undo-tree-id428 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6280) (undo-tree-id429 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6281) (undo-tree-id430 . -1) 6282) nil (25952 60829 449133 386000) 0 nil])
([nil nil ((6279 . 6281)) nil (25952 60829 449131 953000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6189) (undo-tree-id427 . -1) 6190) nil (25952 60829 449131 472000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6182) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6183) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6184) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6185) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6186) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (#(" " 0 1 (fontified t)) . -6187) (undo-tree-id425 . -1) (#(":" 0 1 (fontified t)) . -6188) (undo-tree-id426 . -1) 6189) nil (25952 60829 449128 517000) 0 nil])
([nil nil ((6182 . 6188)) nil (25952 60829 449106 435000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4871) 6188 (t 25952 60829 481784 466000)) nil (25952 60928 467304 316000) 0 nil])
([nil nil ((#("	timeStamp := time.Now()
	dbObj := database.AddTagParams{
		ID:        uuid.New(),
		Name:      tagBody.Name,
		UserID:    user.ID,
		CreatedAt: timeStamp,
		UpdatedAt: timeStamp,
	}
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 5 (fontified t face tree-sitter-hl-face:variable) 5 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 22 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 26 (fontified t) 26 31 (fontified t face tree-sitter-hl-face:variable) 31 32 (fontified t) 32 33 (fontified t face tree-sitter-hl-face:operator) 33 34 (fontified t face tree-sitter-hl-face:operator) 34 44 (fontified t) 44 56 (fontified t face tree-sitter-hl-face:type) 56 57 (fontified t face (rainbow-delimiters-depth-2-face)) 57 60 (fontified t) 60 62 (fontified t face tree-sitter-hl-face:variable) 62 64 (fontified t) 64 71 (fontified t) 71 75 (fontified t face tree-sitter-hl-face:variable) 75 76 (fontified t) 76 79 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 79 80 (fontified t face (rainbow-delimiters-depth-3-face)) 80 81 (fontified t face (rainbow-delimiters-depth-3-face)) 81 85 (fontified t) 85 89 (fontified t face tree-sitter-hl-face:variable) 89 91 (fontified t) 91 96 (fontified t) 96 103 (fontified t face tree-sitter-hl-face:variable) 103 104 (fontified t) 104 108 (fontified t face tree-sitter-hl-face:property) 108 112 (fontified t) 112 118 (fontified t face tree-sitter-hl-face:variable) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 123 (fontified t) 123 127 (fontified t face tree-sitter-hl-face:variable) 127 128 (fontified t) 128 130 (fontified t face tree-sitter-hl-face:property) 130 134 (fontified t) 134 143 (fontified t face tree-sitter-hl-face:variable) 143 145 (fontified t) 145 154 (fontified t face tree-sitter-hl-face:variable) 154 158 (fontified t) 158 167 (fontified t face tree-sitter-hl-face:variable) 167 169 (fontified t) 169 178 (fontified t face tree-sitter-hl-face:variable) 178 181 (fontified t) 181 182 (fontified t face (rainbow-delimiters-depth-2-face)) 182 183 (fontified t)) . 6606) (undo-tree-id575 . -181) (undo-tree-id576 . -181) (undo-tree-id577 . -1) (undo-tree-id578 . -182) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -181) 6607) nil (25952 60928 467303 714000) 0 nil])
([nil nil ((6605 . 6607)) nil (25952 60928 467300 879000) 0 nil])
([nil nil ((6607 . 6620)) nil (25952 60928 467300 579000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6619) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 6620) nil (25952 60928 467300 48000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6618) (undo-tree-id571 . -1) (undo-tree-id572 . -1) 6619) nil (25952 60928 467299 96000) 0 nil])
([nil nil ((6618 . 6622)) nil (25952 60928 467297 823000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6616) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6617) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6618) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6619) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6620) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6621) (undo-tree-id569 . -1) (undo-tree-id570 . -1) 6622) nil (25952 60928 467296 881000) 0 nil])
([nil nil ((6616 . 6620)) nil (25952 60928 467291 451000) 0 nil])
([nil nil ((apply yas--snippet-revive 6616 6623 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (6616 . 6623) (#("tagBody" 0 7 (fontified nil)) . 6616) (6616 . 6623) (#("tagB" 0 4 (fontified nil)) . 6616) (6616 . 6620) (#("tagBody" 0 7 (fontified nil)) . -6616) (6616 . 6623) (#("tagB" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6616) (undo-tree-id557 . -4) (undo-tree-id558 . -4) 6620) nil (25952 60928 467290 660000) 0 nil])
([nil nil ((6623 . 6625)) nil (25952 60928 467289 317000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6623) (undo-tree-id555 . -1) (#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6624) (undo-tree-id556 . -1) 6625) nil (25952 60928 467288 596000) 0 nil])
([nil nil ((6623 . 6624)) nil (25952 60928 467287 464000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6636 6638 nil nil nil t #s(yas--field 2 6640 6647 nil nil nil t nil)) #s(yas--field 2 6640 6647 nil nil nil t nil)) nil 13 nil #s(yas--field 2 6640 6647 nil nil nil t nil) nil nil)) (6624 . 6664) (#("ToCreateTag(${1:id string}, ${2:userId uuid.UUID})" 0 50 (fontified nil)) . 6624) (6624 . 6674) (#("ToCreateTag" 0 11 (fontified nil)) . -6624) (6624 . 6635)) nil (25952 60928 467287 63000) 0 nil])
([nil nil ((6637 . 6638) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 6637) (6636 . 6637)) nil (25952 60928 467286 502000) 0 nil])
([nil nil ((#("userId uuid.UUID" 0 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 16 (fontified t face tree-sitter-hl-face:property)) . 6640)) nil (25952 60928 467285 870000) 0 nil])
([nil nil ((6640 . 6645)) nil (25952 60928 467285 530000) 0 nil])
([nil nil ((apply yas--snippet-revive 6645 6647 #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 2 6640 6647 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 2 6640 6647 nil nil nil t nil) nil)) (6645 . 6647) (#("ID" 0 2 (fontified nil)) . 6645) (6645 . 6647) (#("ID" 0 2 (fontified nil)) . -6645) (6645 . 6647)) nil (25952 60928 467284 919000) 0 nil])
([nil nil ((apply yas--snippet-revive 6624 6648 #s(yas--snippet nil (#s(yas--field 1 6636 6638 nil nil nil t #s(yas--field 2 6640 6647 nil nil nil t nil)) #s(yas--field 2 6640 6647 nil nil nil t nil)) nil 13 nil #s(yas--field 2 6640 6647 nil nil nil t nil) nil nil))) nil (25952 60928 467284 418000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -6102) (undo-tree-id544 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -6103) (undo-tree-id545 . -1) (#(" " 0 1 (fontified t)) . -6104) (undo-tree-id546 . -1) (#("s" 0 1 (fontified t)) . -6105) (undo-tree-id547 . -1) (#("t" 0 1 (fontified t)) . -6106) (undo-tree-id548 . -1) (#("r" 0 1 (fontified t)) . -6107) (undo-tree-id549 . -1) (#("i" 0 1 (fontified t)) . -6108) (undo-tree-id550 . -1) (#("n" 0 1 (fontified t)) . -6109) (undo-tree-id551 . -1) (#("g" 0 1 (fontified t)) . -6110) (undo-tree-id552 . -1) (#("," 0 1 (fontified t)) . -6111) (undo-tree-id553 . -1) (#(" " 0 1 (fontified t)) . -6112) (undo-tree-id554 . -1) 6113) nil (25952 60928 467283 145000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6625) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6626) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("," 0 1 (fontified t)) . -6627) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#(" " 0 1 (fontified t)) . -6628) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) 6629) nil (25952 60928 467275 140000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5193) (undo-tree-id605 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5194) (undo-tree-id606 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5195) (undo-tree-id607 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5196) (undo-tree-id608 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5197) (undo-tree-id609 . -1) (#("q" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5198) (undo-tree-id610 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5199) (undo-tree-id611 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5200) (undo-tree-id612 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5201) (undo-tree-id613 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5202) (undo-tree-id614 . -1) (#("T" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5203) (undo-tree-id615 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5204) (undo-tree-id616 . -1) (#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5205) (undo-tree-id617 . -1) (#("e" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5206) (undo-tree-id618 . -1) (#("n" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5207) (undo-tree-id619 . -1) (#("a" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5208) (undo-tree-id620 . -1) (#("m" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5209) (undo-tree-id621 . -1) (#("e" 0 1 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5210) (undo-tree-id622 . -1) (#("T" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5211) (undo-tree-id623 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5212) (undo-tree-id624 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5213) (undo-tree-id625 . -1) 5214 (t 25952 60928 590400 185000)) nil (25952 60993 875850 502000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5204) (undo-tree-id603 . -1) (#(" " 0 1 (fontified t)) . -5205) (undo-tree-id604 . -1) 5206) nil (25952 60993 875840 634000) 0 nil])
([nil nil ((5204 . 5206)) nil (25952 60993 875839 431000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -5205) (undo-tree-id600 . -1) (undo-tree-id601 . 1) (undo-tree-id602 . -1) 5206) nil (25952 60993 875838 900000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -5193) (undo-tree-id598 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5194) (undo-tree-id599 . -1) 5195) nil (25952 60993 875836 897000) 0 nil])
([nil nil ((5193 . 5196)) nil (25952 60993 875835 364000) 0 nil])
([nil nil ((5193 . 5199)) nil (25952 60993 875835 53000) 0 nil])
([nil nil ((apply yas--snippet-revive 5193 5203 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (5193 . 5203) (#("renameBody" 0 10 (fontified nil)) . 5193) (5193 . 5203) (#("renametoRenameBody" 0 6 (fontified nil) 6 9 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 9 18 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . 5193) (5193 . 5199) (#("renameBody" 0 10 (fontified nil)) . -5193) (5193 . 5203) (#("rename" 0 6 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5193) (undo-tree-id596 . -6) (undo-tree-id597 . -6) 5199) nil (25952 60993 875834 41000) 0 nil])
([nil nil ((5203 . 5204)) nil (25952 60993 875803 733000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5216 5225 nil nil nil nil #s(yas--field 2 5227 5243 nil nil nil nil nil)) #s(yas--field 2 5227 5243 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 5216 5225 nil nil nil nil #s(yas--field 2 5227 5243 nil nil nil nil nil)) nil nil)) (5204 . 5244) (#("ToRenameTag(${1:id string}, ${2:userId uuid.UUID})" 0 50 (fontified nil)) . 5204) (5204 . 5254) (#("ToRenameTag" 0 11 (fontified nil)) . -5204) (5204 . 5215)) nil (25952 60993 875803 343000) 0 nil])
([nil nil ((apply yas--snippet-revive 5204 5244 #s(yas--snippet nil (#s(yas--field 1 5216 5225 nil nil nil nil #s(yas--field 2 5227 5243 nil nil nil nil nil)) #s(yas--field 2 5227 5243 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 5216 5225 nil nil nil nil #s(yas--field 2 5227 5243 nil nil nil nil nil)) nil nil))) nil (25952 60993 875802 802000) 0 nil])
([nil nil ((#("(id string, userId uuid.UUID)" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 10 (fontified t face tree-sitter-hl-face:variable) 10 12 (fontified t) 12 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 23 (fontified t face tree-sitter-hl-face:variable) 23 24 (fontified t) 24 28 (fontified t face tree-sitter-hl-face:property) 28 29 (fontified t face (rainbow-delimiters-depth-2-face))) . 5215) (undo-tree-id582 . -28) (undo-tree-id583 . -28) (undo-tree-id584 . -28) (undo-tree-id585 . 28) (undo-tree-id586 . -28) (undo-tree-id587 . -28) (undo-tree-id588 . -1) (undo-tree-id589 . -4) (undo-tree-id590 . -5) (undo-tree-id591 . -28) (undo-tree-id592 . 1) (undo-tree-id593 . -29) (undo-tree-id594 . 29) (undo-tree-id595 . -1) 5243) nil (25952 60993 875799 4000) 0 nil])
([nil nil ((7368 . 7370) (t 25952 60993 906124 30000)) nil (25952 61366 369718 149000) 0 nil])
([nil nil ((7370 . 7375)) nil (25952 61366 369717 577000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7370) (undo-tree-id685 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7371) (undo-tree-id686 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7372) (undo-tree-id687 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -7373) (undo-tree-id688 . -1) (#(" " 0 1 (fontified t)) . -7374) (undo-tree-id689 . -1) 7375) nil (25952 61366 369716 163000) 0 nil])
([nil nil ((7370 . 7375)) nil (25952 61366 369712 804000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7376) (7376 . 7377) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -7376) (7376 . 7377) (7375 . 7377)) nil (25952 61366 369711 110000) 0 nil])
([nil nil ((7376 . 7384)) nil (25952 61366 369709 726000) 0 nil])
([nil nil ((apply yas--snippet-revive 7381 7395 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (7381 . 7395) (#("TagRequestType" 0 14 (fontified nil)) . 7381) (7381 . 7395) (#("Tag" 0 3 (fontified nil)) . 7381) (7381 . 7384) (#("TagRequestType" 0 14 (fontified nil)) . -7381) (7381 . 7395) (#("Tag" 0 3 (fontified t face tree-sitter-hl-face:type)) . -7381) (undo-tree-id683 . -3) (undo-tree-id684 . -3) 7384) nil (25952 61366 369708 232000) 0 nil])
([nil nil ((7396 . 7397)) nil (25952 61366 369705 806000) 0 nil])
([nil nil ((7397 . 7410)) nil (25952 61366 369704 693000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -7409) (undo-tree-id682 . -1) 7410) nil (25952 61366 369703 700000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7410) (7410 . 7411) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -7410) (7410 . 7411) (7409 . 7411)) nil (25952 61366 369701 585000) 0 nil])
([nil nil ((7511 . 7513)) nil (25952 61366 369700 682000) 0 nil])
([nil nil ((7513 . 7522)) nil (25952 61366 369700 40000) 0 nil])
([nil nil ((7518 . 7523)) nil (25952 61366 369699 619000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7513) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7514) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7515) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7516) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7517) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("," 0 1 (fontified t)) . -7518) (undo-tree-id673 . -1) (#(" " 0 1 (fontified t)) . -7519) (undo-tree-id674 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7520) (undo-tree-id675 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7521) (undo-tree-id676 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7522) (undo-tree-id677 . -1) (#(" " 0 1 (fontified t)) . -7523) (undo-tree-id678 . -1) (#(":" 0 1 (fontified t)) . -7524) (undo-tree-id679 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -7525) (undo-tree-id680 . -1) (#(" " 0 1 (fontified t)) . -7526) (undo-tree-id681 . -1) 7527) nil (25952 61366 369696 992000) 0 nil])
([nil nil ((7513 . 7517)) nil (25952 61366 369690 676000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -7516) (undo-tree-id662 . -1) 7517) nil (25952 61366 369689 543000) 0 nil])
([nil nil ((7516 . 7519)) nil (25952 61366 369688 660000) 0 nil])
([nil nil ((7519 . 7527)) nil (25952 61366 369688 349000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7523) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7524) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7525) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7526) (undo-tree-id660 . -1) (undo-tree-id661 . -1) 7527) nil (25952 61366 369687 196000) 0 nil])
([nil nil ((7523 . 7526)) nil (25952 61366 369684 569000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7532 7533 nil nil nil t #s(yas--field 2 7535 7539 nil nil nil t nil)) #s(yas--field 2 7535 7539 nil nil nil t nil)) nil 18 nil #s(yas--field 2 7535 7539 nil nil nil t nil) nil nil)) (7523 . 7560) (#("URLParam(${1:r *http.Request}, ${2:key string})" 0 47 (fontified nil)) . 7523) (7523 . 7570) (#("Url" 0 3 (fontified nil)) . 7523) (7523 . 7526) (#("URLParam" 0 8 (fontified nil)) . -7523) (7523 . 7531) (#("Url" 0 3 (fontified t face tree-sitter-hl-face:property)) . -7523) (undo-tree-id652 . -3) (undo-tree-id653 . -3) 7526) nil (25952 61366 369684 18000) 0 nil])
([nil nil ((#("r *http.Request" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 15 (fontified nil face tree-sitter-hl-face:property)) . 7533) (7532 . 7533)) nil (25952 61366 369682 414000) 0 nil])
([nil nil ((7536 . 7538) (7535 . 7537) (#("\"" 0 1 (fontified nil)) . -7535) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 7536) (7535 . 7536)) nil (25952 61366 369681 702000) 0 nil])
([nil nil ((apply yas--snippet-revive 7523 7540 #s(yas--snippet nil (#s(yas--field 1 7532 7533 nil nil nil t #s(yas--field 2 7535 7539 nil nil nil t nil)) #s(yas--field 2 7535 7539 nil nil nil t nil)) nil 18 nil #s(yas--field 2 7535 7539 nil nil nil t nil) nil nil))) nil (25952 61366 369681 10000) 0 nil])
([nil nil ((7540 . 7542)) nil (25952 61366 369680 388000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7540) (undo-tree-id650 . -1) (#("	" 0 1 (fontified t)) . -7541) (undo-tree-id651 . -1) 7542) nil (25952 61366 369679 596000) 0 nil])
([nil nil ((7540 . 7542)) nil (25952 61366 369676 999000) 0 nil])
([nil nil ((7542 . 7545)) nil (25952 61366 369676 237000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7542) (undo-tree-id647 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -7543) (undo-tree-id648 . -1) (#(" " 0 1 (fontified t)) . -7544) (undo-tree-id649 . -1) 7545) nil (25952 61366 369674 954000) 0 nil])
([nil nil ((7515 . 7521)) nil (25952 61366 369672 738000) 0 nil])
([nil nil ((7548 . 7559)) nil (25952 61366 369672 577000) 0 nil])
([nil nil ((7559 . 7564)) nil (25952 61366 369672 437000) 0 nil])
([nil nil ((7564 . 7565)) nil (25952 61366 369672 146000) 0 nil])
([nil nil ((7565 . 7569)) nil (25952 61366 369672 6000) 0 nil])
([nil nil ((7569 . 7571)) nil (25952 61366 369671 675000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7570) (7570 . 7571) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7570) (7570 . 7571)) nil (25952 61366 369671 43000) 0 nil])
([nil nil ((7570 . 7572)) nil (25952 61366 369669 850000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7571) (undo-tree-id646 . -1) 7572) nil (25952 61366 369668 767000) 0 nil])
([nil nil ((7571 . 7573)) nil (25952 61366 369362 240000) 0 nil])
([nil nil ((apply yas--snippet-revive 7570 7578 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (7570 . 7578) (#("idstring" 0 8 (fontified nil)) . 7570) (7570 . 7578) (#("ids" 0 3 (fontified nil)) . 7570) (7570 . 7573) (#("idstring" 0 8 (fontified nil)) . -7570) (7570 . 7578) (#("ids" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -7570) (undo-tree-id644 . -3) (undo-tree-id645 . -3) 7573) nil (25952 61366 369361 890000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8314) (undo-tree-id632 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8315) (undo-tree-id633 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8316) (undo-tree-id634 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8317) (undo-tree-id635 . -1) (#("." 0 1 (fontified t)) . -8318) (undo-tree-id636 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8319) (undo-tree-id637 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8320) (undo-tree-id638 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8321) (undo-tree-id639 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8322) (undo-tree-id640 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8323) (undo-tree-id641 . -1) (undo-tree-id642 . 1) (undo-tree-id643 . -1) 8324) nil (25952 61366 369357 227000) 0 nil])
([nil nil ((8314 . 8316)) nil (25952 61366 369350 690000) 0 nil])
([nil nil ((7579 . 7581)) nil (25952 61366 369350 208000) 0 nil])
([nil nil ((7581 . 7588)) nil (25952 61366 369349 727000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -7596) (7596 . 7597) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7596) (7596 . 7597) (7588 . 7597)) nil (25952 61366 369348 704000) 0 nil])
([nil nil ((7597 . 7599) (7598 . 7599) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 7597) (7597 . 7599) (7596 . 7598)) nil (25952 61366 369347 772000) 0 nil])
([nil nil ((7599 . 7605)) nil (25952 61366 369347 140000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7604) (undo-tree-id631 . -1) 7605) nil (25952 61366 369346 448000) 0 nil])
([nil nil ((7604 . 7606)) nil (25952 61366 369345 716000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7605) (undo-tree-id630 . -1) 7606) nil (25952 61366 369345 175000) 0 nil])
([nil nil ((7596 . 7599)) nil (25952 61366 369343 892000) 0 nil])
([nil nil ((7599 . 7605)) nil (25952 61366 369343 571000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7622 7623 nil nil nil t #s(yas--field 2 7625 7628 nil nil nil t #s(yas--field 3 7630 7642 nil nil nil t nil))) #s(yas--field 2 7625 7628 nil nil nil t #s(yas--field 3 7630 7642 nil nil nil t nil)) #s(yas--field 3 7630 7642 nil nil nil t nil)) nil 20 nil #s(yas--field 3 7630 7642 nil nil nil t nil) nil nil)) (7605 . 7666) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 7605) (7605 . 7681) (#("RespondWithError" 0 16 (fontified nil)) . -7605) (7605 . 7621)) nil (25952 61366 369342 568000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 7623) (undo-tree-id629 . -21) (7622 . 7623)) nil (25952 61366 369341 64000) 0 nil])
([nil nil ((7626 . 7628) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 7626) (undo-tree-id628 . -8) (7625 . 7626)) nil (25952 61366 369339 871000) 0 nil])
([nil nil ((7630 . 7632) (#("\"" 0 1 (fontified nil)) . -7630) (undo-tree-id626 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 7631) (undo-tree-id627 . -10) (7630 . 7631)) nil (25952 61366 369337 795000) 0 nil])
([nil nil ((7631 . 7641)) nil (25952 61366 369320 108000) 0 nil])
([nil nil ((apply yas--snippet-revive 7605 7643 #s(yas--snippet nil (#s(yas--field 1 7622 7623 nil nil nil t #s(yas--field 2 7625 7628 nil nil nil t #s(yas--field 3 7630 7642 nil nil nil t nil))) #s(yas--field 2 7625 7628 nil nil nil t #s(yas--field 3 7630 7642 nil nil nil t nil)) #s(yas--field 3 7630 7642 nil nil nil t nil)) nil 20 nil #s(yas--field 3 7630 7642 nil nil nil t nil) nil nil))) nil (25952 61605 623514 690000) 0 nil])
([nil nil ((#("	id, err := uuid.Parse(idstring)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Id\")
		return
	}
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:variable) 3 5 (fontified t) 5 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 22 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 31 (fontified t face tree-sitter-hl-face:variable) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t) 33 34 (fontified t) 34 36 (fontified t face tree-sitter-hl-face:keyword) 36 37 (fontified t) 37 40 (fontified t face tree-sitter-hl-face:variable) 40 41 (fontified t) 41 43 (fontified t face tree-sitter-hl-face:operator) 43 44 (fontified t) 44 47 (fontified t face tree-sitter-hl-face:constant\.builtin) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 52 (fontified t) 52 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 74 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t face tree-sitter-hl-face:variable) 76 78 (fontified t) 78 81 (fontified t face tree-sitter-hl-face:number) 81 83 (fontified t) 83 95 (fontified t face tree-sitter-hl-face:string) 95 96 (fontified t face (rainbow-delimiters-depth-3-face)) 96 97 (fontified t) 97 99 (fontified t) 99 105 (fontified t face tree-sitter-hl-face:keyword) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-2-face)) 108 109 (fontified t)) . 7547) (undo-tree-id749 . -107) (undo-tree-id750 . -1) (undo-tree-id751 . -107) (undo-tree-id752 . -108) (undo-tree-id753 . 14) (undo-tree-id754 . -75) (undo-tree-id755 . -95) (undo-tree-id756 . -107) (undo-tree-id757 . -1) (undo-tree-id758 . -107) (undo-tree-id759 . 2) (undo-tree-id760 . -108) (undo-tree-id761 . 61) (undo-tree-id762 . -49) 7654 (t 25952 61366 497171 747000)) nil (25952 61605 623513 378000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7739 . 7740) (#("
" 0 1 (fontified nil)) . -7847) (7738 . 7848) 7737) nil (25952 61605 623507 127000) 0 nil])
([nil nil ((7410 . 7419)) nil (25952 61605 623506 686000) 0 nil])
([nil nil ((7419 . 7420)) nil (25952 61605 623506 546000) 0 nil])
([nil nil ((7420 . 7425)) nil (25952 61605 623506 195000) 0 nil])
([nil nil ((7425 . 7427)) nil (25952 61605 623505 684000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7426) (undo-tree-id747 . -1) (undo-tree-id748 . -1) 7427) nil (25952 61605 623505 343000) 0 nil])
([nil nil ((7426 . 7428)) nil (25952 61605 623504 452000) 0 nil])
([nil nil ((7428 . 7433)) nil (25952 61605 623504 141000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -7432) (undo-tree-id746 . -1) 7433) nil (25952 61605 623503 510000) 0 nil])
([nil nil ((7432 . 7437)) nil (25952 61605 623502 679000) 0 nil])
([nil nil ((7438 . 7441)) nil (25952 61605 623502 368000) 0 nil])
([nil nil ((7441 . 7442) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 7441) (7441 . 7442) (7440 . 7442)) nil (25952 61605 623501 817000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -8305) (7442 . 8306) 7441) nil (25952 61605 623501 236000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 7441) (undo-tree-id745 . -1)) nil (25952 61605 623499 363000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7412)) nil (25952 61605 623497 830000) 0 nil])
([nil nil ((7412 . 7413)) nil (25952 61605 623496 998000) 0 nil])
([nil nil ((7412 . 7418)) nil (25952 61605 623496 437000) 0 nil])
([nil nil ((#("t" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7615) (undo-tree-id735 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7616) (undo-tree-id736 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7617) (undo-tree-id737 . -1) (#("k" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7618) (undo-tree-id738 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7619) (undo-tree-id739 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7620) (undo-tree-id740 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7621) (undo-tree-id741 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7622) (undo-tree-id742 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7623) (undo-tree-id743 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7624) (undo-tree-id744 . -1) 7625) nil (25952 61605 623495 425000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7614) (undo-tree-id734 . -1) 7615) nil (25952 61605 623490 126000) 0 nil])
([nil nil ((7614 . 7618)) nil (25952 61605 623488 924000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7788) (undo-tree-id724 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7789) (undo-tree-id725 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7790) (undo-tree-id726 . -1) (#("k" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7791) (undo-tree-id727 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -7792) (undo-tree-id728 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7793) (undo-tree-id729 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7794) (undo-tree-id730 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7795) (undo-tree-id731 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7796) (undo-tree-id732 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7797) (undo-tree-id733 . -1) 7798) nil (25952 61605 623486 820000) 0 nil])
([nil nil ((7788 . 7791)) nil (25952 61605 623482 562000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7383) (undo-tree-id723 . -1) 7384) nil (25952 61605 623482 231000) 0 nil])
([nil nil ((7383 . 7385)) nil (25952 61605 623481 630000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 400, \"Invalid Id\")
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face tree-sitter-hl-face:variable) 26 28 (fontified t) 28 31 (fontified t face tree-sitter-hl-face:number) 31 33 (fontified t) 33 45 (fontified t face tree-sitter-hl-face:string) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 47 (fontified t)) . 7498) (undo-tree-id720 . -46) (undo-tree-id721 . 21) (undo-tree-id722 . -25) 7523) nil (25952 61605 623481 109000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7447) (7447 . 7448) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -7447) (7447 . 7448) (7445 . 7448)) nil (25952 61605 623478 885000) 0 nil])
([nil nil ((7447 . 7456)) nil (25952 61605 623478 174000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7455) (undo-tree-id719 . -1) 7456) nil (25952 61605 623476 761000) 0 nil])
([nil nil ((7455 . 7465)) nil (25952 61605 623475 559000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -7452) (undo-tree-id718 . -1) 7453) nil (25952 61605 623474 988000) 0 nil])
([nil nil ((7452 . 7453)) nil (25952 61605 623473 866000) 0 nil])
([nil nil ((7454 . 7455)) nil (25952 61605 623473 385000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7465) (undo-tree-id717 . -1) 7466) nil (25952 61605 623472 784000) 0 nil])
([nil nil ((7465 . 7466)) nil (25952 61605 623472 113000) 0 nil])
([nil nil ((apply yas--snippet-revive 7456 7472 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (7456 . 7472) (#("UpdateTaskParams" 0 16 (fontified nil)) . 7456) (7456 . 7472) (#("UpdateTask" 0 10 (fontified nil)) . 7456) (7456 . 7466) (#("UpdateTaskParams" 0 16 (fontified nil)) . -7456) (7456 . 7472) (#("UpdateTask" 0 10 (fontified t face tree-sitter-hl-face:type)) . -7456) (undo-tree-id715 . -10) (undo-tree-id716 . -10) 7466) nil (25952 61605 623471 432000) 0 nil])
([nil nil ((7472 . 7477)) nil (25952 61605 623468 406000) 0 nil])
([nil nil ((7477 . 7479)) nil (25952 61605 623467 795000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7543) (7543 . 7544) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -7543) (7543 . 7544) (7541 . 7544)) nil (25952 61605 623467 34000) 0 nil])
([nil nil ((7543 . 7548)) nil (25952 61605 623466 573000) 0 nil])
([nil nil ((apply yas--snippet-revive 7543 7570 #s(yas--snippet nil nil #s(yas--exit 7569 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7569 nil) 22 nil nil nil nil)) (7543 . 7570) (#("database.UpdateTaskParams{$0\\}" 0 30 (fontified nil)) . 7543) (7543 . 7573) (#("datab" 0 5 (fontified nil)) . 7543) (7543 . 7548) (#("database.UpdateTaskParams{}" 0 27 (fontified nil)) . -7543) (7543 . 7570) (#("datab" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -7543) (undo-tree-id713 . -5) (undo-tree-id714 . -5) 7548) nil (25952 61605 623466 72000) 0 nil])
([nil nil ((7572 . 7574) (#("\"" 0 1 (fontified nil)) . -7572) (7570 . 7573)) nil (25952 61605 623464 219000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -7572) (undo-tree-id712 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 7573)) nil (25952 61605 623463 928000) 0 nil])
([nil nil ((7572 . 7576)) nil (25952 61605 623463 26000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7583) (7583 . 7584) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -7583) (7583 . 7584) (7576 . 7584)) nil (25952 61605 623462 646000) 0 nil])
([nil nil ((7583 . 7585) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -7583) (7583 . 7584)) nil (25952 61605 623461 975000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7576) (undo-tree-id707 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7577) (undo-tree-id708 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7578) (undo-tree-id709 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7579) (undo-tree-id710 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7580) (undo-tree-id711 . -1) 7581) nil (25952 61605 623461 53000) 0 nil])
([nil nil ((7576 . 7581)) nil (25952 61605 623458 198000) 0 nil])
([nil nil ((7584 . 7585)) nil (25952 61605 623457 897000) 0 nil])
([nil nil ((7585 . 7594)) nil (25952 61605 623457 546000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -7542) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) 7543) nil (25952 61605 623456 775000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -7595) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . 1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) 7596) nil (25952 61605 623449 121000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7761) (undo-tree-id799 . -1) (#("	" 0 1 (fontified t)) . -7762) (undo-tree-id800 . -1) (#("	" 0 1 (fontified t)) . -7763) (undo-tree-id801 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7764) (undo-tree-id802 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7765) (undo-tree-id803 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7766) (undo-tree-id804 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7767) (undo-tree-id805 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7768) (undo-tree-id806 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -7769) (undo-tree-id807 . -1) 7770 (t 25952 61605 656198 918000)) nil (25952 61638 9292 872000) 0 nil])
([nil nil (7760) nil (25952 61638 9288 44000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7705) (undo-tree-id778 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7706) (undo-tree-id779 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7707) (undo-tree-id780 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7708) (undo-tree-id781 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -7709) (undo-tree-id782 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -7710) (undo-tree-id783 . -1) (#("h" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -7711) (undo-tree-id784 . -1) (#("E" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -7712) (undo-tree-id785 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -7713) (undo-tree-id786 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7714) (undo-tree-id787 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7715) (undo-tree-id788 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7716) (undo-tree-id789 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -7717) (undo-tree-id790 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7718) (undo-tree-id791 . -1) (#("," 0 1 (fontified t)) . -7719) (undo-tree-id792 . -1) (#(" " 0 1 (fontified t)) . -7720) (undo-tree-id793 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -7721) (undo-tree-id794 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -7722) (undo-tree-id795 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -7723) (undo-tree-id796 . -1) (#("," 0 1 (fontified t)) . -7724) (undo-tree-id797 . -1) (#(" " 0 1 (fontified t)) . -7725) (undo-tree-id798 . -1) 7726) nil (25952 61638 9285 38000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7695) (undo-tree-id768 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7696) (undo-tree-id769 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7697) (undo-tree-id770 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7698) (undo-tree-id771 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7699) (undo-tree-id772 . -1) (#("." 0 1 (fontified t)) . -7700) (undo-tree-id773 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7701) (undo-tree-id774 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7702) (undo-tree-id775 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7703) (undo-tree-id776 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7704) (undo-tree-id777 . -1) 7705) nil (25952 61638 9276 142000) 0 nil])
([nil nil ((7695 . 7699)) nil (25952 61638 9270 542000) 0 nil])
([nil nil ((7699 . 7700)) nil (25952 61638 9270 391000) 0 nil])
([nil nil ((7700 . 7704)) nil (25952 61638 9270 241000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7700) (undo-tree-id766 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7701) (undo-tree-id767 . -1) 7702) nil (25952 61638 9269 991000) 0 nil])
([nil nil ((7700 . 7702)) nil (25952 61638 9268 227000) 0 nil])
([nil nil ((7704 . 7705)) nil (25952 61638 9268 77000) 0 nil])
([nil nil ((7705 . 7706)) nil (25952 61638 9267 927000) 0 nil])
([nil nil ((7695 . 7706)) nil (25952 61638 9267 616000) 0 nil])
([nil nil ((7706 . 7707)) nil (25952 61638 9267 256000) 0 nil])
([nil nil ((7707 . 7711)) nil (25952 61638 9266 885000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7710) (undo-tree-id765 . -1) 7711) nil (25952 61638 9266 474000) 0 nil])
([nil nil ((7710 . 7713)) nil (25952 61638 9263 719000) 0 nil])
([nil nil ((7712 . 7715)) nil (25952 61638 9262 988000) 0 nil])
([nil nil ((apply yas--snippet-revive 7711 7729 #s(yas--snippet nil nil #s(yas--exit 7728 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 7728 nil) 23 nil nil nil nil)) (7711 . 7729) (#("UpdateTaskParams{$0\\}" 0 21 (fontified nil)) . 7711) (7711 . 7732) (#("Upda" 0 4 (fontified nil)) . 7711) (7711 . 7715) (#("UpdateTaskParams{}" 0 18 (fontified nil)) . -7711) (7711 . 7729) (#("Upda" 0 4 (fontified t face tree-sitter-hl-face:type)) . -7711) (undo-tree-id763 . -4) (undo-tree-id764 . -4) 7715) nil (25952 61638 9261 605000) 0 nil])
([nil nil ((7729 . 7730)) nil (25952 61638 9242 821000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7872 . 7873) (#("
" 0 1 (fontified nil)) . -7955) (7870 . 7956) 7869 (t 25952 61638 42338 304000)) nil (25952 61649 530625 196000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face tree-sitter-hl-face:variable) 26 28 (fontified t) 28 31 (fontified t face tree-sitter-hl-face:number) 31 32 (fontified t) 32 33 (fontified t) 33 65 (fontified t face tree-sitter-hl-face:string) 65 66 (fontified t face (rainbow-delimiters-depth-3-face)) 66 67 (fontified t)) . 7956) (undo-tree-id852 . -66) (undo-tree-id853 . -2) (undo-tree-id854 . -25) (undo-tree-id855 . -26) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -7) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -67) 7958) nil (25952 61649 530624 194000) 0 nil])
([nil nil ((#("		return
" 0 2 (fontified t) 2 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t)) . 7956) (undo-tree-id842 . -8) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -8) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -9) 7958) nil (25952 61649 530618 333000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -7928) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -7929) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -7930) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -7931) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) 7932) nil (25952 61649 530612 993000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -7927) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) 7928) nil (25952 61649 530601 573000) 0 nil])
([nil nil ((7927 . 7930)) nil (25952 61649 530581 466000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7983) (undo-tree-id935 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7984) (undo-tree-id936 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7985) (undo-tree-id937 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7986) (undo-tree-id938 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7987) (undo-tree-id939 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7988) (undo-tree-id940 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7989) (undo-tree-id941 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7990) (undo-tree-id942 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7991) (undo-tree-id943 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7992) (undo-tree-id944 . -1) 7993 (t 25952 61649 563718 236000)) nil (25952 61684 475600 881000) 0 nil])
([nil nil ((7983 . 7986)) nil (25952 61684 475211 559000) 0 nil])
([nil nil ((#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -8023) (undo-tree-id914 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -8024) (undo-tree-id915 . -1) (#("d" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -8025) (undo-tree-id916 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8026) (undo-tree-id917 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8027) (undo-tree-id918 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8028) (undo-tree-id919 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8029) (undo-tree-id920 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8030) (undo-tree-id921 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8031) (undo-tree-id922 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8032) (undo-tree-id923 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8033) (undo-tree-id924 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8034) (undo-tree-id925 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8035) (undo-tree-id926 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8036) (undo-tree-id927 . -1) (#("," 0 1 (fontified t)) . -8037) (undo-tree-id928 . -1) (#(" " 0 1 (fontified t)) . -8038) (undo-tree-id929 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -8039) (undo-tree-id930 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -8040) (undo-tree-id931 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -8041) (undo-tree-id932 . -1) (#("," 0 1 (fontified t)) . -8042) (undo-tree-id933 . -1) (#(" " 0 1 (fontified t)) . -8043) (undo-tree-id934 . -1) 8044) nil (25952 61684 475209 134000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8013) (undo-tree-id904 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8014) (undo-tree-id905 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8015) (undo-tree-id906 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8016) (undo-tree-id907 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8017) (undo-tree-id908 . -1) (#("." 0 1 (fontified t)) . -8018) (undo-tree-id909 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8019) (undo-tree-id910 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8020) (undo-tree-id911 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8021) (undo-tree-id912 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -8022) (undo-tree-id913 . -1) 8023) nil (25952 61684 475196 431000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -8029) (undo-tree-id901 . -1) (undo-tree-id902 . 1) (undo-tree-id903 . -1) 8030) nil (25952 61684 475187 424000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8034) (undo-tree-id897 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8035) (undo-tree-id898 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8036) (undo-tree-id899 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -8037) (undo-tree-id900 . -1) 8038) nil (25952 61684 475183 978000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8029) (undo-tree-id892 . -1) (#("	" 0 1 (fontified t)) . -8030) (undo-tree-id893 . -1) (#("	" 0 1 (fontified t)) . -8031) (undo-tree-id894 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8032) (undo-tree-id895 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8033) (undo-tree-id896 . -1) 8034) nil (25952 61684 475180 933000) 0 nil])
([nil nil ((8013 . 8021)) nil (25952 61684 475178 568000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8017) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8018) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8019) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#(" " 0 1 (fontified t)) . -8020) (undo-tree-id890 . -1) (undo-tree-id891 . -1) 8021) nil (25952 61684 475177 356000) 0 nil])
([nil nil ((8017 . 8020)) nil (25952 61684 475170 994000) 0 nil])
([nil nil ((8019 . 8024)) nil (25952 61684 475170 654000) 0 nil])
([nil nil ((apply yas--snippet-revive 8020 8047 #s(yas--snippet nil nil #s(yas--exit 8046 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 8046 nil) 24 nil nil nil nil)) (8020 . 8047) (#("database.UpdateTaskParams{$0\\}" 0 30 (fontified nil)) . 8020) (8020 . 8050) (#("data" 0 4 (fontified nil)) . 8020) (8020 . 8024) (#("database.UpdateTaskParams{}" 0 27 (fontified nil)) . -8020) (8020 . 8047) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -8020) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -1) (undo-tree-id870 . -2) (undo-tree-id871 . -3) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) 8024) nil (25952 61684 475169 552000) 0 nil])
([nil nil ((8046 . 8047)) nil (25952 61684 475164 142000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8046) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) 8047) nil (25952 61684 475163 421000) 0 nil])
([nil nil ((8047 . 8048)) nil (25952 61684 475145 37000) 0 nil])
([nil nil ((8049 . 8051) (t 25952 61684 598921 836000)) nil (25952 61701 768765 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8050) (undo-tree-id954 . -1) 8051) nil (25952 61701 768763 897000) 0 nil])
([nil nil ((8050 . 8061)) nil (25952 61701 768762 655000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -8060) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . 1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) 8061) nil (25952 61701 768761 863000) 0 nil])
([nil nil ((8076 . 8077) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -8076) (8076 . 8077)) nil (25952 61701 768737 441000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8082) (undo-tree-id996 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8083) (undo-tree-id997 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8084) (undo-tree-id998 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8085) (undo-tree-id999 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8086) (undo-tree-id1000 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8087) (undo-tree-id1001 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8088) (undo-tree-id1002 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8089) (undo-tree-id1003 . -1) (#("s" 0 1 (fontified t)) . -8090) (undo-tree-id1004 . -1) (#("k" 0 1 (fontified t)) . -8091) (undo-tree-id1005 . -1) (#("O" 0 1 (fontified t)) . -8092) (undo-tree-id1006 . -1) (#("b" 0 1 (fontified t)) . -8093) (undo-tree-id1007 . -1) (#("j" 0 1 (fontified t)) . -8094) (undo-tree-id1008 . -1) (#(" " 0 1 (fontified t)) . -8095) (undo-tree-id1009 . -1) (#(":" 0 1 (fontified t)) . -8096) (undo-tree-id1010 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -8097) (undo-tree-id1011 . -1) 8098 (t 25952 61701 894327 890000)) nil (25952 61725 982019 797000) 0 nil])
([nil nil ((8082 . 8088)) nil (25952 61725 982011 761000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8150) (undo-tree-id989 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8151) (undo-tree-id990 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8152) (undo-tree-id991 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8153) (undo-tree-id992 . -1) (#("." 0 1 (fontified t)) . -8154) (undo-tree-id993 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8155) (undo-tree-id994 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8156) (undo-tree-id995 . -1) 8157) nil (25952 61725 982010 398000) 0 nil])
([nil nil ((8150 . 8152)) nil (25952 61725 982008 83000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8151) (undo-tree-id988 . -1) 8152) nil (25952 61725 982007 732000) 0 nil])
([nil nil ((8151 . 8153)) nil (25952 61725 982006 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 8150 8156 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (8150 . 8156) (#("userId" 0 6 (fontified nil)) . 8150) (8150 . 8156) (#("use" 0 3 (fontified nil)) . 8150) (8150 . 8153) (#("userId" 0 6 (fontified nil)) . -8150) (8150 . 8156) (#("use" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -8150) (undo-tree-id986 . -3) (undo-tree-id987 . -3) 8153) nil (25952 61725 982005 778000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8173) (undo-tree-id976 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8174) (undo-tree-id977 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8175) (undo-tree-id978 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8176) (undo-tree-id979 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8177) (undo-tree-id980 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8178) (undo-tree-id981 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8179) (undo-tree-id982 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8180) (undo-tree-id983 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8181) (undo-tree-id984 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8182) (undo-tree-id985 . -1) 8183) nil (25952 61725 982003 33000) 0 nil])
([nil nil ((8173 . 8176)) nil (25952 61725 981856 269000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8286) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8287) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8288) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8289) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8290) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8291) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8292) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8293) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8294) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -8295) (undo-tree-id974 . -1) (undo-tree-id975 . -1) 8296) nil (25952 61725 981853 824000) 0 nil])
([nil nil ((8286 . 8289)) nil (25952 61725 981825 806000) 0 nil])
([nil nil ((#("	id, err := uuid.Parse(idstring)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Id\")
		return
	}
	eventStartTime, eserr := time.Parse(utils.BaseDateString, taskReqObj.EventStart)
	if eserr != nil {
		utils.RespondWithError(w, 400, \"Event start is not a valid date!\")
		return
	}
	eventEndTime, eeerr := time.Parse(utils.BaseDateString, taskReqObj.EventEnd)
	if eeerr != nil {
		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
		return
	}
	tagId, err := uuid.Parse(taskReqObj.TagID)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Tag ID\")
		return
	}
	updateTaskObj := database.UpdateTaskParams{
		ID:          id,
		UserID:      user.ID,
		Title:       taskReqObj.Title,
		EventStart:  eventStartTime,
		EventEnd:    eventEndTime,
		UpdatedAt:   time.Now(),
		Repetitions: taskReqObj.Repetitions,
		TagID:       tagId,
	}
" 0 1 (rear-nonsticky t fontified t) 1 3 (fontified t face tree-sitter-hl-face:variable) 3 5 (fontified t) 5 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 22 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 31 (fontified t face tree-sitter-hl-face:variable) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t) 33 34 (fontified t) 34 36 (fontified t face tree-sitter-hl-face:keyword) 36 37 (fontified t) 37 40 (fontified t face tree-sitter-hl-face:variable) 40 41 (fontified t) 41 43 (fontified t face tree-sitter-hl-face:operator) 43 44 (fontified t) 44 47 (fontified t face tree-sitter-hl-face:constant\.builtin) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 52 (fontified t) 52 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 74 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t face tree-sitter-hl-face:variable) 76 78 (fontified t) 78 81 (fontified t face tree-sitter-hl-face:number) 81 83 (fontified t) 83 95 (fontified t face tree-sitter-hl-face:string) 95 96 (fontified t face (rainbow-delimiters-depth-3-face)) 96 97 (fontified t) 97 99 (fontified t) 99 105 (fontified t face tree-sitter-hl-face:keyword) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t face (rainbow-delimiters-depth-2-face)) 108 109 (fontified t) 109 110 (fontified t) 110 112 (fontified t face tree-sitter-hl-face:variable) 112 114 (fontified t face tree-sitter-hl-face:variable) 114 115 (fontified t face tree-sitter-hl-face:variable) 115 116 (fontified t face tree-sitter-hl-face:variable) 116 124 (fontified t face tree-sitter-hl-face:variable) 124 126 (fontified t) 126 131 (fontified t face tree-sitter-hl-face:variable) 131 132 (fontified t) 132 134 (fontified t face tree-sitter-hl-face:operator) 134 135 (fontified t) 135 139 (fontified t face tree-sitter-hl-face:variable) 139 140 (fontified t) 140 145 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 145 146 (fontified t face (rainbow-delimiters-depth-2-face)) 146 151 (fontified t face tree-sitter-hl-face:variable) 151 152 (fontified t) 152 166 (fontified t face tree-sitter-hl-face:property) 166 168 (fontified t) 168 178 (fontified t face tree-sitter-hl-face:variable) 178 179 (fontified t) 179 189 (fontified t face tree-sitter-hl-face:property) 189 190 (fontified t face (rainbow-delimiters-depth-2-face)) 190 192 (fontified t) 192 194 (fontified t face tree-sitter-hl-face:keyword) 194 195 (fontified t) 195 200 (fontified t face tree-sitter-hl-face:variable) 200 201 (fontified t) 201 203 (fontified t face tree-sitter-hl-face:operator) 203 204 (fontified t) 204 207 (fontified t face tree-sitter-hl-face:constant\.builtin) 207 208 (fontified t) 208 209 (fontified t face (rainbow-delimiters-depth-2-face)) 209 212 (fontified t) 212 217 (fontified t face tree-sitter-hl-face:variable) 217 218 (fontified t) 218 231 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 231 234 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 234 235 (fontified t face (rainbow-delimiters-depth-3-face)) 235 236 (fontified t face tree-sitter-hl-face:variable) 236 238 (fontified t) 238 241 (fontified t face tree-sitter-hl-face:number) 241 243 (fontified t) 243 257 (fontified t face tree-sitter-hl-face:string) 257 258 (fontified t face tree-sitter-hl-face:string) 258 263 (fontified t face tree-sitter-hl-face:string) 263 270 (fontified t face tree-sitter-hl-face:string) 270 271 (fontified t face tree-sitter-hl-face:string) 271 273 (fontified t face tree-sitter-hl-face:string) 273 277 (fontified t face tree-sitter-hl-face:string) 277 278 (fontified t face (rainbow-delimiters-depth-3-face)) 278 279 (fontified t) 279 280 (fontified t) 280 281 (fontified t) 281 283 (fontified t face tree-sitter-hl-face:keyword) 283 287 (fontified t face tree-sitter-hl-face:keyword) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t face (rainbow-delimiters-depth-2-face)) 290 292 (fontified t) 292 304 (fontified t face tree-sitter-hl-face:variable) 304 306 (fontified t) 306 311 (fontified t face tree-sitter-hl-face:variable) 311 312 (fontified t) 312 314 (fontified t face tree-sitter-hl-face:operator) 314 315 (fontified t) 315 319 (fontified t face tree-sitter-hl-face:variable) 319 320 (fontified t) 320 325 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 325 326 (fontified t face (rainbow-delimiters-depth-2-face)) 326 331 (fontified t face tree-sitter-hl-face:variable) 331 332 (fontified t) 332 340 (fontified t face tree-sitter-hl-face:property) 340 346 (fontified t face tree-sitter-hl-face:property) 346 348 (fontified t) 348 358 (fontified t face tree-sitter-hl-face:variable) 358 359 (fontified t) 359 367 (fontified t face tree-sitter-hl-face:property) 367 368 (fontified t face (rainbow-delimiters-depth-2-face)) 368 370 (fontified t) 370 372 (fontified t face tree-sitter-hl-face:keyword) 372 373 (fontified t) 373 378 (fontified t face tree-sitter-hl-face:variable) 378 379 (fontified t) 379 381 (fontified t face tree-sitter-hl-face:operator) 381 382 (fontified t) 382 385 (fontified t face tree-sitter-hl-face:constant\.builtin) 385 386 (fontified t) 386 387 (fontified t face (rainbow-delimiters-depth-2-face)) 387 389 (fontified t) 389 390 (fontified t) 390 395 (fontified t face tree-sitter-hl-face:variable) 395 396 (fontified t) 396 412 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 412 413 (fontified t face (rainbow-delimiters-depth-3-face)) 413 414 (fontified t face tree-sitter-hl-face:variable) 414 416 (fontified t) 416 418 (fontified t face tree-sitter-hl-face:number) 418 419 (fontified t face tree-sitter-hl-face:number) 419 420 (fontified t) 420 421 (fontified t) 421 424 (fontified t face tree-sitter-hl-face:string) 424 427 (fontified t face tree-sitter-hl-face:string) 427 430 (fontified t face tree-sitter-hl-face:string) 430 453 (fontified t face tree-sitter-hl-face:string) 453 454 (fontified t face (rainbow-delimiters-depth-3-face)) 454 457 (fontified t) 457 463 (fontified t face tree-sitter-hl-face:keyword) 463 465 (fontified t) 465 466 (fontified t face (rainbow-delimiters-depth-2-face)) 466 467 (fontified t) 467 468 (fontified t) 468 473 (fontified t face tree-sitter-hl-face:variable) 473 475 (fontified t) 475 478 (fontified t face tree-sitter-hl-face:variable) 478 479 (fontified t) 479 481 (fontified t face tree-sitter-hl-face:operator) 481 482 (fontified t) 482 486 (fontified t face tree-sitter-hl-face:variable) 486 487 (fontified t) 487 492 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 492 493 (fontified t face (rainbow-delimiters-depth-2-face)) 493 503 (fontified t face tree-sitter-hl-face:variable) 503 504 (fontified t) 504 509 (fontified t face tree-sitter-hl-face:property) 509 510 (fontified t face (rainbow-delimiters-depth-2-face)) 510 512 (fontified t) 512 514 (fontified t face tree-sitter-hl-face:keyword) 514 515 (fontified t) 515 518 (fontified t face tree-sitter-hl-face:variable) 518 519 (fontified t) 519 521 (fontified t face tree-sitter-hl-face:operator) 521 522 (fontified t) 522 525 (fontified t face tree-sitter-hl-face:constant\.builtin) 525 526 (fontified t) 526 527 (fontified t face (rainbow-delimiters-depth-2-face)) 527 530 (fontified t) 530 535 (fontified t face tree-sitter-hl-face:variable) 535 536 (fontified t) 536 537 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 537 539 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 539 540 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 540 541 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 541 542 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 542 543 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 543 552 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 552 553 (fontified t face (rainbow-delimiters-depth-3-face)) 553 554 (fontified t face tree-sitter-hl-face:variable) 554 555 (fontified t) 555 556 (fontified t) 556 559 (fontified t face tree-sitter-hl-face:number) 559 561 (fontified t) 561 577 (fontified t face tree-sitter-hl-face:string) 577 578 (fontified t face (rainbow-delimiters-depth-3-face)) 578 581 (fontified t) 581 587 (fontified t face tree-sitter-hl-face:keyword) 587 589 (fontified t) 589 590 (fontified t face (rainbow-delimiters-depth-2-face)) 590 592 (fontified t) 592 595 (fontified t face tree-sitter-hl-face:variable) 595 600 (fontified t face tree-sitter-hl-face:variable) 600 601 (fontified t face tree-sitter-hl-face:variable) 601 602 (fontified t face tree-sitter-hl-face:variable) 602 605 (fontified t face tree-sitter-hl-face:variable) 605 606 (fontified t) 606 607 (fontified t face tree-sitter-hl-face:operator) 607 608 (fontified t face tree-sitter-hl-face:operator) 608 609 (fontified t) 609 618 (fontified t) 618 634 (fontified t face tree-sitter-hl-face:type) 634 635 (fontified t face (rainbow-delimiters-depth-2-face)) 635 636 (fontified t) 636 638 (fontified t) 638 640 (fontified t face tree-sitter-hl-face:variable) 640 641 (fontified t) 641 642 (fontified t) 642 643 (fontified t) 643 651 (fontified t) 651 653 (fontified t face tree-sitter-hl-face:variable) 653 655 (fontified t) 655 657 (fontified t) 657 663 (fontified t face tree-sitter-hl-face:variable) 663 664 (fontified t) 664 667 (fontified t) 667 668 (fontified t) 668 670 (fontified t) 670 674 (fontified t face tree-sitter-hl-face:variable) 674 675 (fontified t) 675 677 (fontified t face tree-sitter-hl-face:property) 677 681 (fontified t) 681 686 (fontified t face tree-sitter-hl-face:variable) 686 687 (fontified t) 687 691 (fontified t) 691 692 (fontified t) 692 694 (fontified t) 694 704 (fontified t face tree-sitter-hl-face:variable) 704 705 (fontified t) 705 710 (fontified t face tree-sitter-hl-face:property) 710 714 (fontified t) 714 724 (fontified t face tree-sitter-hl-face:variable) 724 725 (fontified t) 725 726 (fontified t) 726 727 (fontified t) 727 741 (fontified t face tree-sitter-hl-face:variable) 741 745 (fontified t) 745 753 (fontified t face tree-sitter-hl-face:variable) 753 754 (fontified t) 754 757 (fontified t) 757 758 (fontified t) 758 765 (fontified t face tree-sitter-hl-face:variable) 765 770 (fontified t face tree-sitter-hl-face:variable) 770 771 (fontified t) 771 774 (fontified t) 774 776 (fontified t face tree-sitter-hl-face:variable) 776 783 (fontified t face tree-sitter-hl-face:variable) 783 784 (fontified t) 784 785 (fontified t) 785 787 (fontified t) 787 791 (fontified t face tree-sitter-hl-face:variable) 791 792 (fontified t) 792 795 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 795 796 (fontified t face (rainbow-delimiters-depth-3-face)) 796 797 (fontified t face (rainbow-delimiters-depth-3-face)) 797 801 (fontified t) 801 812 (fontified t face tree-sitter-hl-face:variable) 812 814 (fontified t) 814 824 (fontified t face tree-sitter-hl-face:variable) 824 825 (fontified t) 825 836 (fontified t face tree-sitter-hl-face:property) 836 840 (fontified t) 840 842 (fontified t face tree-sitter-hl-face:variable) 842 845 (fontified t face tree-sitter-hl-face:variable) 845 846 (fontified t) 846 850 (fontified t) 850 851 (fontified t) 851 852 (fontified t) 852 853 (fontified t) 853 858 (fontified t face tree-sitter-hl-face:variable) 858 861 (fontified t) 861 862 (fontified t face (rainbow-delimiters-depth-2-face)) 862 863 (fontified t)) . 8657) (undo-tree-id1021 . -861) (undo-tree-id1022 . -861) (undo-tree-id1023 . -1) (undo-tree-id1024 . -862) (undo-tree-id1025 . -590) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -861) 8658 (t 25952 61726 14450 396000)) nil (25952 61815 342088 240000) 0 nil])
([nil nil ((8656 . 8658)) nil (25952 61815 342082 829000) 0 nil])
([nil nil ((8658 . 8662)) nil (25952 61815 342082 98000) 0 nil])
([nil nil ((apply yas--snippet-revive 8658 8668 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (8658 . 8668) (#("taskReqObj" 0 10 (fontified nil)) . 8658) (8658 . 8668) (#("task" 0 4 (fontified nil)) . 8658) (8658 . 8662) (#("taskReqObj" 0 10 (fontified nil)) . -8658) (8658 . 8668) (#("task" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -8658) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) 8662) nil (25952 61815 342081 276000) 0 nil])
([nil nil ((8668 . 8670)) nil (25952 61815 342079 633000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -8668) (undo-tree-id1017 . -1) (#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -8669) (undo-tree-id1018 . -1) 8670) nil (25952 61815 342078 932000) 0 nil])
([nil nil ((8668 . 8669)) nil (25952 61815 342077 339000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8682 8690 nil nil nil t #s(yas--field 2 8692 8699 nil nil nil t nil)) #s(yas--field 2 8692 8699 nil nil nil t nil)) nil 27 nil #s(yas--field 2 8692 8699 nil nil nil t nil) nil nil)) (8669 . 8716) (#("toUpdateTask(${1:idstring string}, ${2:userId uuid.UUID})" 0 57 (fontified nil)) . 8669) (8669 . 8726) (#("toUpdateTask" 0 12 (fontified nil)) . -8669) (8669 . 8681)) nil (25952 61815 342076 397000) 0 nil])
([nil nil ((8683 . 8685) (#("idstring string" 0 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 15 (fontified nil face tree-sitter-hl-face:variable)) . 8683) (8682 . 8683)) nil (25952 61815 342075 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 8682 8690 #s(yas--snippet nil nil nil 28 nil nil #s(yas--field 1 8682 8690 nil nil nil t #s(yas--field 2 8692 8699 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil #s(yas--field 1 8682 8690 nil nil nil t #s(yas--field 2 8692 8699 nil nil nil t nil)) nil)) (8682 . 8690) (#("idstring" 0 8 (fontified nil)) . 8682) (8682 . 8690) (#("ids" 0 3 (fontified nil)) . 8682) (8682 . 8685) (#("idstring" 0 8 (fontified nil)) . -8682) (8682 . 8690) (#("ids" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -8682) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) 8685) nil (25952 61815 342074 914000) 0 nil])
([nil nil ((8693 . 8697) (#("userId uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 8693) (8692 . 8693)) nil (25952 61815 342072 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 8697 8699 #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 2 8692 8699 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 2 8692 8699 nil nil nil t nil) nil)) (8697 . 8699) (#("ID" 0 2 (fontified nil)) . 8697) (8697 . 8699) (#("ID" 0 2 (fontified nil)) . -8697) (8697 . 8699)) nil (25952 61815 342072 78000) 0 nil])
([nil nil ((apply yas--snippet-revive 8669 8700 #s(yas--snippet nil (#s(yas--field 1 8682 8690 nil nil nil t #s(yas--field 2 8692 8699 nil nil nil t nil)) #s(yas--field 2 8692 8699 nil nil nil t nil)) nil 27 nil #s(yas--field 2 8692 8699 nil nil nil t nil) nil nil))) nil (25952 61815 342071 557000) 0 nil])
([nil nil ((8658 . 8664)) nil (25952 61815 342071 257000) 0 nil])
([nil nil ((8664 . 8675)) nil (25952 61815 342070 916000) 0 nil])
([nil nil ((8671 . 8676)) nil (25952 61815 342070 625000) 0 nil])
([nil nil ((8722 . 8724)) nil (25952 61815 342070 325000) 0 nil])
([nil nil ((8724 . 8737)) nil (25952 61815 342070 4000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -8738) (8738 . 8739) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -8738) (8738 . 8739) (8737 . 8739)) nil (25952 61815 342069 473000) 0 nil])
([nil nil ((8739 . 8741) (8740 . 8741) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 8739) (8739 . 8741) (8738 . 8740)) nil (25952 61815 342068 972000) 0 nil])
([nil nil ((8732 . 8733)) nil (25952 61815 342068 70000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8732) (undo-tree-id1014 . -1) 8733) nil (25952 61815 342067 179000) 0 nil])
([nil nil ((8733 . 8734)) nil (25952 61815 342065 976000) 0 nil])
([nil nil ((8742 . 8748)) nil (25952 61815 342065 345000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8765 8766 nil nil nil t #s(yas--field 2 8768 8771 nil nil nil t #s(yas--field 3 8773 8784 nil nil nil t nil))) #s(yas--field 2 8768 8771 nil nil nil t #s(yas--field 3 8773 8784 nil nil nil t nil)) #s(yas--field 3 8773 8784 nil nil nil t nil)) nil 30 nil #s(yas--field 3 8773 8784 nil nil nil t nil) nil nil)) (8748 . 8809) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 8748) (8748 . 8824) (#("RespondWithError" 0 16 (fontified nil)) . -8748) (8748 . 8764)) nil (25952 61815 342064 714000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 8766) (8765 . 8766)) nil (25952 61815 342064 72000) 0 nil])
([nil nil ((8769 . 8771) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 8769) (8768 . 8769)) nil (25952 61815 342063 602000) 0 nil])
([nil nil ((8773 . 8775) (#("\"" 0 1 (fontified nil)) . -8773) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 8774) (8773 . 8774)) nil (25952 61815 342062 860000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -8773) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 8774)) nil (25952 61815 342062 119000) 0 nil])
([nil nil ((8773 . 8777)) nil (25952 61815 342049 804000) 0 nil])
([nil nil ((apply yas--snippet-revive 8777 8784 #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 3 8773 8784 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 3 8773 8784 nil nil nil t nil) nil)) (8777 . 8784) (#("Error()" 0 7 (fontified nil)) . 8777) (8777 . 8784) (#("Error" 0 5 (fontified nil)) . -8777) (8777 . 8782)) nil (25952 61815 342048 863000) 0 nil])
([nil nil ((apply yas--snippet-revive 8748 8785 #s(yas--snippet nil (#s(yas--field 1 8765 8766 nil nil nil t #s(yas--field 2 8768 8771 nil nil nil t #s(yas--field 3 8773 8784 nil nil nil t nil))) #s(yas--field 2 8768 8771 nil nil nil t #s(yas--field 3 8773 8784 nil nil nil t nil)) #s(yas--field 3 8773 8784 nil nil nil t nil)) nil 30 nil #s(yas--field 3 8773 8784 nil nil nil t nil) nil nil))) nil (25952 61815 342043 181000) 0 nil])
([nil nil ((8965 . 8967) (t 25952 61815 374406 184000)) nil (25952 62083 753374 165000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -8973) (8973 . 8974) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -8973) (8973 . 8974) (8967 . 8974)) nil (25952 62083 753373 454000) 0 nil])
([nil nil ((8973 . 8982)) nil (25952 62083 753372 603000) 0 nil])
([nil nil ((apply yas--snippet-revive 8978 8993 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (8978 . 8993) (#("TaskRequestType" 0 15 (fontified nil)) . 8978) (8978 . 8993) (#("Task" 0 4 (fontified nil)) . 8978) (8978 . 8982) (#("TaskRequestType" 0 15 (fontified nil)) . -8978) (8978 . 8993) (#("Task" 0 4 (fontified t face tree-sitter-hl-face:type)) . -8978) (undo-tree-id1073 . -4) (undo-tree-id1074 . -4) 8982) nil (25952 62083 753371 200000) 0 nil])
([nil nil ((8994 . 8995)) nil (25952 62083 753285 158000) 0 nil])
([nil nil ((8995 . 9004)) nil (25952 62083 753284 687000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -9003) (undo-tree-id1072 . -1) 9004) nil (25952 62083 753284 487000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9008) (9008 . 9009) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -9008) (9008 . 9009) (9003 . 9009)) nil (25952 62083 753283 836000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -9011) (9011 . 9012) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -9011) (9011 . 9012) (9009 . 9012)) nil (25952 62083 753283 34000) 0 nil])
([nil nil ((9012 . 9013) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 9012) (9012 . 9013) (9011 . 9013)) nil (25952 62083 753282 73000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9012 . 9013) (#("
" 0 1 (fontified nil)) . -9817) (9011 . 9818) 8967) nil (25952 62083 753281 291000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9071) (undo-tree-id1061 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9072) (undo-tree-id1062 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9073) (undo-tree-id1063 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9074) (undo-tree-id1064 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9075) (undo-tree-id1065 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9076) (undo-tree-id1066 . 1) (undo-tree-id1067 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9077) (undo-tree-id1068 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9078) (undo-tree-id1069 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9079) (undo-tree-id1070 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9080) (undo-tree-id1071 . -1) 9081) nil (25952 62083 753279 428000) 0 nil])
([nil nil ((9071 . 9074)) nil (25952 62083 753274 398000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9244) (undo-tree-id1051 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9245) (undo-tree-id1052 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9246) (undo-tree-id1053 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9247) (undo-tree-id1054 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9248) (undo-tree-id1055 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9249) (undo-tree-id1056 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9250) (undo-tree-id1057 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9251) (undo-tree-id1058 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9252) (undo-tree-id1059 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9253) (undo-tree-id1060 . -1) 9254) nil (25952 62083 753272 34000) 0 nil])
([nil nil ((9244 . 9247)) nil (25952 62083 753266 844000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9382) (undo-tree-id1041 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9383) (undo-tree-id1042 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9384) (undo-tree-id1043 . -1) (#("k" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9385) (undo-tree-id1044 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9386) (undo-tree-id1045 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9387) (undo-tree-id1046 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9388) (undo-tree-id1047 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9389) (undo-tree-id1048 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9390) (undo-tree-id1049 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9391) (undo-tree-id1050 . -1) 9392) nil (25952 62083 753265 391000) 0 nil])
([nil nil ((9382 . 9385)) nil (25952 62083 753260 662000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 400, \"Invalid Tag ID\")
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face tree-sitter-hl-face:variable) 26 28 (fontified t) 28 31 (fontified t face tree-sitter-hl-face:number) 31 33 (fontified t) 33 49 (fontified t face tree-sitter-hl-face:string) 49 50 (fontified t face (rainbow-delimiters-depth-3-face)) 50 51 (fontified t)) . 9410) (undo-tree-id1038 . -50) (undo-tree-id1039 . 22) (undo-tree-id1040 . -28) 9438) nil (25952 62083 753259 741000) 0 nil])
([nil nil ((9008 . 9021)) nil (25952 62083 753257 657000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -9012) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) 9013) nil (25952 62083 753256 975000) 0 nil])
([nil nil ((9012 . 9013)) nil (25952 62083 753235 565000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 400, \"Event start is not a valid date!\")
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 17 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 17 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face tree-sitter-hl-face:variable) 26 28 (fontified t) 28 31 (fontified t face tree-sitter-hl-face:number) 31 33 (fontified t) 33 65 (fontified t face tree-sitter-hl-face:string) 65 67 (fontified t face tree-sitter-hl-face:string) 67 68 (fontified t face (rainbow-delimiters-depth-3-face)) 68 69 (fontified t)) . 9119) (undo-tree-id1196 . -68) (undo-tree-id1197 . -43) 9162 (t 25952 62083 782046 222000)) nil (25952 62157 596253 671000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face tree-sitter-hl-face:variable) 26 28 (fontified t) 28 31 (fontified t face tree-sitter-hl-face:number) 31 33 (fontified t) 33 65 (fontified t face tree-sitter-hl-face:string) 65 66 (fontified t face (rainbow-delimiters-depth-3-face)) 66 67 (fontified t)) . 9221) (undo-tree-id1194 . -66) (undo-tree-id1195 . -7) 9228) nil (25952 62157 596252 278000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9129) (9129 . 9130) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -9129) (9129 . 9130) (9127 . 9130)) nil (25952 62157 596250 485000) 0 nil])
([nil nil ((#(" ()" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face)) 2 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 9127) (undo-tree-id1188 . 1) (undo-tree-id1189 . -1) (undo-tree-id1190 . 2) (undo-tree-id1191 . -2) (undo-tree-id1192 . 1) (undo-tree-id1193 . -3) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 9129) (9129 . 9130) (#(")" 0 1 (fontified nil)) . 9129) (9129 . 9130)) nil (25952 62157 596249 864000) 0 nil])
([nil nil ((9221 . 9288)) nil (25952 62157 596246 788000) 0 nil])
([nil nil ((9119 . 9188)) nil (25952 62157 596246 638000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9131) (undo-tree-id1167 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9132) (undo-tree-id1168 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9133) (undo-tree-id1169 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9134) (undo-tree-id1170 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9135) (undo-tree-id1171 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9136) (undo-tree-id1172 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9137) (undo-tree-id1173 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9138) (undo-tree-id1174 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9139) (undo-tree-id1175 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9140) (undo-tree-id1176 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9141) (undo-tree-id1177 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9142) (undo-tree-id1178 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -9143) (undo-tree-id1179 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9144) (undo-tree-id1180 . -1) (#("," 0 1 (fontified t)) . -9145) (undo-tree-id1181 . -1) (#(" " 0 1 (fontified t)) . -9146) (undo-tree-id1182 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9147) (undo-tree-id1183 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9148) (undo-tree-id1184 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9149) (undo-tree-id1185 . -1) (#("," 0 1 (fontified t)) . -9150) (undo-tree-id1186 . -1) (#(" " 0 1 (fontified t)) . -9151) (undo-tree-id1187 . -1) 9152 (t 25952 62083 782046 222000)) nil (25952 62157 596243 532000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9121) (undo-tree-id1157 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9122) (undo-tree-id1158 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9123) (undo-tree-id1159 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9124) (undo-tree-id1160 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9125) (undo-tree-id1161 . -1) (#("." 0 1 (fontified t)) . -9126) (undo-tree-id1162 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9127) (undo-tree-id1163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9128) (undo-tree-id1164 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9129) (undo-tree-id1165 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9130) (undo-tree-id1166 . -1) 9131) nil (25952 62157 596233 854000) 0 nil])
([nil nil ((9121 . 9132)) nil (25952 62157 596229 766000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -9167) (undo-tree-id1148 . -1) (#("	" 0 1 (fontified t)) . -9168) (undo-tree-id1149 . -1) (#("	" 0 1 (fontified t)) . -9169) (undo-tree-id1150 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9170) (undo-tree-id1151 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9171) (undo-tree-id1152 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9172) (undo-tree-id1153 . -1) (#("u" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9173) (undo-tree-id1154 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9174) (undo-tree-id1155 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -9175) (undo-tree-id1156 . -1) 9176) nil (25952 62157 596228 384000) 0 nil])
([nil nil ((9166 . 9167)) nil (25952 62157 596223 815000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . 9166)) nil (25952 62157 596223 494000) 0 nil])
([nil nil (9166) nil (25952 62157 596223 344000) 0 nil])
([nil nil ((9121 . 9128)) nil (25952 62157 596223 184000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9024) (9024 . 9025) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -9024) (9024 . 9025) (9022 . 9025)) nil (25952 62157 596222 643000) 0 nil])
([nil nil ((9024 . 9033)) nil (25952 62157 596222 92000) 0 nil])
([nil nil ((apply yas--snippet-revive 9033 9046 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (9033 . 9046) (#("AddTaskParams" 0 13 (fontified nil)) . 9033) (9033 . 9046) (#("AddTaskParams" 0 13 (fontified nil)) . -9033) (9033 . 9046)) nil (25952 62157 596221 701000) 0 nil])
([nil nil ((9046 . 9053)) nil (25952 62157 596221 200000) 0 nil])
([nil nil ((9159 . 9165)) nil (25952 62157 596220 890000) 0 nil])
([nil nil ((apply yas--snippet-revive 9160 9184 #s(yas--snippet nil nil #s(yas--exit 9183 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9183 nil) 34 nil nil nil nil)) (9160 . 9184) (#("database.AddTaskParams{$0\\}" 0 27 (fontified nil)) . 9160) (9160 . 9187) (#("datab" 0 5 (fontified nil)) . 9160) (9160 . 9165) (#("database.AddTaskParams{}" 0 24 (fontified nil)) . -9160) (9160 . 9184) (#("datab" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -9160) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) 9165) nil (25952 62157 596220 268000) 0 nil])
([nil nil ((9183 . 9184)) nil (25952 62157 596219 267000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -9183) (undo-tree-id1145 . -1) 9184) nil (25952 62157 596218 916000) 0 nil])
([nil nil ((9184 . 9185)) nil (25952 62157 596217 984000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9338) (undo-tree-id1124 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9339) (undo-tree-id1125 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9340) (undo-tree-id1126 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9341) (undo-tree-id1127 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9342) (undo-tree-id1128 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9343) (undo-tree-id1129 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9344) (undo-tree-id1130 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9345) (undo-tree-id1131 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9346) (undo-tree-id1132 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9347) (undo-tree-id1133 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9348) (undo-tree-id1134 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9349) (undo-tree-id1135 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -9350) (undo-tree-id1136 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9351) (undo-tree-id1137 . -1) (#("," 0 1 (fontified t)) . -9352) (undo-tree-id1138 . -1) (#(" " 0 1 (fontified t)) . -9353) (undo-tree-id1139 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9354) (undo-tree-id1140 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9355) (undo-tree-id1141 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -9356) (undo-tree-id1142 . -1) (#("," 0 1 (fontified t)) . -9357) (undo-tree-id1143 . -1) (#(" " 0 1 (fontified t)) . -9358) (undo-tree-id1144 . -1) 9359) nil (25952 62157 596215 620000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -9327) (undo-tree-id1113 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9328) (undo-tree-id1114 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9329) (undo-tree-id1115 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9330) (undo-tree-id1116 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9331) (undo-tree-id1117 . -1) (#("s" 0 1 (fontified nil)) . -9332) (undo-tree-id1118 . -1) (#("." 0 1 (fontified nil)) . -9333) (undo-tree-id1119 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -9334) (undo-tree-id1120 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -9335) (undo-tree-id1121 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -9336) (undo-tree-id1122 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9337) (undo-tree-id1123 . -1) 9338) nil (25952 62157 596206 372000) 0 nil])
([nil nil ((9327 . 9333)) nil (25952 62157 596200 782000) 0 nil])
([nil nil ((9333 . 9334)) nil (25952 62157 596200 481000) 0 nil])
([nil nil ((9334 . 9336)) nil (25952 62157 596200 311000) 0 nil])
([nil nil ((9336 . 9340)) nil (25952 62157 596200 151000) 0 nil])
([nil nil ((#("		return
" 0 2 (fontified t) 2 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t)) . 9374) (undo-tree-id1110 . -8) (undo-tree-id1111 . 1) (undo-tree-id1112 . -7) 9381) nil (25952 62157 596199 770000) 0 nil])
([nil nil ((9329 . 9339)) nil (25952 62157 596198 87000) 0 nil])
([nil nil ((9339 . 9340)) nil (25952 62157 596197 947000) 0 nil])
([nil nil ((9339 . 9340)) nil (25952 62157 596197 766000) 0 nil])
([nil nil ((apply yas--snippet-revive 9336 9360 #s(yas--snippet nil nil #s(yas--exit 9359 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9359 nil) 35 nil nil nil nil)) (9336 . 9360) (#("database.AddTaskParams{$0\\}" 0 27 (fontified nil)) . 9336) (9336 . 9363) (#("data" 0 4 (fontified nil)) . 9336) (9336 . 9340) (#("database.AddTaskParams{}" 0 24 (fontified nil)) . -9336) (9336 . 9360) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -9336) (undo-tree-id1098 . -4) (undo-tree-id1099 . -4) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -4) (undo-tree-id1105 . -4) (undo-tree-id1106 . -4) (undo-tree-id1107 . -4) (undo-tree-id1108 . -4) (undo-tree-id1109 . -4) 9340) nil (25952 62157 596196 945000) 0 nil])
([nil nil ((9359 . 9361)) nil (25952 62157 596192 557000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -9359) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (#("," 0 1 (fontified t)) . -9360) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) 9361) nil (25952 62157 596191 515000) 0 nil])
([nil nil ((9360 . 9361)) nil (25952 62157 596166 398000) 0 nil])
([nil nil ((9472 . 9477) (t 25952 62157 630700 178000)) nil (25952 62180 797512 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 9473 9497 #s(yas--snippet nil nil #s(yas--exit 9496 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9496 nil) 36 nil nil nil nil)) (9473 . 9497) (#("database.AddTaskParams{$0\\}" 0 27 (fontified nil)) . 9473) (9473 . 9500) (#("data" 0 4 (fontified nil)) . 9473) (9473 . 9477) (#("database.AddTaskParams{}" 0 24 (fontified nil)) . -9473) (9473 . 9497) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -9473) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) 9477) nil (25952 62180 797511 56000) 0 nil])
([nil nil ((9497 . 9499)) nil (25952 62180 797497 270000) 0 nil])
([nil nil ((9499 . 9503)) nil (25952 62180 797496 950000) 0 nil])
([nil nil ((9503 . 9504)) nil (25952 62180 797496 599000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -9510) (9510 . 9511) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -9510) (9510 . 9511) (9504 . 9511)) nil (25952 62180 797495 567000) 0 nil])
([nil nil ((9511 . 9521) (9510 . 9512) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -9510) (9510 . 9511)) nil (25952 62180 797493 623000) 0 nil])
([nil nil ((9518 . 9522)) nil (25952 62180 797486 690000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -9641) (undo-tree-id1275 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -9642) (undo-tree-id1276 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -9643) (undo-tree-id1277 . -1) 9644 (t 25952 62180 896519 717000)) nil (25952 62209 912587 620000) 0 nil])
([nil nil ((9641 . 9643)) nil (25952 62209 912586 367000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9669) (undo-tree-id1274 . -1) 9670) nil (25952 62209 912586 167000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9660) (undo-tree-id1265 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9661) (undo-tree-id1266 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9662) (undo-tree-id1267 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9663) (undo-tree-id1268 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9664) (undo-tree-id1269 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9665) (undo-tree-id1270 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9666) (undo-tree-id1271 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9667) (undo-tree-id1272 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9668) (undo-tree-id1273 . -1) 9669) nil (25952 62209 912583 903000) 0 nil])
([nil nil ((9660 . 9663)) nil (25952 62209 912580 607000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9798) (undo-tree-id1255 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9799) (undo-tree-id1256 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9800) (undo-tree-id1257 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9801) (undo-tree-id1258 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9802) (undo-tree-id1259 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9803) (undo-tree-id1260 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9804) (undo-tree-id1261 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9805) (undo-tree-id1262 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9806) (undo-tree-id1263 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9807) (undo-tree-id1264 . -1) 9808) nil (25952 62209 912578 643000) 0 nil])
([nil nil ((9798 . 9801)) nil (25952 62209 912573 914000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9015) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9016) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9017) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9018) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9019) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -9020) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) 9021) nil (25952 62209 912572 531000) 0 nil])
([nil nil ((9015 . 9020)) nil (25952 62209 912563 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 9020 9024 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (9020 . 9024) (#("UUID" 0 4 (fontified nil)) . 9020) (9020 . 9024) (#("UUID" 0 4 (fontified nil)) . -9020) (9020 . 9024)) nil (25952 62209 912562 964000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9560) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9561) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9562) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#("T" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9563) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9564) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9565) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#("k" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -9566) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -9567) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (#("b" 0 1 (fontified t)) . -9568) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("j" 0 1 (fontified t)) . -9569) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (#(" " 0 1 (fontified t)) . -9570) (undo-tree-id1234 . -1) (#(":" 0 1 (fontified t)) . -9571) (undo-tree-id1235 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -9572) (undo-tree-id1236 . -1) 9573) nil (25952 62209 912560 930000) 0 nil])
([nil nil ((9560 . 9564)) nil (25952 62209 912534 190000) 0 nil])
([nil nil ((9564 . 9566)) nil (25952 62209 912528 699000) 0 nil])
([nil nil ((9330 . 9331) (#("  " 0 2 (fontified t)) . -9330) 9332 (#("	" 0 1 (fontified t)) . 9836) 9566 (t 25952 62209 942260 214000)) nil (25952 62222 241264 334000) 0 nil])
([nil nil ((9834 . 9839)) nil (25952 62222 241257 642000) 0 nil])
([nil nil ((8327 . 8332) (t 25952 62222 341146 720000)) nil (25952 62234 425768 631000) 0 nil])
([nil nil ((4867 . 4872) (t 25952 62234 459035 402000)) nil (25952 62312 141313 783000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4867) (undo-tree-id1286 . -1) 4868) nil (25952 62312 141312 691000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4867) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4868) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4869) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:constant\.builtin)) . -4870) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) 4871) nil (25952 62312 141310 617000) 0 nil])
([nil nil ((4864 . 4869)) nil (25952 62312 141287 684000) 0 nil])
([nil nil ((#("	eventStartTime, eserr := time.Parse(utils.BaseDateString, taskReqObj.EventStart)
	if eserr != nil {
		utils.RespondWithError(w, 400, \"Event start is not a valid date!\")
		return
	}
	eventEndTime, eeerr := time.Parse(utils.BaseDateString, taskReqObj.EventEnd)
	if eeerr != nil {
		utils.RespondWithError(w, 400, \"Event end is not a valid date!\")
		return
	}
	tagId, err := uuid.Parse(taskReqObj.TagID)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Tag ID\")
		return
	}
	timeStamp := time.Now()
	addTaskObj := database.AddTaskParams{
		ID:          uuid.New(),
		UserID:      user.ID,
		Title:       taskReqObj.Title,
		EventStart:  eventStartTime,
		EventEnd:    eventEndTime,
		UpdatedAt:   timeStamp,
		CreatedAt:   timeStamp,
		Repetitions: taskReqObj.Repetitions,
		TagID:       tagId,
	}
" 0 1 (fontified t) 1 15 (fontified t face tree-sitter-hl-face:variable) 15 17 (fontified t) 17 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 25 (fontified t face tree-sitter-hl-face:operator) 25 26 (fontified t) 26 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t face tree-sitter-hl-face:variable) 30 31 (fontified t) 31 36 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 42 (fontified t face tree-sitter-hl-face:variable) 42 43 (fontified t) 43 46 (fontified t face tree-sitter-hl-face:property) 46 47 (fontified t face tree-sitter-hl-face:property) 47 51 (fontified t face tree-sitter-hl-face:property) 51 52 (fontified t face tree-sitter-hl-face:property) 52 53 (fontified t face tree-sitter-hl-face:property) 53 57 (fontified t face tree-sitter-hl-face:property) 57 59 (fontified t) 59 63 (fontified t face tree-sitter-hl-face:variable) 63 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t face tree-sitter-hl-face:variable) 65 66 (fontified t face tree-sitter-hl-face:variable) 66 67 (fontified t face tree-sitter-hl-face:variable) 67 68 (fontified t face tree-sitter-hl-face:variable) 68 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 71 (fontified t face tree-sitter-hl-face:property) 71 72 (fontified t face tree-sitter-hl-face:property) 72 73 (fontified t face tree-sitter-hl-face:property) 73 74 (fontified t face tree-sitter-hl-face:property) 74 75 (fontified t face tree-sitter-hl-face:property) 75 76 (fontified t face tree-sitter-hl-face:property) 76 77 (fontified t face tree-sitter-hl-face:property) 77 79 (fontified t face tree-sitter-hl-face:property) 79 80 (fontified t face tree-sitter-hl-face:property) 80 81 (fontified t face (rainbow-delimiters-depth-2-face)) 81 83 (fontified t) 83 85 (fontified t face tree-sitter-hl-face:keyword) 85 86 (fontified t) 86 91 (fontified t face tree-sitter-hl-face:variable) 91 92 (fontified t) 92 94 (fontified t face tree-sitter-hl-face:operator) 94 95 (fontified t) 95 98 (fontified t face tree-sitter-hl-face:constant\.builtin) 98 99 (fontified t) 99 100 (fontified t face (rainbow-delimiters-depth-2-face)) 100 103 (fontified t) 103 108 (fontified t face tree-sitter-hl-face:variable) 108 109 (fontified t) 109 118 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 118 125 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 125 126 (fontified t face (rainbow-delimiters-depth-3-face)) 126 127 (fontified t face tree-sitter-hl-face:variable) 127 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:number) 132 134 (fontified t) 134 166 (fontified t face tree-sitter-hl-face:string) 166 168 (fontified t face tree-sitter-hl-face:string) 168 169 (fontified t face (rainbow-delimiters-depth-3-face)) 169 172 (fontified t) 172 178 (fontified t face tree-sitter-hl-face:keyword) 178 180 (fontified t) 180 181 (fontified t face (rainbow-delimiters-depth-2-face)) 181 183 (fontified t) 183 195 (fontified t face tree-sitter-hl-face:variable) 195 197 (fontified t) 197 202 (fontified t face tree-sitter-hl-face:variable) 202 203 (fontified t) 203 205 (fontified t face tree-sitter-hl-face:operator) 205 206 (fontified t) 206 210 (fontified t face tree-sitter-hl-face:variable) 210 211 (fontified t) 211 216 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 216 217 (fontified t face (rainbow-delimiters-depth-2-face)) 217 222 (fontified t face tree-sitter-hl-face:variable) 222 223 (fontified t) 223 233 (fontified t face tree-sitter-hl-face:property) 233 237 (fontified t face tree-sitter-hl-face:property) 237 239 (fontified t) 239 249 (fontified t face tree-sitter-hl-face:variable) 249 250 (fontified t) 250 258 (fontified t face tree-sitter-hl-face:property) 258 259 (fontified t face (rainbow-delimiters-depth-2-face)) 259 261 (fontified t) 261 263 (fontified t face tree-sitter-hl-face:keyword) 263 264 (fontified t) 264 269 (fontified t face tree-sitter-hl-face:variable) 269 270 (fontified t) 270 272 (fontified t face tree-sitter-hl-face:operator) 272 273 (fontified t) 273 276 (fontified t face tree-sitter-hl-face:constant\.builtin) 276 277 (fontified t) 277 278 (fontified t face (rainbow-delimiters-depth-2-face)) 278 281 (fontified t) 281 286 (fontified t face tree-sitter-hl-face:variable) 286 287 (fontified t) 287 303 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 303 304 (fontified t face (rainbow-delimiters-depth-3-face)) 304 305 (fontified t face tree-sitter-hl-face:variable) 305 307 (fontified t) 307 310 (fontified t face tree-sitter-hl-face:number) 310 312 (fontified t) 312 344 (fontified t face tree-sitter-hl-face:string) 344 345 (fontified t face (rainbow-delimiters-depth-3-face)) 345 348 (fontified t) 348 354 (fontified t face tree-sitter-hl-face:keyword) 354 356 (fontified t) 356 357 (fontified t face (rainbow-delimiters-depth-2-face)) 357 358 (fontified t) 358 359 (fontified t) 359 364 (fontified t face tree-sitter-hl-face:variable) 364 366 (fontified t) 366 369 (fontified t face tree-sitter-hl-face:variable) 369 370 (fontified t) 370 372 (fontified t face tree-sitter-hl-face:operator) 372 373 (fontified t) 373 377 (fontified t face tree-sitter-hl-face:variable) 377 378 (fontified t) 378 383 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 383 384 (fontified t face (rainbow-delimiters-depth-2-face)) 384 394 (fontified t face tree-sitter-hl-face:variable) 394 395 (fontified t) 395 400 (fontified t face tree-sitter-hl-face:property) 400 401 (fontified t face (rainbow-delimiters-depth-2-face)) 401 403 (fontified t) 403 405 (fontified t face tree-sitter-hl-face:keyword) 405 406 (fontified t) 406 409 (fontified t face tree-sitter-hl-face:variable) 409 410 (fontified t) 410 412 (fontified t face tree-sitter-hl-face:operator) 412 413 (fontified t) 413 416 (fontified t face tree-sitter-hl-face:constant\.builtin) 416 417 (fontified t) 417 418 (fontified t face (rainbow-delimiters-depth-2-face)) 418 421 (fontified t) 421 426 (fontified t face tree-sitter-hl-face:variable) 426 427 (fontified t) 427 443 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 443 444 (fontified t face (rainbow-delimiters-depth-3-face)) 444 445 (fontified t face tree-sitter-hl-face:variable) 445 447 (fontified t) 447 450 (fontified t face tree-sitter-hl-face:number) 450 452 (fontified t) 452 468 (fontified t face tree-sitter-hl-face:string) 468 469 (fontified t face (rainbow-delimiters-depth-3-face)) 469 472 (fontified t) 472 478 (fontified t face tree-sitter-hl-face:keyword) 478 480 (fontified t) 480 481 (fontified t face (rainbow-delimiters-depth-2-face)) 481 483 (fontified t) 483 492 (fontified t face tree-sitter-hl-face:variable) 492 493 (fontified t) 493 495 (fontified t face tree-sitter-hl-face:operator) 495 496 (fontified t) 496 500 (fontified t face tree-sitter-hl-face:variable) 500 501 (fontified t) 501 504 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 504 505 (fontified t face (rainbow-delimiters-depth-2-face)) 505 506 (fontified t face (rainbow-delimiters-depth-2-face)) 506 508 (fontified t) 508 518 (fontified t face tree-sitter-hl-face:variable) 518 519 (fontified t) 519 521 (fontified t face tree-sitter-hl-face:operator) 521 531 (fontified t) 531 544 (fontified t face tree-sitter-hl-face:type) 544 545 (fontified t face (rainbow-delimiters-depth-2-face)) 545 548 (fontified t) 548 550 (fontified t face tree-sitter-hl-face:variable) 550 551 (fontified t) 551 560 (fontified t) 560 561 (fontified t) 561 562 (fontified t face tree-sitter-hl-face:variable) 562 565 (fontified t face tree-sitter-hl-face:variable) 565 566 (fontified t) 566 567 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 567 568 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 568 569 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 569 570 (fontified t face (rainbow-delimiters-depth-3-face)) 570 571 (fontified t face (rainbow-delimiters-depth-3-face)) 571 572 (fontified t) 572 573 (fontified t) 573 575 (fontified t) 575 581 (fontified t face tree-sitter-hl-face:variable) 581 583 (fontified t) 583 588 (fontified t) 588 592 (fontified t face tree-sitter-hl-face:variable) 592 593 (fontified t) 593 595 (fontified t face tree-sitter-hl-face:property) 595 599 (fontified t) 599 604 (fontified t face tree-sitter-hl-face:variable) 604 605 (fontified t) 605 611 (fontified t) 611 612 (fontified t) 612 622 (fontified t face tree-sitter-hl-face:variable) 622 623 (fontified t) 623 628 (fontified t face tree-sitter-hl-face:property) 628 632 (fontified t) 632 642 (fontified t face tree-sitter-hl-face:variable) 642 644 (fontified t) 644 645 (fontified t) 645 659 (fontified t face tree-sitter-hl-face:variable) 659 663 (fontified t) 663 671 (fontified t face tree-sitter-hl-face:variable) 671 672 (fontified t) 672 674 (fontified t) 674 675 (fontified t) 675 676 (fontified t) 676 688 (fontified t face tree-sitter-hl-face:variable) 688 692 (fontified t) 692 701 (fontified t face tree-sitter-hl-face:variable) 701 702 (fontified t) 702 704 (fontified t) 704 705 (fontified t) 705 712 (fontified t face tree-sitter-hl-face:variable) 712 714 (fontified t face tree-sitter-hl-face:variable) 714 718 (fontified t) 718 727 (fontified t face tree-sitter-hl-face:variable) 727 728 (fontified t) 728 729 (fontified t) 729 731 (fontified t) 731 732 (fontified t face tree-sitter-hl-face:variable) 732 736 (fontified t face tree-sitter-hl-face:variable) 736 737 (fontified t face tree-sitter-hl-face:variable) 737 738 (fontified t face tree-sitter-hl-face:variable) 738 739 (fontified t face tree-sitter-hl-face:variable) 739 740 (fontified t face tree-sitter-hl-face:variable) 740 741 (fontified t) 741 742 (fontified t) 742 744 (fontified t) 744 755 (fontified t face tree-sitter-hl-face:variable) 755 757 (fontified t) 757 767 (fontified t face tree-sitter-hl-face:variable) 767 768 (fontified t) 768 779 (fontified t face tree-sitter-hl-face:property) 779 782 (fontified t) 782 783 (fontified t) 783 788 (fontified t face tree-sitter-hl-face:variable) 788 789 (fontified t) 789 793 (fontified t) 793 794 (fontified t) 794 796 (fontified t) 796 801 (fontified t face tree-sitter-hl-face:variable) 801 804 (fontified t) 804 805 (fontified t face (rainbow-delimiters-depth-2-face)) 805 806 (fontified t)) . 10144) (undo-tree-id1305 . -803) (undo-tree-id1306 . -803) (undo-tree-id1307 . -805) (undo-tree-id1308 . -803) (t 25952 62312 175267 861000)) nil (25952 62407 938198 536000) 0 nil])
([nil nil ((10143 . 10145)) nil (25952 62407 938196 362000) 0 nil])
([nil nil ((10145 . 10149)) nil (25952 62407 938196 212000) 0 nil])
([nil nil ((apply yas--snippet-revive 10145 10155 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (10145 . 10155) (#("taskReqObj" 0 10 (fontified nil)) . 10145) (10145 . 10155) (#("task" 0 4 (fontified nil)) . 10145) (10145 . 10149) (#("taskReqObj" 0 10 (fontified nil)) . -10145) (10145 . 10155) (#("task" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -10145) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) 10149) nil (25952 62407 938195 230000) 0 nil])
([nil nil ((10155 . 10156)) nil (25952 62407 938193 86000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 10169 10176 nil nil nil t nil)) nil 39 nil #s(yas--field 1 10169 10176 nil nil nil t nil) nil nil)) (10156 . 10186) (#("toCreateTask(${1:userId uuid.UUID})" 0 35 (fontified nil)) . 10156) (10156 . 10191) (#("toCreateTask" 0 12 (fontified nil)) . -10156) (10156 . 10168)) nil (25952 62407 938191 924000) 0 nil])
([nil nil ((10170 . 10173) (#("userId uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 10170) (10169 . 10170)) nil (25952 62407 938191 233000) 0 nil])
([nil nil ((10173 . 10174)) nil (25952 62407 938190 712000) 0 nil])
([nil nil ((10174 . 10175)) nil (25952 62407 938190 391000) 0 nil])
([nil nil ((10175 . 10176)) nil (25952 62407 938190 31000) 0 nil])
([nil nil ((apply yas--snippet-revive 10156 10177 #s(yas--snippet nil (#s(yas--field 1 10169 10176 nil nil nil t nil)) nil 39 nil #s(yas--field 1 10169 10176 nil nil nil t nil) nil nil))) nil (25952 62407 938189 730000) 0 nil])
([nil nil ((10145 . 10148)) nil (25952 62407 938189 409000) 0 nil])
([nil nil ((10148 . 10149)) nil (25952 62407 938189 119000) 0 nil])
([nil nil ((10149 . 10150)) nil (25952 62407 938188 808000) 0 nil])
([nil nil ((10150 . 10151)) nil (25952 62407 938188 668000) 0 nil])
([nil nil ((10151 . 10152)) nil (25952 62407 938188 528000) 0 nil])
([nil nil ((10152 . 10153)) nil (25952 62407 938188 217000) 0 nil])
([nil nil ((10153 . 10164)) nil (25952 62407 938188 77000) 0 nil])
([nil nil ((10196 . 10198)) nil (25952 62407 938187 937000) 0 nil])
([nil nil ((10198 . 10202)) nil (25952 62407 938187 776000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -10201) (undo-tree-id1302 . -1) 10202) nil (25952 62407 938187 215000) 0 nil])
([nil nil ((10201 . 10204)) nil (25952 62407 938186 364000) 0 nil])
([nil nil ((10204 . 10205)) nil (25952 62407 938186 173000) 0 nil])
([nil nil ((10205 . 10212)) nil (25952 62407 938185 993000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -10213) (10213 . 10214) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -10213) (10213 . 10214) (10212 . 10214)) nil (25952 62407 938185 642000) 0 nil])
([nil nil ((10214 . 10216) (10215 . 10216) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 10214) (10214 . 10216) (10213 . 10215)) nil (25952 62407 938185 131000) 0 nil])
([nil nil ((10216 . 10223)) nil (25952 62407 938184 630000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -10222) (undo-tree-id1301 . -1) 10223) nil (25952 62407 938184 89000) 0 nil])
([nil nil ((10215 . 10217) (#("		" 0 2 (fontified nil)) . 10214) (undo-tree-id1300 . -2) (10216 . 10217)) nil (25952 62407 938182 647000) 0 nil])
([nil nil ((10214 . 10216)) nil (25952 62407 938181 635000) 0 nil])
([nil nil ((10216 . 10222)) nil (25952 62407 938181 194000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 10239 10240 nil nil nil t #s(yas--field 2 10242 10245 nil nil nil t #s(yas--field 3 10247 10258 nil nil nil t nil))) #s(yas--field 2 10242 10245 nil nil nil t #s(yas--field 3 10247 10258 nil nil nil t nil)) #s(yas--field 3 10247 10258 nil nil nil t nil)) nil 40 nil #s(yas--field 3 10247 10258 nil nil nil t nil) nil nil)) (10222 . 10283) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 10222) (10222 . 10298) (#("RespondWithError" 0 16 (fontified nil)) . -10222) (10222 . 10238)) nil (25952 62407 938180 783000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 10240) (undo-tree-id1299 . -21) (10239 . 10240)) nil (25952 62407 938179 711000) 0 nil])
([nil nil ((10243 . 10245) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 10243) (undo-tree-id1298 . -8) (10242 . 10243)) nil (25952 62407 938178 529000) 0 nil])
([nil nil ((10247 . 10249) (#("\"" 0 1 (fontified nil)) . -10247) (undo-tree-id1296 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 10248) (undo-tree-id1297 . -10) (10247 . 10248)) nil (25952 62407 938177 76000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -10247) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 10248) (undo-tree-id1295 . -1)) nil (25952 62407 938175 193000) 0 nil])
([nil nil ((10247 . 10251)) nil (25952 62407 938170 634000) 0 nil])
([nil nil ((apply yas--snippet-revive 10251 10258 #s(yas--snippet nil nil nil 41 nil nil #s(yas--field 3 10247 10258 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil #s(yas--field 3 10247 10258 nil nil nil t nil) nil)) (10251 . 10258) (#("Error()" 0 7 (fontified nil)) . 10251) (undo-tree-id1287 . -7) (10251 . 10258) (#("Error" 0 5 (fontified nil)) . -10251) (undo-tree-id1288 . -5) (10251 . 10256)) nil (25952 62407 938169 632000) 0 nil])
([nil nil ((apply yas--snippet-revive 10222 10259 #s(yas--snippet nil (#s(yas--field 1 10239 10240 nil nil nil t #s(yas--field 2 10242 10245 nil nil nil t #s(yas--field 3 10247 10258 nil nil nil t nil))) #s(yas--field 2 10242 10245 nil nil nil t #s(yas--field 3 10247 10258 nil nil nil t nil)) #s(yas--field 3 10247 10258 nil nil nil t nil)) nil 40 nil #s(yas--field 3 10247 10258 nil nil nil t nil) nil nil))) nil (25952 62407 938154 304000) 0 nil])
([nil nil ((11434 . 11436) (t 25952 62407 971220 881000)) nil (25952 63198 1853 266000) 0 nil])
([nil nil ((11436 . 11441)) nil (25952 63198 1852 525000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11440) (undo-tree-id1396 . -1) 11441) nil (25952 63198 1851 603000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11442) (11442 . 11443) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11442) (11442 . 11443) (11440 . 11443)) nil (25952 63198 1850 411000) 0 nil])
([nil nil ((11442 . 11451)) nil (25952 63198 1849 249000) 0 nil])
([nil nil ((apply yas--snippet-revive 11447 11467 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (11447 . 11467) (#("DailyTaskRequestType" 0 20 (fontified nil)) . 11447) (11447 . 11467) (#("Dail" 0 4 (fontified nil)) . 11447) (11447 . 11451) (#("DailyTaskRequestType" 0 20 (fontified nil)) . -11447) (11447 . 11467) (#("Dail" 0 4 (fontified t face tree-sitter-hl-face:type)) . -11447) (undo-tree-id1394 . -4) (undo-tree-id1395 . -4) 11451) nil (25952 63198 1848 367000) 0 nil])
([nil nil ((11468 . 11469)) nil (25952 63198 1846 754000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11487) (11487 . 11488) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11487) (11487 . 11488) (11469 . 11488)) nil (25952 63198 1846 373000) 0 nil])
([nil nil ((11488 . 11491)) nil (25952 63198 1846 53000) 0 nil])
([nil nil ((11491 . 11492) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 11491) (11491 . 11492) (11490 . 11492)) nil (25952 63198 1845 301000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11491 . 11492) (#("
" 0 1 (fontified nil)) . -12068) (11490 . 12069) 11436) nil (25952 63198 1844 460000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11549) (undo-tree-id1379 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11550) (undo-tree-id1380 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11551) (undo-tree-id1381 . -1) (#("l" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11552) (undo-tree-id1382 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11553) (undo-tree-id1383 . -1) (#("T" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11554) (undo-tree-id1384 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11555) (undo-tree-id1385 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11556) (undo-tree-id1386 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11557) (undo-tree-id1387 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11558) (undo-tree-id1388 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11559) (undo-tree-id1389 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11560) (undo-tree-id1390 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11561) (undo-tree-id1391 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11562) (undo-tree-id1392 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11563) (undo-tree-id1393 . -1) 11564) nil (25952 63198 1842 45000) 0 nil])
([nil nil ((11549 . 11552)) nil (25952 63198 1831 225000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11689) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11690) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11691) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11692) (undo-tree-id1367 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11693) (undo-tree-id1368 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11694) (undo-tree-id1369 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11695) (undo-tree-id1370 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11696) (undo-tree-id1371 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11697) (undo-tree-id1372 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11698) (undo-tree-id1373 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11699) (undo-tree-id1374 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11700) (undo-tree-id1375 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11701) (undo-tree-id1376 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11702) (undo-tree-id1377 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11703) (undo-tree-id1378 . -1) 11704) nil (25952 63198 1827 919000) 0 nil])
([nil nil ((11689 . 11692)) nil (25952 63198 1819 323000) 0 nil])
([nil nil ((#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11595) (undo-tree-id1340 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11596) (undo-tree-id1341 . -1) (#("d" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11597) (undo-tree-id1342 . -1) (#("W" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -11598) (undo-tree-id1343 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11599) (undo-tree-id1344 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11600) (undo-tree-id1345 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11601) (undo-tree-id1346 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11602) (undo-tree-id1347 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11603) (undo-tree-id1348 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11604) (undo-tree-id1349 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11605) (undo-tree-id1350 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11606) (undo-tree-id1351 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11607) (undo-tree-id1352 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11608) (undo-tree-id1353 . -1) (#("," 0 1 (fontified t)) . -11609) (undo-tree-id1354 . -1) (#(" " 0 1 (fontified t)) . -11610) (undo-tree-id1355 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11611) (undo-tree-id1356 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11612) (undo-tree-id1357 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11613) (undo-tree-id1358 . -1) (#("," 0 1 (fontified t)) . -11614) (undo-tree-id1359 . -1) (#(" " 0 1 (fontified t)) . -11615) (undo-tree-id1360 . -1) 11616) nil (25952 63198 1816 337000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11585) (undo-tree-id1330 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11586) (undo-tree-id1331 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11587) (undo-tree-id1332 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11588) (undo-tree-id1333 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11589) (undo-tree-id1334 . -1) (#("." 0 1 (fontified t)) . -11590) (undo-tree-id1335 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11591) (undo-tree-id1336 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11592) (undo-tree-id1337 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11593) (undo-tree-id1338 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11594) (undo-tree-id1339 . -1) 11595) nil (25952 63198 1804 105000) 0 nil])
([nil nil ((11585 . 11596)) nil (25952 63198 1798 975000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -11632) (undo-tree-id1323 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11633) (undo-tree-id1324 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11634) (undo-tree-id1325 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11635) (undo-tree-id1326 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11636) (undo-tree-id1327 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11637) (undo-tree-id1328 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -11638) (undo-tree-id1329 . -1) 11639) nil (25952 63198 1797 683000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -11630) (undo-tree-id1321 . -1) (#("	" 0 1 (fontified t)) . -11631) (undo-tree-id1322 . -1) 11632) nil (25952 63198 1794 697000) 0 nil])
([nil nil (11629) nil (25952 63198 1793 334000) 0 nil])
([nil nil ((11585 . 11591)) nil (25952 63198 1793 44000) 0 nil])
([nil nil ((11589 . 11590)) nil (25952 63198 1792 733000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11490) (11490 . 11491) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11490) (11490 . 11491) (11488 . 11491)) nil (25952 63198 1792 202000) 0 nil])
([nil nil ((11490 . 11494)) nil (25952 63198 1791 661000) 0 nil])
([nil nil ((11494 . 11505)) nil (25952 63198 1791 291000) 0 nil])
([nil nil ((apply yas--snippet-revive 11499 11520 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (11499 . 11520) (#("UpdateDailyTaskParams" 0 21 (fontified nil)) . 11499) (11499 . 11520) (#("Update" 0 6 (fontified nil)) . 11499) (11499 . 11505) (#("UpdateDailyTaskParams" 0 21 (fontified nil)) . -11499) (11499 . 11520) (#("Update" 0 6 (fontified t face tree-sitter-hl-face:type)) . -11499) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) 11505) nil (25952 63198 1790 559000) 0 nil])
([nil nil ((11520 . 11527)) nil (25952 63198 1788 315000) 0 nil])
([nil nil ((11631 . 11635)) nil (25952 63198 1788 115000) 0 nil])
([nil nil ((apply yas--snippet-revive 11632 11664 #s(yas--snippet nil nil #s(yas--exit 11663 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11663 nil) 44 nil nil nil nil)) (11632 . 11664) (#("database.UpdateDailyTaskParams{$0\\}" 0 35 (fontified nil)) . 11632) (11632 . 11667) (#("dat" 0 3 (fontified nil)) . 11632) (11632 . 11635) (#("database.UpdateDailyTaskParams{}" 0 32 (fontified nil)) . -11632) (11632 . 11664) (#("dat" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -11632) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -1) (undo-tree-id1312 . -2) (undo-tree-id1313 . -3) (undo-tree-id1314 . -3) (undo-tree-id1315 . -3) (undo-tree-id1316 . -3) (undo-tree-id1317 . -3) (undo-tree-id1318 . -3) 11635) nil (25952 63198 1786 642000) 0 nil])
([nil nil ((11664 . 11665)) nil (25952 63198 1765 853000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11781) (undo-tree-id1428 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11782) (undo-tree-id1429 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11783) (undo-tree-id1430 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11784) (undo-tree-id1431 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11785) (undo-tree-id1432 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11786) (undo-tree-id1433 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11787) (undo-tree-id1434 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11788) (undo-tree-id1435 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11789) (undo-tree-id1436 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11790) (undo-tree-id1437 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11791) (undo-tree-id1438 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11792) (undo-tree-id1439 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11793) (undo-tree-id1440 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11794) (undo-tree-id1441 . -1) (#("," 0 1 (fontified t)) . -11795) (undo-tree-id1442 . -1) (#(" " 0 1 (fontified t)) . -11796) (undo-tree-id1443 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11797) (undo-tree-id1444 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11798) (undo-tree-id1445 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -11799) (undo-tree-id1446 . -1) (#("," 0 1 (fontified t)) . -11800) (undo-tree-id1447 . -1) (#(" " 0 1 (fontified t)) . -11801) (undo-tree-id1448 . -1) 11802 (t 25952 63198 129040 60000)) nil (25952 63233 49136 882000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11771) (undo-tree-id1418 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11772) (undo-tree-id1419 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11773) (undo-tree-id1420 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11774) (undo-tree-id1421 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11775) (undo-tree-id1422 . -1) (#("." 0 1 (fontified t)) . -11776) (undo-tree-id1423 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11777) (undo-tree-id1424 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11778) (undo-tree-id1425 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11779) (undo-tree-id1426 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -11780) (undo-tree-id1427 . -1) 11781) nil (25952 63233 48633 914000) 0 nil])
([nil nil ((11771 . 11775)) nil (25952 63233 48629 325000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -11774) (undo-tree-id1417 . -1) 11775) nil (25952 63233 48628 624000) 0 nil])
([nil nil ((11774 . 11782)) nil (25952 63233 48627 392000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -11799) (undo-tree-id1408 . -1) (#("	" 0 1 (fontified t)) . -11800) (undo-tree-id1409 . -1) (#("	" 0 1 (fontified t)) . -11801) (undo-tree-id1410 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11802) (undo-tree-id1411 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11803) (undo-tree-id1412 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11804) (undo-tree-id1413 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11805) (undo-tree-id1414 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11806) (undo-tree-id1415 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -11807) (undo-tree-id1416 . -1) 11808) nil (25952 63233 48625 699000) 0 nil])
([nil nil (11798) nil (25952 63233 48620 439000) 0 nil])
([nil nil ((11771 . 11779)) nil (25952 63233 48619 337000) 0 nil])
([nil nil ((11778 . 11782)) nil (25952 63233 48618 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 11778 11810 #s(yas--snippet nil nil #s(yas--exit 11809 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11809 nil) 45 nil nil nil nil)) (11778 . 11810) (#("database.UpdateDailyTaskParams{$0\\}" 0 35 (fontified nil)) . 11778) (11778 . 11813) (#("data" 0 4 (fontified nil)) . 11778) (11778 . 11782) (#("database.UpdateDailyTaskParams{}" 0 32 (fontified nil)) . -11778) (11778 . 11810) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -11778) (undo-tree-id1397 . -4) (undo-tree-id1398 . -4) (undo-tree-id1399 . -1) (undo-tree-id1400 . -2) (undo-tree-id1401 . -3) (undo-tree-id1402 . -4) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4) (undo-tree-id1405 . -4) (undo-tree-id1406 . -4) (undo-tree-id1407 . -4) 11782) nil (25952 63233 48616 972000) 0 nil])
([nil nil ((11810 . 11811)) nil (25952 63233 48591 24000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11967) (undo-tree-id1490 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11968) (undo-tree-id1491 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11969) (undo-tree-id1492 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11970) (undo-tree-id1493 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11971) (undo-tree-id1494 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11972) (undo-tree-id1495 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11973) (undo-tree-id1496 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11974) (undo-tree-id1497 . -1) 11975 (t 25952 63233 175568 336000)) nil (25952 63264 323084 908000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11960) (undo-tree-id1483 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11961) (undo-tree-id1484 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11962) (undo-tree-id1485 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11963) (undo-tree-id1486 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11964) (undo-tree-id1487 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11965) (undo-tree-id1488 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11966) (undo-tree-id1489 . -1) 11967) nil (25952 63264 323077 694000) 0 nil])
([nil nil ((11960 . 11963)) nil (25952 63264 323073 847000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12043) (undo-tree-id1468 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12044) (undo-tree-id1469 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12045) (undo-tree-id1470 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12046) (undo-tree-id1471 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12047) (undo-tree-id1472 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12048) (undo-tree-id1473 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12049) (undo-tree-id1474 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12050) (undo-tree-id1475 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12051) (undo-tree-id1476 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12052) (undo-tree-id1477 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12053) (undo-tree-id1478 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12054) (undo-tree-id1479 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12055) (undo-tree-id1480 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12056) (undo-tree-id1481 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12057) (undo-tree-id1482 . -1) 12058) nil (25952 63264 323070 461000) 0 nil])
([nil nil ((12043 . 12046)) nil (25952 63264 323060 933000) 0 nil])
([nil nil ((11487 . 11499)) nil (25952 63264 323060 643000) 0 nil])
([nil nil ((apply yas--snippet-revive 11499 11503 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (11499 . 11503) (#("UUID" 0 4 (fontified nil)) . 11499) (11499 . 11503) (#("UUID" 0 4 (fontified nil)) . -11499) (11499 . 11503)) nil (25952 63264 323059 801000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -11956) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) 11957) nil (25952 63264 323058 98000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11957) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) 11958) nil (25952 63264 322810 456000) 0 nil])
([nil nil ((11957 . 11958)) nil (25952 63264 322787 252000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11861) (undo-tree-id1502 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11862) (undo-tree-id1503 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11863) (undo-tree-id1504 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11864) (undo-tree-id1505 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11865) (undo-tree-id1506 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11866) (undo-tree-id1507 . -1) (#("T" 0 1 (fontified nil)) . -11867) (undo-tree-id1508 . -1) (#("a" 0 1 (fontified nil)) . -11868) (undo-tree-id1509 . -1) (#("s" 0 1 (fontified nil)) . -11869) (undo-tree-id1510 . -1) (#("k" 0 1 (fontified nil)) . -11870) (undo-tree-id1511 . -1) (#("O" 0 1 (fontified t)) . -11871) (undo-tree-id1512 . -1) (#("b" 0 1 (fontified t)) . -11872) (undo-tree-id1513 . -1) (#("j" 0 1 (fontified t)) . -11873) (undo-tree-id1514 . -1) (#(" " 0 1 (fontified t)) . -11874) (undo-tree-id1515 . -1) (#(":" 0 1 (fontified t)) . -11875) (undo-tree-id1516 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -11876) (undo-tree-id1517 . -1) 11877 (t 25952 63264 357148 284000)) nil (25952 63274 865638 178000) 0 nil])
([nil nil ((11861 . 11867)) nil (25952 63274 865558 449000) 0 nil])
([nil nil ((12089 . 12094)) nil (25952 63274 865557 858000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -12094) (undo-tree-id1498 . -1) (undo-tree-id1499 . 1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) 12095) nil (25952 63274 865554 151000) 0 nil])
([nil nil ((#("	dateStartTime, eserr := time.Parse(utils.BaseDateString, dailyTaskReqObj.DateStart)
	if eserr != nil {
		utils.RespondWithError(w, 400, \"Date start is not a valid date!\")
		return
	}
	tagId, err := uuid.Parse(dailyTaskReqObj.TagID)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Tag ID\")
		return
	}
	updateTaskObj := database.UpdateDailyTaskParams{
		ID:          uuid.New(),
		UserID:      user.ID,
		Title:       dailyTaskReqObj.Title,
		DateStart:   dateStartTime,
		UpdatedAt:   time.Now(),
		Repetitions: dailyTaskReqObj.Repetitions,
		TagID:       tagId,
	}
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t face tree-sitter-hl-face:variable) 7 14 (fontified t face tree-sitter-hl-face:variable) 14 16 (fontified t) 16 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 24 (fontified t face tree-sitter-hl-face:operator) 24 25 (fontified t) 25 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 35 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 41 (fontified t face tree-sitter-hl-face:variable) 41 42 (fontified t) 42 56 (fontified t face tree-sitter-hl-face:property) 56 58 (fontified t) 58 64 (fontified t face tree-sitter-hl-face:variable) 64 70 (fontified t face tree-sitter-hl-face:variable) 70 73 (fontified t face tree-sitter-hl-face:variable) 73 74 (fontified t) 74 83 (fontified t face tree-sitter-hl-face:property) 83 84 (fontified t face (rainbow-delimiters-depth-2-face)) 84 85 (fontified t) 85 86 (fontified t) 86 88 (fontified t face tree-sitter-hl-face:keyword) 88 89 (fontified t) 89 94 (fontified t face tree-sitter-hl-face:variable) 94 95 (fontified t) 95 97 (fontified t face tree-sitter-hl-face:operator) 97 98 (fontified t) 98 101 (fontified t face tree-sitter-hl-face:constant\.builtin) 101 102 (fontified t) 102 103 (fontified t face (rainbow-delimiters-depth-2-face)) 103 104 (fontified t) 104 106 (fontified t) 106 111 (fontified t face tree-sitter-hl-face:variable) 111 112 (fontified t) 112 128 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t face tree-sitter-hl-face:variable) 130 132 (fontified t) 132 135 (fontified t face tree-sitter-hl-face:number) 135 137 (fontified t) 137 170 (fontified t face tree-sitter-hl-face:string) 170 171 (fontified t face (rainbow-delimiters-depth-3-face)) 171 172 (fontified t) 172 174 (fontified t) 174 180 (fontified t face tree-sitter-hl-face:keyword) 180 182 (fontified t) 182 183 (fontified t face (rainbow-delimiters-depth-2-face)) 183 184 (fontified t) 184 185 (fontified t) 185 190 (fontified t face tree-sitter-hl-face:variable) 190 192 (fontified t) 192 195 (fontified t face tree-sitter-hl-face:variable) 195 196 (fontified t) 196 198 (fontified t face tree-sitter-hl-face:operator) 198 199 (fontified t) 199 203 (fontified t face tree-sitter-hl-face:variable) 203 204 (fontified t) 204 209 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 209 210 (fontified t face (rainbow-delimiters-depth-2-face)) 210 216 (fontified t face tree-sitter-hl-face:variable) 216 225 (fontified t face tree-sitter-hl-face:variable) 225 226 (fontified t) 226 231 (fontified t face tree-sitter-hl-face:property) 231 232 (fontified t face (rainbow-delimiters-depth-2-face)) 232 233 (fontified t) 233 234 (fontified t) 234 236 (fontified t face tree-sitter-hl-face:keyword) 236 237 (fontified t) 237 240 (fontified t face tree-sitter-hl-face:variable) 240 241 (fontified t) 241 243 (fontified t face tree-sitter-hl-face:operator) 243 244 (fontified t) 244 247 (fontified t face tree-sitter-hl-face:constant\.builtin) 247 248 (fontified t) 248 249 (fontified t face (rainbow-delimiters-depth-2-face)) 249 252 (fontified t) 252 257 (fontified t face tree-sitter-hl-face:variable) 257 258 (fontified t) 258 274 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 274 275 (fontified t face (rainbow-delimiters-depth-3-face)) 275 276 (fontified t face tree-sitter-hl-face:variable) 276 278 (fontified t) 278 281 (fontified t face tree-sitter-hl-face:number) 281 283 (fontified t) 283 299 (fontified t face tree-sitter-hl-face:string) 299 300 (fontified t face (rainbow-delimiters-depth-3-face)) 300 303 (fontified t) 303 309 (fontified t face tree-sitter-hl-face:keyword) 309 311 (fontified t) 311 312 (fontified t face (rainbow-delimiters-depth-2-face)) 312 313 (fontified t) 313 314 (fontified t) 314 327 (fontified t face tree-sitter-hl-face:variable) 327 328 (fontified t) 328 330 (fontified t face tree-sitter-hl-face:operator) 330 340 (fontified t) 340 361 (fontified t face tree-sitter-hl-face:type) 361 362 (fontified t face (rainbow-delimiters-depth-2-face)) 362 363 (fontified t) 363 365 (fontified t) 365 367 (fontified t face tree-sitter-hl-face:variable) 367 368 (fontified t) 368 373 (fontified t) 373 374 (fontified t) 374 378 (fontified t) 378 382 (fontified t face tree-sitter-hl-face:variable) 382 383 (fontified t) 383 386 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 386 387 (fontified t face (rainbow-delimiters-depth-3-face)) 387 388 (fontified t face (rainbow-delimiters-depth-3-face)) 388 392 (fontified t) 392 398 (fontified t face tree-sitter-hl-face:variable) 398 399 (fontified t) 399 400 (fontified t) 400 401 (fontified t) 401 405 (fontified t) 405 409 (fontified t face tree-sitter-hl-face:variable) 409 410 (fontified t) 410 412 (fontified t face tree-sitter-hl-face:property) 412 416 (fontified t) 416 421 (fontified t face tree-sitter-hl-face:variable) 421 422 (fontified t) 422 424 (fontified t) 424 425 (fontified t) 425 428 (fontified t) 428 429 (fontified t) 429 435 (fontified t face tree-sitter-hl-face:variable) 435 444 (fontified t face tree-sitter-hl-face:variable) 444 445 (fontified t) 445 450 (fontified t face tree-sitter-hl-face:property) 450 452 (fontified t) 452 454 (fontified t) 454 458 (fontified t face tree-sitter-hl-face:variable) 458 463 (fontified t face tree-sitter-hl-face:variable) 463 464 (fontified t) 464 466 (fontified t) 466 467 (fontified t) 467 469 (fontified t face tree-sitter-hl-face:variable) 469 470 (fontified t face tree-sitter-hl-face:variable) 470 471 (fontified t face tree-sitter-hl-face:variable) 471 480 (fontified t face tree-sitter-hl-face:variable) 480 482 (fontified t) 482 484 (fontified t) 484 493 (fontified t face tree-sitter-hl-face:variable) 493 495 (fontified t) 495 497 (fontified t) 497 501 (fontified t face tree-sitter-hl-face:variable) 501 502 (fontified t) 502 505 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 505 506 (fontified t face (rainbow-delimiters-depth-3-face)) 506 507 (fontified t face (rainbow-delimiters-depth-3-face)) 507 508 (fontified t) 508 509 (fontified t) 509 511 (fontified t) 511 518 (fontified t face tree-sitter-hl-face:variable) 518 522 (fontified t face tree-sitter-hl-face:variable) 522 524 (fontified t) 524 530 (fontified t face tree-sitter-hl-face:variable) 530 539 (fontified t face tree-sitter-hl-face:variable) 539 540 (fontified t) 540 551 (fontified t face tree-sitter-hl-face:property) 551 555 (fontified t) 555 560 (fontified t face tree-sitter-hl-face:variable) 560 561 (fontified t) 561 565 (fontified t) 565 566 (fontified t) 566 568 (fontified t) 568 573 (fontified t face tree-sitter-hl-face:variable) 573 576 (fontified t) 576 577 (fontified t face (rainbow-delimiters-depth-2-face)) 577 578 (fontified t)) . 12410) (undo-tree-id1526 . -576) (undo-tree-id1527 . -576) (undo-tree-id1528 . -1) (undo-tree-id1529 . -577) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -576) 12411 (t 25952 63274 900006 192000)) nil (25952 63387 367521 529000) 0 nil])
([nil nil ((12409 . 12411)) nil (25952 63387 367518 323000) 0 nil])
([nil nil ((12411 . 12419)) nil (25952 63387 367518 163000) 0 nil])
([nil nil ((12419 . 12425)) nil (25952 63387 367517 993000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12424) (undo-tree-id1525 . -1) 12425) nil (25952 63387 367517 762000) 0 nil])
([nil nil ((12424 . 12433)) nil (25952 63387 367517 331000) 0 nil])
([nil nil ((12433 . 12437)) nil (25952 63387 367517 181000) 0 nil])
([nil nil ((apply yas--snippet-revive 12433 12448 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (12433 . 12448) (#("dailyTaskReqObj" 0 15 (fontified nil)) . 12433) (12433 . 12448) (#("dail" 0 4 (fontified nil)) . 12433) (12433 . 12437) (#("dailyTaskReqObj" 0 15 (fontified nil)) . -12433) (12433 . 12448) (#("dail" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -12433) (undo-tree-id1523 . -4) (undo-tree-id1524 . -4) 12437) nil (25952 63387 367516 380000) 0 nil])
([nil nil ((12448 . 12449)) nil (25952 63387 367515 127000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -12448) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) 12449) nil (25952 63387 367514 847000) 0 nil])
([nil nil ((12448 . 12449)) nil (25952 63387 367513 113000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12467 12474 nil nil nil t nil)) nil 48 nil #s(yas--field 1 12467 12474 nil nil nil t nil) nil nil)) (12449 . 12484) (#("toUpdateDailyTask(${1:userId uuid.UUID})" 0 40 (fontified nil)) . 12449) (12449 . 12489) (#("toUpdateDailyTask" 0 17 (fontified nil)) . -12449) (12449 . 12466)) nil (25952 63387 367512 532000) 0 nil])
([nil nil ((12468 . 12474) (#("userId uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 12468) (undo-tree-id1518 . -16) (undo-tree-id1519 . -7) (undo-tree-id1520 . -8) (12467 . 12468)) nil (25952 63387 367511 210000) 0 nil])
([nil nil ((apply yas--snippet-revive 12449 12475 #s(yas--snippet nil (#s(yas--field 1 12467 12474 nil nil nil t nil)) nil 48 nil #s(yas--field 1 12467 12474 nil nil nil t nil) nil nil))) nil (25952 63387 367492 445000) 0 nil])
([nil nil ((12475 . 12477) (t 25952 63387 404488 167000)) nil (25952 63409 227362 504000) 0 nil])
([nil nil ((12477 . 12487)) nil (25952 63409 227361 792000) 0 nil])
([nil nil ((#("í" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12484) (undo-tree-id1557 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12485) (undo-tree-id1558 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -12486) (undo-tree-id1559 . -1) 12487) nil (25952 63409 227361 61000) 0 nil])
([nil nil ((12484 . 12491)) nil (25952 63409 227359 478000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -12492) (12492 . 12493) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -12492) (12492 . 12493) (12491 . 12493)) nil (25952 63409 227358 466000) 0 nil])
([nil nil ((12493 . 12495) (12494 . 12495) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 12493) (12493 . 12495) (12492 . 12494)) nil (25952 63409 227357 234000) 0 nil])
([nil nil ((12495 . 12501)) nil (25952 63409 227356 282000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12518 12519 nil nil nil t #s(yas--field 2 12521 12524 nil nil nil t #s(yas--field 3 12526 12537 nil nil nil t nil))) #s(yas--field 2 12521 12524 nil nil nil t #s(yas--field 3 12526 12537 nil nil nil t nil)) #s(yas--field 3 12526 12537 nil nil nil t nil)) nil 49 nil #s(yas--field 3 12526 12537 nil nil nil t nil) nil nil)) (12501 . 12562) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 12501) (12501 . 12577) (#("RespondWithError" 0 16 (fontified nil)) . -12501) (12501 . 12517)) nil (25952 63409 227355 711000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 12519) (undo-tree-id1556 . -21) (12518 . 12519)) nil (25952 63409 227354 148000) 0 nil])
([nil nil ((12522 . 12524) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 12522) (undo-tree-id1555 . -8) (12521 . 12522)) nil (25952 63409 227353 56000) 0 nil])
([nil nil ((12526 . 12528) (#("\"" 0 1 (fontified nil)) . -12526) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 12527) (undo-tree-id1552 . -10) (undo-tree-id1553 . -4) (undo-tree-id1554 . -5) (12526 . 12527)) nil (25952 63409 227351 904000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -12526) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 12527) (undo-tree-id1548 . -1)) nil (25952 63409 227348 177000) 0 nil])
([nil nil ((12526 . 12530)) nil (25952 63409 227341 585000) 0 nil])
([nil nil ((apply yas--snippet-revive 12530 12537 #s(yas--snippet nil nil nil 50 nil nil #s(yas--field 3 12526 12537 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil #s(yas--field 3 12526 12537 nil nil nil t nil) nil)) (12530 . 12537) (#("Error()" 0 7 (fontified nil)) . 12530) (undo-tree-id1533 . -7) (12530 . 12537) (#("Error" 0 5 (fontified nil)) . -12530) (undo-tree-id1534 . -5) (12530 . 12535)) nil (25952 63409 227340 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 12501 12538 #s(yas--snippet nil (#s(yas--field 1 12518 12519 nil nil nil t #s(yas--field 2 12521 12524 nil nil nil t #s(yas--field 3 12526 12537 nil nil nil t nil))) #s(yas--field 2 12521 12524 nil nil nil t #s(yas--field 3 12526 12537 nil nil nil t nil)) #s(yas--field 3 12526 12537 nil nil nil t nil)) nil 49 nil #s(yas--field 3 12526 12537 nil nil nil t nil) nil nil))) nil (25952 63409 227321 267000) 0 nil])
([nil nil ((12733 . 12735) (t 25952 63409 356191 663000)) nil (25952 64900 688876 146000) 0 nil])
([nil nil ((12735 . 12743)) nil (25952 64900 688875 776000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12740) (undo-tree-id1595 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12741) (undo-tree-id1596 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12742) (undo-tree-id1597 . -1) 12743) nil (25952 64900 688875 194000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -12741) (12741 . 12742) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -12741) (12741 . 12742) (12740 . 12742)) nil (25952 64900 688873 191000) 0 nil])
([nil nil ((12741 . 12746)) nil (25952 64900 688872 890000) 0 nil])
([nil nil ((12746 . 12751)) nil (25952 64900 688872 560000) 0 nil])
([nil nil ((apply yas--snippet-revive 12746 12766 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (12746 . 12766) (#("DailyTaskRequestType" 0 20 (fontified nil)) . 12746) (12746 . 12766) (#("Daily" 0 5 (fontified nil)) . 12746) (12746 . 12751) (#("DailyTaskRequestType" 0 20 (fontified nil)) . -12746) (12746 . 12766) (#("Daily" 0 5 (fontified t face tree-sitter-hl-face:type)) . -12746) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) 12751) nil (25952 64900 688871 568000) 0 nil])
([nil nil ((12767 . 12785)) nil (25952 64900 688869 263000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -12786) (12786 . 12787) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -12786) (12786 . 12787) (12785 . 12787)) nil (25952 64900 688868 312000) 0 nil])
([nil nil ((12786 . 12798)) nil (25952 64900 688867 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 12798 12802 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (12798 . 12802) (#("UUID" 0 4 (fontified nil)) . 12798) (12798 . 12802) (#("UUID" 0 4 (fontified nil)) . -12798) (12798 . 12802)) nil (25952 64900 688867 490000) 0 nil])
([nil nil ((11487 . 11497)) nil (25952 64900 688867 99000) 0 nil])
([nil nil ((11495 . 11502)) nil (25952 64900 688866 809000) 0 nil])
([nil nil ((11563 . 11565)) nil (25952 64900 688866 658000) 0 nil])
([nil nil ((11565 . 11568)) nil (25952 64900 688866 358000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11567) (undo-tree-id1592 . -1) 11568) nil (25952 64900 688866 7000) 0 nil])
([nil nil ((11567 . 11581)) nil (25952 64900 688865 426000) 0 nil])
([nil nil ((11581 . 11582)) nil (25952 64900 688865 266000) 0 nil])
([nil nil ((11582 . 11586)) nil (25952 64900 688864 965000) 0 nil])
([nil nil ((11586 . 11588)) nil (25952 64900 688864 645000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -11587) (11587 . 11588) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -11587) (11587 . 11588)) nil (25952 64900 688864 114000) 0 nil])
([nil nil ((11587 . 11590)) nil (25952 64900 688863 683000) 0 nil])
([nil nil ((apply yas--snippet-revive 11587 11595 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (11587 . 11595) (#("idstring" 0 8 (fontified nil)) . 11587) (11587 . 11595) (#("ids" 0 3 (fontified nil)) . 11587) (11587 . 11590) (#("idstring" 0 8 (fontified nil)) . -11587) (11587 . 11595) (#("ids" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -11587) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) 11590) nil (25952 64900 688862 390000) 0 nil])
([nil nil ((11596 . 11597)) nil (25952 64900 688860 817000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -11596) (undo-tree-id1589 . -1) 11597) nil (25952 64900 688860 296000) 0 nil])
([nil nil ((11596 . 11598)) nil (25952 64900 688859 475000) 0 nil])
([nil nil ((11598 . 11614)) nil (25952 64900 688858 834000) 0 nil])
([nil nil ((11614 . 11616) (11615 . 11616) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 11614) (11614 . 11616) (11613 . 11615)) nil (25952 64900 688858 52000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -11988) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("u" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11989) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11990) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("d" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -11991) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (#("." 0 1 (fontified nil)) . -11992) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (#("N" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -11993) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11994) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -11995) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11996) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -11997) (undo-tree-id1586 . -1) (undo-tree-id1587 . 1) (undo-tree-id1588 . -1) 11998) nil (25952 64900 688855 868000) 0 nil])
([nil nil ((11988 . 11990)) nil (25952 64900 688826 223000) 0 nil])
([nil nil ((11616 . 11623) (t 25952 64900 724898 489000)) nil (25952 64988 267532 302000) 0 nil])
([nil nil ((11623 . 11628)) nil (25952 64988 267532 92000) 0 nil])
([nil nil ((11628 . 11629)) nil (25952 64988 267531 931000) 0 nil])
([nil nil ((apply yas--snippet-revive 11623 11655 #s(yas--snippet nil nil #s(yas--exit 11654 nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11654 nil) 54 nil nil nil nil)) (11623 . 11655) (#("database.UpdateDailyTaskParams{$0\\}" 0 35 (fontified nil)) . 11623) (11623 . 11658) (#("databa" 0 6 (fontified nil)) . 11623) (11623 . 11629) (#("database.UpdateDailyTaskParams{}" 0 32 (fontified nil)) . -11623) (11623 . 11655) (#("databa" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -11623) (undo-tree-id1621 . -6) (undo-tree-id1622 . -6) 11629) nil (25952 64988 267531 541000) 0 nil])
([nil nil ((11655 . 11657)) nil (25952 64988 267452 51000) 0 nil])
([nil nil ((11657 . 11661)) nil (25952 64988 267451 761000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11668 11680 nil nil nil t #s(yas--field 2 11680 11680 nil nil nil t nil)) #s(yas--field 2 11680 11680 nil nil nil t nil)) nil 55 nil #s(yas--field 2 11680 11680 nil nil nil t nil) nil nil)) (11661 . 11692) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 11661) (11661 . 11702) (#("Errorf" 0 6 (fontified nil)) . -11661) (11661 . 11667)) nil (25952 64988 267450 999000) 0 nil])
([nil nil ((11669 . 11679) (11668 . 11670) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -11668) (undo-tree-id1619 . -1) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 11669) (undo-tree-id1620 . -13) (11668 . 11669)) nil (25952 64988 267449 737000) 0 nil])
([nil nil ((#("a ...any" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:operator) 5 8 (fontified t face tree-sitter-hl-face:variable)) . 11682) (undo-tree-id1616 . -8) (undo-tree-id1617 . -5) (undo-tree-id1618 . -6)) nil (25952 64988 267448 234000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -11680) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#(" " 0 1 (fontified t)) . -11681) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . 1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) 11682) nil (25952 64988 267445 319000) 0 nil])
([nil nil ((apply yas--snippet-revive 11661 11681 #s(yas--snippet nil (#s(yas--field 1 11668 11680 nil nil nil t #s(yas--field 2 11680 11680 nil nil nil t nil)) #s(yas--field 2 11680 11680 nil nil nil t nil)) nil 55 nil #s(yas--field 2 11680 11680 nil nil nil t nil) nil nil))) nil (25952 64988 267422 95000) 0 nil])
([nil nil ((12933 . 12936) (t 25952 64988 395691 21000)) nil (25952 65160 233429 102000) 0 nil])
([nil nil ((12936 . 12937) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 12936) (12936 . 12937) (12935 . 12937)) nil (25952 65160 233428 691000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12938 . 12939) (#("
" 0 1 (fontified nil)) . -13535) (12937 . 13536) 12936) nil (25952 65160 233428 40000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 12936) (undo-tree-id1675 . -1)) nil (25952 65160 233427 399000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13003) (undo-tree-id1674 . -1) 13004) nil (25952 65160 233426 167000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12994) (undo-tree-id1665 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12995) (undo-tree-id1666 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12996) (undo-tree-id1667 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12997) (undo-tree-id1668 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12998) (undo-tree-id1669 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -12999) (undo-tree-id1670 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13000) (undo-tree-id1671 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13001) (undo-tree-id1672 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13002) (undo-tree-id1673 . -1) 13003) nil (25952 65160 233423 622000) 0 nil])
([nil nil ((12994 . 12997)) nil (25952 65160 233417 440000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13040) (undo-tree-id1644 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13041) (undo-tree-id1645 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13042) (undo-tree-id1646 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13043) (undo-tree-id1647 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13044) (undo-tree-id1648 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13045) (undo-tree-id1649 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13046) (undo-tree-id1650 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13047) (undo-tree-id1651 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13048) (undo-tree-id1652 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13049) (undo-tree-id1653 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13050) (undo-tree-id1654 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13051) (undo-tree-id1655 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -13052) (undo-tree-id1656 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13053) (undo-tree-id1657 . -1) (#("," 0 1 (fontified t)) . -13054) (undo-tree-id1658 . -1) (#(" " 0 1 (fontified t)) . -13055) (undo-tree-id1659 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13056) (undo-tree-id1660 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13057) (undo-tree-id1661 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13058) (undo-tree-id1662 . -1) (#("," 0 1 (fontified t)) . -13059) (undo-tree-id1663 . -1) (#(" " 0 1 (fontified t)) . -13060) (undo-tree-id1664 . -1) 13061) nil (25952 65160 233414 655000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13030) (undo-tree-id1634 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13031) (undo-tree-id1635 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13032) (undo-tree-id1636 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13033) (undo-tree-id1637 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13034) (undo-tree-id1638 . -1) (#("." 0 1 (fontified t)) . -13035) (undo-tree-id1639 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13036) (undo-tree-id1640 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13037) (undo-tree-id1641 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13038) (undo-tree-id1642 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13039) (undo-tree-id1643 . -1) 13040) nil (25952 65160 233401 260000) 0 nil])
([nil nil ((13030 . 13036)) nil (25952 65160 233394 878000) 0 nil])
([nil nil ((13036 . 13041)) nil (25952 65160 233393 786000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -13076) (undo-tree-id1625 . -1) (#("	" 0 1 (fontified t)) . -13077) (undo-tree-id1626 . -1) (#("	" 0 1 (fontified t)) . -13078) (undo-tree-id1627 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -13079) (undo-tree-id1628 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13080) (undo-tree-id1629 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13081) (undo-tree-id1630 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13082) (undo-tree-id1631 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13083) (undo-tree-id1632 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -13084) (undo-tree-id1633 . -1) 13085) nil (25952 65160 233391 211000) 0 nil])
([nil nil (13075) nil (25952 65160 233385 490000) 0 nil])
([nil nil ((13030 . 13037)) nil (25952 65160 233385 160000) 0 nil])
([nil nil ((13036 . 13037)) nil (25952 65160 233384 849000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -12935) (12935 . 12936) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -12935) (12935 . 12936) (12933 . 12936)) nil (25952 65160 233384 298000) 0 nil])
([nil nil ((12935 . 12947)) nil (25952 65160 233383 737000) 0 nil])
([nil nil ((apply yas--snippet-revive 12944 12962 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (12944 . 12962) (#("AddDailyTaskParams" 0 18 (fontified nil)) . 12944) (12944 . 12962) (#("Add" 0 3 (fontified nil)) . 12944) (12944 . 12947) (#("AddDailyTaskParams" 0 18 (fontified nil)) . -12944) (12944 . 12962) (#("Add" 0 3 (fontified t face tree-sitter-hl-face:type)) . -12944) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) 12947) nil (25952 65160 233382 365000) 0 nil])
([nil nil ((12962 . 12969)) nil (25952 65160 233365 182000) 0 nil])
([nil nil ((13074 . 13078) (t 25952 65160 365080 593000)) nil (25952 65170 485564 742000) 0 nil])
([nil nil ((apply yas--snippet-revive 13074 13103 #s(yas--snippet nil nil #s(yas--exit 13102 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 13102 nil) 57 nil nil nil nil)) (13074 . 13103) (#("database.AddDailyTaskParams{$0\\}" 0 32 (fontified nil)) . 13074) (13074 . 13106) (#("data" 0 4 (fontified nil)) . 13074) (13074 . 13078) (#("database.AddDailyTaskParams{}" 0 29 (fontified nil)) . -13074) (13074 . 13103) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -13074) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -1) (undo-tree-id1685 . -2) (undo-tree-id1686 . -3) (undo-tree-id1687 . -4) (undo-tree-id1688 . -4) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) 13078) nil (25952 65170 485562 929000) 0 nil])
([nil nil ((13102 . 13103)) nil (25952 65170 485558 250000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -13102) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) 13103) nil (25952 65170 485557 478000) 0 nil])
([nil nil ((13103 . 13104)) nil (25952 65170 485536 188000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13181) (undo-tree-id1765 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13182) (undo-tree-id1766 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13183) (undo-tree-id1767 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13184) (undo-tree-id1768 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13185) (undo-tree-id1769 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13186) (undo-tree-id1770 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13187) (undo-tree-id1771 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13188) (undo-tree-id1772 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13189) (undo-tree-id1773 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13190) (undo-tree-id1774 . -1) 13191 (t 25952 65170 613038 283000)) nil (25952 65200 164402 616000) 0 nil])
([nil nil ((13181 . 13184)) nil (25952 65200 164397 797000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13221) (undo-tree-id1744 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13222) (undo-tree-id1745 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13223) (undo-tree-id1746 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13224) (undo-tree-id1747 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13225) (undo-tree-id1748 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13226) (undo-tree-id1749 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13227) (undo-tree-id1750 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13228) (undo-tree-id1751 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13229) (undo-tree-id1752 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13230) (undo-tree-id1753 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13231) (undo-tree-id1754 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13232) (undo-tree-id1755 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -13233) (undo-tree-id1756 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13234) (undo-tree-id1757 . -1) (#("," 0 1 (fontified t)) . -13235) (undo-tree-id1758 . -1) (#(" " 0 1 (fontified t)) . -13236) (undo-tree-id1759 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13237) (undo-tree-id1760 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13238) (undo-tree-id1761 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -13239) (undo-tree-id1762 . -1) (#("," 0 1 (fontified t)) . -13240) (undo-tree-id1763 . -1) (#(" " 0 1 (fontified t)) . -13241) (undo-tree-id1764 . -1) 13242) nil (25952 65200 164395 102000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13220) (undo-tree-id1743 . -1) 13221) nil (25952 65200 164385 734000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13211) (undo-tree-id1734 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13212) (undo-tree-id1735 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13213) (undo-tree-id1736 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13214) (undo-tree-id1737 . -1) (#("s" 0 1 (fontified nil)) . -13215) (undo-tree-id1738 . -1) (#("." 0 1 (fontified nil)) . -13216) (undo-tree-id1739 . -1) (#("R" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -13217) (undo-tree-id1740 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -13218) (undo-tree-id1741 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13219) (undo-tree-id1742 . -1) 13220) nil (25952 65200 164383 650000) 0 nil])
([nil nil ((13211 . 13216)) nil (25952 65200 164378 901000) 0 nil])
([nil nil ((13215 . 13218)) nil (25952 65200 164378 390000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13221 13221 nil nil nil t #s(yas--field 2 13223 13231 nil nil nil nil nil)) #s(yas--field 2 13223 13231 nil nil nil nil nil)) nil 58 nil #s(yas--field 1 13221 13221 nil nil nil t #s(yas--field 2 13223 13231 nil nil nil nil nil)) nil nil)) (13215 . 13246) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 13215) (13215 . 13256) (#("Err" 0 3 (fontified nil)) . 13215) (13215 . 13218) (#("Errorf" 0 6 (fontified nil)) . -13215) (13215 . 13221) (#("Err" 0 3 (fontified t face tree-sitter-hl-face:type)) . -13215) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) 13218) nil (25952 65200 164377 599000) 0 nil])
([nil nil ((#("format string" 0 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 13 (fontified t face tree-sitter-hl-face:variable)) . 13222)) nil (25952 65200 164376 106000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -13221) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . 1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) 13222) nil (25952 65200 164375 845000) 0 nil])
([nil nil ((apply yas--snippet-revive 13215 13232 #s(yas--snippet nil (#s(yas--field 1 13221 13221 nil nil nil t #s(yas--field 2 13223 13231 nil nil nil nil nil)) #s(yas--field 2 13223 13231 nil nil nil nil nil)) nil 58 nil #s(yas--field 1 13221 13221 nil nil nil t #s(yas--field 2 13223 13231 nil nil nil nil nil)) nil nil))) nil (25952 65200 164373 341000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -13227) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13228) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13229) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -13230) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -13231) (undo-tree-id1722 . -1) (undo-tree-id1723 . 1) (undo-tree-id1724 . -1) (#(" " 0 1 (fontified t)) . -13232) (undo-tree-id1725 . -1) 13233) nil (25952 65200 164372 499000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -13221) (undo-tree-id1703 . -1) (#(" " 0 1 (fontified t)) . -13222) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13223) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#(" " 0 1 (fontified t)) . -13224) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (#("." 0 1 (fontified t)) . -13225) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (#("." 0 1 (fontified t)) . -13226) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 13227) nil (25952 65200 164367 49000) 0 nil])
([nil nil ((13221 . 13222)) nil (25952 65200 164359 936000) 0 nil])
([nil nil ((#("		return
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t face tree-sitter-hl-face:keyword) 6 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t)) . 13240) (undo-tree-id1700 . -8) (undo-tree-id1701 . 1) (undo-tree-id1702 . -7) 13247) nil (25952 65200 164358 884000) 0 nil])
([nil nil ((13211 . 13218)) nil (25952 65200 164355 898000) 0 nil])
([nil nil ((13217 . 13222)) nil (25952 65200 164355 407000) 0 nil])
([nil nil ((apply yas--snippet-revive 13218 13247 #s(yas--snippet nil nil #s(yas--exit 13246 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 13246 nil) 59 nil nil nil nil)) (13218 . 13247) (#("database.AddDailyTaskParams{$0\\}" 0 32 (fontified nil)) . 13218) (13218 . 13250) (#("data" 0 4 (fontified nil)) . 13218) (13218 . 13222) (#("database.AddDailyTaskParams{}" 0 29 (fontified nil)) . -13218) (13218 . 13247) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -13218) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -4) (undo-tree-id1698 . -4) (undo-tree-id1699 . -4) 13222) nil (25952 65200 164353 674000) 0 nil])
([nil nil ((13247 . 13248)) nil (25952 65200 164333 506000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13311) (undo-tree-id1779 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13312) (undo-tree-id1780 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13313) (undo-tree-id1781 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13314) (undo-tree-id1782 . -1) (#("b" 0 1 (fontified t)) . -13315) (undo-tree-id1783 . -1) (#("j" 0 1 (fontified t)) . -13316) (undo-tree-id1784 . -1) (#(" " 0 1 (fontified t)) . -13317) (undo-tree-id1785 . -1) (#(":" 0 1 (fontified t)) . -13318) (undo-tree-id1786 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -13319) (undo-tree-id1787 . -1) 13320 (t 25952 65200 199913 321000)) nil (25952 65214 641634 999000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13307) (undo-tree-id1775 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13308) (undo-tree-id1776 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13309) (undo-tree-id1777 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13310) (undo-tree-id1778 . -1) 13311) nil (25952 65214 641626 804000) 0 nil])
([nil nil ((13307 . 13313)) nil (25952 65214 641611 735000) 0 nil])
([nil nil ((13567 . 13572)) nil (25952 65214 641605 754000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -12920) (undo-tree-id1811 . -1) 12921 (t 25952 65214 770850 354000)) nil (25952 65274 535038 404000) 0 nil])
([nil nil ((12920 . 12921)) nil (25952 65274 535037 762000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -13384) (undo-tree-id1808 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -13385) (undo-tree-id1809 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -13386) (undo-tree-id1810 . -1) 13387) nil (25952 65274 535037 181000) 0 nil])
([nil nil ((13384 . 13386)) nil (25952 65274 535035 749000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13403) (undo-tree-id1798 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -13404) (undo-tree-id1799 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13405) (undo-tree-id1800 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13406) (undo-tree-id1801 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13407) (undo-tree-id1802 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13408) (undo-tree-id1803 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13409) (undo-tree-id1804 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13410) (undo-tree-id1805 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13411) (undo-tree-id1806 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13412) (undo-tree-id1807 . -1) 13413) nil (25952 65274 535034 336000) 0 nil])
([nil nil ((13403 . 13406)) nil (25952 65274 535030 669000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13511) (undo-tree-id1788 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13512) (undo-tree-id1789 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13513) (undo-tree-id1790 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13514) (undo-tree-id1791 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13515) (undo-tree-id1792 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13516) (undo-tree-id1793 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13517) (undo-tree-id1794 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13518) (undo-tree-id1795 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13519) (undo-tree-id1796 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13520) (undo-tree-id1797 . -1) 13521) nil (25952 65274 535029 6000) 0 nil])
([nil nil ((13511 . 13514)) nil (25952 65274 535008 818000) 0 nil])
([nil nil ((#("	dateStartTime, eserr := time.Parse(utils.BaseDateString, taskReqObj.DateStart)
	if eserr != nil {
		utils.RespondWithError(w, 400, \"Event start is not a valid date!\")
		return
	}
	tagId, err := uuid.Parse(taskReqObj.TagID)
	if err != nil {
		utils.RespondWithError(w, 400, \"Invalid Tag ID\")
		return
	}
	timeStamp := time.Now()
	addTaskObj := database.AddTaskParams{
		ID:          uuid.New(),
		UserID:      user.ID,
		Title:       taskReqObj.Title,
		EventStart:  dateStartTime,
		UpdatedAt:   timeStamp,
		CreatedAt:   timeStamp,
		Repetitions: taskReqObj.Repetitions,
		TagID:       tagId,
	}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t face tree-sitter-hl-face:variable) 10 14 (fontified t face tree-sitter-hl-face:variable) 14 16 (fontified t) 16 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 24 (fontified t face tree-sitter-hl-face:operator) 24 25 (fontified t) 25 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 35 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 41 (fontified t face tree-sitter-hl-face:variable) 41 42 (fontified t) 42 56 (fontified t face tree-sitter-hl-face:property) 56 58 (fontified t) 58 61 (fontified t face tree-sitter-hl-face:variable) 61 64 (fontified t face tree-sitter-hl-face:variable) 64 68 (fontified t face tree-sitter-hl-face:variable) 68 69 (fontified t) 69 73 (fontified t face tree-sitter-hl-face:property) 73 74 (fontified t face tree-sitter-hl-face:property) 74 78 (fontified t face tree-sitter-hl-face:property) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t face tree-sitter-hl-face:keyword) 82 83 (fontified t face tree-sitter-hl-face:keyword) 83 84 (fontified t) 84 85 (fontified t face tree-sitter-hl-face:variable) 85 89 (fontified t face tree-sitter-hl-face:variable) 89 90 (fontified t) 90 92 (fontified t face tree-sitter-hl-face:operator) 92 93 (fontified t) 93 96 (fontified t face tree-sitter-hl-face:constant\.builtin) 96 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-2-face)) 98 101 (fontified t) 101 103 (fontified t face tree-sitter-hl-face:variable) 103 106 (fontified t face tree-sitter-hl-face:variable) 106 107 (fontified t) 107 108 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 108 109 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 109 112 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 112 116 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 116 117 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 117 118 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 118 123 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 123 124 (fontified t face (rainbow-delimiters-depth-3-face)) 124 125 (fontified t face tree-sitter-hl-face:variable) 125 127 (fontified t) 127 130 (fontified t face tree-sitter-hl-face:number) 130 132 (fontified t) 132 166 (fontified t face tree-sitter-hl-face:string) 166 167 (fontified t face (rainbow-delimiters-depth-3-face)) 167 170 (fontified t) 170 176 (fontified t face tree-sitter-hl-face:keyword) 176 178 (fontified t) 178 179 (fontified t face (rainbow-delimiters-depth-2-face)) 179 180 (fontified t) 180 181 (fontified t) 181 186 (fontified t face tree-sitter-hl-face:variable) 186 188 (fontified t) 188 191 (fontified t face tree-sitter-hl-face:variable) 191 192 (fontified t) 192 194 (fontified t face tree-sitter-hl-face:operator) 194 195 (fontified t) 195 199 (fontified t face tree-sitter-hl-face:variable) 199 200 (fontified t) 200 205 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 205 206 (fontified t face (rainbow-delimiters-depth-2-face)) 206 216 (fontified t face tree-sitter-hl-face:variable) 216 217 (fontified t) 217 222 (fontified t face tree-sitter-hl-face:property) 222 223 (fontified t face (rainbow-delimiters-depth-2-face)) 223 224 (fontified t) 224 225 (fontified t) 225 227 (fontified t face tree-sitter-hl-face:keyword) 227 228 (fontified t) 228 231 (fontified t face tree-sitter-hl-face:variable) 231 232 (fontified t) 232 234 (fontified t face tree-sitter-hl-face:operator) 234 235 (fontified t) 235 238 (fontified t face tree-sitter-hl-face:constant\.builtin) 238 239 (fontified t) 239 240 (fontified t face (rainbow-delimiters-depth-2-face)) 240 243 (fontified t) 243 248 (fontified t face tree-sitter-hl-face:variable) 248 249 (fontified t) 249 265 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 265 266 (fontified t face (rainbow-delimiters-depth-3-face)) 266 267 (fontified t face tree-sitter-hl-face:variable) 267 269 (fontified t) 269 272 (fontified t face tree-sitter-hl-face:number) 272 274 (fontified t) 274 283 (fontified t face tree-sitter-hl-face:string) 283 284 (fontified t face tree-sitter-hl-face:string) 284 286 (fontified t face tree-sitter-hl-face:string) 286 290 (fontified t face tree-sitter-hl-face:string) 290 291 (fontified t face (rainbow-delimiters-depth-3-face)) 291 292 (fontified t) 292 294 (fontified t) 294 297 (fontified t face tree-sitter-hl-face:keyword) 297 298 (fontified t face tree-sitter-hl-face:keyword) 298 299 (fontified t face tree-sitter-hl-face:keyword) 299 300 (fontified t face tree-sitter-hl-face:keyword) 300 302 (fontified t) 302 303 (fontified t face (rainbow-delimiters-depth-2-face)) 303 304 (fontified t) 304 305 (fontified t) 305 314 (fontified t face tree-sitter-hl-face:variable) 314 315 (fontified t) 315 317 (fontified t face tree-sitter-hl-face:operator) 317 318 (fontified t) 318 322 (fontified t face tree-sitter-hl-face:variable) 322 323 (fontified t) 323 326 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 326 327 (fontified t face (rainbow-delimiters-depth-2-face)) 327 328 (fontified t face (rainbow-delimiters-depth-2-face)) 328 330 (fontified t) 330 340 (fontified t face tree-sitter-hl-face:variable) 340 341 (fontified t) 341 343 (fontified t face tree-sitter-hl-face:operator) 343 353 (fontified t) 353 366 (fontified t face tree-sitter-hl-face:type) 366 367 (fontified t face (rainbow-delimiters-depth-2-face)) 367 370 (fontified t) 370 372 (fontified t face tree-sitter-hl-face:variable) 372 373 (fontified t) 373 382 (fontified t) 382 383 (fontified t) 383 387 (fontified t face tree-sitter-hl-face:variable) 387 388 (fontified t) 388 391 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 391 392 (fontified t face (rainbow-delimiters-depth-3-face)) 392 393 (fontified t face (rainbow-delimiters-depth-3-face)) 393 397 (fontified t) 397 399 (fontified t face tree-sitter-hl-face:variable) 399 403 (fontified t face tree-sitter-hl-face:variable) 403 405 (fontified t) 405 410 (fontified t) 410 414 (fontified t face tree-sitter-hl-face:variable) 414 415 (fontified t) 415 417 (fontified t face tree-sitter-hl-face:property) 417 421 (fontified t) 421 426 (fontified t face tree-sitter-hl-face:variable) 426 427 (fontified t) 427 433 (fontified t) 433 434 (fontified t) 434 444 (fontified t face tree-sitter-hl-face:variable) 444 445 (fontified t) 445 450 (fontified t face tree-sitter-hl-face:property) 450 452 (fontified t) 452 453 (fontified t) 453 454 (fontified t) 454 464 (fontified t face tree-sitter-hl-face:variable) 464 465 (fontified t) 465 466 (fontified t) 466 467 (fontified t) 467 471 (fontified t face tree-sitter-hl-face:variable) 471 480 (fontified t face tree-sitter-hl-face:variable) 480 482 (fontified t) 482 484 (fontified t) 484 492 (fontified t face tree-sitter-hl-face:variable) 492 493 (fontified t face tree-sitter-hl-face:variable) 493 494 (fontified t) 494 496 (fontified t) 496 497 (fontified t) 497 506 (fontified t face tree-sitter-hl-face:variable) 506 507 (fontified t) 507 508 (fontified t) 508 510 (fontified t) 510 513 (fontified t face tree-sitter-hl-face:variable) 513 519 (fontified t face tree-sitter-hl-face:variable) 519 520 (fontified t) 520 522 (fontified t) 522 523 (fontified t) 523 532 (fontified t face tree-sitter-hl-face:variable) 532 536 (fontified t) 536 547 (fontified t face tree-sitter-hl-face:variable) 547 549 (fontified t) 549 559 (fontified t face tree-sitter-hl-face:variable) 559 560 (fontified t) 560 571 (fontified t face tree-sitter-hl-face:property) 571 575 (fontified t) 575 580 (fontified t face tree-sitter-hl-face:variable) 580 581 (fontified t) 581 587 (fontified t) 587 588 (fontified t) 588 593 (fontified t face tree-sitter-hl-face:variable) 593 596 (fontified t) 596 597 (fontified t face (rainbow-delimiters-depth-2-face)) 597 598 (fontified t)) . 13861) (undo-tree-id1843 . -596) (undo-tree-id1844 . -596) (undo-tree-id1845 . -1) (undo-tree-id1846 . -597) (undo-tree-id1847 . -180) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -596) 13862 (t 25952 65274 663582 882000)) nil (25952 65415 615739 237000) 0 nil])
([nil nil ((13860 . 13862)) nil (25952 65415 615736 292000) 0 nil])
([nil nil ((13862 . 13863)) nil (25952 65415 615736 152000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -13862) (undo-tree-id1842 . -1) 13863) nil (25952 65415 615735 590000) 0 nil])
([nil nil ((13862 . 13881)) nil (25952 65415 615735 39000) 0 nil])
([nil nil ((13881 . 13885)) nil (25952 65415 615734 889000) 0 nil])
([nil nil ((apply yas--snippet-revive 13881 13891 #s(yas--snippet nil nil nil 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil nil nil)) (13881 . 13891) (#("taskReqObj" 0 10 (fontified nil)) . 13881) (13881 . 13891) (#("task" 0 4 (fontified nil)) . 13881) (13881 . 13885) (#("taskReqObj" 0 10 (fontified nil)) . -13881) (13881 . 13891) (#("task" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -13881) (undo-tree-id1840 . -4) (undo-tree-id1841 . -4) 13885) nil (25952 65415 615734 28000) 0 nil])
([nil nil ((13891 . 13892)) nil (25952 65415 615732 264000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13910 13917 nil nil nil t nil)) nil 61 nil #s(yas--field 1 13910 13917 nil nil nil t nil) nil nil)) (13892 . 13927) (#("toCreateDailyTask(${1:userId uuid.UUID})" 0 40 (fontified nil)) . 13892) (13892 . 13932) (#("toCreateDailyTask" 0 17 (fontified nil)) . -13892) (13892 . 13909)) nil (25952 65415 615732 34000) 0 nil])
([nil nil ((13911 . 13915) (#("userId uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 13911) (13910 . 13911)) nil (25952 65415 615731 623000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -13914) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) 13915) nil (25952 65415 615730 872000) 0 nil])
([nil nil ((13914 . 13915)) nil (25952 65415 615728 718000) 0 nil])
([nil nil ((13915 . 13916)) nil (25952 65415 615728 56000) 0 nil])
([nil nil ((13916 . 13917)) nil (25952 65415 615727 706000) 0 nil])
([nil nil ((apply yas--snippet-revive 13892 13918 #s(yas--snippet nil (#s(yas--field 1 13910 13917 nil nil nil t nil)) nil 61 nil #s(yas--field 1 13910 13917 nil nil nil t nil) nil nil))) nil (25952 65415 615727 345000) 0 nil])
([nil nil ((13918 . 13920)) nil (25952 65415 615726 984000) 0 nil])
([nil nil ((13920 . 13922)) nil (25952 65415 615726 243000) 0 nil])
([nil nil ((13922 . 13936)) nil (25952 65415 615725 451000) 0 nil])
([nil nil ((13936 . 13938) (13937 . 13938) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 13936) (13936 . 13938) (13935 . 13937)) nil (25952 65415 615724 850000) 0 nil])
([nil nil ((13938 . 13944)) nil (25952 65415 615724 440000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 13960 13961 nil nil nil t #s(yas--field 2 13963 13966 nil nil nil t #s(yas--field 3 13968 13979 nil nil nil t nil))) #s(yas--field 2 13963 13966 nil nil nil t #s(yas--field 3 13968 13979 nil nil nil t nil)) #s(yas--field 3 13968 13979 nil nil nil t nil)) nil 62 nil #s(yas--field 3 13968 13979 nil nil nil t nil) nil nil)) (13944 . 14013) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 13944) (13944 . 14029) (#("RespondWithJSON" 0 15 (fontified nil)) . -13944) (13944 . 13959)) nil (25952 65415 615723 899000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 13961) (undo-tree-id1837 . -21) (13960 . 13961)) nil (25952 65415 615722 847000) 0 nil])
([nil nil ((13964 . 13966) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 13964) (undo-tree-id1834 . -8) (undo-tree-id1835 . -5) (undo-tree-id1836 . -6) (13963 . 13964)) nil (25952 65415 615722 5000) 0 nil])
([nil nil ((13968 . 13970) (#("\"" 0 1 (fontified nil)) . -13968) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-4-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face))) . 13969) (undo-tree-id1831 . -19) (undo-tree-id1832 . -8) (undo-tree-id1833 . -9) (13968 . 13969)) nil (25952 65415 615719 761000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -13968) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 13969) (undo-tree-id1827 . -1)) nil (25952 65415 615717 376000) 0 nil])
([nil nil ((13968 . 13972)) nil (25952 65415 615710 924000) 0 nil])
([nil nil ((apply yas--snippet-revive 13972 13979 #s(yas--snippet nil nil nil 63 nil nil #s(yas--field 3 13968 13979 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 63 nil nil #s(yas--field 3 13968 13979 nil nil nil t nil) nil)) (13972 . 13979) (#("Error()" 0 7 (fontified nil)) . 13972) (undo-tree-id1812 . -7) (13972 . 13979) (#("Error" 0 5 (fontified nil)) . -13972) (undo-tree-id1813 . -5) (13972 . 13977)) nil (25952 65415 615709 181000) 0 nil])
([nil nil ((apply yas--snippet-revive 13944 13980 #s(yas--snippet nil (#s(yas--field 1 13960 13961 nil nil nil t #s(yas--field 2 13963 13966 nil nil nil t #s(yas--field 3 13968 13979 nil nil nil t nil))) #s(yas--field 2 13963 13966 nil nil nil t #s(yas--field 3 13968 13979 nil nil nil t nil)) #s(yas--field 3 13968 13979 nil nil nil t nil)) nil 62 nil #s(yas--field 3 13968 13979 nil nil nil t nil) nil nil))) nil (25952 65415 615689 524000) 0 nil])
([nil nil ((14006 . 14011) (t 25952 65415 743910 904000)) nil (25952 65435 485749 832000) 0 nil])
([nil nil ((#("type TagRequestType struct {
	Name string `json:\"name\"`
}

func (req *TagRequestType) ToRenameTag(id string, userId uuid.UUID) (database.RenameTagParams, error) {
	uuid, err := uuid.Parse(id)
	if err != nil {
		return database.RenameTagParams{}, err
	} else {
		return database.RenameTagParams{
			ID:        uuid,
			Name:      req.Name,
			UpdatedAt: time.Now(),
			UserID:    userId,
		}, nil
	}
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t) 20 26 (fontified t face tree-sitter-hl-face:keyword) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 30 (fontified t) 30 34 (fontified t face tree-sitter-hl-face:property) 34 35 (fontified t) 35 41 (fontified t face tree-sitter-hl-face:type) 41 42 (fontified t) 42 55 (fontified t face tree-sitter-hl-face:string) 55 56 (fontified t) 56 57 (fontified t face (rainbow-delimiters-depth-1-face)) 57 58 (fontified t) 58 59 (fontified t) 59 63 (fontified t face tree-sitter-hl-face:keyword) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-1-face)) 65 68 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 68 69 (fontified t) 69 70 (fontified t face tree-sitter-hl-face:operator) 70 84 (fontified t face tree-sitter-hl-face:type) 84 85 (fontified t face (rainbow-delimiters-depth-1-face)) 85 86 (fontified t) 86 97 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 97 98 (fontified t face (rainbow-delimiters-depth-1-face)) 98 100 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 100 101 (fontified t) 101 107 (fontified t face tree-sitter-hl-face:type) 107 109 (fontified t) 109 115 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 115 116 (fontified t) 116 120 (fontified t) 120 121 (fontified t) 121 125 (fontified t face tree-sitter-hl-face:type) 125 126 (fontified t face (rainbow-delimiters-depth-1-face)) 126 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-1-face)) 128 137 (fontified t) 137 152 (fontified t face tree-sitter-hl-face:type) 152 154 (fontified t) 154 159 (fontified t face tree-sitter-hl-face:type) 159 160 (fontified t face (rainbow-delimiters-depth-1-face)) 160 161 (fontified t) 161 162 (fontified t face (rainbow-delimiters-depth-1-face)) 162 163 (fontified t) 163 164 (rear-nonsticky t fontified t) 164 168 (fontified t face tree-sitter-hl-face:variable) 168 170 (fontified t) 170 173 (fontified t face tree-sitter-hl-face:variable) 173 174 (fontified t) 174 176 (fontified t face tree-sitter-hl-face:operator) 176 177 (fontified t) 177 181 (fontified t face tree-sitter-hl-face:variable) 181 182 (fontified t) 182 187 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 187 188 (fontified t face (rainbow-delimiters-depth-2-face)) 188 190 (fontified t face tree-sitter-hl-face:variable) 190 191 (fontified t face (rainbow-delimiters-depth-2-face)) 191 192 (fontified t) 192 193 (fontified t) 193 195 (fontified t face tree-sitter-hl-face:keyword) 195 196 (fontified t) 196 199 (fontified t face tree-sitter-hl-face:variable) 199 200 (fontified t) 200 202 (fontified t face tree-sitter-hl-face:operator) 202 203 (fontified t) 203 206 (fontified t face tree-sitter-hl-face:constant\.builtin) 206 207 (fontified t) 207 208 (fontified t face (rainbow-delimiters-depth-2-face)) 208 209 (fontified t) 209 211 (fontified t) 211 217 (fontified t face tree-sitter-hl-face:keyword) 217 218 (fontified t) 218 226 (fontified t) 226 227 (fontified t) 227 241 (fontified t face tree-sitter-hl-face:type) 241 242 (fontified t face tree-sitter-hl-face:type) 242 243 (fontified t face (rainbow-delimiters-depth-3-face)) 243 244 (fontified t face (rainbow-delimiters-depth-3-face)) 244 246 (fontified t) 246 249 (fontified t face tree-sitter-hl-face:variable) 249 250 (fontified t) 250 251 (fontified t) 251 252 (fontified t face (rainbow-delimiters-depth-2-face)) 252 253 (fontified t) 253 257 (fontified t face tree-sitter-hl-face:keyword) 257 258 (fontified t) 258 259 (fontified t face (rainbow-delimiters-depth-2-face)) 259 260 (fontified t) 260 261 (fontified t) 261 262 (fontified t) 262 268 (fontified t face tree-sitter-hl-face:keyword) 268 269 (fontified t) 269 278 (fontified t) 278 293 (fontified t face tree-sitter-hl-face:type) 293 294 (fontified t face (rainbow-delimiters-depth-3-face)) 294 295 (fontified t) 295 297 (fontified t) 297 298 (fontified t) 298 300 (fontified t face tree-sitter-hl-face:variable) 300 309 (fontified t) 309 313 (fontified t face tree-sitter-hl-face:variable) 313 315 (fontified t) 315 317 (fontified t) 317 318 (fontified t) 318 322 (fontified t face tree-sitter-hl-face:variable) 322 329 (fontified t) 329 332 (fontified t face tree-sitter-hl-face:variable) 332 333 (fontified t) 333 337 (fontified t face tree-sitter-hl-face:property) 337 339 (fontified t) 339 341 (fontified t) 341 342 (fontified t) 342 351 (fontified t face tree-sitter-hl-face:variable) 351 353 (fontified t) 353 357 (fontified t face tree-sitter-hl-face:variable) 357 358 (fontified t) 358 361 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 361 362 (fontified t face (rainbow-delimiters-depth-4-face)) 362 363 (fontified t face (rainbow-delimiters-depth-4-face)) 363 365 (fontified t) 365 367 (fontified t) 367 368 (fontified t) 368 374 (fontified t face tree-sitter-hl-face:variable) 374 379 (fontified t) 379 385 (fontified t face tree-sitter-hl-face:variable) 385 387 (fontified t) 387 388 (fontified t) 388 389 (fontified t) 389 390 (fontified t face (rainbow-delimiters-depth-3-face)) 390 392 (fontified t) 392 395 (fontified t face tree-sitter-hl-face:constant\.builtin) 395 396 (fontified t) 396 397 (fontified t) 397 398 (fontified t face (rainbow-delimiters-depth-2-face)) 398 399 (fontified t) 399 400 (fontified t face (rainbow-delimiters-depth-1-face)) 400 401 (fontified t)) . 4474) (undo-tree-id1859 . -399) (undo-tree-id1860 . -399) (undo-tree-id1861 . -400) (undo-tree-id1862 . -58) (undo-tree-id1863 . -58) (undo-tree-id1864 . -86) (undo-tree-id1865 . -56) (undo-tree-id1866 . -56) (undo-tree-id1867 . -56) (undo-tree-id1868 . -56) (undo-tree-id1869 . -399) (undo-tree-id1870 . -399) (undo-tree-id1871 . 2) (undo-tree-id1872 . -400) (undo-tree-id1873 . 240) (undo-tree-id1874 . -162) 4873 (t 25952 65435 612812 728000)) nil (25953 249 222870 319000) 0 nil])
([nil nil ((4652 . 4656)) nil (25953 249 222862 685000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4655) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) 4656) nil (25953 249 222862 104000) 0 nil])
([nil nil ((4655 . 4658)) nil (25953 249 222860 421000) 0 nil])
([nil nil ((#("func (req *TagRequestType) ToCreateTag(userId uuid.UUID) database.AddTagParams {
	timeStamp := time.Now()
	return database.AddTagParams{
		ID:        uuid.New(),
		Name:      req.Name,
		UserID:    userId,
		CreatedAt: timeStamp,
		UpdatedAt: timeStamp,
	}
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 9 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:operator) 11 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t) 27 38 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 45 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 45 46 (fontified t) 46 50 (fontified t) 50 51 (fontified t) 51 55 (fontified t face tree-sitter-hl-face:type) 55 56 (fontified t face (rainbow-delimiters-depth-1-face)) 56 57 (fontified t) 57 66 (fontified t) 66 78 (fontified t face tree-sitter-hl-face:type) 78 79 (fontified t) 79 80 (fontified t face (rainbow-delimiters-depth-1-face)) 80 81 (fontified t) 81 82 (rear-nonsticky t fontified t) 82 83 (fontified t face tree-sitter-hl-face:variable) 83 84 (fontified t face tree-sitter-hl-face:variable) 84 86 (fontified t face tree-sitter-hl-face:variable) 86 91 (fontified t face tree-sitter-hl-face:variable) 91 92 (fontified t) 92 94 (fontified t face tree-sitter-hl-face:operator) 94 95 (fontified t) 95 99 (fontified t face tree-sitter-hl-face:variable) 99 100 (fontified t) 100 103 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 103 104 (fontified t face (rainbow-delimiters-depth-2-face)) 104 105 (fontified t face (rainbow-delimiters-depth-2-face)) 105 106 (fontified t) 106 107 (fontified t) 107 113 (fontified t face tree-sitter-hl-face:keyword) 113 123 (fontified t) 123 135 (fontified t face tree-sitter-hl-face:type) 135 136 (fontified t face (rainbow-delimiters-depth-2-face)) 136 137 (fontified t) 137 139 (fontified t) 139 141 (fontified t face tree-sitter-hl-face:variable) 141 143 (fontified t) 143 150 (fontified t) 150 154 (fontified t face tree-sitter-hl-face:variable) 154 155 (fontified t) 155 158 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 158 159 (fontified t face (rainbow-delimiters-depth-3-face)) 159 160 (fontified t face (rainbow-delimiters-depth-3-face)) 160 162 (fontified t) 162 164 (fontified t) 164 168 (fontified t face tree-sitter-hl-face:variable) 168 170 (fontified t) 170 175 (fontified t) 175 178 (fontified t face tree-sitter-hl-face:variable) 178 179 (fontified t) 179 183 (fontified t face tree-sitter-hl-face:property) 183 185 (fontified t) 185 187 (fontified t) 187 193 (fontified t face tree-sitter-hl-face:variable) 193 194 (fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 198 (fontified t) 198 204 (fontified t face tree-sitter-hl-face:variable) 204 206 (fontified t) 206 208 (fontified t) 208 217 (fontified t face tree-sitter-hl-face:variable) 217 219 (fontified t) 219 228 (fontified t face tree-sitter-hl-face:variable) 228 232 (fontified t) 232 241 (fontified t face tree-sitter-hl-face:variable) 241 243 (fontified t) 243 252 (fontified t face tree-sitter-hl-face:variable) 252 255 (fontified t) 255 256 (fontified t face (rainbow-delimiters-depth-2-face)) 256 257 (fontified t) 257 258 (fontified t face (rainbow-delimiters-depth-1-face)) 258 259 (fontified t)) . 5662) (undo-tree-id1851 . -257) (undo-tree-id1852 . -257) (undo-tree-id1853 . -258) (undo-tree-id1854 . 1) (undo-tree-id1855 . -27) (undo-tree-id1856 . -257)) nil (25953 249 222859 649000) 0 nil])
([nil nil ((5808 . 5814)) nil (25953 249 222839 872000) 0 nil])
([nil nil ((#("type TaskRequestType struct {
	Title       string `json:\"title\"`
	Description string `json:\"description\"`
	EventStart  string `json:\"event_start\"`
	EventEnd    string `json:\"event_end\"`
	Repetitions string `json:\"repetitions\"`
	TagID       string `json:\"tag_id\"`
}

func (req *TaskRequestType) toUpdateTask(idstring string, userId uuid.UUID) (database.UpdateTaskParams, error) {
	id, err := uuid.Parse(idstring)
	if err != nil {
		return database.UpdateTaskParams{}, fmt.Errorf(\"Invalid id\")
	}
	eventStartTime, eserr := time.Parse(utils.BaseDateString, req.EventStart)
	if eserr != nil {
		return database.UpdateTaskParams{}, fmt.Errorf(\"Event start is not a valid date!\")
	}
	eventEndTime, eeerr := time.Parse(utils.BaseDateString, req.EventEnd)
	if eeerr != nil {
		return database.UpdateTaskParams{}, fmt.Errorf(\"Event end is not a valid date!\")
	}
	tagId, err := uuid.Parse(req.TagID)
	if err != nil {
		return database.UpdateTaskParams{}, fmt.Errorf(\"Invalid Tag ID\")
	}
	return database.UpdateTaskParams{
		ID:          id,
		UserID:      userId,
		Title:       req.Title,
		EventStart:  eventStartTime,
		EventEnd:    eventEndTime,
		UpdatedAt:   time.Now(),
		Repetitions: req.Repetitions,
		TagID:       tagId,
	}, nil
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 20 (fontified t face tree-sitter-hl-face:type) 20 21 (fontified t) 21 27 (fontified t face tree-sitter-hl-face:keyword) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-1-face)) 29 31 (fontified t) 31 34 (fontified t face tree-sitter-hl-face:property) 34 36 (fontified t face tree-sitter-hl-face:property) 36 37 (fontified t) 37 43 (fontified t) 43 49 (fontified t face tree-sitter-hl-face:type) 49 50 (fontified t) 50 53 (fontified t face tree-sitter-hl-face:string) 53 64 (fontified t face tree-sitter-hl-face:string) 64 66 (fontified t) 66 77 (fontified t face tree-sitter-hl-face:property) 77 78 (fontified t) 78 84 (fontified t face tree-sitter-hl-face:type) 84 85 (fontified t) 85 105 (fontified t face tree-sitter-hl-face:string) 105 107 (fontified t) 107 117 (fontified t face tree-sitter-hl-face:property) 117 118 (fontified t) 118 119 (fontified t) 119 125 (fontified t face tree-sitter-hl-face:type) 125 126 (fontified t) 126 146 (fontified t face tree-sitter-hl-face:string) 146 148 (fontified t) 148 156 (fontified t face tree-sitter-hl-face:property) 156 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 166 (fontified t face tree-sitter-hl-face:type) 166 167 (fontified t) 167 185 (fontified t face tree-sitter-hl-face:string) 185 187 (fontified t) 187 198 (fontified t face tree-sitter-hl-face:property) 198 199 (fontified t) 199 205 (fontified t face tree-sitter-hl-face:type) 205 206 (fontified t) 206 226 (fontified t face tree-sitter-hl-face:string) 226 228 (fontified t) 228 233 (fontified t face tree-sitter-hl-face:property) 233 234 (fontified t) 234 235 (fontified t) 235 240 (fontified t) 240 246 (fontified t face tree-sitter-hl-face:type) 246 247 (fontified t) 247 262 (fontified t face tree-sitter-hl-face:string) 262 263 (fontified t) 263 264 (fontified t face (rainbow-delimiters-depth-1-face)) 264 265 (fontified t) 265 266 (fontified t) 266 270 (fontified t face tree-sitter-hl-face:keyword) 270 271 (fontified t) 271 272 (fontified t face (rainbow-delimiters-depth-1-face)) 272 275 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 275 276 (fontified t) 276 277 (fontified t face tree-sitter-hl-face:operator) 277 292 (fontified t face tree-sitter-hl-face:type) 292 293 (fontified t face (rainbow-delimiters-depth-1-face)) 293 294 (fontified t) 294 306 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 306 307 (fontified t face (rainbow-delimiters-depth-1-face)) 307 315 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 315 316 (fontified t) 316 322 (fontified t face tree-sitter-hl-face:type) 322 324 (fontified t) 324 330 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 330 331 (fontified t) 331 335 (fontified t) 335 336 (fontified t) 336 340 (fontified t face tree-sitter-hl-face:type) 340 341 (fontified t face (rainbow-delimiters-depth-1-face)) 341 342 (fontified t) 342 343 (fontified t face (rainbow-delimiters-depth-1-face)) 343 351 (fontified t) 351 352 (fontified t) 352 368 (fontified t face tree-sitter-hl-face:type) 368 370 (fontified t) 370 375 (fontified t face tree-sitter-hl-face:type) 375 376 (fontified t face (rainbow-delimiters-depth-1-face)) 376 377 (fontified t) 377 378 (fontified t face (rainbow-delimiters-depth-1-face)) 378 379 (fontified t) 379 380 (rear-nonsticky t fontified t) 380 382 (fontified t face tree-sitter-hl-face:variable) 382 384 (fontified t) 384 387 (fontified t face tree-sitter-hl-face:variable) 387 388 (fontified t) 388 390 (fontified t face tree-sitter-hl-face:operator) 390 391 (fontified t) 391 395 (fontified t face tree-sitter-hl-face:variable) 395 396 (fontified t) 396 401 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 401 402 (fontified t face (rainbow-delimiters-depth-2-face)) 402 410 (fontified t face tree-sitter-hl-face:variable) 410 411 (fontified t face (rainbow-delimiters-depth-2-face)) 411 412 (fontified t) 412 413 (fontified t) 413 415 (fontified t face tree-sitter-hl-face:keyword) 415 416 (fontified t) 416 419 (fontified t face tree-sitter-hl-face:variable) 419 420 (fontified t) 420 422 (fontified t face tree-sitter-hl-face:operator) 422 423 (fontified t) 423 426 (fontified t face tree-sitter-hl-face:constant\.builtin) 426 427 (fontified t) 427 428 (fontified t face (rainbow-delimiters-depth-2-face)) 428 429 (fontified t) 429 431 (fontified t) 431 437 (fontified t face tree-sitter-hl-face:keyword) 437 438 (fontified t) 438 447 (fontified t) 447 462 (fontified t face tree-sitter-hl-face:type) 462 463 (fontified t face tree-sitter-hl-face:type) 463 464 (fontified t face (rainbow-delimiters-depth-3-face)) 464 465 (fontified t face (rainbow-delimiters-depth-3-face)) 465 467 (fontified t) 467 470 (fontified t face tree-sitter-hl-face:variable) 470 471 (fontified t) 471 476 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 476 477 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 477 478 (fontified t face (rainbow-delimiters-depth-3-face)) 478 490 (fontified t face tree-sitter-hl-face:string) 490 491 (fontified t face (rainbow-delimiters-depth-3-face)) 491 492 (fontified t) 492 493 (fontified t) 493 494 (fontified t face (rainbow-delimiters-depth-2-face)) 494 495 (fontified t) 495 496 (fontified t) 496 498 (fontified t face tree-sitter-hl-face:variable) 498 500 (fontified t face tree-sitter-hl-face:variable) 500 501 (fontified t face tree-sitter-hl-face:variable) 501 502 (fontified t face tree-sitter-hl-face:variable) 502 510 (fontified t face tree-sitter-hl-face:variable) 510 512 (fontified t) 512 517 (fontified t face tree-sitter-hl-face:variable) 517 518 (fontified t) 518 520 (fontified t face tree-sitter-hl-face:operator) 520 521 (fontified t) 521 525 (fontified t face tree-sitter-hl-face:variable) 525 526 (fontified t) 526 531 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 531 532 (fontified t face (rainbow-delimiters-depth-2-face)) 532 537 (fontified t face tree-sitter-hl-face:variable) 537 538 (fontified t) 538 552 (fontified t face tree-sitter-hl-face:property) 552 554 (fontified t) 554 557 (fontified t face tree-sitter-hl-face:variable) 557 558 (fontified t) 558 568 (fontified t face tree-sitter-hl-face:property) 568 569 (fontified t face (rainbow-delimiters-depth-2-face)) 569 570 (fontified t) 570 571 (fontified t) 571 573 (fontified t face tree-sitter-hl-face:keyword) 573 574 (fontified t) 574 579 (fontified t face tree-sitter-hl-face:variable) 579 580 (fontified t) 580 582 (fontified t face tree-sitter-hl-face:operator) 582 583 (fontified t) 583 586 (fontified t face tree-sitter-hl-face:constant\.builtin) 586 587 (fontified t) 587 588 (fontified t face (rainbow-delimiters-depth-2-face)) 588 589 (fontified t) 589 591 (fontified t) 591 597 (fontified t face tree-sitter-hl-face:keyword) 597 598 (fontified t) 598 606 (fontified t) 606 607 (fontified t) 607 622 (fontified t face tree-sitter-hl-face:type) 622 623 (fontified t face tree-sitter-hl-face:type) 623 624 (fontified t face (rainbow-delimiters-depth-3-face)) 624 625 (fontified t face (rainbow-delimiters-depth-3-face)) 625 626 (fontified t) 626 627 (fontified t) 627 630 (fontified t face tree-sitter-hl-face:variable) 630 631 (fontified t) 631 637 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 637 638 (fontified t face (rainbow-delimiters-depth-3-face)) 638 639 (fontified t face tree-sitter-hl-face:string) 639 644 (fontified t face tree-sitter-hl-face:string) 644 645 (fontified t face tree-sitter-hl-face:string) 645 650 (fontified t face tree-sitter-hl-face:string) 650 651 (fontified t face tree-sitter-hl-face:string) 651 653 (fontified t face tree-sitter-hl-face:string) 653 654 (fontified t face tree-sitter-hl-face:string) 654 657 (fontified t face tree-sitter-hl-face:string) 657 658 (fontified t face tree-sitter-hl-face:string) 658 659 (fontified t face tree-sitter-hl-face:string) 659 660 (fontified t face tree-sitter-hl-face:string) 660 665 (fontified t face tree-sitter-hl-face:string) 665 666 (fontified t face tree-sitter-hl-face:string) 666 670 (fontified t face tree-sitter-hl-face:string) 670 671 (fontified t face tree-sitter-hl-face:string) 671 672 (fontified t face tree-sitter-hl-face:string) 672 673 (fontified t face (rainbow-delimiters-depth-3-face)) 673 674 (fontified t) 674 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-2-face)) 676 677 (fontified t) 677 678 (fontified t) 678 690 (fontified t face tree-sitter-hl-face:variable) 690 692 (fontified t) 692 697 (fontified t face tree-sitter-hl-face:variable) 697 698 (fontified t) 698 700 (fontified t face tree-sitter-hl-face:operator) 700 701 (fontified t) 701 705 (fontified t face tree-sitter-hl-face:variable) 705 706 (fontified t) 706 707 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 707 708 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 708 711 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 711 712 (fontified t face (rainbow-delimiters-depth-2-face)) 712 717 (fontified t face tree-sitter-hl-face:variable) 717 718 (fontified t) 718 732 (fontified t face tree-sitter-hl-face:property) 732 734 (fontified t) 734 737 (fontified t face tree-sitter-hl-face:variable) 737 738 (fontified t) 738 746 (fontified t face tree-sitter-hl-face:property) 746 747 (fontified t face (rainbow-delimiters-depth-2-face)) 747 748 (fontified t) 748 749 (fontified t) 749 751 (fontified t face tree-sitter-hl-face:keyword) 751 752 (fontified t) 752 757 (fontified t face tree-sitter-hl-face:variable) 757 758 (fontified t) 758 760 (fontified t face tree-sitter-hl-face:operator) 760 761 (fontified t) 761 763 (fontified t face tree-sitter-hl-face:constant\.builtin) 763 764 (fontified t face tree-sitter-hl-face:constant\.builtin) 764 765 (fontified t) 765 766 (fontified t face (rainbow-delimiters-depth-2-face)) 766 767 (fontified t) 767 768 (fontified t) 768 769 (rear-nonsticky t fontified t) 769 775 (fontified t face tree-sitter-hl-face:keyword) 775 776 (fontified t) 776 784 (fontified t) 784 785 (fontified t) 785 800 (fontified t face tree-sitter-hl-face:type) 800 801 (fontified t face tree-sitter-hl-face:type) 801 802 (fontified t face (rainbow-delimiters-depth-3-face)) 802 803 (fontified t face (rainbow-delimiters-depth-3-face)) 803 804 (fontified t) 804 805 (fontified t) 805 808 (fontified t face tree-sitter-hl-face:variable) 808 809 (fontified t) 809 815 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 815 816 (fontified t face (rainbow-delimiters-depth-3-face)) 816 817 (fontified t face tree-sitter-hl-face:string) 817 822 (fontified t face tree-sitter-hl-face:string) 822 826 (fontified t face tree-sitter-hl-face:string) 826 827 (fontified t face tree-sitter-hl-face:string) 827 829 (fontified t face tree-sitter-hl-face:string) 829 830 (fontified t face tree-sitter-hl-face:string) 830 833 (fontified t face tree-sitter-hl-face:string) 833 834 (fontified t face tree-sitter-hl-face:string) 834 835 (fontified t face tree-sitter-hl-face:string) 835 836 (fontified t face tree-sitter-hl-face:string) 836 840 (fontified t face tree-sitter-hl-face:string) 840 841 (fontified t face tree-sitter-hl-face:string) 841 842 (fontified t face tree-sitter-hl-face:string) 842 846 (fontified t face tree-sitter-hl-face:string) 846 847 (fontified t face tree-sitter-hl-face:string) 847 848 (fontified t face tree-sitter-hl-face:string) 848 849 (fontified t face (rainbow-delimiters-depth-3-face)) 849 850 (fontified t) 850 851 (fontified t) 851 852 (fontified t face (rainbow-delimiters-depth-2-face)) 852 853 (fontified t) 853 854 (fontified t) 854 859 (fontified t face tree-sitter-hl-face:variable) 859 861 (fontified t) 861 864 (fontified t face tree-sitter-hl-face:variable) 864 865 (fontified t) 865 867 (fontified t face tree-sitter-hl-face:operator) 867 868 (fontified t) 868 872 (fontified t face tree-sitter-hl-face:variable) 872 873 (fontified t) 873 878 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 878 879 (fontified t face (rainbow-delimiters-depth-2-face)) 879 882 (fontified t face tree-sitter-hl-face:variable) 882 883 (fontified t) 883 888 (fontified t face tree-sitter-hl-face:property) 888 889 (fontified t face (rainbow-delimiters-depth-2-face)) 889 890 (fontified t) 890 891 (fontified t) 891 893 (fontified t face tree-sitter-hl-face:keyword) 893 894 (fontified t) 894 897 (fontified t face tree-sitter-hl-face:variable) 897 898 (fontified t) 898 900 (fontified t face tree-sitter-hl-face:operator) 900 901 (fontified t) 901 904 (fontified t face tree-sitter-hl-face:constant\.builtin) 904 905 (fontified t) 905 906 (fontified t face (rainbow-delimiters-depth-2-face)) 906 907 (fontified t) 907 909 (fontified t) 909 915 (fontified t face tree-sitter-hl-face:keyword) 915 916 (fontified t) 916 925 (fontified t) 925 940 (fontified t face tree-sitter-hl-face:type) 940 941 (fontified t face tree-sitter-hl-face:type) 941 942 (fontified t face (rainbow-delimiters-depth-3-face)) 942 943 (fontified t face (rainbow-delimiters-depth-3-face)) 943 944 (fontified t) 944 945 (fontified t) 945 948 (fontified t face tree-sitter-hl-face:variable) 948 949 (fontified t) 949 955 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 955 956 (fontified t face (rainbow-delimiters-depth-3-face)) 956 957 (fontified t face tree-sitter-hl-face:string) 957 964 (fontified t face tree-sitter-hl-face:string) 964 965 (fontified t face tree-sitter-hl-face:string) 965 968 (fontified t face tree-sitter-hl-face:string) 968 969 (fontified t face tree-sitter-hl-face:string) 969 971 (fontified t face tree-sitter-hl-face:string) 971 972 (fontified t face tree-sitter-hl-face:string) 972 973 (fontified t face (rainbow-delimiters-depth-3-face)) 973 974 (fontified t) 974 975 (fontified t) 975 976 (fontified t face (rainbow-delimiters-depth-2-face)) 976 977 (fontified t) 977 978 (fontified t) 978 984 (fontified t face tree-sitter-hl-face:keyword) 984 985 (fontified t) 985 993 (fontified t) 993 994 (fontified t) 994 1010 (fontified t face tree-sitter-hl-face:type) 1010 1011 (fontified t face (rainbow-delimiters-depth-2-face)) 1011 1012 (fontified t) 1012 1014 (fontified t) 1014 1016 (fontified t face tree-sitter-hl-face:variable) 1016 1017 (fontified t) 1017 1018 (fontified t) 1018 1019 (fontified t) 1019 1027 (fontified t) 1027 1029 (fontified t face tree-sitter-hl-face:variable) 1029 1031 (fontified t) 1031 1033 (fontified t) 1033 1039 (fontified t face tree-sitter-hl-face:variable) 1039 1040 (fontified t) 1040 1043 (fontified t) 1043 1044 (fontified t) 1044 1046 (fontified t) 1046 1052 (fontified t face tree-sitter-hl-face:variable) 1052 1054 (fontified t) 1054 1056 (fontified t) 1056 1061 (fontified t face tree-sitter-hl-face:variable) 1061 1062 (fontified t) 1062 1066 (fontified t) 1066 1067 (fontified t) 1067 1069 (fontified t) 1069 1072 (fontified t face tree-sitter-hl-face:variable) 1072 1073 (fontified t) 1073 1078 (fontified t face tree-sitter-hl-face:property) 1078 1080 (fontified t) 1080 1082 (fontified t) 1082 1092 (fontified t face tree-sitter-hl-face:variable) 1092 1093 (fontified t) 1093 1094 (fontified t) 1094 1095 (fontified t) 1095 1109 (fontified t face tree-sitter-hl-face:variable) 1109 1113 (fontified t) 1113 1121 (fontified t face tree-sitter-hl-face:variable) 1121 1122 (fontified t) 1122 1125 (fontified t) 1125 1126 (fontified t) 1126 1133 (fontified t face tree-sitter-hl-face:variable) 1133 1138 (fontified t face tree-sitter-hl-face:variable) 1138 1142 (fontified t) 1142 1151 (fontified t face tree-sitter-hl-face:variable) 1151 1153 (fontified t) 1153 1155 (fontified t) 1155 1159 (fontified t face tree-sitter-hl-face:variable) 1159 1160 (fontified t) 1160 1163 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1163 1164 (fontified t face (rainbow-delimiters-depth-3-face)) 1164 1165 (fontified t face (rainbow-delimiters-depth-3-face)) 1165 1167 (fontified t) 1167 1169 (fontified t) 1169 1180 (fontified t face tree-sitter-hl-face:variable) 1180 1182 (fontified t) 1182 1185 (fontified t face tree-sitter-hl-face:variable) 1185 1186 (fontified t) 1186 1197 (fontified t face tree-sitter-hl-face:property) 1197 1199 (fontified t) 1199 1201 (fontified t) 1201 1206 (fontified t face tree-sitter-hl-face:variable) 1206 1207 (fontified t) 1207 1211 (fontified t) 1211 1212 (fontified t) 1212 1213 (fontified t) 1213 1214 (fontified t) 1214 1219 (fontified t face tree-sitter-hl-face:variable) 1219 1221 (fontified t) 1221 1222 (fontified t) 1222 1223 (fontified t face (rainbow-delimiters-depth-2-face)) 1223 1225 (fontified t) 1225 1228 (fontified t face tree-sitter-hl-face:constant\.builtin) 1228 1229 (fontified t) 1229 1230 (fontified t face (rainbow-delimiters-depth-1-face)) 1230 1231 (fontified t)) . 6461) (undo-tree-id1875 . -1230) (undo-tree-id1876 . -18) (undo-tree-id1877 . -1230) (undo-tree-id1878 . -1230) (undo-tree-id1879 . -1231) (undo-tree-id1880 . -1231) (undo-tree-id1881 . -1231) (undo-tree-id1882 . -1231) (undo-tree-id1883 . -767) (undo-tree-id1884 . -1230) (undo-tree-id1885 . -18) (undo-tree-id1886 . -1230) 7691 (t 25953 249 261008 618000)) nil (25953 290 805208 512000) 0 nil])
([nil nil ((7109 . 7115)) nil (25953 290 805184 798000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7109) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7110) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7111) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7112) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7113) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("." 0 1 (fontified t)) . -7114) (undo-tree-id1909 . -1) 7115 (t 25953 290 845636 170000)) nil (25953 360 726583 421000) 0 nil])
([nil nil ((#("func (req *TaskRequestType) toCreateTask(userId uuid.UUID) (database.AddTaskParams, error) {
	eventStartTime, eserr := time.Parse(utils.BaseDateString, req.EventStart)
	if eserr != nil {
		return database.AddTaskParams{}, fmt.Errorf(\"Event start is not a valid date!\")
	}
	eventEndTime, eeerr := time.Parse(utils.BaseDateString, req.EventEnd)
	if eeerr != nil {
		return database.AddTaskParams{}, fmt.Errorf(\"Event end is not a valid date!\")
	}
	tagId, err := uuid.Parse(req.TagID)
	if err != nil {
		return database.AddTaskParams{}, fmt.Errorf(\"Invalid tag id\")
	}
	timeStamp := time.Now()
	return database.AddTaskParams{
		ID:          uuid.New(),
		UserID:      userId,
		Title:       req.Title,
		EventStart:  eventStartTime,
		EventEnd:    eventEndTime,
		UpdatedAt:   timeStamp,
		CreatedAt:   timeStamp,
		Repetitions: req.Repetitions,
		TagID:       tagId,
	}, nil

}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 9 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:operator) 11 26 (fontified t face tree-sitter-hl-face:type) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 40 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 47 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 47 48 (fontified t) 48 52 (fontified t) 52 53 (fontified t) 53 57 (fontified t face tree-sitter-hl-face:type) 57 58 (fontified t face (rainbow-delimiters-depth-1-face)) 58 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-1-face)) 60 68 (fontified t) 68 69 (fontified t) 69 82 (fontified t face tree-sitter-hl-face:type) 82 84 (fontified t) 84 89 (fontified t face tree-sitter-hl-face:type) 89 90 (fontified t face (rainbow-delimiters-depth-1-face)) 90 91 (fontified t) 91 92 (fontified t face (rainbow-delimiters-depth-1-face)) 92 93 (fontified t) 93 94 (rear-nonsticky t fontified t) 94 108 (fontified t face tree-sitter-hl-face:variable) 108 110 (fontified t) 110 115 (fontified t face tree-sitter-hl-face:variable) 115 116 (fontified t) 116 118 (fontified t face tree-sitter-hl-face:operator) 118 119 (fontified t) 119 122 (fontified t face tree-sitter-hl-face:variable) 122 123 (fontified t face tree-sitter-hl-face:variable) 123 124 (fontified t) 124 129 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 129 130 (fontified t face (rainbow-delimiters-depth-2-face)) 130 135 (fontified t face tree-sitter-hl-face:variable) 135 136 (fontified t) 136 139 (fontified t face tree-sitter-hl-face:property) 139 140 (fontified t face tree-sitter-hl-face:property) 140 144 (fontified t face tree-sitter-hl-face:property) 144 145 (fontified t face tree-sitter-hl-face:property) 145 146 (fontified t face tree-sitter-hl-face:property) 146 150 (fontified t face tree-sitter-hl-face:property) 150 152 (fontified t) 152 155 (fontified t face tree-sitter-hl-face:variable) 155 156 (fontified t) 156 157 (fontified t face tree-sitter-hl-face:property) 157 158 (fontified t face tree-sitter-hl-face:property) 158 159 (fontified t face tree-sitter-hl-face:property) 159 160 (fontified t face tree-sitter-hl-face:property) 160 161 (fontified t face tree-sitter-hl-face:property) 161 162 (fontified t face tree-sitter-hl-face:property) 162 163 (fontified t face tree-sitter-hl-face:property) 163 165 (fontified t face tree-sitter-hl-face:property) 165 166 (fontified t face tree-sitter-hl-face:property) 166 167 (fontified t face (rainbow-delimiters-depth-2-face)) 167 168 (fontified t) 168 169 (fontified t) 169 171 (fontified t face tree-sitter-hl-face:keyword) 171 172 (fontified t) 172 177 (fontified t face tree-sitter-hl-face:variable) 177 178 (fontified t) 178 180 (fontified t face tree-sitter-hl-face:operator) 180 181 (fontified t) 181 184 (fontified t face tree-sitter-hl-face:constant\.builtin) 184 185 (fontified t) 185 186 (fontified t face (rainbow-delimiters-depth-2-face)) 186 187 (fontified t) 187 189 (fontified t) 189 195 (fontified t face tree-sitter-hl-face:keyword) 195 196 (fontified t) 196 205 (fontified t) 205 217 (fontified t face tree-sitter-hl-face:type) 217 218 (fontified t face tree-sitter-hl-face:type) 218 219 (fontified t face (rainbow-delimiters-depth-3-face)) 219 220 (fontified t face (rainbow-delimiters-depth-3-face)) 220 221 (fontified t) 221 222 (fontified t) 222 225 (fontified t face tree-sitter-hl-face:variable) 225 226 (fontified t) 226 232 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 232 233 (fontified t face (rainbow-delimiters-depth-3-face)) 233 234 (fontified t face tree-sitter-hl-face:string) 234 239 (fontified t face tree-sitter-hl-face:string) 239 240 (fontified t face tree-sitter-hl-face:string) 240 245 (fontified t face tree-sitter-hl-face:string) 245 246 (fontified t face tree-sitter-hl-face:string) 246 248 (fontified t face tree-sitter-hl-face:string) 248 249 (fontified t face tree-sitter-hl-face:string) 249 252 (fontified t face tree-sitter-hl-face:string) 252 253 (fontified t face tree-sitter-hl-face:string) 253 254 (fontified t face tree-sitter-hl-face:string) 254 255 (fontified t face tree-sitter-hl-face:string) 255 260 (fontified t face tree-sitter-hl-face:string) 260 261 (fontified t face tree-sitter-hl-face:string) 261 265 (fontified t face tree-sitter-hl-face:string) 265 266 (fontified t face tree-sitter-hl-face:string) 266 267 (fontified t face tree-sitter-hl-face:string) 267 268 (fontified t face (rainbow-delimiters-depth-3-face)) 268 269 (fontified t) 269 270 (fontified t) 270 271 (fontified t face (rainbow-delimiters-depth-2-face)) 271 272 (fontified t) 272 273 (fontified t) 273 285 (fontified t face tree-sitter-hl-face:variable) 285 287 (fontified t) 287 292 (fontified t face tree-sitter-hl-face:variable) 292 293 (fontified t) 293 295 (fontified t face tree-sitter-hl-face:operator) 295 296 (fontified t) 296 300 (fontified t face tree-sitter-hl-face:variable) 300 301 (fontified t) 301 306 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 306 307 (fontified t face (rainbow-delimiters-depth-2-face)) 307 312 (fontified t face tree-sitter-hl-face:variable) 312 313 (fontified t) 313 323 (fontified t face tree-sitter-hl-face:property) 323 327 (fontified t face tree-sitter-hl-face:property) 327 329 (fontified t) 329 332 (fontified t face tree-sitter-hl-face:variable) 332 333 (fontified t) 333 341 (fontified t face tree-sitter-hl-face:property) 341 342 (fontified t face (rainbow-delimiters-depth-2-face)) 342 343 (fontified t) 343 344 (fontified t) 344 346 (fontified t face tree-sitter-hl-face:keyword) 346 347 (fontified t) 347 352 (fontified t face tree-sitter-hl-face:variable) 352 353 (fontified t) 353 355 (fontified t face tree-sitter-hl-face:operator) 355 356 (fontified t) 356 359 (fontified t face tree-sitter-hl-face:constant\.builtin) 359 360 (fontified t) 360 361 (fontified t face (rainbow-delimiters-depth-2-face)) 361 362 (fontified t) 362 363 (fontified t) 363 364 (fontified t) 364 370 (fontified t face tree-sitter-hl-face:keyword) 370 371 (fontified t) 371 380 (fontified t) 380 392 (fontified t face tree-sitter-hl-face:type) 392 393 (fontified t face tree-sitter-hl-face:type) 393 394 (fontified t face (rainbow-delimiters-depth-3-face)) 394 395 (fontified t face (rainbow-delimiters-depth-3-face)) 395 396 (fontified t) 396 397 (fontified t) 397 400 (fontified t face tree-sitter-hl-face:variable) 400 401 (fontified t) 401 407 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 407 408 (fontified t face (rainbow-delimiters-depth-3-face)) 408 409 (fontified t face tree-sitter-hl-face:string) 409 414 (fontified t face tree-sitter-hl-face:string) 414 415 (fontified t face tree-sitter-hl-face:string) 415 418 (fontified t face tree-sitter-hl-face:string) 418 419 (fontified t face tree-sitter-hl-face:string) 419 421 (fontified t face tree-sitter-hl-face:string) 421 422 (fontified t face tree-sitter-hl-face:string) 422 425 (fontified t face tree-sitter-hl-face:string) 425 426 (fontified t face tree-sitter-hl-face:string) 426 427 (fontified t face tree-sitter-hl-face:string) 427 428 (fontified t face tree-sitter-hl-face:string) 428 433 (fontified t face tree-sitter-hl-face:string) 433 434 (fontified t face tree-sitter-hl-face:string) 434 438 (fontified t face tree-sitter-hl-face:string) 438 439 (fontified t face tree-sitter-hl-face:string) 439 440 (fontified t face tree-sitter-hl-face:string) 440 441 (fontified t face (rainbow-delimiters-depth-3-face)) 441 442 (fontified t) 442 443 (fontified t) 443 444 (fontified t face (rainbow-delimiters-depth-2-face)) 444 445 (fontified t) 445 446 (fontified t) 446 451 (fontified t face tree-sitter-hl-face:variable) 451 453 (fontified t) 453 456 (fontified t face tree-sitter-hl-face:variable) 456 457 (fontified t) 457 459 (fontified t face tree-sitter-hl-face:operator) 459 460 (fontified t) 460 464 (fontified t face tree-sitter-hl-face:variable) 464 465 (fontified t) 465 470 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 470 471 (fontified t face (rainbow-delimiters-depth-2-face)) 471 474 (fontified t face tree-sitter-hl-face:variable) 474 475 (fontified t) 475 480 (fontified t face tree-sitter-hl-face:property) 480 481 (fontified t face (rainbow-delimiters-depth-2-face)) 481 482 (fontified t) 482 483 (fontified t) 483 485 (fontified t face tree-sitter-hl-face:keyword) 485 486 (fontified t) 486 489 (fontified t face tree-sitter-hl-face:variable) 489 490 (fontified t) 490 492 (fontified t face tree-sitter-hl-face:operator) 492 493 (fontified t) 493 496 (fontified t face tree-sitter-hl-face:constant\.builtin) 496 497 (fontified t) 497 498 (fontified t face (rainbow-delimiters-depth-2-face)) 498 499 (fontified t) 499 501 (fontified t) 501 507 (fontified t face tree-sitter-hl-face:keyword) 507 508 (fontified t) 508 517 (fontified t) 517 529 (fontified t face tree-sitter-hl-face:type) 529 530 (fontified t face tree-sitter-hl-face:type) 530 531 (fontified t face (rainbow-delimiters-depth-3-face)) 531 532 (fontified t face (rainbow-delimiters-depth-3-face)) 532 534 (fontified t) 534 537 (fontified t face tree-sitter-hl-face:variable) 537 538 (fontified t) 538 544 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 544 545 (fontified t face (rainbow-delimiters-depth-3-face)) 545 561 (fontified t face tree-sitter-hl-face:string) 561 562 (fontified t face (rainbow-delimiters-depth-3-face)) 562 563 (fontified t) 563 564 (fontified t) 564 565 (fontified t face (rainbow-delimiters-depth-2-face)) 565 567 (fontified t) 567 576 (fontified t face tree-sitter-hl-face:variable) 576 577 (fontified t) 577 579 (fontified t face tree-sitter-hl-face:operator) 579 580 (fontified t) 580 584 (fontified t face tree-sitter-hl-face:variable) 584 585 (fontified t) 585 588 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 588 589 (fontified t face (rainbow-delimiters-depth-2-face)) 589 590 (fontified t face (rainbow-delimiters-depth-2-face)) 590 591 (fontified t) 591 592 (fontified t) 592 598 (fontified t face tree-sitter-hl-face:keyword) 598 599 (fontified t) 599 607 (fontified t) 607 608 (fontified t) 608 621 (fontified t face tree-sitter-hl-face:type) 621 622 (fontified t face (rainbow-delimiters-depth-2-face)) 622 623 (fontified t) 623 625 (fontified t) 625 627 (fontified t face tree-sitter-hl-face:variable) 627 628 (fontified t) 628 637 (fontified t) 637 638 (fontified t) 638 642 (fontified t face tree-sitter-hl-face:variable) 642 643 (fontified t) 643 646 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 646 647 (fontified t face (rainbow-delimiters-depth-3-face)) 647 648 (fontified t face (rainbow-delimiters-depth-3-face)) 648 650 (fontified t) 650 652 (fontified t) 652 658 (fontified t face tree-sitter-hl-face:variable) 658 660 (fontified t) 660 665 (fontified t) 665 671 (fontified t face tree-sitter-hl-face:variable) 671 673 (fontified t) 673 675 (fontified t) 675 680 (fontified t face tree-sitter-hl-face:variable) 680 681 (fontified t) 681 687 (fontified t) 687 688 (fontified t) 688 691 (fontified t face tree-sitter-hl-face:variable) 691 692 (fontified t) 692 697 (fontified t face tree-sitter-hl-face:property) 697 699 (fontified t) 699 701 (fontified t) 701 711 (fontified t face tree-sitter-hl-face:variable) 711 713 (fontified t) 713 714 (fontified t) 714 728 (fontified t face tree-sitter-hl-face:variable) 728 732 (fontified t) 732 740 (fontified t face tree-sitter-hl-face:variable) 740 741 (fontified t) 741 743 (fontified t) 743 744 (fontified t) 744 745 (fontified t) 745 757 (fontified t face tree-sitter-hl-face:variable) 757 761 (fontified t) 761 770 (fontified t face tree-sitter-hl-face:variable) 770 771 (fontified t) 771 773 (fontified t) 773 774 (fontified t) 774 783 (fontified t face tree-sitter-hl-face:variable) 783 787 (fontified t) 787 796 (fontified t face tree-sitter-hl-face:variable) 796 798 (fontified t) 798 800 (fontified t) 800 809 (fontified t face tree-sitter-hl-face:variable) 809 811 (fontified t) 811 813 (fontified t) 813 824 (fontified t face tree-sitter-hl-face:variable) 824 826 (fontified t) 826 829 (fontified t face tree-sitter-hl-face:variable) 829 830 (fontified t) 830 841 (fontified t face tree-sitter-hl-face:property) 841 843 (fontified t) 843 845 (fontified t) 845 850 (fontified t face tree-sitter-hl-face:variable) 850 851 (fontified t) 851 853 (fontified t) 853 855 (fontified t) 855 856 (fontified t) 856 858 (fontified t) 858 862 (fontified t face tree-sitter-hl-face:variable) 862 863 (fontified t face tree-sitter-hl-face:variable) 863 864 (fontified t) 864 865 (fontified t) 865 866 (fontified t) 866 867 (fontified t face (rainbow-delimiters-depth-2-face)) 867 869 (fontified t) 869 872 (fontified t face tree-sitter-hl-face:constant\.builtin) 872 873 (fontified t) 873 874 (fontified t) 874 875 (fontified t face (rainbow-delimiters-depth-1-face)) 875 876 (fontified t)) . 7098) (undo-tree-id1887 . -875) (undo-tree-id1888 . -10) (undo-tree-id1889 . -875) (undo-tree-id1890 . -875) (undo-tree-id1891 . 865) (undo-tree-id1892 . -48) (undo-tree-id1893 . 865) (undo-tree-id1894 . -362) (undo-tree-id1895 . -11) (undo-tree-id1896 . -875) (undo-tree-id1897 . -10) (undo-tree-id1898 . -875) 7973) nil (25953 360 726578 229000) 0 nil])
([nil nil ((7212 . 7218)) nil (25953 360 726555 217000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -7426) (undo-tree-id1910 . -1) 7427 (t 25953 360 856521 696000)) nil (25953 366 965209 418000) 0 nil])
([nil nil ((7426 . 7427)) nil (25953 366 965192 118000) 0 nil])
([nil nil ((8720 . 8721) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . 8720) (undo-tree-id1911 . -1) (t 25953 367 1946 956000)) nil (25953 430 58792 576000) 0 nil])
([nil nil ((#("type DailyTaskRequestType struct {
	Title       string `json:\"title\"`
	Description string `json:\"description\"`
	DateStart   string `json:\"event_start\"`
	Repetitions string `json:\"repetitions\"`
	TagID       string `json:\"tag_id\"`
}

func (req *DailyTaskRequestType) ToUpdateDailyTask(idstring string, userId uuid.UUID) (database.UpdateDailyTaskParams, error) {
	id, err := uuid.Parse(idstring)
	if err != nil {
		return database.UpdateDailyTaskParams{}, fmt.Errorf(\"Invalid id\")
	}
	dateStartTime, eserr := time.Parse(utils.BaseDateString, req.DateStart)
	if eserr != nil {
		return database.UpdateDailyTaskParams{}, fmt.Errorf(\"Date start is not a valid date!\")
	}
	tagId, err := uuid.Parse(req.TagID)
	if err != nil {
		return database.UpdateDailyTaskParams{}, fmt.Errorf(\"Invalid Tag ID\")
	}
	return database.UpdateDailyTaskParams{
		ID:          id,
		UserID:      userId,
		Title:       req.Title,
		DateStart:   dateStartTime,
		UpdatedAt:   time.Now(),
		Repetitions: req.Repetitions,
		TagID:       tagId,
	}, nil	
}

" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 10 (fontified t face tree-sitter-hl-face:type) 10 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t) 26 32 (fontified t face tree-sitter-hl-face:keyword) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 36 (fontified t) 36 41 (fontified t face tree-sitter-hl-face:property) 41 43 (fontified t) 43 44 (fontified t) 44 48 (fontified t) 48 54 (fontified t face tree-sitter-hl-face:type) 54 55 (fontified t) 55 69 (fontified t face tree-sitter-hl-face:string) 69 71 (fontified t) 71 82 (fontified t face tree-sitter-hl-face:property) 82 83 (fontified t) 83 89 (fontified t face tree-sitter-hl-face:type) 89 90 (fontified t) 90 110 (fontified t face tree-sitter-hl-face:string) 110 111 (fontified t) 111 112 (fontified t) 112 116 (fontified t face tree-sitter-hl-face:property) 116 121 (fontified t face tree-sitter-hl-face:property) 121 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 130 (fontified t face tree-sitter-hl-face:type) 130 131 (fontified t) 131 148 (fontified t face tree-sitter-hl-face:string) 148 149 (fontified t face tree-sitter-hl-face:string) 149 150 (fontified t face tree-sitter-hl-face:string) 150 151 (fontified t face tree-sitter-hl-face:string) 151 152 (fontified t) 152 153 (fontified t) 153 164 (fontified t face tree-sitter-hl-face:property) 164 165 (fontified t) 165 171 (fontified t face tree-sitter-hl-face:type) 171 172 (fontified t) 172 192 (fontified t face tree-sitter-hl-face:string) 192 193 (fontified t) 193 194 (fontified t) 194 199 (fontified t face tree-sitter-hl-face:property) 199 204 (fontified t) 204 205 (fontified t) 205 206 (fontified t) 206 212 (fontified t face tree-sitter-hl-face:type) 212 213 (fontified t) 213 228 (fontified t face tree-sitter-hl-face:string) 228 229 (fontified t) 229 230 (fontified t face (rainbow-delimiters-depth-1-face)) 230 231 (fontified t) 231 232 (fontified t) 232 236 (fontified t face tree-sitter-hl-face:keyword) 236 237 (fontified t) 237 238 (fontified t face (rainbow-delimiters-depth-1-face)) 238 241 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 241 242 (fontified t) 242 243 (fontified t face tree-sitter-hl-face:operator) 243 247 (fontified t face tree-sitter-hl-face:type) 247 263 (fontified t face tree-sitter-hl-face:type) 263 264 (fontified t face (rainbow-delimiters-depth-1-face)) 264 265 (fontified t) 265 266 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 266 282 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 282 283 (fontified t face (rainbow-delimiters-depth-1-face)) 283 291 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 291 292 (fontified t) 292 298 (fontified t face tree-sitter-hl-face:type) 298 300 (fontified t) 300 306 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 306 307 (fontified t) 307 311 (fontified t) 311 312 (fontified t) 312 316 (fontified t face tree-sitter-hl-face:type) 316 317 (fontified t face (rainbow-delimiters-depth-1-face)) 317 318 (fontified t) 318 319 (fontified t face (rainbow-delimiters-depth-1-face)) 319 327 (fontified t) 327 328 (fontified t) 328 349 (fontified t face tree-sitter-hl-face:type) 349 351 (fontified t) 351 356 (fontified t face tree-sitter-hl-face:type) 356 357 (fontified t face (rainbow-delimiters-depth-1-face)) 357 358 (fontified t) 358 359 (fontified t face (rainbow-delimiters-depth-1-face)) 359 360 (fontified t) 360 361 (fontified t) 361 363 (fontified t face tree-sitter-hl-face:variable) 363 365 (fontified t) 365 368 (fontified t face tree-sitter-hl-face:variable) 368 369 (fontified t) 369 371 (fontified t face tree-sitter-hl-face:operator) 371 372 (fontified t) 372 376 (fontified t face tree-sitter-hl-face:variable) 376 377 (fontified t) 377 382 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 382 383 (fontified t face (rainbow-delimiters-depth-2-face)) 383 391 (fontified t face tree-sitter-hl-face:variable) 391 392 (fontified t face (rainbow-delimiters-depth-2-face)) 392 393 (fontified t) 393 394 (fontified t) 394 396 (fontified t face tree-sitter-hl-face:keyword) 396 397 (fontified t) 397 400 (fontified t face tree-sitter-hl-face:variable) 400 401 (fontified t) 401 403 (fontified t face tree-sitter-hl-face:operator) 403 404 (fontified t) 404 407 (fontified t face tree-sitter-hl-face:constant\.builtin) 407 408 (fontified t) 408 409 (fontified t face (rainbow-delimiters-depth-2-face)) 409 410 (fontified t) 410 412 (fontified t) 412 418 (fontified t face tree-sitter-hl-face:keyword) 418 419 (fontified t) 419 428 (fontified t) 428 441 (fontified t face tree-sitter-hl-face:type) 441 448 (fontified t face tree-sitter-hl-face:type) 448 449 (fontified t face tree-sitter-hl-face:type) 449 450 (fontified t face (rainbow-delimiters-depth-3-face)) 450 451 (fontified t face (rainbow-delimiters-depth-3-face)) 451 453 (fontified t) 453 456 (fontified t face tree-sitter-hl-face:variable) 456 457 (fontified t) 457 463 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 463 464 (fontified t face (rainbow-delimiters-depth-3-face)) 464 476 (fontified t face tree-sitter-hl-face:string) 476 477 (fontified t face (rainbow-delimiters-depth-3-face)) 477 478 (fontified t) 478 479 (fontified t) 479 480 (fontified t face (rainbow-delimiters-depth-2-face)) 480 481 (fontified t) 481 482 (rear-nonsticky t fontified t) 482 484 (fontified t face tree-sitter-hl-face:variable) 484 485 (fontified t face tree-sitter-hl-face:variable) 485 486 (fontified t face tree-sitter-hl-face:variable) 486 488 (fontified t face tree-sitter-hl-face:variable) 488 495 (fontified t face tree-sitter-hl-face:variable) 495 497 (fontified t) 497 502 (fontified t face tree-sitter-hl-face:variable) 502 503 (fontified t) 503 505 (fontified t face tree-sitter-hl-face:operator) 505 506 (fontified t) 506 510 (fontified t face tree-sitter-hl-face:variable) 510 511 (fontified t) 511 516 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 516 517 (fontified t face (rainbow-delimiters-depth-2-face)) 517 522 (fontified t face tree-sitter-hl-face:variable) 522 523 (fontified t) 523 537 (fontified t face tree-sitter-hl-face:property) 537 539 (fontified t) 539 542 (fontified t face tree-sitter-hl-face:variable) 542 543 (fontified t) 543 552 (fontified t face tree-sitter-hl-face:property) 552 553 (fontified t face (rainbow-delimiters-depth-2-face)) 553 554 (fontified t) 554 555 (fontified t) 555 557 (fontified t face tree-sitter-hl-face:keyword) 557 558 (fontified t) 558 563 (fontified t face tree-sitter-hl-face:variable) 563 564 (fontified t) 564 566 (fontified t face tree-sitter-hl-face:operator) 566 567 (fontified t) 567 570 (fontified t face tree-sitter-hl-face:constant\.builtin) 570 571 (fontified t) 571 572 (fontified t face (rainbow-delimiters-depth-2-face)) 572 573 (fontified t) 573 575 (fontified t) 575 581 (fontified t face tree-sitter-hl-face:keyword) 581 582 (fontified t) 582 591 (fontified t) 591 611 (fontified t face tree-sitter-hl-face:type) 611 612 (fontified t face tree-sitter-hl-face:type) 612 613 (fontified t face (rainbow-delimiters-depth-3-face)) 613 614 (fontified t face (rainbow-delimiters-depth-3-face)) 614 615 (fontified t) 615 616 (fontified t) 616 619 (fontified t face tree-sitter-hl-face:variable) 619 620 (fontified t) 620 626 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 626 627 (fontified t face (rainbow-delimiters-depth-3-face)) 627 628 (fontified t face tree-sitter-hl-face:string) 628 632 (fontified t face tree-sitter-hl-face:string) 632 633 (fontified t face tree-sitter-hl-face:string) 633 638 (fontified t face tree-sitter-hl-face:string) 638 639 (fontified t face tree-sitter-hl-face:string) 639 641 (fontified t face tree-sitter-hl-face:string) 641 642 (fontified t face tree-sitter-hl-face:string) 642 645 (fontified t face tree-sitter-hl-face:string) 645 646 (fontified t face tree-sitter-hl-face:string) 646 647 (fontified t face tree-sitter-hl-face:string) 647 648 (fontified t face tree-sitter-hl-face:string) 648 653 (fontified t face tree-sitter-hl-face:string) 653 654 (fontified t face tree-sitter-hl-face:string) 654 658 (fontified t face tree-sitter-hl-face:string) 658 659 (fontified t face tree-sitter-hl-face:string) 659 660 (fontified t face tree-sitter-hl-face:string) 660 661 (fontified t face (rainbow-delimiters-depth-3-face)) 661 662 (fontified t) 662 663 (fontified t) 663 664 (fontified t face (rainbow-delimiters-depth-2-face)) 664 665 (fontified t) 665 666 (fontified t) 666 671 (fontified t face tree-sitter-hl-face:variable) 671 673 (fontified t) 673 676 (fontified t face tree-sitter-hl-face:variable) 676 677 (fontified t) 677 679 (fontified t face tree-sitter-hl-face:operator) 679 680 (fontified t) 680 684 (fontified t face tree-sitter-hl-face:variable) 684 685 (fontified t) 685 690 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 690 691 (fontified t face (rainbow-delimiters-depth-2-face)) 691 694 (fontified t face tree-sitter-hl-face:variable) 694 695 (fontified t) 695 700 (fontified t face tree-sitter-hl-face:property) 700 701 (fontified t face (rainbow-delimiters-depth-2-face)) 701 702 (fontified t) 702 703 (fontified t) 703 705 (fontified t face tree-sitter-hl-face:keyword) 705 706 (fontified t) 706 709 (fontified t face tree-sitter-hl-face:variable) 709 710 (fontified t) 710 712 (fontified t face tree-sitter-hl-face:operator) 712 713 (fontified t) 713 716 (fontified t face tree-sitter-hl-face:constant\.builtin) 716 717 (fontified t) 717 718 (fontified t face (rainbow-delimiters-depth-2-face)) 718 719 (fontified t) 719 721 (fontified t) 721 727 (fontified t face tree-sitter-hl-face:keyword) 727 728 (fontified t) 728 737 (fontified t) 737 738 (fontified t face tree-sitter-hl-face:type) 738 757 (fontified t face tree-sitter-hl-face:type) 757 758 (fontified t face tree-sitter-hl-face:type) 758 759 (fontified t face (rainbow-delimiters-depth-3-face)) 759 760 (fontified t face (rainbow-delimiters-depth-3-face)) 760 761 (fontified t) 761 762 (fontified t) 762 765 (fontified t face tree-sitter-hl-face:variable) 765 766 (fontified t) 766 772 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 772 773 (fontified t face (rainbow-delimiters-depth-3-face)) 773 774 (fontified t face tree-sitter-hl-face:string) 774 781 (fontified t face tree-sitter-hl-face:string) 781 782 (fontified t face tree-sitter-hl-face:string) 782 785 (fontified t face tree-sitter-hl-face:string) 785 786 (fontified t face tree-sitter-hl-face:string) 786 788 (fontified t face tree-sitter-hl-face:string) 788 789 (fontified t face tree-sitter-hl-face:string) 789 790 (fontified t face (rainbow-delimiters-depth-3-face)) 790 791 (fontified t) 791 792 (fontified t) 792 793 (fontified t face (rainbow-delimiters-depth-2-face)) 793 794 (fontified t) 794 795 (fontified t) 795 801 (fontified t face tree-sitter-hl-face:keyword) 801 802 (fontified t) 802 810 (fontified t) 810 811 (fontified t) 811 832 (fontified t face tree-sitter-hl-face:type) 832 833 (fontified t face (rainbow-delimiters-depth-2-face)) 833 834 (fontified t) 834 836 (fontified t) 836 838 (fontified t face tree-sitter-hl-face:variable) 838 839 (fontified t) 839 844 (fontified t) 844 845 (fontified t) 845 849 (fontified t) 849 851 (fontified t face tree-sitter-hl-face:variable) 851 853 (fontified t) 853 855 (fontified t) 855 861 (fontified t face tree-sitter-hl-face:variable) 861 862 (fontified t) 862 863 (fontified t) 863 864 (fontified t) 864 868 (fontified t) 868 872 (fontified t face tree-sitter-hl-face:variable) 872 874 (fontified t face tree-sitter-hl-face:variable) 874 876 (fontified t) 876 878 (fontified t) 878 883 (fontified t face tree-sitter-hl-face:variable) 883 884 (fontified t) 884 886 (fontified t) 886 887 (fontified t) 887 890 (fontified t) 890 891 (fontified t) 891 894 (fontified t face tree-sitter-hl-face:variable) 894 895 (fontified t) 895 900 (fontified t face tree-sitter-hl-face:property) 900 902 (fontified t) 902 904 (fontified t) 904 908 (fontified t face tree-sitter-hl-face:variable) 908 913 (fontified t face tree-sitter-hl-face:variable) 913 914 (fontified t) 914 916 (fontified t) 916 917 (fontified t) 917 919 (fontified t face tree-sitter-hl-face:variable) 919 920 (fontified t face tree-sitter-hl-face:variable) 920 921 (fontified t face tree-sitter-hl-face:variable) 921 930 (fontified t face tree-sitter-hl-face:variable) 930 932 (fontified t) 932 934 (fontified t) 934 943 (fontified t face tree-sitter-hl-face:variable) 943 945 (fontified t) 945 947 (fontified t) 947 951 (fontified t face tree-sitter-hl-face:variable) 951 952 (fontified t) 952 955 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 955 956 (fontified t face (rainbow-delimiters-depth-3-face)) 956 957 (fontified t face (rainbow-delimiters-depth-3-face)) 957 958 (fontified t) 958 959 (fontified t) 959 961 (fontified t) 961 968 (fontified t face tree-sitter-hl-face:variable) 968 972 (fontified t face tree-sitter-hl-face:variable) 972 974 (fontified t) 974 977 (fontified t face tree-sitter-hl-face:variable) 977 978 (fontified t) 978 989 (fontified t face tree-sitter-hl-face:property) 989 991 (fontified t) 991 993 (fontified t) 993 998 (fontified t face tree-sitter-hl-face:variable) 998 999 (fontified t) 999 1003 (fontified t) 1003 1004 (fontified t) 1004 1006 (fontified t) 1006 1011 (fontified t face tree-sitter-hl-face:variable) 1011 1013 (fontified t) 1013 1014 (fontified t) 1014 1015 (fontified t face (rainbow-delimiters-depth-2-face)) 1015 1017 (fontified t) 1017 1020 (fontified t face tree-sitter-hl-face:constant\.builtin) 1020 1022 (fontified t) 1022 1023 (fontified t face (rainbow-delimiters-depth-1-face)) 1023 1024 (fontified t) 1024 1025 (fontified t)) . 8455) (undo-tree-id1919 . -1024) (undo-tree-id1920 . -33) (undo-tree-id1921 . -1024) (undo-tree-id1922 . -1024) (undo-tree-id1923 . -282) (undo-tree-id1924 . -410) (undo-tree-id1925 . -265) (undo-tree-id1926 . -1024) (undo-tree-id1927 . -33) (undo-tree-id1928 . -1024) 9479 (t 25953 430 190038 305000)) nil (25953 463 169643 72000) 0 nil])
([nil nil ((#("func (req *DailyTaskRequestType) toCreateDailyTask(userId uuid.UUID) (database.AddDailyTaskParams, error) {
	dateStartTime, eserr := time.Parse(utils.BaseDateString, req.DateStart)
	if eserr != nil {
		return database.AddDailyTaskParams{}, fmt.Errorf(\"Event start is not a valid date!\")
	}
	tagId, err := uuid.Parse(req.TagID)
	if err != nil {
		return database.AddDailyTaskParams{}, fmt.Errorf(\"Invalid Tag ID\")
	}
	timeStamp := time.Now()
	return database.AddTaskParams{
		ID:          uuid.New(),
		UserID:      userId,
		Title:       req.Title,
		EventStart:  dateStartTime,
		UpdatedAt:   timeStamp,
		CreatedAt:   timeStamp,
		Repetitions: req.Repetitions,
		TagID:       tagId,
	}, nil
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 9 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:operator) 11 31 (fontified t face tree-sitter-hl-face:type) 31 32 (fontified t face (rainbow-delimiters-depth-1-face)) 32 33 (fontified t) 33 50 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 50 51 (fontified t face (rainbow-delimiters-depth-1-face)) 51 57 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 57 58 (fontified t) 58 62 (fontified t) 62 63 (fontified t) 63 67 (fontified t face tree-sitter-hl-face:type) 67 68 (fontified t face (rainbow-delimiters-depth-1-face)) 68 69 (fontified t) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 78 (fontified t) 78 79 (fontified t) 79 97 (fontified t face tree-sitter-hl-face:type) 97 99 (fontified t) 99 104 (fontified t face tree-sitter-hl-face:type) 104 105 (fontified t face (rainbow-delimiters-depth-1-face)) 105 106 (fontified t) 106 107 (fontified t face (rainbow-delimiters-depth-1-face)) 107 108 (fontified t) 108 109 (rear-nonsticky t fontified t) 109 113 (fontified t face tree-sitter-hl-face:variable) 113 116 (fontified t face tree-sitter-hl-face:variable) 116 117 (fontified t face tree-sitter-hl-face:variable) 117 118 (fontified t face tree-sitter-hl-face:variable) 118 122 (fontified t face tree-sitter-hl-face:variable) 122 124 (fontified t) 124 129 (fontified t face tree-sitter-hl-face:variable) 129 130 (fontified t) 130 132 (fontified t face tree-sitter-hl-face:operator) 132 133 (fontified t) 133 137 (fontified t face tree-sitter-hl-face:variable) 137 138 (fontified t) 138 143 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 143 144 (fontified t face (rainbow-delimiters-depth-2-face)) 144 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t) 150 164 (fontified t face tree-sitter-hl-face:property) 164 166 (fontified t) 166 169 (fontified t face tree-sitter-hl-face:variable) 169 170 (fontified t) 170 174 (fontified t face tree-sitter-hl-face:property) 174 175 (fontified t face tree-sitter-hl-face:property) 175 179 (fontified t face tree-sitter-hl-face:property) 179 180 (fontified t face (rainbow-delimiters-depth-2-face)) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t face tree-sitter-hl-face:keyword) 183 184 (fontified t face tree-sitter-hl-face:keyword) 184 185 (fontified t) 185 186 (fontified t face tree-sitter-hl-face:variable) 186 190 (fontified t face tree-sitter-hl-face:variable) 190 191 (fontified t) 191 193 (fontified t face tree-sitter-hl-face:operator) 193 194 (fontified t) 194 197 (fontified t face tree-sitter-hl-face:constant\.builtin) 197 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-2-face)) 199 200 (fontified t) 200 202 (fontified t) 202 208 (fontified t face tree-sitter-hl-face:keyword) 208 209 (fontified t) 209 218 (fontified t) 218 235 (fontified t face tree-sitter-hl-face:type) 235 236 (fontified t face tree-sitter-hl-face:type) 236 237 (fontified t face (rainbow-delimiters-depth-3-face)) 237 238 (fontified t face (rainbow-delimiters-depth-3-face)) 238 239 (fontified t) 239 240 (fontified t) 240 243 (fontified t face tree-sitter-hl-face:variable) 243 244 (fontified t) 244 250 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 250 251 (fontified t face (rainbow-delimiters-depth-3-face)) 251 252 (fontified t face tree-sitter-hl-face:string) 252 257 (fontified t face tree-sitter-hl-face:string) 257 258 (fontified t face tree-sitter-hl-face:string) 258 263 (fontified t face tree-sitter-hl-face:string) 263 264 (fontified t face tree-sitter-hl-face:string) 264 266 (fontified t face tree-sitter-hl-face:string) 266 267 (fontified t face tree-sitter-hl-face:string) 267 270 (fontified t face tree-sitter-hl-face:string) 270 271 (fontified t face tree-sitter-hl-face:string) 271 272 (fontified t face tree-sitter-hl-face:string) 272 273 (fontified t face tree-sitter-hl-face:string) 273 278 (fontified t face tree-sitter-hl-face:string) 278 279 (fontified t face tree-sitter-hl-face:string) 279 283 (fontified t face tree-sitter-hl-face:string) 283 284 (fontified t face tree-sitter-hl-face:string) 284 285 (fontified t face tree-sitter-hl-face:string) 285 286 (fontified t face (rainbow-delimiters-depth-3-face)) 286 287 (fontified t) 287 288 (fontified t) 288 289 (fontified t face (rainbow-delimiters-depth-2-face)) 289 290 (fontified t) 290 291 (fontified t) 291 296 (fontified t face tree-sitter-hl-face:variable) 296 298 (fontified t) 298 301 (fontified t face tree-sitter-hl-face:variable) 301 302 (fontified t) 302 304 (fontified t face tree-sitter-hl-face:operator) 304 305 (fontified t) 305 309 (fontified t face tree-sitter-hl-face:variable) 309 310 (fontified t) 310 315 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 315 316 (fontified t face (rainbow-delimiters-depth-2-face)) 316 319 (fontified t face tree-sitter-hl-face:variable) 319 320 (fontified t) 320 325 (fontified t face tree-sitter-hl-face:property) 325 326 (fontified t face (rainbow-delimiters-depth-2-face)) 326 327 (fontified t) 327 328 (fontified t) 328 330 (fontified t face tree-sitter-hl-face:keyword) 330 331 (fontified t) 331 334 (fontified t face tree-sitter-hl-face:variable) 334 335 (fontified t) 335 337 (fontified t face tree-sitter-hl-face:operator) 337 338 (fontified t) 338 341 (fontified t face tree-sitter-hl-face:constant\.builtin) 341 342 (fontified t) 342 343 (fontified t face (rainbow-delimiters-depth-2-face)) 343 344 (fontified t) 344 346 (fontified t) 346 352 (fontified t face tree-sitter-hl-face:keyword) 352 353 (fontified t) 353 362 (fontified t) 362 379 (fontified t face tree-sitter-hl-face:type) 379 380 (fontified t face tree-sitter-hl-face:type) 380 381 (fontified t face (rainbow-delimiters-depth-3-face)) 381 382 (fontified t face (rainbow-delimiters-depth-3-face)) 382 383 (fontified t) 383 384 (fontified t) 384 387 (fontified t face tree-sitter-hl-face:variable) 387 388 (fontified t) 388 394 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 394 395 (fontified t face (rainbow-delimiters-depth-3-face)) 395 396 (fontified t face tree-sitter-hl-face:string) 396 403 (fontified t face tree-sitter-hl-face:string) 403 404 (fontified t face tree-sitter-hl-face:string) 404 405 (fontified t face tree-sitter-hl-face:string) 405 407 (fontified t face tree-sitter-hl-face:string) 407 408 (fontified t face tree-sitter-hl-face:string) 408 410 (fontified t face tree-sitter-hl-face:string) 410 411 (fontified t face tree-sitter-hl-face:string) 411 412 (fontified t face (rainbow-delimiters-depth-3-face)) 412 413 (fontified t) 413 414 (fontified t) 414 415 (fontified t face (rainbow-delimiters-depth-2-face)) 415 416 (fontified t) 416 417 (fontified t) 417 426 (fontified t face tree-sitter-hl-face:variable) 426 427 (fontified t) 427 429 (fontified t face tree-sitter-hl-face:operator) 429 430 (fontified t) 430 434 (fontified t face tree-sitter-hl-face:variable) 434 435 (fontified t) 435 438 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 438 439 (fontified t face (rainbow-delimiters-depth-2-face)) 439 440 (fontified t face (rainbow-delimiters-depth-2-face)) 440 441 (fontified t) 441 442 (fontified t) 442 448 (fontified t face tree-sitter-hl-face:keyword) 448 449 (fontified t) 449 457 (fontified t) 457 458 (fontified t) 458 471 (fontified t face tree-sitter-hl-face:type) 471 472 (fontified t face (rainbow-delimiters-depth-2-face)) 472 473 (fontified t) 473 475 (fontified t) 475 477 (fontified t face tree-sitter-hl-face:variable) 477 478 (fontified t) 478 487 (fontified t) 487 488 (fontified t) 488 492 (fontified t face tree-sitter-hl-face:variable) 492 493 (fontified t) 493 496 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 496 497 (fontified t face (rainbow-delimiters-depth-3-face)) 497 498 (fontified t face (rainbow-delimiters-depth-3-face)) 498 500 (fontified t) 500 502 (fontified t) 502 504 (fontified t face tree-sitter-hl-face:variable) 504 508 (fontified t face tree-sitter-hl-face:variable) 508 510 (fontified t) 510 515 (fontified t) 515 521 (fontified t face tree-sitter-hl-face:variable) 521 523 (fontified t) 523 525 (fontified t) 525 530 (fontified t face tree-sitter-hl-face:variable) 530 531 (fontified t) 531 537 (fontified t) 537 538 (fontified t) 538 541 (fontified t face tree-sitter-hl-face:variable) 541 542 (fontified t) 542 547 (fontified t face tree-sitter-hl-face:property) 547 549 (fontified t) 549 550 (fontified t) 550 551 (fontified t) 551 561 (fontified t face tree-sitter-hl-face:variable) 561 562 (fontified t) 562 563 (fontified t) 563 564 (fontified t) 564 568 (fontified t face tree-sitter-hl-face:variable) 568 577 (fontified t face tree-sitter-hl-face:variable) 577 579 (fontified t) 579 581 (fontified t) 581 589 (fontified t face tree-sitter-hl-face:variable) 589 590 (fontified t face tree-sitter-hl-face:variable) 590 591 (fontified t) 591 593 (fontified t) 593 594 (fontified t) 594 603 (fontified t face tree-sitter-hl-face:variable) 603 604 (fontified t) 604 605 (fontified t) 605 607 (fontified t) 607 610 (fontified t face tree-sitter-hl-face:variable) 610 616 (fontified t face tree-sitter-hl-face:variable) 616 617 (fontified t) 617 619 (fontified t) 619 620 (fontified t) 620 629 (fontified t face tree-sitter-hl-face:variable) 629 631 (fontified t) 631 633 (fontified t) 633 644 (fontified t face tree-sitter-hl-face:variable) 644 646 (fontified t) 646 649 (fontified t face tree-sitter-hl-face:variable) 649 650 (fontified t) 650 661 (fontified t face tree-sitter-hl-face:property) 661 663 (fontified t) 663 665 (fontified t) 665 670 (fontified t face tree-sitter-hl-face:variable) 670 671 (fontified t) 671 677 (fontified t) 677 678 (fontified t) 678 683 (fontified t face tree-sitter-hl-face:variable) 683 685 (fontified t) 685 686 (fontified t) 686 687 (fontified t face (rainbow-delimiters-depth-2-face)) 687 689 (fontified t) 689 692 (fontified t face tree-sitter-hl-face:constant\.builtin) 692 693 (fontified t) 693 694 (fontified t face (rainbow-delimiters-depth-1-face)) 694 695 (fontified t)) . 9091) (undo-tree-id1912 . -694) (undo-tree-id1913 . -11) (undo-tree-id1914 . -694) (undo-tree-id1915 . -694) (undo-tree-id1916 . -694) (undo-tree-id1917 . -11) (undo-tree-id1918 . -694) 9785) nil (25953 463 169637 89000) 0 nil])
([nil nil ((9210 . 9216)) nil (25953 463 169567 264000) 0 nil])
([nil nil ((9429 . 9430) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . 9429) (t 25953 463 300326 620000)) nil (25953 493 594762 389000) 0 nil])
([nil nil ((11580 . 11585) (t 25953 493 725856 441000)) nil (25953 531 841709 143000) 0 nil])
([nil nil ((11647 . 11652)) nil (25953 531 841708 933000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -11459) (undo-tree-id1933 . -1) 11460) nil (25953 531 841708 422000) 0 nil])
([nil nil ((11459 . 11461)) nil (25953 531 841707 551000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -11524) (undo-tree-id1932 . -1) 11525) nil (25953 531 841706 990000) 0 nil])
([nil nil ((11524 . 11526)) nil (25953 531 841706 109000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -11729) (undo-tree-id1931 . -1) 11730) nil (25953 531 841705 538000) 0 nil])
([nil nil ((11729 . 11731)) nil (25953 531 841704 247000) 0 nil])
([nil nil ((11727 . 11732)) nil (25953 531 841703 746000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -11804) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) 11805) nil (25953 531 841703 5000) 0 nil])
([nil nil ((11804 . 11806)) nil (25953 531 841688 386000) 0 nil])
([nil current ((11802 . 11807)) nil (25953 531 841683 460000) 0 nil])
nil
