(undo-tree-save-format-version . 1)
"49cb8cc353fbb78995c4b50b7bd3fed56e6ab559"
[nil nil nil nil (25935 41792 253793 796000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2 . 3) (#("
" 0 1 (fontified nil)) . -559) (1 . 560) (t 25935 40308 587901 767000)) nil (25935 41792 253791 953000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253790 89000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1) (undo-tree-id16 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2) (undo-tree-id17 . -1) 3) nil (25935 41792 253788 537000) 0 nil])
([nil nil ((1 . 10)) nil (25935 41792 253785 731000) 0 nil])
([nil nil ((12 . 15) (#(")" 0 1 (fontified nil)) . -11) (11 . 12) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -11) (11 . 12) (10 . 12)) nil (25935 41792 253784 269000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -14) (undo-tree-id13 . -1) (undo-tree-id14 . 1) (undo-tree-id15 . -1) 15) nil (25935 41792 253782 325000) 0 nil])
([nil nil ((572 . 574)) nil (25935 41792 253779 79000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -573) (undo-tree-id12 . -1) (574 . 575) (#("}" 0 1 (fontified nil)) . -574) (574 . 575)) nil (25935 41792 253777 686000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253774 911000) 0 nil])
([nil nil ((1 . 8)) nil (25935 41792 253773 649000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1 . 13) (#("package main" 0 12 (fontified nil)) . 1) (1 . 13) (#("package
" 0 7 (fontified nil) 7 8 (fontified nil)) . 1) (undo-tree-id9 . 1) (1 . 8) (#("package main" 0 12 (fontified nil)) . -1) (1 . 13) (#("package" 0 7 (face tree-sitter-hl-face:keyword fontified t)) . -1) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 8) nil (25935 41792 253771 865000) 0 nil])
([nil nil ((13 . 14)) nil (25935 41792 253767 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14 . 15) (#("
" 0 1 (fontified nil)) . -84) (14 . 85)) nil (25935 41792 253766 395000) 0 nil])
([nil nil ((16 . 17)) nil (25935 41792 253765 233000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -16) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 17) nil (25935 41792 253763 780000) 0 nil])
([nil nil ((84 . 85)) nil (25935 41792 253706 3000) 0 nil])
([nil nil ((659 . 660)) nil (25935 41792 253699 661000) 0 nil])
([nil nil ((14 . 16) (t 25935 41792 261610 602000)) nil (25935 41910 236570 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -23) (23 . 24) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -23) (23 . 24) (15 . 24)) nil (25935 41910 236568 683000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 24) (24 . 25) (23 . 25)) nil (25935 41910 236567 90000) 0 nil])
([nil nil ((25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25935 41910 236565 286000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -18) (undo-tree-id35 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -19) (undo-tree-id36 . -1) 20) nil (25935 41910 236563 803000) 0 nil])
([nil nil ((18 . 20)) nil (25935 41910 236561 229000) 0 nil])
([nil nil ((26 . 29)) nil (25935 41910 236560 608000) 0 nil])
([nil nil ((30 . 32)) nil (25935 41910 236559 776000) 0 nil])
([nil nil ((33 . 41) (32 . 34) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25935 41910 236558 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 33 42 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (33 . 42) (#("database/" 0 9 (fontified nil)) . 33) (33 . 42) (#("database" 0 8 (fontified nil)) . 33) (33 . 41) (#("database/" 0 9 (fontified nil)) . -33) (33 . 42) (#("database" 0 8 (face tree-sitter-hl-face:string fontified t)) . -33) (undo-tree-id33 . -8) (undo-tree-id34 . -8) 41) nil (25935 41910 236556 99000) 0 nil])
([nil nil ((42 . 45)) nil (25935 41910 236551 841000) 0 nil])
([nil nil ((46 . 48)) nil (25935 41910 236551 30000) 0 nil])
([nil nil ((48 . 50) (#("\"" 0 1 (fontified nil)) . -48) (48 . 49)) nil (25935 41910 236550 148000) 0 nil])
([nil nil ((49 . 51)) nil (25935 41910 236548 866000) 0 nil])
([nil nil ((52 . 54)) nil (25935 41910 236547 724000) 0 nil])
([nil nil ((55 . 62) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 41910 236546 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 55 66 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (55 . 66) (#("github.com/" 0 11 (fontified nil)) . 55) (55 . 66) (#("github." 0 7 (face tree-sitter-hl-face:string fontified nil)) . 55) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (#("github.com/" 0 11 (fontified nil)) . -62) (62 . 73)) nil (25935 41910 236544 568000) 0 nil])
([nil nil ((66 . 78)) nil (25935 41910 236541 372000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 78) nil (25935 41910 236540 159000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236535 621000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -78) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 79) nil (25935 41910 236533 627000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236511 205000) 0 nil])
([nil nil ((80 . 82) (t 25935 41910 239945 613000)) nil (25935 42324 259808 993000) 0 nil])
([nil nil ((82 . 84) (#("\"" 0 1 (fontified nil)) . -82) (82 . 83)) nil (25935 42324 259807 931000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -82) (undo-tree-id88 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 83)) nil (25935 42324 259806 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -80) (undo-tree-id86 . -1) (#("	" 0 1 (fontified t)) . -81) (undo-tree-id87 . -1) 82) nil (25935 42324 259805 126000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -77) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("v" 0 1 (fontified t)) . -78) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -79) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 80) nil (25935 42324 259802 731000) 0 nil])
([nil nil ((77 . 79)) nil (25935 42324 259798 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 71 80 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (71 . 80) (#("godotenv\"" 0 9 (fontified nil)) . 71) (71 . 80) (#("godotenv" 0 8 (fontified nil)) . 71) (71 . 79) (#("godotenv\"" 0 9 (fontified nil)) . -71) (71 . 80) (#("godotenv" 0 8 (fontified t)) . -71) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -6) 79) nil (25935 42324 259797 361000) 0 nil])
([nil nil ((80 . 82)) nil (25935 42324 259793 915000) 0 nil])
([nil nil ((82 . 83)) nil (25935 42324 259792 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 84 . 85) (#("
" 0 1 (fontified nil)) . -230) (83 . 231) 82) nil (25935 42324 259791 320000) 0 nil])
([nil nil ((#("	p
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 81) (undo-tree-id64 . -2) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -2) (undo-tree-id70 . -3) (undo-tree-id71 . -2) (undo-tree-id72 . -3) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -3) 82) nil (25935 42324 259789 206000) 0 nil])
([nil nil ((#("	\"github.com/joho/godotenv\"
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:string fontified t) 2 18 (face tree-sitter-hl-face:string fontified t) 18 27 (face tree-sitter-hl-face:string fontified t) 27 28 (fontified t)) . 53) (undo-tree-id37 . -27) (undo-tree-id38 . -28) (undo-tree-id39 . -1) (undo-tree-id40 . -18) (undo-tree-id41 . -28) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -27) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 26) (undo-tree-id55 . -26) (undo-tree-id56 . -1) (undo-tree-id57 . -27) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -28) 54) nil (25935 42324 259777 515000) 0 nil])
([nil nil ((52 . 54) (t 25935 42324 359603 65000)) nil (25935 42365 609807 672000) 0 nil])
([nil nil ((55 . 63) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 42365 609799 797000) 0 nil])
([nil nil ((859 . 860) (#("	" 0 1 (fontified nil)) . 858) (undo-tree-id95 . -1) (857 . 860) (t 25935 42365 613811 525000)) nil (25935 42440 264073 273000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -859) (undo-tree-id94 . -1) 860) nil (25935 42440 263998 274000) 0 nil])
([nil nil ((nil rear-nonsticky nil 860 . 861) (#("
" 0 1 (fontified nil)) . -958) (859 . 959)) nil (25935 42440 263996 250000) 0 nil])
([nil nil ((#("	go apiCfg.Worker(60);
" 0 1 (rear-nonsticky t fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 17 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 20 (face tree-sitter-hl-face:number fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 23 (fontified t)) . 860) (undo-tree-id89 . -22) (undo-tree-id90 . -23) (undo-tree-id91 . -1) (undo-tree-id92 . -11) (undo-tree-id93 . -17)) nil (25935 42440 263991 391000) 0 nil])
([nil nil ((64 . 66) (t 25935 42440 272366 292000)) nil (25935 42460 990438 156000) 0 nil])
([nil nil ((67 . 74) (66 . 68) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67)) nil (25935 42460 990431 744000) 0 nil])
([nil nil ((295 . 297) (t 25935 42460 998962 626000)) nil (25935 43014 524356 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 297 . 298) (#("
" 0 1 (fontified nil)) . -683) (297 . 684)) nil (25935 43014 524355 202000) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (#("
" 0 1 (fontified nil)) . -371) (296 . 372)) nil (25935 43014 524347 958000) 0 nil])
([nil nil ((75 . 77) (t 25935 43014 624357 441000)) nil (25935 43175 977548 802000) 0 nil])
([nil nil ((78 . 85) (77 . 79) (#("\"" 0 1 (fontified nil)) . -77) (77 . 78)) nil (25935 43175 977542 100000) 0 nil])
([nil nil ((306 . 308) (t 25935 43175 985006 525000)) nil (25935 43225 419279 251000) 0 nil])
([nil nil ((236 . 238)) nil (25935 43225 419278 169000) 0 nil])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -513) (237 . 514)) nil (25935 43225 419276 877000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 237) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) nil (25935 43225 419275 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id99 . -1)) nil (25935 43225 419269 643000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1)) nil (25935 43225 419264 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1622 . 1623) (#("
" 0 1 (fontified nil)) . -1703) (1621 . 1704) (t 25935 43225 426780 453000)) nil (25935 43379 58674 184000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1621) (undo-tree-id107 . -1)) nil (25935 43379 58669 806000) 0 nil])
([nil nil ((86 . 88) (t 25935 43379 66798 188000)) nil (25935 43602 299526 293000) 0 nil])
([nil nil ((89 . 94) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (88 . 89)) nil (25935 43602 299525 31000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id118 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id119 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id120 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id121 . -1) 94) nil (25935 43602 299522 636000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id117 . -1) 90) nil (25935 43602 299518 378000) 0 nil])
([nil nil ((89 . 97)) nil (25935 43602 299516 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 89 98 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (89 . 98) (#("thisweek/" 0 9 (fontified nil)) . 89) (89 . 98) (#("thisweek" 0 8 (fontified nil)) . 89) (89 . 97) (#("thisweek/" 0 9 (fontified nil)) . -89) (89 . 98) (#("thisweek" 0 8 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id115 . -8) (undo-tree-id116 . -8) 97) nil (25935 43602 299514 892000) 0 nil])
([nil nil ((98 . 112)) nil (25935 43602 299510 604000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 112) nil (25935 43602 299508 951000) 0 nil])
([nil nil ((110 . 112)) nil (25935 43602 299484 605000) 0 nil])
([nil nil ((112 . 118) (t 25935 43602 400794 139000)) nil (25935 43698 619833 60000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -112) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -113) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -114) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -115) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -116) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -117) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 118) nil (25935 43698 619830 595000) 0 nil])
([nil nil ((111 . 112)) nil (25935 43698 619803 414000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -94) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -95) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("k" 0 1 (face tree-sitter-hl-face:string fontified t)) . -96) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -97) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -99) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -100) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -101) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -102) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -103) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -104) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -105) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -107) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -108) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -109) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id315 . -1) 112 (t 25935 43698 628776 444000)) nil (25935 43757 468120 683000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 91) nil (25935 43757 467873 802000) 0 nil])
([nil nil ((89 . 90)) nil (25935 43757 467868 221000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id143 . -1) 90) nil (25935 43757 467867 650000) 0 nil])
([nil nil ((89 . 95)) nil (25935 43757 467866 57000) 0 nil])
([nil nil ((95 . 101)) nil (25935 43757 467865 717000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 106 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (98 . 106) (#("backend/" 0 8 (fontified nil)) . 98) (98 . 106) (#("bac" 0 3 (fontified nil)) . 98) (98 . 101) (#("backend/" 0 8 (fontified nil)) . -98) (98 . 106) (#("bac" 0 3 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id141 . -3) (undo-tree-id142 . -3) 101) nil (25935 43757 467864 615000) 0 nil])
([nil nil ((106 . 110)) nil (25935 43757 467862 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 115 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (106 . 115) (#("internal/" 0 9 (fontified nil)) . 106) (106 . 115) (#("inte" 0 4 (fontified nil)) . 106) (106 . 110) (#("internal/" 0 9 (fontified nil)) . -106) (106 . 115) (#("inte" 0 4 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 110) nil (25935 43757 467860 497000) 0 nil])
([nil nil ((115 . 120)) nil (25935 43757 467843 14000) 0 nil])
([nil nil ((26 . 4744) (#("fmt\"
	\"database/sql\"
	\"os\"
	\"net/http\"
	\"context\"
	\"strings\"
	\"thisweek/backend/internal/utils\"
	\"github.com/go-chi/chi/v5\"
	\"github.com/go-chi/chi/v5/middleware\"
	\"github.com/go-chi/cors\"
	\"github.com/google/uuid\"
	\"github.com/joho/godotenv\"
)

func readinessHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithJSON(w, 200, struct {
		Status string `json:\"status\"`
	}{Status: \"OK\"})
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithError(w, 500, \"Internal Server Error\")
}

type apiConfig struct {
	DB  *database.Queries
	ctx context.Context
}

type authedHandler func(http.ResponseWriter, *http.Request, database.User)

func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		apikey := strings.Split(bearerToken, \" \")[1]
		user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
		if err != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
		} else {
			handler(w, r, user)
		}
	}
}

func main() {
	godotenv.Load()
	port := os.Getenv(\"PORT\")

	dbURL := os.Getenv(\"CONN\")
	db, derr := sql.Open(\"postgres\", dbURL)
	if derr != nil {
		fmt.Println(derr.Error())
		return
	}

	dbQueries := database.New(db)
	apiCfg := apiConfig{}
	apiCfg.DB = dbQueries
	apiCfg.ctx = context.Background()

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins: []string{\"*\"},
		AllowedMethods: []string{\"GET, POST, OPTIONS, PUT, DELETE\"},
		AllowedHeaders: []string{\"*\"},
	}))

	v1Router := chi.NewRouter()
	r.Mount(\"/v1\", v1Router)

	v1Router.Get(\"/readiness\", readinessHandler)
	v1Router.Get(\"/err\", erro" 0 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t) 6 20 (fontified t face tree-sitter-hl-face:string) 20 22 (fontified t) 22 26 (fontified t face tree-sitter-hl-face:string) 26 28 (fontified t) 28 38 (fontified t face tree-sitter-hl-face:string) 38 40 (fontified t) 40 49 (fontified t face tree-sitter-hl-face:string) 49 51 (fontified t) 51 60 (fontified t face tree-sitter-hl-face:string) 60 62 (fontified t) 62 95 (fontified t face tree-sitter-hl-face:string) 95 97 (fontified t) 97 123 (fontified t face tree-sitter-hl-face:string) 123 125 (fontified t) 125 162 (fontified t face tree-sitter-hl-face:string) 162 164 (fontified t) 164 188 (fontified t face tree-sitter-hl-face:string) 188 190 (fontified t) 190 214 (fontified t face tree-sitter-hl-face:string) 214 216 (fontified t) 216 242 (fontified t face tree-sitter-hl-face:string) 242 243 (fontified t) 243 244 (fontified t face (rainbow-delimiters-depth-1-face)) 244 246 (fontified t) 246 250 (fontified t face tree-sitter-hl-face:keyword) 250 251 (fontified t) 251 267 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 267 268 (fontified t face (rainbow-delimiters-depth-1-face)) 268 269 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 269 275 (fontified t) 275 289 (fontified t face tree-sitter-hl-face:type) 289 291 (fontified t) 291 292 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 292 293 (fontified t) 293 294 (fontified t face tree-sitter-hl-face:operator) 294 299 (fontified t) 299 306 (fontified t face tree-sitter-hl-face:type) 306 307 (fontified t face (rainbow-delimiters-depth-1-face)) 307 308 (fontified t) 308 309 (fontified t face (rainbow-delimiters-depth-1-face)) 309 311 (fontified t) 311 316 (fontified t face tree-sitter-hl-face:variable) 316 317 (fontified t) 317 332 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 332 333 (fontified t face (rainbow-delimiters-depth-2-face)) 333 334 (fontified t face tree-sitter-hl-face:variable) 334 336 (fontified t) 336 339 (fontified t face tree-sitter-hl-face:number) 339 341 (fontified t) 341 347 (fontified t face tree-sitter-hl-face:keyword) 347 348 (fontified t) 348 349 (fontified t face (rainbow-delimiters-depth-3-face)) 349 352 (fontified t) 352 358 (fontified t face tree-sitter-hl-face:property) 358 359 (fontified t) 359 365 (fontified t face tree-sitter-hl-face:type) 365 366 (fontified t) 366 381 (fontified t face tree-sitter-hl-face:string) 381 383 (fontified t) 383 384 (fontified t face (rainbow-delimiters-depth-3-face)) 384 385 (fontified t face (rainbow-delimiters-depth-3-face)) 385 391 (fontified t face tree-sitter-hl-face:variable) 391 393 (fontified t) 393 397 (fontified t face tree-sitter-hl-face:string) 397 398 (fontified t face (rainbow-delimiters-depth-3-face)) 398 399 (fontified t face (rainbow-delimiters-depth-2-face)) 399 400 (fontified t) 400 401 (fontified t face (rainbow-delimiters-depth-1-face)) 401 403 (fontified t) 403 407 (fontified t face tree-sitter-hl-face:keyword) 407 408 (fontified t) 408 420 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 420 421 (fontified t face (rainbow-delimiters-depth-1-face)) 421 422 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 422 428 (fontified t) 428 442 (fontified t face tree-sitter-hl-face:type) 442 444 (fontified t) 444 445 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 445 446 (fontified t) 446 447 (fontified t face tree-sitter-hl-face:operator) 447 452 (fontified t) 452 459 (fontified t face tree-sitter-hl-face:type) 459 460 (fontified t face (rainbow-delimiters-depth-1-face)) 460 461 (fontified t) 461 462 (fontified t face (rainbow-delimiters-depth-1-face)) 462 464 (fontified t) 464 469 (fontified t face tree-sitter-hl-face:variable) 469 470 (fontified t) 470 486 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 486 487 (fontified t face (rainbow-delimiters-depth-2-face)) 487 488 (fontified t face tree-sitter-hl-face:variable) 488 490 (fontified t) 490 493 (fontified t face tree-sitter-hl-face:number) 493 495 (fontified t) 495 518 (fontified t face tree-sitter-hl-face:string) 518 519 (fontified t face (rainbow-delimiters-depth-2-face)) 519 520 (fontified t) 520 521 (fontified t face (rainbow-delimiters-depth-1-face)) 521 523 (fontified t) 523 527 (fontified t face tree-sitter-hl-face:keyword) 527 528 (fontified t) 528 537 (fontified t face tree-sitter-hl-face:type) 537 538 (fontified t) 538 544 (fontified t face tree-sitter-hl-face:keyword) 544 545 (fontified t) 545 546 (fontified t face (rainbow-delimiters-depth-1-face)) 546 548 (fontified t) 548 550 (fontified t face tree-sitter-hl-face:property) 550 552 (fontified t) 552 553 (fontified t face tree-sitter-hl-face:operator) 553 562 (fontified t) 562 569 (fontified t face tree-sitter-hl-face:type) 569 571 (fontified t) 571 574 (fontified t face tree-sitter-hl-face:property) 574 583 (fontified t) 583 590 (fontified t face tree-sitter-hl-face:type) 590 591 (fontified t) 591 592 (fontified t face (rainbow-delimiters-depth-1-face)) 592 594 (fontified t) 594 598 (fontified t face tree-sitter-hl-face:keyword) 598 599 (fontified t) 599 612 (fontified t face tree-sitter-hl-face:type) 612 613 (fontified t) 613 617 (fontified t face tree-sitter-hl-face:keyword) 617 618 (fontified t face (rainbow-delimiters-depth-1-face)) 618 623 (fontified t) 623 637 (fontified t face tree-sitter-hl-face:type) 637 639 (fontified t) 639 640 (fontified t face tree-sitter-hl-face:operator) 640 645 (fontified t) 645 652 (fontified t face tree-sitter-hl-face:type) 652 663 (fontified t) 663 667 (fontified t face tree-sitter-hl-face:type) 667 668 (fontified t face (rainbow-delimiters-depth-1-face)) 668 670 (fontified t) 670 674 (fontified t face tree-sitter-hl-face:keyword) 674 675 (fontified t) 675 676 (fontified t face (rainbow-delimiters-depth-1-face)) 676 677 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 677 678 (fontified t) 678 679 (fontified t face tree-sitter-hl-face:operator) 679 688 (fontified t face tree-sitter-hl-face:type) 688 689 (fontified t face (rainbow-delimiters-depth-1-face)) 689 690 (fontified t) 690 702 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 702 703 (fontified t face (rainbow-delimiters-depth-1-face)) 703 710 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 710 711 (fontified t) 711 724 (fontified t face tree-sitter-hl-face:type) 724 725 (fontified t face (rainbow-delimiters-depth-1-face)) 725 731 (fontified t) 731 742 (fontified t face tree-sitter-hl-face:type) 742 743 (fontified t) 743 744 (fontified t face (rainbow-delimiters-depth-1-face)) 744 746 (fontified t) 746 752 (fontified t face tree-sitter-hl-face:keyword) 752 753 (fontified t) 753 757 (fontified t face tree-sitter-hl-face:keyword) 757 758 (fontified t face (rainbow-delimiters-depth-2-face)) 758 759 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 759 765 (fontified t) 765 779 (fontified t face tree-sitter-hl-face:type) 779 781 (fontified t) 781 782 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 782 783 (fontified t) 783 784 (fontified t face tree-sitter-hl-face:operator) 784 789 (fontified t) 789 796 (fontified t face tree-sitter-hl-face:type) 796 797 (fontified t face (rainbow-delimiters-depth-2-face)) 797 798 (fontified t) 798 799 (fontified t face (rainbow-delimiters-depth-2-face)) 799 802 (fontified t) 802 813 (fontified t face tree-sitter-hl-face:variable) 813 814 (fontified t) 814 816 (fontified t face tree-sitter-hl-face:operator) 816 817 (fontified t) 817 818 (fontified t face tree-sitter-hl-face:variable) 818 819 (fontified t) 819 825 (fontified t face tree-sitter-hl-face:property) 825 826 (fontified t) 826 829 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 829 830 (fontified t face (rainbow-delimiters-depth-3-face)) 830 845 (fontified t face tree-sitter-hl-face:string) 845 846 (fontified t face (rainbow-delimiters-depth-3-face)) 846 849 (fontified t) 849 855 (fontified t face tree-sitter-hl-face:variable) 855 856 (fontified t) 856 858 (fontified t face tree-sitter-hl-face:operator) 858 859 (fontified t) 859 866 (fontified t face tree-sitter-hl-face:variable) 866 867 (fontified t) 867 872 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 872 873 (fontified t face (rainbow-delimiters-depth-3-face)) 873 884 (fontified t face tree-sitter-hl-face:variable) 884 886 (fontified t) 886 889 (fontified t face tree-sitter-hl-face:string) 889 890 (fontified t face (rainbow-delimiters-depth-3-face)) 890 891 (fontified t face (rainbow-delimiters-depth-3-face)) 891 892 (fontified t face tree-sitter-hl-face:number) 892 893 (fontified t face (rainbow-delimiters-depth-3-face)) 893 896 (fontified t) 896 900 (fontified t face tree-sitter-hl-face:variable) 900 902 (fontified t) 902 905 (fontified t face tree-sitter-hl-face:variable) 905 906 (fontified t) 906 908 (fontified t face tree-sitter-hl-face:operator) 908 909 (fontified t) 909 910 (fontified t face tree-sitter-hl-face:variable) 910 911 (fontified t) 911 913 (fontified t face tree-sitter-hl-face:property) 913 914 (fontified t) 914 929 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 929 930 (fontified t face (rainbow-delimiters-depth-3-face)) 930 931 (fontified t face tree-sitter-hl-face:variable) 931 932 (fontified t) 932 935 (fontified t face tree-sitter-hl-face:property) 935 937 (fontified t) 937 943 (fontified t face tree-sitter-hl-face:variable) 943 944 (fontified t face (rainbow-delimiters-depth-3-face)) 944 947 (fontified t) 947 949 (fontified t face tree-sitter-hl-face:keyword) 949 950 (fontified t) 950 953 (fontified t face tree-sitter-hl-face:variable) 953 954 (fontified t) 954 956 (fontified t face tree-sitter-hl-face:operator) 956 957 (fontified t) 957 960 (fontified t face tree-sitter-hl-face:constant\.builtin) 960 961 (fontified t) 961 962 (fontified t face (rainbow-delimiters-depth-3-face)) 962 966 (fontified t) 966 971 (fontified t face tree-sitter-hl-face:variable) 971 972 (fontified t) 972 988 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 988 989 (fontified t face (rainbow-delimiters-depth-4-face)) 989 990 (fontified t face tree-sitter-hl-face:variable) 990 992 (fontified t) 992 995 (fontified t face tree-sitter-hl-face:number) 995 997 (fontified t) 997 1011 (fontified t face tree-sitter-hl-face:string) 1011 1012 (fontified t face (rainbow-delimiters-depth-4-face)) 1012 1015 (fontified t) 1015 1016 (fontified t face (rainbow-delimiters-depth-3-face)) 1016 1017 (fontified t) 1017 1021 (fontified t face tree-sitter-hl-face:keyword) 1021 1022 (fontified t) 1022 1023 (fontified t face (rainbow-delimiters-depth-3-face)) 1023 1027 (fontified t) 1027 1034 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 1034 1035 (fontified t face (rainbow-delimiters-depth-4-face)) 1035 1036 (fontified t face tree-sitter-hl-face:variable) 1036 1038 (fontified t) 1038 1039 (fontified t face tree-sitter-hl-face:variable) 1039 1041 (fontified t) 1041 1045 (fontified t face tree-sitter-hl-face:variable) 1045 1046 (fontified t face (rainbow-delimiters-depth-4-face)) 1046 1049 (fontified t) 1049 1050 (fontified t face (rainbow-delimiters-depth-3-face)) 1050 1052 (fontified t) 1052 1053 (fontified t face (rainbow-delimiters-depth-2-face)) 1053 1054 (fontified t) 1054 1055 (fontified t face (rainbow-delimiters-depth-1-face)) 1055 1057 (fontified t) 1057 1061 (fontified t face tree-sitter-hl-face:keyword) 1061 1062 (fontified t) 1062 1066 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 1066 1067 (fontified t face (rainbow-delimiters-depth-1-face)) 1067 1068 (fontified t face (rainbow-delimiters-depth-1-face)) 1068 1069 (fontified t) 1069 1070 (fontified t face (rainbow-delimiters-depth-1-face)) 1070 1072 (fontified t) 1072 1080 (fontified t face tree-sitter-hl-face:variable) 1080 1081 (fontified t) 1081 1085 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1085 1086 (fontified t face (rainbow-delimiters-depth-2-face)) 1086 1087 (fontified t face (rainbow-delimiters-depth-2-face)) 1087 1089 (fontified t) 1089 1093 (fontified t face tree-sitter-hl-face:variable) 1093 1094 (fontified t) 1094 1096 (fontified t face tree-sitter-hl-face:operator) 1096 1097 (fontified t) 1097 1099 (fontified t face tree-sitter-hl-face:variable) 1099 1100 (fontified t) 1100 1106 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1106 1107 (fontified t face (rainbow-delimiters-depth-2-face)) 1107 1113 (fontified t face tree-sitter-hl-face:string) 1113 1114 (fontified t face (rainbow-delimiters-depth-2-face)) 1114 1117 (fontified t) 1117 1122 (fontified t face tree-sitter-hl-face:variable) 1122 1123 (fontified t) 1123 1125 (fontified t face tree-sitter-hl-face:operator) 1125 1126 (fontified t) 1126 1128 (fontified t face tree-sitter-hl-face:variable) 1128 1129 (fontified t) 1129 1135 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1135 1136 (fontified t face (rainbow-delimiters-depth-2-face)) 1136 1142 (fontified t face tree-sitter-hl-face:string) 1142 1143 (fontified t face (rainbow-delimiters-depth-2-face)) 1143 1145 (fontified t) 1145 1147 (fontified t face tree-sitter-hl-face:variable) 1147 1149 (fontified t) 1149 1153 (fontified t face tree-sitter-hl-face:variable) 1153 1154 (fontified t) 1154 1156 (fontified t face tree-sitter-hl-face:operator) 1156 1157 (fontified t) 1157 1160 (fontified t face tree-sitter-hl-face:variable) 1160 1161 (fontified t) 1161 1165 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1165 1166 (fontified t face (rainbow-delimiters-depth-2-face)) 1166 1176 (fontified t face tree-sitter-hl-face:string) 1176 1178 (fontified t) 1178 1183 (fontified t face tree-sitter-hl-face:variable) 1183 1184 (fontified t face (rainbow-delimiters-depth-2-face)) 1184 1186 (fontified t) 1186 1188 (fontified t face tree-sitter-hl-face:keyword) 1188 1189 (fontified t) 1189 1193 (fontified t face tree-sitter-hl-face:variable) 1193 1194 (fontified t) 1194 1196 (fontified t face tree-sitter-hl-face:operator) 1196 1197 (fontified t) 1197 1200 (fontified t face tree-sitter-hl-face:constant\.builtin) 1200 1201 (fontified t) 1201 1202 (fontified t face (rainbow-delimiters-depth-2-face)) 1202 1205 (fontified t) 1205 1208 (fontified t face tree-sitter-hl-face:variable) 1208 1209 (fontified t) 1209 1216 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1216 1217 (fontified t face (rainbow-delimiters-depth-3-face)) 1217 1221 (fontified t face tree-sitter-hl-face:variable) 1221 1222 (fontified t) 1222 1227 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1227 1228 (fontified t face (rainbow-delimiters-depth-4-face)) 1228 1229 (fontified t face (rainbow-delimiters-depth-4-face)) 1229 1230 (fontified t face (rainbow-delimiters-depth-3-face)) 1230 1233 (fontified t) 1233 1239 (fontified t face tree-sitter-hl-face:keyword) 1239 1241 (fontified t) 1241 1242 (fontified t face (rainbow-delimiters-depth-2-face)) 1242 1245 (fontified t) 1245 1254 (fontified t face tree-sitter-hl-face:variable) 1254 1255 (fontified t) 1255 1257 (fontified t face tree-sitter-hl-face:operator) 1257 1258 (fontified t) 1258 1266 (fontified t face tree-sitter-hl-face:variable) 1266 1267 (fontified t) 1267 1270 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1270 1271 (fontified t face (rainbow-delimiters-depth-2-face)) 1271 1273 (fontified t face tree-sitter-hl-face:variable) 1273 1274 (fontified t face (rainbow-delimiters-depth-2-face)) 1274 1276 (fontified t) 1276 1282 (fontified t face tree-sitter-hl-face:variable) 1282 1283 (fontified t) 1283 1285 (fontified t face tree-sitter-hl-face:operator) 1285 1286 (fontified t) 1286 1295 (fontified t face tree-sitter-hl-face:type) 1295 1296 (fontified t face (rainbow-delimiters-depth-2-face)) 1296 1297 (fontified t face (rainbow-delimiters-depth-2-face)) 1297 1299 (fontified t) 1299 1305 (fontified t face tree-sitter-hl-face:variable) 1305 1306 (fontified t) 1306 1308 (fontified t face tree-sitter-hl-face:property) 1308 1309 (fontified t) 1309 1310 (fontified t face tree-sitter-hl-face:operator) 1310 1311 (fontified t) 1311 1320 (fontified t face tree-sitter-hl-face:variable) 1320 1322 (fontified t) 1322 1328 (fontified t face tree-sitter-hl-face:variable) 1328 1329 (fontified t) 1329 1332 (fontified t face tree-sitter-hl-face:property) 1332 1333 (fontified t) 1333 1334 (fontified t face tree-sitter-hl-face:operator) 1334 1335 (fontified t) 1335 1342 (fontified t face tree-sitter-hl-face:variable) 1342 1343 (fontified t) 1343 1353 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1353 1354 (fontified t face (rainbow-delimiters-depth-2-face)) 1354 1355 (fontified t face (rainbow-delimiters-depth-2-face)) 1355 1358 (fontified t) 1358 1359 (fontified t face tree-sitter-hl-face:variable) 1359 1360 (fontified t) 1360 1362 (fontified t face tree-sitter-hl-face:operator) 1362 1363 (fontified t) 1363 1366 (fontified t face tree-sitter-hl-face:variable) 1366 1367 (fontified t) 1367 1376 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1376 1377 (fontified t face (rainbow-delimiters-depth-2-face)) 1377 1378 (fontified t face (rainbow-delimiters-depth-2-face)) 1378 1380 (fontified t) 1380 1381 (fontified t face tree-sitter-hl-face:variable) 1381 1382 (fontified t) 1382 1385 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1385 1386 (fontified t face (rainbow-delimiters-depth-2-face)) 1386 1396 (fontified t face tree-sitter-hl-face:variable) 1396 1397 (fontified t) 1397 1403 (fontified t face tree-sitter-hl-face:property) 1403 1404 (fontified t face (rainbow-delimiters-depth-2-face)) 1404 1406 (fontified t) 1406 1407 (fontified t face tree-sitter-hl-face:variable) 1407 1408 (fontified t) 1408 1411 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1411 1412 (fontified t face (rainbow-delimiters-depth-2-face)) 1412 1416 (fontified t face tree-sitter-hl-face:variable) 1416 1417 (fontified t) 1417 1424 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1424 1425 (fontified t face (rainbow-delimiters-depth-3-face)) 1425 1430 (fontified t) 1430 1437 (fontified t face tree-sitter-hl-face:type) 1437 1438 (fontified t face (rainbow-delimiters-depth-4-face)) 1438 1441 (fontified t) 1441 1455 (fontified t face tree-sitter-hl-face:variable) 1455 1457 (fontified t) 1457 1458 (fontified t face (rainbow-delimiters-depth-5-face)) 1458 1459 (fontified t face (rainbow-delimiters-depth-5-face)) 1459 1465 (fontified t face tree-sitter-hl-face:type) 1465 1466 (fontified t face (rainbow-delimiters-depth-5-face)) 1466 1469 (fontified t face tree-sitter-hl-face:string) 1469 1470 (fontified t face (rainbow-delimiters-depth-5-face)) 1470 1474 (fontified t) 1474 1475 (fontified t face tree-sitter-hl-face:variable) 1475 1488 (fontified t face tree-sitter-hl-face:variable) 1488 1490 (fontified t) 1490 1491 (fontified t face (rainbow-delimiters-depth-5-face)) 1491 1492 (fontified t face (rainbow-delimiters-depth-5-face)) 1492 1498 (fontified t face tree-sitter-hl-face:type) 1498 1499 (fontified t face (rainbow-delimiters-depth-5-face)) 1499 1532 (fontified t face tree-sitter-hl-face:string) 1532 1533 (fontified t face (rainbow-delimiters-depth-5-face)) 1533 1537 (fontified t) 1537 1551 (fontified t face tree-sitter-hl-face:variable) 1551 1553 (fontified t) 1553 1554 (fontified t face (rainbow-delimiters-depth-5-face)) 1554 1555 (fontified t face (rainbow-delimiters-depth-5-face)) 1555 1561 (fontified t face tree-sitter-hl-face:type) 1561 1562 (fontified t face (rainbow-delimiters-depth-5-face)) 1562 1565 (fontified t face tree-sitter-hl-face:string) 1565 1566 (fontified t face (rainbow-delimiters-depth-5-face)) 1566 1569 (fontified t) 1569 1570 (fontified t face (rainbow-delimiters-depth-4-face)) 1570 1571 (fontified t face (rainbow-delimiters-depth-3-face)) 1571 1572 (fontified t face (rainbow-delimiters-depth-2-face)) 1572 1575 (fontified t) 1575 1583 (fontified t face tree-sitter-hl-face:variable) 1583 1584 (fontified t) 1584 1586 (fontified t face tree-sitter-hl-face:operator) 1586 1587 (fontified t) 1587 1590 (fontified t face tree-sitter-hl-face:variable) 1590 1591 (fontified t) 1591 1600 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1600 1601 (fontified t face (rainbow-delimiters-depth-2-face)) 1601 1602 (fontified t face (rainbow-delimiters-depth-2-face)) 1602 1604 (fontified t) 1604 1605 (fontified t face tree-sitter-hl-face:variable) 1605 1606 (fontified t) 1606 1611 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1611 1612 (fontified t face (rainbow-delimiters-depth-2-face)) 1612 1617 (fontified t face tree-sitter-hl-face:string) 1617 1619 (fontified t) 1619 1627 (fontified t face tree-sitter-hl-face:variable) 1627 1628 (fontified t face (rainbow-delimiters-depth-2-face)) 1628 1631 (fontified t) 1631 1639 (fontified t face tree-sitter-hl-face:variable) 1639 1640 (fontified t) 1640 1643 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1643 1644 (fontified t face (rainbow-delimiters-depth-2-face)) 1644 1656 (fontified t face tree-sitter-hl-face:string) 1656 1658 (fontified t) 1658 1674 (fontified t face tree-sitter-hl-face:variable) 1674 1675 (fontified t face (rainbow-delimiters-depth-2-face)) 1675 1677 (fontified t) 1677 1685 (fontified t face tree-sitter-hl-face:variable) 1685 1686 (fontified t) 1686 1689 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1689 1690 (fontified t face (rainbow-delimiters-depth-2-face)) 1690 1696 (fontified t face tree-sitter-hl-face:string) 1696 1698 (fontified t) 1698 1702 (fontified t face tree-sitter-hl-face:variable)) . 26) (undo-tree-id32 . -667) (undo-tree-id33 . -667) (undo-tree-id34 . -667) (undo-tree-id35 . -667) (t 25935 43757 475118 574000)) nil (25941 4622 691170 850000) 0 nil])
([nil nil ((2770 . 2772) (t 25940 65169 335402 92000)) nil (25941 4622 691168 556000) 0 nil])
([nil nil ((2772 . 2778)) nil (25941 4622 691167 814000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2772) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2773) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2774) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2775) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2776) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2777) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 2778) nil (25941 4622 691166 712000) 0 nil])
([nil nil ((2772 . 2777)) nil (25941 4622 691161 492000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) #s(yas--field 2 2800 2811 nil nil nil t nil)) nil 0 nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil nil)) (2777 . 2824) (#("AddRefreshToken(${1:ctx context.Context}, ${2:id string})" 0 57 (fontified nil)) . 2777) (2777 . 2834) (#("AddRefreshToken" 0 15 (fontified nil)) . -2777) (2777 . 2792)) nil (25941 4622 691160 601000) 0 nil])
([nil nil ((2794 . 2796) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 2794) (undo-tree-id19 . -19) (2793 . 2794)) nil (25941 4622 691159 459000) 0 nil])
([nil nil ((apply yas--snippet-revive 2793 2798 #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil #s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) nil)) (2793 . 2798) (#("a.ctx" 0 5 (fontified nil)) . 2793) (undo-tree-id13 . -5) (2793 . 2798) (#("ctx" 0 3 (fontified nil)) . 2793) (undo-tree-id14 . -3) (2793 . 2796) (#("a.ctx" 0 5 (fontified nil)) . -2793) (undo-tree-id15 . -5) (2793 . 2798) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2793) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 2796) nil (25941 4622 691157 936000) 0 nil])
([nil nil ((2801 . 2805) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 2801) (undo-tree-id10 . -9) (undo-tree-id11 . -3) (undo-tree-id12 . -4) (2800 . 2801)) nil (25941 4622 691154 539000) 0 nil])
([nil nil ((apply yas--snippet-revive 2800 2811 #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil)) (2800 . 2811) (#("tokenString" 0 11 (fontified nil)) . 2800) (undo-tree-id0 . -11) (2800 . 2811) (#("token" 0 5 (fontified nil)) . 2800) (undo-tree-id1 . -5) (2800 . 2805) (#("tokenString" 0 11 (fontified nil)) . -2800) (undo-tree-id2 . -11) (2800 . 2811) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2800) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) 2805) nil (25941 4622 691151 824000) 0 nil])
([nil nil ((apply yas--snippet-revive 2777 2812 #s(yas--snippet nil (#s(yas--field 1 2793 2798 nil nil nil t #s(yas--field 2 2800 2811 nil nil nil t nil)) #s(yas--field 2 2800 2811 nil nil nil t nil)) nil 0 nil #s(yas--field 2 2800 2811 nil nil nil t nil) nil nil))) nil (25941 4622 691115 647000) 0 nil])
([nil nil ((3679 . 3681) (t 25941 4622 698126 922000)) nil (25941 4752 933684 41000) 0 nil])
([nil nil ((3681 . 3691)) nil (25941 4752 933682 848000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3688) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3689) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3690) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 3691) nil (25941 4752 933680 304000) 0 nil])
([nil nil ((3688 . 3689)) nil (25941 4752 933676 988000) 0 nil])
([nil nil ((3689 . 3700)) nil (25941 4752 933676 657000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3714 3729 nil nil nil t nil)) nil 3 nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil nil)) (3696 . 3724) (#("a.mintAccessToken(${1:id string})" 0 33 (fontified nil)) . 3696) (3696 . 3729) (#("mint" 0 4 (fontified nil)) . 3696) (3696 . 3700) (#("a.mintAccessToken" 0 17 (fontified nil)) . -3696) (3696 . 3713) (#("mint" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3696) (undo-tree-id49 . -4) (undo-tree-id50 . -4) 3700) nil (25941 4752 933676 236000) 0 nil])
([nil nil ((3715 . 3719) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 3715) (3714 . 3715)) nil (25941 4752 933674 403000) 0 nil])
([nil nil ((apply yas--snippet-revive 3726 3729 #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil)) (3714 . 3721) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil)) (3719 . 3722) (#("ID)" 0 3 (fontified nil)) . 3719) (3719 . 3722) (#("ID" 0 2 (fontified nil)) . -3719) (3719 . 3721)) nil (25941 4752 933673 441000) 0 nil])
([nil nil ((apply yas--snippet-revive 3696 3730 #s(yas--snippet nil (#s(yas--field 1 3714 3729 nil nil nil t nil)) nil 3 nil #s(yas--field 1 3714 3729 nil nil nil t nil) nil nil))) nil (25941 4752 933672 489000) 0 nil])
([nil nil ((3728 . 3732)) nil (25941 4752 933672 149000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3728) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3729) (undo-tree-id46 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3730) (undo-tree-id47 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3731) (undo-tree-id48 . -1) 3732) nil (25941 4752 933671 628000) 0 nil])
([nil nil ((3728 . 3729)) nil (25941 4752 933669 423000) 0 nil])
([nil nil ((apply yas--snippet-revive 3729 3737 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (3729 . 3737) (#("String()" 0 8 (fontified nil)) . 3729) (3729 . 3737) (#("String" 0 6 (fontified nil)) . -3729) (3729 . 3735)) nil (25941 4752 933668 562000) 0 nil])
([nil nil ((3739 . 3741)) nil (25941 4752 933666 929000) 0 nil])
([nil nil ((3741 . 3755)) nil (25941 4752 933666 67000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3753) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3754) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 3755) nil (25941 4752 933665 296000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3757) (3757 . 3758) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3757) (3757 . 3758) (3753 . 3758)) nil (25941 4752 933661 960000) 0 nil])
([nil nil ((3758 . 3760) (3759 . 3760) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3758) (3758 . 3760) (3757 . 3759)) nil (25941 4752 933657 672000) 0 nil])
([nil nil ((3760 . 3766)) nil (25941 4752 933656 720000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3783 3784 nil nil nil t #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil))) #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil)) #s(yas--field 3 3791 3814 nil nil nil t nil)) nil 6 nil #s(yas--field 3 3791 3814 nil nil nil t nil) nil nil)) (3766 . 3827) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3766) (3766 . 3842) (#("RespondWithError" 0 16 (fontified nil)) . -3766) (3766 . 3782)) nil (25941 4752 933655 828000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3784) (3783 . 3784)) nil (25941 4752 933654 646000) 0 nil])
([nil nil ((3787 . 3789) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3787) (3786 . 3787)) nil (25941 4752 933653 975000) 0 nil])
([nil nil ((3792 . 3802) (3791 . 3793) (#("\"" 0 1 (fontified nil)) . -3791) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3792) (3791 . 3792)) nil (25941 4752 933653 263000) 0 nil])
([nil nil ((3802 . 3813)) nil (25941 4752 933652 392000) 0 nil])
([nil nil ((apply yas--snippet-revive 3766 3815 #s(yas--snippet nil (#s(yas--field 1 3783 3784 nil nil nil t #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil))) #s(yas--field 2 3786 3789 nil nil nil t #s(yas--field 3 3791 3814 nil nil nil t nil)) #s(yas--field 3 3791 3814 nil nil nil t nil)) nil 6 nil #s(yas--field 3 3791 3814 nil nil nil t nil) nil nil))) nil (25941 4752 933651 620000) 0 nil])
([nil nil ((3815 . 3818)) nil (25941 4752 933650 658000) 0 nil])
([nil nil ((3818 . 3824)) nil (25941 4752 933650 157000) 0 nil])
([nil nil ((3827 . 3829)) nil (25941 4752 933649 576000) 0 nil])
([nil nil ((3829 . 3833)) nil (25941 4752 933649 166000) 0 nil])
([nil nil ((apply yas--snippet-revive 3829 3836 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (3829 . 3836) (#("resUser" 0 7 (fontified nil)) . 3829) (3829 . 3836) (#("resU" 0 4 (fontified nil)) . 3829) (3829 . 3833) (#("resUser" 0 7 (fontified nil)) . -3829) (3829 . 3836) (#("resU" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3829) (undo-tree-id38 . -4) (undo-tree-id39 . -4) 3833) nil (25941 4752 933648 104000) 0 nil])
([nil nil ((3836 . 3837)) nil (25941 4752 933645 890000) 0 nil])
([nil nil ((3837 . 3841)) nil (25941 4752 933645 198000) 0 nil])
([nil nil ((apply yas--snippet-revive 3837 3842 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (3837 . 3842) (#("Token" 0 5 (fontified nil)) . 3837) (3837 . 3842) (#("Toke" 0 4 (fontified nil)) . 3837) (3837 . 3841) (#("Token" 0 5 (fontified nil)) . -3837) (3837 . 3842) (#("Toke" 0 4 (fontified t face tree-sitter-hl-face:property)) . -3837) (undo-tree-id36 . -4) (undo-tree-id37 . -4) 3841) nil (25941 4752 933644 246000) 0 nil])
([nil nil ((3842 . 3850)) nil (25941 4752 933632 324000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2770 . 2771) (#("
" 0 1 (fontified nil)) . -2824) (2769 . 2825) 2768 (t 25941 4753 34366 400000)) nil (25941 6468 567134 269000) 0 nil])
([nil nil ((2771 . 2773)) nil (25941 6468 567133 848000) 0 nil])
([nil nil ((2790 . 2792)) nil (25941 6468 567133 498000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2792) (undo-tree-id67 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2793) (undo-tree-id68 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2794) (undo-tree-id69 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2795) (undo-tree-id70 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2796) (undo-tree-id71 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2797) (undo-tree-id72 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2798) (undo-tree-id73 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2799) (undo-tree-id74 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2800) (undo-tree-id75 . -1) 2801) nil (25941 6468 567131 995000) 0 nil])
([nil nil ((2792 . 2810)) nil (25941 6468 567128 488000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2825) (undo-tree-id57 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2826) (undo-tree-id58 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2827) (undo-tree-id59 . -1) (#("_" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2828) (undo-tree-id60 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2829) (undo-tree-id61 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2830) (undo-tree-id62 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2831) (undo-tree-id63 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2832) (undo-tree-id64 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2833) (undo-tree-id65 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2834) (undo-tree-id66 . -1) 2835) nil (25941 6468 567126 975000) 0 nil])
([nil nil ((2825 . 2845)) nil (25941 6468 567111 156000) 0 nil])
([nil nil ((2847 . 2850) (t 25941 6468 576038 960000)) nil (25941 6484 8988 396000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2847) (undo-tree-id76 . -1) (#("	" 0 1 (fontified t)) . -2848) (undo-tree-id77 . -1) (#("	" 0 1 (fontified t)) . -2849) (undo-tree-id78 . -1) 2850) nil (25941 6484 8985 671000) 0 nil])
([nil nil ((2847 . 2850) (t 25941 6484 109051 253000)) nil (25941 6698 960176 872000) 0 nil])
([nil nil ((2850 . 2861)) nil (25941 6698 960176 541000) 0 nil])
([nil nil ((2861 . 2870)) nil (25941 6698 960175 719000) 0 nil])
([nil nil ((apply yas--snippet-revive 2866 2874 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2866 . 2874) (#("database" 0 8 (fontified nil)) . 2866) (2866 . 2874) (#("data" 0 4 (fontified nil)) . 2866) (2866 . 2870) (#("database" 0 8 (fontified nil)) . -2866) (2866 . 2874) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2866) (undo-tree-id148 . -4) (undo-tree-id149 . -4) 2870) nil (25941 6698 960174 818000) 0 nil])
([nil nil ((2874 . 2875)) nil (25941 6698 960172 684000) 0 nil])
([nil nil ((apply yas--snippet-revive 2875 2896 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (2875 . 2896) (#("AddRefreshTokenParams" 0 21 (fontified nil)) . 2875) (2875 . 2896) (#("AddRefreshTokenParams" 0 21 (fontified nil)) . -2875) (2875 . 2896)) nil (25941 6698 960171 632000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2897) (2897 . 2898) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2897) (2897 . 2898) (2896 . 2898)) nil (25941 6698 960170 269000) 0 nil])
([nil nil ((2898 . 2901)) nil (25941 6698 960169 127000) 0 nil])
([nil nil ((2901 . 2904)) nil (25941 6698 960168 626000) 0 nil])
([nil nil ((2904 . 2905)) nil (25941 6698 960168 115000) 0 nil])
([nil nil ((2905 . 2907)) nil (25941 6698 960167 574000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2904) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2905) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 2907) nil (25941 6698 960166 692000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2903) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 2904) nil (25941 6698 960163 767000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2898) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("	" 0 1 (fontified t)) . -2899) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("	" 0 1 (fontified t)) . -2900) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2901) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2902) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 2903) nil (25941 6698 960162 334000) 0 nil])
([nil nil ((2864 . 2865)) nil (25941 6698 960158 858000) 0 nil])
([nil nil ((2899 . 2902)) nil (25941 6698 960158 447000) 0 nil])
([nil nil ((2902 . 2905)) nil (25941 6698 960158 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 2902 2915 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (2902 . 2915) (#("refreshObject" 0 13 (fontified nil)) . 2902) (2902 . 2915) (#("ref" 0 3 (fontified nil)) . 2902) (2902 . 2905) (#("refreshObject" 0 13 (fontified nil)) . -2902) (2902 . 2915) (#("ref" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2902) (undo-tree-id128 . -3) (undo-tree-id129 . -3) 2905) nil (25941 6698 960157 575000) 0 nil])
([nil nil ((2915 . 2916)) nil (25941 6698 960155 612000) 0 nil])
([nil nil ((apply yas--snippet-revive 2916 2924 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (2916 . 2924) (#("IssuedAt" 0 8 (fontified nil)) . 2916) (2916 . 2924) (#("IssuedAt" 0 8 (fontified nil)) . -2916) (2916 . 2924)) nil (25941 6698 960155 151000) 0 nil])
([nil nil ((2924 . 2933)) nil (25941 6698 960154 59000) 0 nil])
([nil nil ((apply yas--snippet-revive 2933 2938 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (2933 . 2938) (#("Now()" 0 5 (fontified nil)) . 2933) (2933 . 2938) (#("Now" 0 3 (fontified nil)) . -2933) (2933 . 2936)) nil (25941 6698 960153 237000) 0 nil])
([nil nil ((2938 . 2941)) nil (25941 6698 960152 446000) 0 nil])
([nil nil ((2941 . 2946)) nil (25941 6698 960152 145000) 0 nil])
([nil nil ((apply yas--snippet-revive 2941 2954 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (2941 . 2954) (#("refreshObject" 0 13 (fontified nil)) . 2941) (2941 . 2954) (#("refre" 0 5 (fontified nil)) . 2941) (2941 . 2946) (#("refreshObject" 0 13 (fontified nil)) . -2941) (2941 . 2954) (#("refre" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id126 . -5) (undo-tree-id127 . -5) 2946) nil (25941 6698 960151 514000) 0 nil])
([nil nil ((2954 . 2955)) nil (25941 6698 960149 650000) 0 nil])
([nil nil ((apply yas--snippet-revive 2955 2957 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (2955 . 2957) (#("ID" 0 2 (fontified nil)) . 2955) (2955 . 2957) (#("ID" 0 2 (fontified nil)) . -2955) (2955 . 2957)) nil (25941 6698 960148 859000) 0 nil])
([nil nil ((2957 . 2964)) nil (25941 6698 960147 246000) 0 nil])
([nil nil ((apply yas--snippet-revive 2960 2978 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (2960 . 2978) (#("refreshTokenSecret" 0 18 (fontified nil)) . 2960) (2960 . 2978) (#("refe" 0 4 (fontified nil)) . 2960) (2960 . 2964) (#("refreshTokenSecret" 0 18 (fontified nil)) . -2960) (2960 . 2978) (#("refe" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2960) (undo-tree-id124 . -4) (undo-tree-id125 . -4) 2964) nil (25941 6698 960146 344000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3010) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3011) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3012) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3013) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3014) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3015) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3016) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3017) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3018) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3019) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 3020) nil (25941 6698 960142 216000) 0 nil])
([nil nil ((3009 . 3012)) nil (25941 6698 959969 943000) 0 nil])
([nil nil ((3012 . 3014)) nil (25941 6698 959969 252000) 0 nil])
([nil nil ((apply yas--snippet-revive 3009 3022 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (3009 . 3022) (#("refreshObject" 0 13 (fontified nil)) . 3009) (3009 . 3022) (#("refre" 0 5 (fontified nil)) . 3009) (3009 . 3014) (#("refreshObject" 0 13 (fontified nil)) . -3009) (3009 . 3022) (#("refre" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id89 . -5) (undo-tree-id90 . -5) 3014) nil (25941 6698 959968 420000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2925) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 2926) nil (25941 6698 959963 812000) 0 nil])
([nil nil ((2959 . 2966) (t 25941 6699 61962 890000)) nil (25941 7171 94039 680000) 0 nil])
([nil nil ((2966 . 2967)) nil (25941 7171 94039 179000) 0 nil])
([nil nil ((2967 . 2970)) nil (25941 7171 94038 708000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2966) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2967) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2968) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2969) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 2970) nil (25941 7171 94037 927000) 0 nil])
([nil nil ((2966 . 2969)) nil (25941 7171 94034 530000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2966) (undo-tree-id365 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2967) (undo-tree-id366 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2968) (undo-tree-id367 . -1) 2969) nil (25941 7171 94033 929000) 0 nil])
([nil nil ((2966 . 2967)) nil (25941 7171 94031 615000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2965) (undo-tree-id363 . -1) (undo-tree-id364 . -1) 2966) nil (25941 7171 94031 114000) 0 nil])
([nil nil ((2965 . 2966)) nil (25941 7171 94029 922000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) #s(yas--field 2 3000 3001 nil nil nil t nil)) nil 18 nil #s(yas--field 2 3000 3001 nil nil nil t nil) nil nil)) (2966 . 3013) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2966) (2966 . 3023) (#("GenerateFromPassword" 0 20 (fontified nil)) . -2966) (2966 . 2986)) nil (25941 7171 94029 211000) 0 nil])
([nil nil ((2988 . 2993) (#("password []byte" 0 8 (fontified nil face tree-sitter-hl-face:type) 8 9 (fontified nil) 9 10 (fontified nil face (rainbow-delimiters-depth-4-face)) 10 11 (fontified nil face (rainbow-delimiters-depth-4-face)) 11 15 (fontified nil face tree-sitter-hl-face:type)) . 2988) (2987 . 2988)) nil (25941 7171 94027 678000) 0 nil])
([nil nil ((apply yas--snippet-revive 2987 2998 #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) nil)) (2987 . 2998) (#("tokenString" 0 11 (fontified nil)) . 2987) (2987 . 2998) (#("tokenS" 0 6 (fontified nil)) . 2987) (2987 . 2993) (#("tokenString" 0 11 (fontified nil)) . -2987) (2987 . 2998) (#("tokenS" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -2987) (undo-tree-id361 . -6) (undo-tree-id362 . -6) 2993) nil (25941 7171 94026 806000) 0 nil])
([nil nil ((#("cost int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3001) (3000 . 3001)) nil (25941 7171 94024 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 2966 3002 #s(yas--snippet nil (#s(yas--field 1 2987 2998 nil nil nil t #s(yas--field 2 3000 3001 nil nil nil t nil)) #s(yas--field 2 3000 3001 nil nil nil t nil)) nil 18 nil #s(yas--field 2 3000 3001 nil nil nil t nil) nil nil))) nil (25941 7171 94023 660000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3002) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3003) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3004) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3005) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3006) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3007) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3008) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3009) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3010) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3011) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3012) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3013) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3014) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3015) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3016) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3017) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3018) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3019) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3020) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 3021) nil (25941 7171 94021 246000) 0 nil])
([nil nil ((#("	\"github.com/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t)) . 365) (undo-tree-id318 . 1) (undo-tree-id319 . -29) (undo-tree-id320 . -29) (undo-tree-id321 . -28) (undo-tree-id322 . -29) 393) nil (25941 7171 94000 106000) 0 nil])
([nil nil ((393 . 394)) nil (25941 7171 93997 762000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id311 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -388) (undo-tree-id312 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -389) (undo-tree-id313 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -390) (undo-tree-id314 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -391) (undo-tree-id315 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -392) (undo-tree-id316 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -393) (undo-tree-id317 . -1) 394) nil (25941 7171 93996 700000) 0 nil])
([nil nil ((387 . 390)) nil (25941 7171 93992 692000) 0 nil])
([nil nil ((apply yas--snippet-revive 387 394 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (387 . 394) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("two" 0 3 (fontified nil)) . 387) (387 . 390) (#("twofish" 0 7 (fontified nil)) . -387) (387 . 394) (#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id309 . -3) (undo-tree-id310 . -3) 390) nil (25941 7171 93991 810000) 0 nil])
([nil nil ((387 . 390) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("two" 0 3 (fontified nil)) . 387) (387 . 390) (#("twofish" 0 7 (fontified nil)) . 387) (387 . 394) (#("twofish" 0 7 (fontified t face tree-sitter-hl-face:string)) . 387) (undo-tree-id308 . -7)) nil (25941 7171 93989 686000) 0 nil])
([nil nil ((#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . 387) (undo-tree-id307 . -3)) nil (25941 7171 93988 895000) 0 nil])
([nil nil ((387 . 394)) nil (25941 7171 93988 474000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . 393) (undo-tree-id306 . -1)) nil (25941 7171 93988 204000) 0 nil])
([nil nil ((365 . 395)) nil (25941 7171 93987 362000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id300 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id301 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id302 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id303 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id304 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id305 . -1) 423) nil (25941 7171 93986 731000) 0 nil])
([nil nil ((#("	\"github.com/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t)) . 365) (undo-tree-id296 . 8) (undo-tree-id297 . -29) (undo-tree-id298 . -21) (undo-tree-id299 . -29) 386) nil (25941 7171 93983 875000) 0 nil])
([nil nil ((387 . 389)) nil (25941 7171 93982 82000) 0 nil])
([nil nil ((389 . 391)) nil (25941 7171 93981 812000) 0 nil])
([nil nil ((apply yas--snippet-revive 387 393 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (387 . 393) (#("bcrypt" 0 6 (fontified nil)) . 387) (387 . 393) (#("bcry" 0 4 (fontified nil)) . 387) (387 . 391) (#("bcrypt" 0 6 (fontified nil)) . -387) (387 . 393) (#("bcry" 0 4 (fontified t face tree-sitter-hl-face:string)) . -387) (undo-tree-id294 . -4) (undo-tree-id295 . -4) 391) nil (25941 7171 93980 569000) 0 nil])
([nil nil ((nil rear-nonsticky nil 395 . 396) (#("
" 0 1 (fontified nil)) . -424) (394 . 425) 392) nil (25941 7171 93978 465000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id288 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id289 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id290 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id291 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id292 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id293 . -1) 423) nil (25941 7171 93977 253000) 0 nil])
([nil nil ((417 . 420)) nil (25941 7171 93974 879000) 0 nil])
([nil nil ((apply yas--snippet-revive 417 424 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (417 . 424) (#("twofish" 0 7 (fontified nil)) . 417) (417 . 424) (#("two" 0 3 (fontified nil)) . 417) (417 . 420) (#("twofish" 0 7 (fontified nil)) . -417) (417 . 424) (#("two" 0 3 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 420) nil (25941 7171 93974 267000) 0 nil])
([nil nil ((427 . 429)) nil (25941 7171 93972 244000) 0 nil])
([nil nil ((429 . 435)) nil (25941 7171 93971 673000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -427) (undo-tree-id150 . -1) (undo-tree-id151 . 1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("
" 0 1 (fontified t)) . -428) (undo-tree-id184 . -1) (undo-tree-id185 . 1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -429) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -430) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -431) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -432) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("z" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -433) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#(" " 0 1 (fontified t)) . -434) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 435) nil (25941 7171 93966 974000) 0 nil])
([nil nil ((428 . 430) (t 25941 7171 194662 356000)) nil (25941 7330 176855 201000) 0 nil])
([nil nil ((429 . 437)) nil (25941 7330 176854 660000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -436) (undo-tree-id436 . -1) 437) nil (25941 7330 176853 979000) 0 nil])
([nil nil ((436 . 445)) nil (25941 7330 176853 87000) 0 nil])
([nil nil ((445 . 447)) nil (25941 7330 176852 597000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -446) (undo-tree-id434 . -1) (undo-tree-id435 . -1) 447) nil (25941 7330 176852 176000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -444) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -445) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 446) nil (25941 7330 176850 743000) 0 nil])
([nil nil ((444 . 447)) nil (25941 7330 176847 206000) 0 nil])
([nil nil ((apply yas--snippet-revive 444 451 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (444 . 451) (#("twofish" 0 7 (fontified nil)) . 444) (444 . 451) (#("two" 0 3 (fontified nil)) . 444) (444 . 447) (#("twofish" 0 7 (fontified nil)) . -444) (444 . 451) (#("two" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -444) (undo-tree-id428 . -3) (undo-tree-id429 . -3) 447) nil (25941 7330 176846 134000) 0 nil])
([nil nil ((451 . 452)) nil (25941 7330 176843 319000) 0 nil])
([nil nil ((452 . 453)) nil (25941 7330 176842 918000) 0 nil])
([nil nil ((453 . 455)) nil (25941 7330 176842 287000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 462 464 nil nil nil t nil)) nil 24 nil #s(yas--field 1 462 464 nil nil nil t nil) nil nil)) (452 . 473) (#("NewCipher(${1:key []byte})" 0 26 (fontified nil)) . 452) (452 . 478) (#("New" 0 3 (fontified nil)) . 452) (452 . 455) (#("NewCipher" 0 9 (fontified nil)) . -452) (452 . 461) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -452) (undo-tree-id426 . -3) (undo-tree-id427 . -3) 455) nil (25941 7330 176841 345000) 0 nil])
([nil nil ((462 . 464) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -462) (#("key []byte" 0 3 (fontified nil face tree-sitter-hl-face:type) 3 4 (fontified nil) 4 5 (fontified nil face (rainbow-delimiters-depth-2-face)) 5 6 (fontified nil face (rainbow-delimiters-depth-2-face)) 6 10 (fontified nil face tree-sitter-hl-face:type)) . 463) (462 . 463)) nil (25941 7330 176838 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 452 465 #s(yas--snippet nil (#s(yas--field 1 462 464 nil nil nil t nil)) nil 24 nil #s(yas--field 1 462 464 nil nil nil t nil) nil nil))) nil (25941 7330 176838 89000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -429) (undo-tree-id411 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -430) (undo-tree-id412 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -431) (undo-tree-id413 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -432) (undo-tree-id414 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -433) (undo-tree-id415 . -1) (#(" " 0 1 (fontified t)) . -434) (undo-tree-id416 . -1) (#("C" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -435) (undo-tree-id417 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -436) (undo-tree-id418 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -437) (undo-tree-id419 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -438) (undo-tree-id420 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -439) (undo-tree-id421 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -440) (undo-tree-id422 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id423 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -442) (undo-tree-id424 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id425 . -1) 444) nil (25941 7330 176835 865000) 0 nil])
([nil nil ((429 . 444)) nil (25941 7330 176829 804000) 0 nil])
([nil nil ((444 . 446)) nil (25941 7330 176829 383000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -445) (undo-tree-id408 . -1) (undo-tree-id409 . 1) (undo-tree-id410 . -1) 446) nil (25941 7330 176828 752000) 0 nil])
([nil nil ((445 . 447)) nil (25941 7330 176826 618000) 0 nil])
([nil nil ((445 . 452)) nil (25941 7330 176826 177000) 0 nil])
([nil nil ((452 . 453) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 452) (452 . 453) (451 . 453)) nil (25941 7330 176825 586000) 0 nil])
([nil nil ((#("	twofish.NewCipher(\"\")
" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t) 9 18 (fontified t face tree-sitter-hl-face:type) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 21 (fontified t face tree-sitter-hl-face:string) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t)) . 456) (undo-tree-id405 . 22) (undo-tree-id406 . -22) (undo-tree-id407 . -19)) nil (25941 7330 176824 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 454 . 455) (#("
" 0 1 (fontified nil)) . -476) (453 . 477) 452) nil (25941 7330 176823 131000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 452) (undo-tree-id404 . -1)) nil (25941 7330 176822 99000) 0 nil])
([nil nil ((450 . 451) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -450) (450 . 451) (449 . 451)) nil (25941 7330 176821 248000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -451) (undo-tree-id401 . -1) (undo-tree-id402 . 1) (undo-tree-id403 . -1) 452) nil (25941 7330 176819 915000) 0 nil])
([nil nil ((453 . 454) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -453) (453 . 454) (451 . 454)) nil (25941 7330 176818 142000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -454) (undo-tree-id398 . -1) (undo-tree-id399 . 1) (undo-tree-id400 . -1) 455) nil (25941 7330 176816 950000) 0 nil])
([nil nil ((453 . 459)) nil (25941 7330 176815 76000) 0 nil])
([nil nil ((453 . 456)) nil (25941 7330 176814 445000) 0 nil])
([nil nil ((apply yas--snippet-revive 453 467 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (453 . 467) (#("twofish.Cipher" 0 14 (fontified nil)) . 453) (453 . 467) (#("twoCipher" 0 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:type)) . 453) (453 . 456) (#("twofish.Cipher" 0 14 (fontified nil)) . -453) (453 . 467) (#("two" 0 3 (fontified t face tree-sitter-hl-face:type)) . -453) (undo-tree-id396 . -3) (undo-tree-id397 . -3) 456) nil (25941 7330 176813 804000) 0 nil])
([nil nil ((495 . 496)) nil (25941 7330 176811 620000) 0 nil])
([nil nil ((#("const Cipher = (func() (twofish.Cipher) {
	twofish.NewCipher(\"\")
}0
" 0 1 (fontified t face tree-sitter-hl-face:keyword) 1 2 (fontified t face tree-sitter-hl-face:keyword) 2 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:operator) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 20 (fontified t face tree-sitter-hl-face:keyword) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 22 (fontified t face (rainbow-delimiters-depth-2-face)) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 32 (fontified t) 32 38 (fontified t face tree-sitter-hl-face:type) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 42 (fontified t) 42 43 (fontified t rear-nonsticky t) 43 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 60 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 63 (fontified t face tree-sitter-hl-face:string) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t face tree-sitter-hl-face:number) 67 68 (fontified t)) . 429) (undo-tree-id386 . -66) (undo-tree-id387 . 1) (undo-tree-id388 . -67) (undo-tree-id389 . -66) (undo-tree-id390 . -1) (undo-tree-id391 . -24) (undo-tree-id392 . -1) (undo-tree-id393 . -68) (undo-tree-id394 . -1) (undo-tree-id395 . -66) 430) nil (25941 7330 176811 229000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 429) (undo-tree-id384 . 1) (undo-tree-id385 . 1)) nil (25941 7330 176807 41000) 0 nil])
([nil nil ((773 . 775)) nil (25941 7330 176805 348000) 0 nil])
([nil nil ((775 . 778)) nil (25941 7330 176804 627000) 0 nil])
([nil nil ((778 . 785)) nil (25941 7330 176804 15000) 0 nil])
([nil nil ((apply yas--snippet-revive 782 796 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (782 . 796) (#("twofish.Cipher" 0 14 (fontified nil)) . 782) (782 . 796) (#("two" 0 3 (fontified nil)) . 782) (782 . 785) (#("twofish.Cipher" 0 14 (fontified nil)) . -782) (782 . 796) (#("two" 0 3 (fontified t face tree-sitter-hl-face:type)) . -782) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) 785) nil (25941 7330 176801 240000) 0 nil])
([nil nil ((4787 . 4789) (t 25941 7330 185027 697000)) nil (25941 7388 750753 631000) 0 nil])
([nil nil ((4789 . 4795)) nil (25941 7388 750752 950000) 0 nil])
([nil nil ((4795 . 4796)) nil (25941 7388 750752 639000) 0 nil])
([nil nil ((4796 . 4798)) nil (25941 7388 750752 379000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4796) (undo-tree-id459 . -1) (#(" " 0 1 (fontified t)) . -4797) (undo-tree-id460 . -1) 4798) nil (25941 7388 750751 427000) 0 nil])
([nil nil ((4796 . 4802)) nil (25941 7388 750750 465000) 0 nil])
([nil nil ((apply yas--snippet-revive 4799 4806 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (4799 . 4806) (#("twofish" 0 7 (fontified nil)) . 4799) (4799 . 4806) (#("two" 0 3 (fontified nil)) . 4799) (4799 . 4802) (#("twofish" 0 7 (fontified nil)) . -4799) (4799 . 4806) (#("two" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4799) (undo-tree-id457 . -3) (undo-tree-id458 . -3) 4802) nil (25941 7388 750749 804000) 0 nil])
([nil nil ((4806 . 4807)) nil (25941 7388 750748 251000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4817 4858 nil nil nil t nil)) nil 28 nil #s(yas--field 1 4817 4858 nil nil nil t nil) nil nil)) (4807 . 4828) (#("NewCipher(${1:key []byte})" 0 26 (fontified nil)) . 4807) (4807 . 4833) (#("NewCipher" 0 9 (fontified nil)) . -4807) (4807 . 4816)) nil (25941 7388 750747 620000) 0 nil])
([nil nil ((4817 . 4819) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4817) (undo-tree-id455 . -1) (#("key []byte" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 5 (fontified nil face (rainbow-delimiters-depth-3-face)) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 10 (fontified nil face tree-sitter-hl-face:type)) . 4818) (undo-tree-id456 . -10) (4817 . 4818)) nil (25941 7388 750746 438000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4817) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 4818) (undo-tree-id454 . -1)) nil (25941 7388 750744 454000) 0 nil])
([nil nil ((4817 . 4823)) nil (25941 7388 750742 320000) 0 nil])
([nil nil ((4817 . 4824) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4834 4856 nil nil nil t nil)) nil 29 nil #s(yas--field 1 4834 4856 nil nil nil t nil) #s(yas--field 1 4817 4858 nil nil nil t nil) nil)) (4820 . 4839) (#("Getenv(${1:key string}))" 0 24 (fontified nil)) . 4820) (undo-tree-id445 . -24) (4820 . 4844) (#("Get" 0 3 (fontified nil)) . 4820) (undo-tree-id446 . -3) (4820 . 4823) (#("Getenv" 0 6 (fontified nil)) . -4820) (undo-tree-id447 . -6) (4820 . 4826) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4820) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) 4823) nil (25941 7388 750741 348000) 0 nil])
([nil nil ((4835 . 4842) (4834 . 4836) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -4834) (undo-tree-id443 . -1) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4835) (undo-tree-id444 . -10) (4834 . 4835)) nil (25941 7388 750737 310000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4836) (undo-tree-id437 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4837) (undo-tree-id438 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4838) (undo-tree-id439 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4839) (undo-tree-id440 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4840) (undo-tree-id441 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4841) (undo-tree-id442 . -1) 4842) nil (25941 7388 750734 455000) 0 nil])
([nil nil ((4836 . 4848)) nil (25941 7388 750724 576000) 0 nil])
([nil nil ((4848 . 4855)) nil (25941 7388 750724 246000) 0 nil])
([nil nil ((apply yas--snippet-revive 4827 4858 #s(yas--snippet nil (#s(yas--field 1 4834 4856 nil nil nil t nil)) nil 29 nil #s(yas--field 1 4834 4856 nil nil nil t nil) #s(yas--field 1 4817 4858 nil nil nil t nil) nil))) nil (25941 7388 750723 494000) 0 nil])
([nil nil ((apply yas--snippet-revive 4807 4859 #s(yas--snippet nil (#s(yas--field 1 4817 4858 nil nil nil t nil)) nil 28 nil #s(yas--field 1 4817 4858 nil nil nil t nil) nil nil))) nil (25941 7388 750720 529000) 0 nil])
([nil nil ((4795 . 4801) (t 25941 7388 853424 624000)) nil (25941 7423 745796 478000) 0 nil])
([nil nil ((4865 . 4867)) nil (25941 7423 745796 247000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4879) (4879 . 4880) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4879) (4879 . 4880) (4867 . 4880)) nil (25941 7423 745795 656000) 0 nil])
([nil nil ((4880 . 4882) (4881 . 4882) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4880) (4880 . 4882) (4879 . 4881)) nil (25941 7423 745794 845000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4875) (undo-tree-id463 . -1) 4876) nil (25941 7423 745793 452000) 0 nil])
([nil nil ((4875 . 4876)) nil (25941 7423 745791 939000) 0 nil])
([nil nil ((4877 . 4881)) nil (25941 7423 745791 518000) 0 nil])
([nil nil ((4886 . 4894)) nil (25941 7423 745790 987000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4898 4910 nil nil nil t nil)) nil 30 nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil nil)) (4890 . 4907) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 4890) (4890 . 4912) (#("Prin" 0 4 (fontified nil)) . 4890) (4890 . 4894) (#("Println" 0 7 (fontified nil)) . -4890) (4890 . 4897) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4890) (undo-tree-id461 . -4) (undo-tree-id462 . -4) 4894) nil (25941 7423 745790 146000) 0 nil])
([nil nil ((4899 . 4903) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4899) (4898 . 4899)) nil (25941 7423 745782 51000) 0 nil])
([nil nil ((apply yas--snippet-revive 4903 4910 #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil)) (4903 . 4910) (#("Error()" 0 7 (fontified nil)) . 4903) (4903 . 4910) (#("Error" 0 5 (fontified nil)) . -4903) (4903 . 4908)) nil (25941 7423 745781 309000) 0 nil])
([nil nil ((apply yas--snippet-revive 4890 4911 #s(yas--snippet nil (#s(yas--field 1 4898 4910 nil nil nil t nil)) nil 30 nil #s(yas--field 1 4898 4910 nil nil nil t nil) nil nil))) nil (25941 7423 745780 738000) 0 nil])
([nil nil ((4911 . 4914)) nil (25941 7423 745780 317000) 0 nil])
([nil nil ((4914 . 4920)) nil (25941 7423 745777 522000) 0 nil])
([nil nil ((4923 . 4925) (t 25941 7423 755646 161000)) nil (25941 7465 549174 331000) 0 nil])
([nil nil ((4925 . 4928)) nil (25941 7465 549173 560000) 0 nil])
([nil nil ((apply yas--snippet-revive 4925 4931 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (4925 . 4931) (#("apiCfg" 0 6 (fontified nil)) . 4925) (4925 . 4931) (#("api" 0 3 (fontified nil)) . 4925) (4925 . 4928) (#("apiCfg" 0 6 (fontified nil)) . -4925) (4925 . 4931) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4925) (undo-tree-id479 . -3) (undo-tree-id480 . -3) 4928) nil (25941 7465 549172 668000) 0 nil])
([nil nil ((4931 . 4932)) nil (25941 7465 549171 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 4932 4938 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (4932 . 4938) (#("cipher" 0 6 (fontified nil)) . 4932) (4932 . 4938) (#("cipher" 0 6 (fontified nil)) . -4932) (4932 . 4938)) nil (25941 7465 549170 163000) 0 nil])
([nil nil ((4938 . 4944)) nil (25941 7465 549169 211000) 0 nil])
([nil nil ((apply yas--snippet-revive 4941 4948 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (4941 . 4948) (#("*cipher" 0 7 (fontified nil)) . 4941) (4941 . 4948) (#("cip" 0 3 (fontified nil)) . 4941) (4941 . 4944) (#("cipher" 0 6 (fontified nil)) . -4941) (4941 . 4947) (#("cip" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4941) (undo-tree-id477 . -3) (undo-tree-id478 . -3) 4944) nil (25941 7465 549168 209000) 0 nil])
([nil nil ((782 . 783)) nil (25941 7465 549165 504000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4942) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 4943) nil (25941 8368 458831 59000) 0 nil])
([nil nil ((#("	  refreshTokenSecret := os.Getenv(\"REFRESH_TOKEN_SECRET\")
" 0 3 (fontified t) 3 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 24 (fontified t face tree-sitter-hl-face:operator) 24 25 (fontified t) 25 27 (fontified t face tree-sitter-hl-face:variable) 27 28 (fontified t) 28 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-3-face)) 35 57 (fontified t face tree-sitter-hl-face:string) 57 58 (fontified t face (rainbow-delimiters-depth-3-face)) 58 59 (fontified t)) . 2814) (undo-tree-id815 . -58) (undo-tree-id816 . -57) (undo-tree-id817 . -57)) ((2814 . 2873)) (25941 8369 678293 988000) 0 nil])
([nil nil ((#("sword(tokenString, 8)" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1 2 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2 3 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 3 4 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 4 5 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t face tree-sitter-hl-face:variable) 13 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face tree-sitter-hl-face:number) 20 21 (fontified t face (rainbow-delimiters-depth-3-face))) . 2947) (undo-tree-id818 . -21)) ((2947 . 2968)) (25941 8369 867225 680000) 0 nil])
([nil nil ((#("crypt.GenerateFromPas" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t face tree-sitter-hl-face:property) 8 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t face tree-sitter-hl-face:property) 10 11 (fontified t face tree-sitter-hl-face:property) 11 12 (fontified t face tree-sitter-hl-face:property) 12 13 (fontified t face tree-sitter-hl-face:property) 13 14 (fontified t face tree-sitter-hl-face:property) 14 15 (fontified t face tree-sitter-hl-face:property) 15 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t face tree-sitter-hl-face:property) 18 19 (fontified t face tree-sitter-hl-face:property) 19 20 (fontified t face tree-sitter-hl-face:property) 20 21 (fontified t face tree-sitter-hl-face:property)) . 2926) (undo-tree-id819 . -18) (undo-tree-id820 . -21) (undo-tree-id821 . -21) (undo-tree-id822 . -21) (undo-tree-id823 . -6) (undo-tree-id824 . -21)) ((2926 . 2947)) (25941 8370 134971 318000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 2925) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1)) ((2925 . 2926)) (25941 8370 346221 787000) 0 nil])
([nil nil ((2925 . 2927)) ((#("a." 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t)) . 2925) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2)) (25941 8370 651006 929000) 0 nil])
([nil nil ((2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933)) ((#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 6 (fontified nil)) . 2927) (2927 . 2933) (#("cipher" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property) 4 5 (fontified t face tree-sitter-hl-face:property) 5 6 (fontified t face tree-sitter-hl-face:property)) . 2927) (undo-tree-id809 . -6) (undo-tree-id810 . -6) (undo-tree-id811 . -6)) (25941 8370 879544 602000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 2934) (2934 . 2935) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2934) (2934 . 2935) (2933 . 2935)) ((#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2933) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 2934) (2934 . 2935) (#(")" 0 1 (fontified nil)) . 2934) (2934 . 2935)) (25941 8376 799054 293000) 0 nil])
([nil nil ((2934 . 2939)) nil (25941 9197 303951 541000) 0 nil] [nil nil ((#("pher()" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1 2 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2 3 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 3 4 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t face (rainbow-delimiters-depth-3-face))) . 2929) (undo-tree-id831 . -5) (undo-tree-id832 . -5)) ((2929 . 2935)) (25941 8375 747049 759000) 0 nil])
([nil nil ((apply yas--snippet-revive 2934 2945 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (2934 . 2945) (#("tokenString" 0 11 (fontified nil)) . 2934) (2934 . 2945) (#("token" 0 5 (fontified nil)) . 2934) (2934 . 2939) (#("tokenString" 0 11 (fontified nil)) . -2934) (2934 . 2945) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2934) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) 2939) nil (25941 9197 303950 900000) 0 nil])
([nil nil ((#("	cipher, cerr := twofish.NewCipher([]byte(os.Getenv(\"REFRESH_TOKEN_SECRET\")))
	if cerr != nil {
		fmt.Println(cerr.Error())
		return
	}
	apiCfg.cipher = cipher
" 1 7 (face tree-sitter-hl-face:variable) 9 13 (face tree-sitter-hl-face:variable) 14 16 (face tree-sitter-hl-face:operator) 17 24 (face tree-sitter-hl-face:variable) 25 34 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (face (rainbow-delimiters-depth-2-face)) 35 36 (face (rainbow-delimiters-depth-3-face)) 36 37 (face (rainbow-delimiters-depth-3-face)) 37 41 (face tree-sitter-hl-face:type) 41 42 (face (rainbow-delimiters-depth-3-face)) 42 44 (face tree-sitter-hl-face:variable) 45 51 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 51 52 (face (rainbow-delimiters-depth-4-face)) 52 74 (face tree-sitter-hl-face:string) 74 75 (face (rainbow-delimiters-depth-4-face)) 75 76 (face (rainbow-delimiters-depth-3-face)) 76 77 (face (rainbow-delimiters-depth-2-face)) 79 81 (face tree-sitter-hl-face:keyword) 82 86 (face tree-sitter-hl-face:variable) 87 88 (face tree-sitter-hl-face:operator) 88 89 (face tree-sitter-hl-face:operator) 90 93 (face tree-sitter-hl-face:constant\.builtin) 94 95 (face (rainbow-delimiters-depth-2-face)) 98 101 (face tree-sitter-hl-face:variable) 102 109 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 109 110 (face (rainbow-delimiters-depth-3-face)) 110 114 (face tree-sitter-hl-face:variable) 115 120 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 120 121 (face (rainbow-delimiters-depth-4-face)) 121 122 (face (rainbow-delimiters-depth-4-face)) 122 123 (face (rainbow-delimiters-depth-3-face)) 126 132 (face tree-sitter-hl-face:keyword) 134 135 (face (rainbow-delimiters-depth-2-face)) 137 143 (face tree-sitter-hl-face:variable) 144 150 (face tree-sitter-hl-face:property) 151 152 (face tree-sitter-hl-face:operator) 153 159 (face tree-sitter-hl-face:variable)) . 4691)) ((4691 . 4851)) (25941 8374 178389 102000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2933) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2934) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2935) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2936) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2937) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2938) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2939) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2940) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2945) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . 1) (undo-tree-id1015 . -1) 2946) nil (25941 9197 303947 814000) 0 nil])
([nil nil ((#("	\"golang.org/x/crypto/twofish\"
" 0 1 (fontified t rear-nonsticky t) 1 22 (fontified t face tree-sitter-hl-face:string) 22 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t face tree-sitter-hl-face:string) 30 31 (fontified t)) . 395) (undo-tree-id833 . -30) (undo-tree-id834 . -30) (undo-tree-id835 . -30)) ((395 . 426)) (25941 8373 427456 521000) 0 nil])
([nil nil ((2933 . 2934)) nil (25941 9197 303934 499000) 0 nil])
([nil nil ((#("	cipher *twofish.Cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:operator) 9 17 (fontified t) 17 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t)) . 743) (undo-tree-id481 . -23) (undo-tree-id482 . -23) (undo-tree-id483 . -22) (undo-tree-id485 . -16) (undo-tree-id487 . -24) (undo-tree-id489 . -23) (undo-tree-id491 . -22) (undo-tree-id493 . -22) (undo-tree-id495 . -22) (undo-tree-id497 . -17) (undo-tree-id499 . -22) (undo-tree-id501 . -22) 765) ((743 . 767)) (25941 8357 973546 500000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil 39 nil #s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil nil)) (2934 . 2965) (#("Encrypt(${1:dst []byte}, ${2:src []byte})" 0 41 (fontified nil)) . 2934) (2934 . 2975) (#("Encrypt" 0 7 (fontified nil)) . -2934) (2934 . 2941)) nil (25941 9197 303934 8000) 0 nil])
([nil nil ((1765 . 1771) (t 25941 7891 724861 403000)) ((#("string" 0 6 (fontified t face tree-sitter-hl-face:variable)) . 1765) (undo-tree-id800 . -6) (undo-tree-id801 . -6)) (25941 8357 942338 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 2934 2965 #s(yas--snippet nil (#s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil 39 nil #s(yas--field 1 2942 2952 nil nil nil nil #s(yas--field 2 2954 2964 nil nil nil nil nil)) nil nil))) nil (25941 9197 303933 87000) 0 nil])
([nil nil ((1771 . 1773)) ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 1771) (undo-tree-id798 . -2) (undo-tree-id799 . -2)) (25941 8357 912433 563000) 0 nil])
([nil nil ((2903 . 2906)) nil (25941 9197 303932 405000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1772) (undo-tree-id642 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . 1) (undo-tree-id646 . -1) 1773) ((1772 . 1773)) (25941 8357 883337 705000) 0 nil])
([nil nil ((2906 . 2911)) nil (25941 9197 303932 55000) 0 nil])
([nil nil ((1776 . 1777) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1776) (1776 . 1777)) ((#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . 1776) (1776 . 1777) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1776) (t 25941 7906 988861 756000)) (25941 8357 855509 447000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2907) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2908) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2909) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2910) (undo-tree-id973 . -1) (undo-tree-id974 . -1) 2911) nil (25941 9197 303930 832000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2878) (undo-tree-id761 . -1) (#("." 0 1 (fontified t)) . -2879) (undo-tree-id762 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2880) (undo-tree-id763 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2881) (undo-tree-id764 . -1) 2882 (t 25941 7906 988861 756000)) ((2878 . 2882)) (25941 8357 351111 196000) 0 nil])
([nil nil ((2921 . 2923) (#("]" 0 1 (fontified nil)) . -2920) (2920 . 2921) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2920) (2920 . 2921) (2906 . 2921)) nil (25941 9197 303926 143000) 0 nil])
([nil nil ((2878 . 2881)) ((#("bcr" 0 3 (fontified t face tree-sitter-hl-face:variable)) . 2878) (undo-tree-id796 . -3) (undo-tree-id797 . -3)) (25941 8357 219241 481000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2922) (undo-tree-id964 . -1) 2923) nil (25941 9197 303924 761000) 0 nil])
([nil nil ((2881 . 2882)) ((#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 2881) (undo-tree-id794 . -1) (undo-tree-id795 . -1)) (25941 8357 31915 996000) 0 nil])
([nil nil ((2922 . 2925)) nil (25941 9197 303782 895000) 0 nil])
([nil nil ((apply yas--snippet-revive 2878 2908 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2878 . 2908) (#("bcrypt.ErrHashTooShort.Error()" 0 30 (fontified nil)) . 2878) (2878 . 2908) (#("bcry" 0 4 (fontified nil)) . 2878) (2878 . 2882) (#("bcrypt.ErrHashTooShort.Error" 0 28 (fontified nil)) . -2878) (2878 . 2906) (#("bcry" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2878) (undo-tree-id759 . -4) (undo-tree-id760 . -4) 2882) ((2878 . 2882) (#("bcrypt.ErrHashTooShort.Error" 0 28 (fontified nil)) . 2878) (2878 . 2906) (#("bcry" 0 4 (fontified nil)) . 2878) (2878 . 2882) (#("bcrypt.ErrHashTooShort.Error()" 0 30 (fontified nil)) . 2878) (2878 . 2908) (#("bcrypt.ErrHashTooShort.Error()" 0 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 8 (fontified t face tree-sitter-hl-face:property) 8 9 (fontified t face tree-sitter-hl-face:property) 9 10 (fontified t face tree-sitter-hl-face:property) 10 11 (fontified t face tree-sitter-hl-face:property) 11 12 (fontified t face tree-sitter-hl-face:property) 12 13 (fontified t face tree-sitter-hl-face:property) 13 14 (fontified t face tree-sitter-hl-face:property) 14 15 (fontified t face tree-sitter-hl-face:property) 15 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t face tree-sitter-hl-face:property) 18 19 (fontified t face tree-sitter-hl-face:property) 19 20 (fontified t face tree-sitter-hl-face:property) 20 21 (fontified t face tree-sitter-hl-face:property) 21 22 (fontified t face tree-sitter-hl-face:property) 22 23 (fontified t) 23 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 26 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t face (rainbow-delimiters-depth-3-face))) . 2878) (undo-tree-id789 . -6) (undo-tree-id790 . -6) (undo-tree-id791 . -6) (undo-tree-id792 . -30) (undo-tree-id793 . -30)) (25941 8356 866613 535000) 0 nil])
([nil nil ((2925 . 2926)) nil (25941 9197 303782 474000) 0 nil])
([nil nil ((2908 . 2909)) ((#("." 0 1 (fontified t)) . 2908) (undo-tree-id787 . -1) (undo-tree-id788 . -1)) (25941 8356 697408 739000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2925) (undo-tree-id963 . -1) 2926) nil (25941 9197 303781 943000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2889) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2890) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2891) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2892) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2893) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2894) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2895) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2896) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2897) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2898) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2899) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("." 0 1 (fontified t)) . -2900) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2901) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2902) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2903) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2904) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2905) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2906) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . 1) (undo-tree-id752 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2907) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . 1) (undo-tree-id756 . -1) (#("." 0 1 (fontified t)) . -2908) (undo-tree-id757 . -1) (undo-tree-id758 . -1) 2909) ((2888 . 2909)) (25941 8356 530976 967000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2964) (undo-tree-id953 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2965) (undo-tree-id954 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2966) (undo-tree-id955 . -1) (#(" " 0 1 (fontified t)) . -2967) (undo-tree-id956 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2968) (undo-tree-id957 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2969) (undo-tree-id958 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2970) (undo-tree-id959 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2971) (undo-tree-id960 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2972) (undo-tree-id961 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2973) (undo-tree-id962 . -1) 2974) nil (25941 9197 303780 19000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) 2888) ((2885 . 2888)) (25941 8356 358599 145000) 0 nil])
([nil nil ((2964 . 2967)) nil (25941 9197 303776 222000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2884) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 2885) ((2884 . 2885)) (25941 8356 91180 219000) 0 nil])
([nil nil ((apply yas--snippet-revive 2964 2973 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (2964 . 2973) (#("encrypted" 0 9 (fontified nil)) . 2964) (2964 . 2973) (#("enc" 0 3 (fontified nil)) . 2964) (2964 . 2967) (#("encrypted" 0 9 (fontified nil)) . -2964) (2964 . 2973) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2964) (undo-tree-id951 . -3) (undo-tree-id952 . -3) 2967) nil (25941 9197 303775 260000) 0 nil])
([nil nil ((2884 . 2885)) ((#("." 0 1 (fontified t)) . 2884) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1)) (25941 8355 727009 517000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2975) (undo-tree-id941 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2976) (undo-tree-id942 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2977) (undo-tree-id943 . -1) (#(" " 0 1 (fontified t)) . -2978) (undo-tree-id944 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2979) (undo-tree-id945 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -2980) (undo-tree-id946 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2981) (undo-tree-id947 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2982) (undo-tree-id948 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2983) (undo-tree-id949 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2984) (undo-tree-id950 . -1) 2985) nil (25941 9197 303772 4000) 0 nil])
([nil nil ((2885 . 2886)) ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id780 . -1) (undo-tree-id781 . -1)) (25941 8355 696782 456000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2982) (2982 . 2983) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2982) (2982 . 2983) (2977 . 2983) (#("]" 0 1 (fontified nil)) . -2976) (2976 . 2977) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2976) (2976 . 2977) (2975 . 2977)) nil (25941 9197 303767 726000) 0 nil])
([nil nil ((2886 . 2889)) ((#("ash" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property)) . 2886) (undo-tree-id778 . -3) (undo-tree-id779 . -3)) (25941 8355 668079 175000) 0 nil])
([nil nil ((2982 . 2987)) nil (25941 9197 303766 554000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 2889) ((2885 . 2889)) (25941 8355 637157 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 2982 2993 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (2982 . 2993) (#("tokenString" 0 11 (fontified nil)) . 2982) (2982 . 2993) (#("token" 0 5 (fontified nil)) . 2982) (2982 . 2987) (#("tokenString" 0 11 (fontified nil)) . -2982) (2982 . 2993) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2982) (undo-tree-id939 . -5) (undo-tree-id940 . -5) 2987) nil (25941 9197 303765 683000) 0 nil])
([nil nil ((2885 . 2888)) ((#("Has" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id776 . -3) (undo-tree-id777 . -3)) (25941 8355 606372 773000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2916) (undo-tree-id938 . -1) 2917) nil (25941 9197 303763 609000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id656 . -1) (undo-tree-id657 . -1) 2888) ((2887 . 2888)) (25941 8355 576123 691000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2918) (undo-tree-id930 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2919) (undo-tree-id931 . -1) (undo-tree-id932 . 1) (undo-tree-id933 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2920) (undo-tree-id934 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2921) (undo-tree-id935 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2922) (undo-tree-id936 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2923) (undo-tree-id937 . -1) 2924) nil (25941 9197 303762 356000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2886) (undo-tree-id654 . -1) (undo-tree-id655 . -1) 2887) ((2885 . 2887)) (25941 8355 545334 816000) 0 nil])
([nil nil ((2918 . 2920) (#("\"" 0 1 (fontified nil)) . -2918) (2918 . 2919)) nil (25941 9197 303759 100000) 0 nil])
([nil nil ((2885 . 2889)) ((#("Geme" 0 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property)) . 2885) (undo-tree-id774 . -4) (undo-tree-id775 . -4)) (25941 8355 516312 56000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2914) (undo-tree-id924 . -1) (#(" " 0 1 (fontified t)) . -2915) (undo-tree-id925 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2916) (undo-tree-id926 . -1) (#(" " 0 1 (fontified t)) . -2917) (undo-tree-id927 . -1) (#("\"" 0 1 (fontified t)) . -2918) (undo-tree-id928 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2919) (undo-tree-id929 . -1) 2920) nil (25941 9197 303757 848000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2887) (undo-tree-id650 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2888) (undo-tree-id651 . -1) 2889) ((2887 . 2889)) (25941 8355 485298 249000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2903) (undo-tree-id913 . -1) (#("	" 0 1 (fontified t)) . -2904) (undo-tree-id914 . -1) (#("	" 0 1 (fontified t)) . -2905) (undo-tree-id915 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2906) (undo-tree-id916 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2907) (undo-tree-id917 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2908) (undo-tree-id918 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2909) (undo-tree-id919 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2910) (undo-tree-id920 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2911) (undo-tree-id921 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2912) (undo-tree-id922 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2913) (undo-tree-id923 . -1) 2914) nil (25941 9197 303753 620000) 0 nil])
([nil nil ((2887 . 2889)) ((#("ne" 0 2 (fontified t face tree-sitter-hl-face:property)) . 2887) (undo-tree-id772 . -2) (undo-tree-id773 . -2)) (25941 8355 457218 879000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id904 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id905 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id906 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2945) (undo-tree-id907 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2946) (undo-tree-id908 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2947) (undo-tree-id909 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2948) (undo-tree-id910 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2949) (undo-tree-id911 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2950) (undo-tree-id912 . -1) 2951) nil (25941 9197 303747 248000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil)) (2885 . 2932) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2885) (2885 . 2942) (#("Gene" 0 4 (fontified nil)) . 2885) (2885 . 2889) (#("GenerateFromPassword" 0 20 (fontified nil)) . -2885) (2885 . 2905) (#("Gene" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2885) (undo-tree-id648 . -4) (undo-tree-id649 . -4) 2889) ((2885 . 2889) (#("GenerateFromPassword" 0 20 (fontified nil)) . 2885) (2885 . 2905) (#("Gene" 0 4 (fontified nil)) . 2885) (2885 . 2889) (#("GenerateFromPassword(${1:password []byte}, ${2:cost int})" 0 57 (fontified nil)) . 2885) (2885 . 2942) (#("GenerateFromPassword(password []byte, cost int)" 0 20 (fontified t face tree-sitter-hl-face:type) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 29 (fontified t face tree-sitter-hl-face:type) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-4-face)) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 36 (fontified t face tree-sitter-hl-face:type) 36 38 (fontified t) 38 42 (fontified t face tree-sitter-hl-face:variable) 42 43 (fontified t) 43 46 (fontified t face tree-sitter-hl-face:variable) 46 47 (fontified t face (rainbow-delimiters-depth-3-face))) . 2885) (undo-tree-id765 . -21) (undo-tree-id766 . -31) (undo-tree-id767 . -32) (undo-tree-id768 . -21) (undo-tree-id769 . -29) (undo-tree-id770 . -21) (undo-tree-id771 . -21) (apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8354 954384 880000) 0 nil])
([nil nil ((2903 . 2906)) nil (25941 9197 303743 621000) 0 nil])
([nil nil ((apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8354 581814 843000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2926) (2926 . 2927) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2926) (2926 . 2927) (2921 . 2927) (#("]" 0 1 (fontified nil)) . -2920) (2920 . 2921) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2920) (2920 . 2921) (2906 . 2921)) nil (25941 9197 303742 619000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) ((apply yas--snippet-revive 2885 2932 #s(yas--snippet nil (#s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil 37 nil #s(yas--field 1 2906 2921 nil nil nil nil #s(yas--field 2 2923 2931 nil nil nil nil nil)) nil nil))) (25941 8353 495237 290000) 0 nil])
([nil nil ((2966 . 2969)) nil (25941 9197 303741 26000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 2966 2975 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (2966 . 2975) (#("encrypted" 0 9 (fontified nil)) . 2966) (2966 . 2975) (#("enc" 0 3 (fontified nil)) . 2966) (2966 . 2969) (#("encrypted" 0 9 (fontified nil)) . -2966) (2966 . 2975) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2966) (undo-tree-id902 . -3) (undo-tree-id903 . -3) 2969) nil (25941 9197 303740 325000) 0 nil])
([nil nil ((425 . 427)) nil (25941 9197 303738 271000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -417) (undo-tree-id895 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -418) (undo-tree-id896 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -419) (undo-tree-id897 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:string)) . -420) (undo-tree-id898 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -421) (undo-tree-id899 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -422) (undo-tree-id900 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -423) (undo-tree-id901 . -1) 424) nil (25941 9197 303737 299000) 0 nil])
([nil nil ((417 . 421)) nil (25941 9197 303733 252000) 0 nil])
([nil nil ((#("	cipher *twofish.Cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:property) 7 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:operator) 9 17 (fontified t) 17 22 (fontified t face tree-sitter-hl-face:type) 22 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t)) . 773) (undo-tree-id892 . 1) (undo-tree-id893 . -23) (undo-tree-id894 . -22) 795) nil (25941 9197 303732 540000) 0 nil])
([nil nil ((#("	cipher, cerr := twofish.NewCipher([]byte(os.Getenv(\"REFRESH_TOKEN_SECRET\")))
	if cerr != nil {
		fmt.Println(cerr.Error())
		return
	}
	apiCfg.cipher = cipher
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:variable) 7 9 (fontified t) 9 13 (fontified t face tree-sitter-hl-face:variable) 13 14 (fontified t) 14 16 (fontified t face tree-sitter-hl-face:operator) 16 17 (fontified t) 17 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 34 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t face (rainbow-delimiters-depth-3-face)) 37 41 (fontified t face tree-sitter-hl-face:type) 41 42 (fontified t face (rainbow-delimiters-depth-3-face)) 42 44 (fontified t face tree-sitter-hl-face:variable) 44 45 (fontified t) 45 51 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 51 52 (fontified t face (rainbow-delimiters-depth-4-face)) 52 53 (fontified t face tree-sitter-hl-face:string) 53 73 (fontified t face tree-sitter-hl-face:string) 73 74 (fontified t face tree-sitter-hl-face:string) 74 75 (fontified t face (rainbow-delimiters-depth-4-face)) 75 76 (fontified t face (rainbow-delimiters-depth-3-face)) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t) 78 79 (fontified t) 79 81 (fontified t face tree-sitter-hl-face:keyword) 81 82 (fontified t) 82 86 (fontified t face tree-sitter-hl-face:variable) 86 87 (fontified t) 87 88 (fontified t face tree-sitter-hl-face:operator) 88 89 (fontified t face tree-sitter-hl-face:operator) 89 90 (fontified t) 90 93 (fontified t face tree-sitter-hl-face:constant\.builtin) 93 94 (fontified t) 94 95 (fontified t face (rainbow-delimiters-depth-2-face)) 95 96 (fontified t) 96 98 (fontified t) 98 101 (fontified t face tree-sitter-hl-face:variable) 101 102 (fontified t) 102 109 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 109 110 (fontified t face (rainbow-delimiters-depth-3-face)) 110 114 (fontified t face tree-sitter-hl-face:variable) 114 115 (fontified t) 115 120 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 120 121 (fontified t face (rainbow-delimiters-depth-4-face)) 121 122 (fontified t face (rainbow-delimiters-depth-4-face)) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 124 (fontified t) 124 126 (fontified t) 126 132 (fontified t face tree-sitter-hl-face:keyword) 132 133 (fontified t) 133 134 (fontified t) 134 135 (fontified t face (rainbow-delimiters-depth-2-face)) 135 136 (fontified t) 136 137 (fontified t) 137 143 (fontified t face tree-sitter-hl-face:variable) 143 144 (fontified t) 144 150 (fontified t face tree-sitter-hl-face:property) 150 151 (fontified t) 151 152 (fontified t face tree-sitter-hl-face:operator) 152 153 (fontified t) 153 159 (fontified t face tree-sitter-hl-face:variable) 159 160 (fontified t)) . 4734) (undo-tree-id888 . -136) (undo-tree-id889 . -159) (undo-tree-id890 . -136) (undo-tree-id891 . -136)) nil (25941 9197 303730 567000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2924) (undo-tree-id872 . -1) (#("." 0 1 (fontified t)) . -2925) (undo-tree-id873 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2926) (undo-tree-id874 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2927) (undo-tree-id875 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2928) (undo-tree-id876 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2929) (undo-tree-id877 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2930) (undo-tree-id878 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2931) (undo-tree-id879 . -1) (#("." 0 1 (fontified t)) . -2932) (undo-tree-id880 . -1) (#("E" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2933) (undo-tree-id881 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2934) (undo-tree-id882 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2935) (undo-tree-id883 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2936) (undo-tree-id884 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2937) (undo-tree-id885 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2938) (undo-tree-id886 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2939) (undo-tree-id887 . -1) 2940) nil (25941 9197 303727 230000) 0 nil])
([nil nil ((2924 . 2927)) nil (25941 9197 303719 937000) 0 nil])
([nil nil ((apply yas--snippet-revive 2924 2928 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (2924 . 2928) (#("sha3" 0 4 (fontified nil)) . 2924) (2924 . 2928) (#("sha" 0 3 (fontified nil)) . 2924) (2924 . 2927) (#("sha3" 0 4 (fontified nil)) . -2924) (2924 . 2928) (#("sha" 0 3 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2924) (undo-tree-id870 . -3) (undo-tree-id871 . -3) 2927) nil (25941 9197 303719 135000) 0 nil])
([nil nil ((2928 . 2929)) nil (25941 9197 303716 500000) 0 nil])
([nil nil ((apply yas--snippet-revive 2929 2937 #s(yas--snippet nil nil nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil nil nil)) (2929 . 2937) (#("New256()" 0 8 (fontified nil)) . 2929) (2929 . 2937) (#("New256" 0 6 (fontified nil)) . -2929) (2929 . 2935)) nil (25941 9197 303715 849000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2943) (undo-tree-id864 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2944) (undo-tree-id865 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2945) (undo-tree-id866 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2946) (undo-tree-id867 . -1) (#("," 0 1 (fontified t)) . -2947) (undo-tree-id868 . -1) (#(" " 0 1 (fontified t)) . -2948) (undo-tree-id869 . -1) 2949) nil (25941 9197 303714 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2936) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . 1) (undo-tree-id856 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2937) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2938) (undo-tree-id859 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2939) (undo-tree-id860 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2940) (undo-tree-id861 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2941) (undo-tree-id862 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2942) (undo-tree-id863 . -1) 2943) nil (25941 9197 303710 649000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2955) (undo-tree-id850 . -1) (undo-tree-id851 . 1) (undo-tree-id852 . -1) 2956) nil (25941 9197 303706 31000) 0 nil])
([nil nil ((2955 . 2956) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2955) (2955 . 2956)) nil (25941 9197 303704 548000) 0 nil])
([nil nil ((#("		encrypted := []byte{}
" 0 2 (fontified t) 2 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 14 (fontified t face tree-sitter-hl-face:operator) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 21 (fontified t face tree-sitter-hl-face:type) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t)) . 2879) (undo-tree-id847 . 4) (undo-tree-id848 . -23) (undo-tree-id849 . -19) 2898) nil (25941 9197 303703 486000) 0 nil])
([nil nil ((2900 . 2906)) nil (25941 9197 303701 813000) 0 nil])
([nil nil ((2906 . 2908)) nil (25941 9197 303701 382000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2907) (undo-tree-id844 . 1) (undo-tree-id845 . 1) (undo-tree-id846 . -1)) nil (25941 9197 303700 751000) 0 nil])
([nil nil ((2939 . 2940) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2939) (2939 . 2940)) nil (25941 9197 303699 408000) 0 nil])
([nil nil ((426 . 427)) nil (25941 9197 303698 797000) 0 nil])
([nil nil ((427 . 428)) nil (25941 9197 303698 396000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -426) (undo-tree-id842 . -1) (#("
" 0 1 (fontified t)) . -427) (undo-tree-id843 . -1) 428) nil (25941 9197 303697 805000) 0 nil])
([nil nil ((426 . 428)) nil (25941 9197 303695 952000) 0 nil])
([nil nil ((nil rear-nonsticky nil 712 . 713) (nil fontified nil 428 . 713) (428 . 713)) nil (25941 9197 303695 481000) 0 nil])
([nil nil ((2082 . 2088)) nil (25941 9197 303694 940000) 0 nil])
([nil nil ((2088 . 2090)) nil (25941 9197 303694 319000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2089) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . 1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) 2090) nil (25941 9197 303693 537000) 0 nil])
([nil nil ((2093 . 2094) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2093) (2093 . 2094)) nil (25941 9197 303680 974000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2082) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2083) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2084) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2085) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2086) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2087) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2088) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) 2089 (t 25941 9197 313668 319000)) nil (25941 9225 819495 117000) 0 nil])
([nil nil ((2082 . 2086)) nil (25941 9225 819352 670000) 0 nil])
([nil nil ((2086 . 2087)) nil (25941 9225 819352 39000) 0 nil])
([nil nil ((2087 . 2088)) nil (25941 9225 819351 387000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2087) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 2088) nil (25941 9225 819350 836000) 0 nil])
([nil nil ((2087 . 2091)) nil (25941 9225 819349 664000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2087) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2088) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2089) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2090) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) 2091) nil (25941 9225 819348 212000) 0 nil])
([nil nil ((2087 . 2089)) nil (25941 9225 819332 422000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2094 2098 nil nil nil t #s(yas--field 2 2100 2104 nil nil nil t nil)) #s(yas--field 2 2100 2104 nil nil nil t nil)) nil 45 nil #s(yas--field 2 2100 2104 nil nil nil t nil) nil nil)) (2086 . 2118) (#("Sprintf(${1:format string}, ${2:a ...any})" 0 42 (fontified nil)) . 2086) (2086 . 2128) (#("Sprpass" 0 3 (fontified nil) 3 7 (fontified nil face tree-sitter-hl-face:type)) . 2086) (undo-tree-id1035 . 4) (undo-tree-id1036 . -7) (2086 . 2089) (#("Sprintf" 0 7 (fontified nil)) . -2086) (2086 . 2093) (#("Spr" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2086) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -2) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) 2089) nil (25941 9225 819330 899000) 0 nil])
([nil nil ((2095 . 2097) (2094 . 2096) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2094) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 2095) (undo-tree-id1032 . -13) (undo-tree-id1033 . -7) (undo-tree-id1034 . -8) (2094 . 2095)) nil (25941 9225 819314 408000) 0 nil])
([nil nil ((2101 . 2104) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2101) (undo-tree-id1026 . -8) (undo-tree-id1027 . -5) (undo-tree-id1028 . -6) (2100 . 2101)) nil (25941 9225 819310 791000) 0 nil])
([nil nil ((apply yas--snippet-revive 2086 2105 #s(yas--snippet nil (#s(yas--field 1 2094 2098 nil nil nil t #s(yas--field 2 2100 2104 nil nil nil t nil)) #s(yas--field 2 2100 2104 nil nil nil t nil)) nil 45 nil #s(yas--field 2 2100 2104 nil nil nil t nil) nil nil))) nil (25941 9225 819308 46000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -2105) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . 1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 2106) nil (25941 9225 819305 21000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3211) (undo-tree-id1361 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3212) (undo-tree-id1362 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3213) (undo-tree-id1363 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3214) (undo-tree-id1364 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1365 . -1) (#("3" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1366 . -1) (#("." 0 1 (fontified t)) . -3217) (undo-tree-id1367 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3218) (undo-tree-id1368 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3219) (undo-tree-id1369 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3220) (undo-tree-id1370 . -1) (#("2" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3221) (undo-tree-id1371 . -1) (#("5" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3222) (undo-tree-id1372 . -1) (#("6" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3223) (undo-tree-id1373 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -3224) (undo-tree-id1374 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3225) (undo-tree-id1375 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3226) (undo-tree-id1376 . -1) (#("b" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -3227) (undo-tree-id1377 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -3228) (undo-tree-id1378 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3229) (undo-tree-id1379 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3230) (undo-tree-id1380 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-5-face))) . -3231) (undo-tree-id1381 . -1) 3232 (t 25941 9225 825566 398000)) nil (25941 9250 691665 301000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3206) (undo-tree-id1356 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3207) (undo-tree-id1357 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3208) (undo-tree-id1358 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3209) (undo-tree-id1359 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3210) (undo-tree-id1360 . -1) 3211) nil (25941 9250 691464 134000) 0 nil])
([nil nil ((3206 . 3209)) nil (25941 9250 691461 649000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3215 3227 nil nil nil nil nil)) nil 46 nil #s(yas--field 1 3215 3227 nil nil nil nil nil) nil nil)) (3206 . 3228) (#("sha3Hash(${1:input string})" 0 27 (fontified nil)) . 3206) (3206 . 3233) (#("shatokenString" 0 3 (fontified nil) 3 14 (fontified nil face tree-sitter-hl-face:variable)) . 3206) (undo-tree-id1353 . 11) (3206 . 3209) (#("sha3Hash" 0 8 (fontified nil)) . -3206) (3206 . 3214) (#("sha" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3206) (undo-tree-id1354 . -3) (undo-tree-id1355 . -3) 3209) nil (25941 9250 691460 778000) 0 nil])
([nil nil ((apply yas--snippet-revive 3206 3228 #s(yas--snippet nil (#s(yas--field 1 3215 3227 nil nil nil nil nil)) nil 46 nil #s(yas--field 1 3215 3227 nil nil nil nil nil) nil nil))) nil (25941 9250 691458 163000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3217) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3218) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3219) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#(" " 0 1 (fontified t)) . -3220) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3221) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3222) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3223) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3224) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3225) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3226) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) 3227) nil (25941 9250 691455 818000) 0 nil])
([nil nil ((3215 . 3220)) nil (25941 9250 691413 880000) 0 nil])
([nil nil ((apply yas--snippet-revive 3215 3226 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (3215 . 3226) (#("tokenString" 0 11 (fontified nil)) . 3215) (3215 . 3226) (#("token" 0 5 (fontified nil)) . 3215) (3215 . 3220) (#("tokenString" 0 11 (fontified nil)) . -3215) (3215 . 3226) (#("token" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -1) (undo-tree-id1219 . -2) (undo-tree-id1220 . -3) (undo-tree-id1221 . -4) (undo-tree-id1222 . -5) (undo-tree-id1223 . -5) (undo-tree-id1224 . -5) (undo-tree-id1225 . -5) (undo-tree-id1226 . -5) (undo-tree-id1227 . -5) 3220) nil (25941 9250 691412 798000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -3227) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . 1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -3228) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . 1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -3229) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . 1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) 3230) nil (25941 9250 691404 883000) 0 nil])
([nil nil ((4287 . 4289) (t 25941 9250 701477 91000)) nil (25941 9374 614130 944000) 0 nil])
([nil nil ((4289 . 4294)) nil (25941 9374 614130 653000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4289) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4290) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4291) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4292) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4293) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) 4294) nil (25941 9374 614129 401000) 0 nil])
([nil nil ((4289 . 4306)) nil (25941 9374 614125 624000) 0 nil])
([nil nil ((4306 . 4309)) nil (25941 9374 614125 363000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4305) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4306) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4307) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4308) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) 4309) nil (25941 9374 614124 321000) 0 nil])
([nil nil ((4305 . 4312)) nil (25941 9374 614121 145000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4325 4333 nil nil nil t nil)) nil 48 nil #s(yas--field 1 4325 4333 nil nil nil t nil) nil nil)) (4308 . 4335) (#("mintRefreshToken(${1:id string})" 0 32 (fontified nil)) . 4308) (4308 . 4340) (#("mint" 0 4 (fontified nil)) . 4308) (4308 . 4312) (#("mintRefreshToken" 0 16 (fontified nil)) . -4308) (4308 . 4324) (#("mint" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4308) (undo-tree-id1454 . -4) (undo-tree-id1455 . -4) 4312) nil (25941 9374 614120 384000) 0 nil])
([nil nil ((4326 . 4327) (#("id string" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 9 (fontified nil face tree-sitter-hl-face:variable)) . 4326) (4325 . 4326)) nil (25941 9374 614118 981000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4326) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) 4327) nil (25941 9374 614118 510000) 0 nil])
([nil nil ((4326 . 4333)) nil (25941 9374 614117 749000) 0 nil])
([nil nil ((apply yas--snippet-revive 4308 4334 #s(yas--snippet nil (#s(yas--field 1 4325 4333 nil nil nil t nil)) nil 48 nil #s(yas--field 1 4325 4333 nil nil nil t nil) nil nil))) nil (25941 9374 614117 498000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4174) (undo-tree-id1445 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4175) (undo-tree-id1446 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4176) (undo-tree-id1447 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4177) (undo-tree-id1448 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4178) (undo-tree-id1449 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4179) (undo-tree-id1450 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4180) (undo-tree-id1451 . -1) 4181) nil (25941 9374 614115 986000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -4191) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . 1) (undo-tree-id1444 . -1) 4192) nil (25941 9374 614113 110000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4324) (undo-tree-id1437 . -1) (undo-tree-id1438 . 1) (undo-tree-id1439 . -1) 4325) nil (25941 9374 614109 944000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4323) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . 1) (undo-tree-id1435 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 4324) (undo-tree-id1436 . 1)) nil (25941 9374 614108 51000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4317) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4318) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4319) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4320) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4321) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4322) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) 4323) nil (25941 9374 614104 714000) 0 nil])
([nil nil ((4317 . 4326)) nil (25941 9374 614099 174000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4325) (undo-tree-id1418 . -1) 4326) nil (25941 9374 614098 513000) 0 nil])
([nil nil ((4325 . 4328)) nil (25941 9374 614097 561000) 0 nil])
([nil nil ((apply yas--snippet-revive 4325 4333 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (4325 . 4333) (#("String()" 0 8 (fontified nil)) . 4325) (4325 . 4333) (#("Str" 0 3 (fontified nil)) . 4325) (4325 . 4328) (#("String" 0 6 (fontified nil)) . -4325) (4325 . 4331) (#("Str" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4325) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) 4328) nil (25941 9374 614096 659000) 0 nil])
([nil nil ((4333 . 4334) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4333) (4333 . 4334)) nil (25941 9374 614094 595000) 0 nil])
([nil nil ((4293 . 4299)) nil (25941 9374 614094 44000) 0 nil])
([nil nil ((4340 . 4342)) nil (25941 9374 614093 393000) 0 nil])
([nil nil ((4350 . 4352) (#("'" 0 1 (fontified nil)) . -4350) (4342 . 4351)) nil (25941 9374 614093 123000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -4350) (undo-tree-id1415 . -1) (#("'" 0 1 (fontified t)) . 4351)) nil (25941 9374 614092 762000) 0 nil])
([nil nil ((4350 . 4356)) nil (25941 9374 614092 321000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4358) (4358 . 4359) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4358) (4358 . 4359) (4356 . 4359)) nil (25941 9374 614091 940000) 0 nil])
([nil nil ((4359 . 4361) (4360 . 4361) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4359) (4359 . 4361) (4358 . 4360)) nil (25941 9374 614091 49000) 0 nil])
([nil nil ((4361 . 4368)) nil (25941 9374 614090 428000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4361) (undo-tree-id1408 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4362) (undo-tree-id1409 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4363) (undo-tree-id1410 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4364) (undo-tree-id1411 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4365) (undo-tree-id1412 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4366) (undo-tree-id1413 . -1) (#(" " 0 1 (fontified t)) . -4367) (undo-tree-id1414 . -1) 4368) nil (25941 9374 614089 366000) 0 nil])
([nil nil ((4361 . 4367)) nil (25941 9374 614086 821000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4384 4385 nil nil nil t #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil))) #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil)) #s(yas--field 3 4392 4415 nil nil nil t nil)) nil 50 nil #s(yas--field 3 4392 4415 nil nil nil t nil) nil nil)) (4367 . 4428) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4367) (4367 . 4443) (#("RespondWithError" 0 16 (fontified nil)) . -4367) (4367 . 4383)) nil (25941 9374 614086 9000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4385) (4384 . 4385)) nil (25941 9374 614085 368000) 0 nil])
([nil nil ((#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4388) (4387 . 4388)) nil (25941 9374 614084 917000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4387) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) 4388) nil (25941 9374 614084 516000) 0 nil])
([nil nil ((4387 . 4390)) nil (25941 9374 614083 354000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) 4393) nil (25941 9374 614082 833000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4393) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#(" " 0 1 (fontified t)) . -4394) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4395) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4396) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4397) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4398) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4399) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4400) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) 4401) nil (25941 9374 614080 599000) 0 nil])
([nil nil ((4392 . 4394)) nil (25941 9374 614073 366000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4392) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4393) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) 4394) nil (25941 9374 614072 504000) 0 nil])
([nil nil ((4393 . 4413) (4392 . 4394) (#("\"" 0 1 (fontified nil)) . -4392) (4392 . 4393)) nil (25941 9374 614062 906000) 0 nil])
([nil nil ((4413 . 4414)) nil (25941 9374 614061 654000) 0 nil])
([nil nil ((apply yas--snippet-revive 4367 4416 #s(yas--snippet nil (#s(yas--field 1 4384 4385 nil nil nil t #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil))) #s(yas--field 2 4387 4390 nil nil nil t #s(yas--field 3 4392 4415 nil nil nil t nil)) #s(yas--field 3 4392 4415 nil nil nil t nil)) nil 50 nil #s(yas--field 3 4392 4415 nil nil nil t nil) nil nil))) nil (25941 9374 614058 428000) 0 nil])
([nil nil (3793) nil (25941 9410 390694 949000) 0 nil])
([nil nil ((3761 . 3767) (t 25941 9374 717027 109000)) nil (25941 9410 390694 237000) 0 nil])
([nil nil ((3801 . 3803)) nil (25941 9410 390693 576000) 0 nil])
([nil nil ((3803 . 3811)) nil (25941 9410 390692 614000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3810) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) 3811) nil (25941 9410 390692 13000) 0 nil])
([nil nil ((3810 . 3823)) nil (25941 9410 390690 230000) 0 nil])
([nil nil ((3823 . 3825) (#("`" 0 1 (fontified nil)) . -3823) (3823 . 3824)) nil (25941 9410 390689 519000) 0 nil])
([nil nil ((3794 . 3801)) nil (25941 9410 390688 637000) 0 nil])
([nil nil ((3837 . 3844) (3836 . 3838) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -3836) (3831 . 3837)) nil (25941 9410 390687 835000) 0 nil])
([nil nil ((3844 . 3850)) nil (25941 9410 390686 653000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . -423) (#("
" 0 1 (fontified t)) . -714) (3077 . 3078) (#("  " 0 2 (fontified t)) . -3077) (undo-tree-id1474 . -2) 3079 (3620 . 3623) (3653 . 3656) (3693 . 3696) (3730 . 3733) (#("   " 0 3 (fontified t)) . -3772) (3829 . 3832) (#(" " 0 1 (fontified t)) . 4359) 3851) nil (25941 9410 390683 878000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4493) (undo-tree-id1497 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4494) (undo-tree-id1498 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4495) (undo-tree-id1499 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4496) (undo-tree-id1500 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4497) (undo-tree-id1501 . -1) 4498 (t 25941 9410 494091 804000)) nil (25941 9432 988257 852000) 0 nil])
([nil nil ((4493 . 4496)) nil (25941 9432 988255 487000) 0 nil])
([nil nil ((apply yas--snippet-revive 4493 4504 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (4493 . 4504) (#("AccessToken" 0 11 (fontified nil)) . 4493) (4493 . 4504) (#("Acc" 0 3 (fontified nil)) . 4493) (4493 . 4496) (#("AccessToken" 0 11 (fontified nil)) . -4493) (4493 . 4504) (#("Acc" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4493) (undo-tree-id1495 . -3) (undo-tree-id1496 . -3) 4496) nil (25941 9432 988254 706000) 0 nil])
([nil nil ((4634 . 4636)) nil (25941 9432 988252 862000) 0 nil])
([nil nil ((4636 . 4639)) nil (25941 9432 988252 121000) 0 nil])
([nil nil ((apply yas--snippet-revive 4636 4643 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (4636 . 4643) (#("resUser" 0 7 (fontified nil)) . 4636) (4636 . 4643) (#("res" 0 3 (fontified nil)) . 4636) (4636 . 4639) (#("resUser" 0 7 (fontified nil)) . -4636) (4636 . 4643) (#("res" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4636) (undo-tree-id1493 . -3) (undo-tree-id1494 . -3) 4639) nil (25941 9432 988251 470000) 0 nil])
([nil nil ((4643 . 4644)) nil (25941 9432 988250 197000) 0 nil])
([nil nil ((4644 . 4645)) nil (25941 9432 988249 857000) 0 nil])
([nil nil ((4645 . 4649)) nil (25941 9432 988249 656000) 0 nil])
([nil nil ((apply yas--snippet-revive 4644 4656 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (4644 . 4656) (#("RefreshToken" 0 12 (fontified nil)) . 4644) (4644 . 4656) (#("Refre" 0 5 (fontified nil)) . 4644) (4644 . 4649) (#("RefreshToken" 0 12 (fontified nil)) . -4644) (4644 . 4656) (#("Refre" 0 5 (fontified t face tree-sitter-hl-face:property)) . -4644) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) 4649) nil (25941 9432 988248 895000) 0 nil])
([nil nil ((4656 . 4657)) nil (25941 9432 988245 919000) 0 nil])
([nil nil ((4657 . 4662)) nil (25941 9432 988245 488000) 0 nil])
([nil current ((apply yas--snippet-revive 4659 4671 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (4659 . 4671) (#("refreshToken" 0 12 (fontified nil)) . 4659) (4659 . 4671) (#("ref" 0 3 (fontified nil)) . 4659) (4659 . 4662) (#("refreshToken" 0 12 (fontified nil)) . -4659) (4659 . 4671) (#("ref" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4659) (undo-tree-id1477 . -3) (undo-tree-id1478 . -3) (undo-tree-id1479 . -1) (undo-tree-id1480 . -2) (undo-tree-id1481 . -3) (undo-tree-id1482 . -3) (undo-tree-id1483 . -3) (undo-tree-id1484 . -3) (undo-tree-id1485 . -3) (undo-tree-id1486 . -3) (undo-tree-id1487 . -3) 4662) nil (25941 9432 988242 533000) 0 nil])
nil
