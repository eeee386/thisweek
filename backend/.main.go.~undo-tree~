(undo-tree-save-format-version . 1)
"b02a152159344c81ea3c071a73fefc71dbc6a58c"
[nil nil nil nil (25935 41792 253793 796000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2 . 3) (#("
" 0 1 (fontified nil)) . -559) (1 . 560) (t 25935 40308 587901 767000)) nil (25935 41792 253791 953000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253790 89000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1) (undo-tree-id16 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2) (undo-tree-id17 . -1) 3) nil (25935 41792 253788 537000) 0 nil])
([nil nil ((1 . 10)) nil (25935 41792 253785 731000) 0 nil])
([nil nil ((12 . 15) (#(")" 0 1 (fontified nil)) . -11) (11 . 12) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -11) (11 . 12) (10 . 12)) nil (25935 41792 253784 269000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -14) (undo-tree-id13 . -1) (undo-tree-id14 . 1) (undo-tree-id15 . -1) 15) nil (25935 41792 253782 325000) 0 nil])
([nil nil ((572 . 574)) nil (25935 41792 253779 79000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -573) (undo-tree-id12 . -1) (574 . 575) (#("}" 0 1 (fontified nil)) . -574) (574 . 575)) nil (25935 41792 253777 686000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253774 911000) 0 nil])
([nil nil ((1 . 8)) nil (25935 41792 253773 649000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1 . 13) (#("package main" 0 12 (fontified nil)) . 1) (1 . 13) (#("package
" 0 7 (fontified nil) 7 8 (fontified nil)) . 1) (undo-tree-id9 . 1) (1 . 8) (#("package main" 0 12 (fontified nil)) . -1) (1 . 13) (#("package" 0 7 (face tree-sitter-hl-face:keyword fontified t)) . -1) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 8) nil (25935 41792 253771 865000) 0 nil])
([nil nil ((13 . 14)) nil (25935 41792 253767 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14 . 15) (#("
" 0 1 (fontified nil)) . -84) (14 . 85)) nil (25935 41792 253766 395000) 0 nil])
([nil nil ((16 . 17)) nil (25935 41792 253765 233000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -16) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 17) nil (25935 41792 253763 780000) 0 nil])
([nil nil ((84 . 85)) nil (25935 41792 253706 3000) 0 nil])
([nil nil ((659 . 660)) nil (25935 41792 253699 661000) 0 nil])
([nil nil ((14 . 16) (t 25935 41792 261610 602000)) nil (25935 41910 236570 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -23) (23 . 24) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -23) (23 . 24) (15 . 24)) nil (25935 41910 236568 683000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 24) (24 . 25) (23 . 25)) nil (25935 41910 236567 90000) 0 nil])
([nil nil ((25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25935 41910 236565 286000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -18) (undo-tree-id35 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -19) (undo-tree-id36 . -1) 20) nil (25935 41910 236563 803000) 0 nil])
([nil nil ((18 . 20)) nil (25935 41910 236561 229000) 0 nil])
([nil nil ((26 . 29)) nil (25935 41910 236560 608000) 0 nil])
([nil nil ((30 . 32)) nil (25935 41910 236559 776000) 0 nil])
([nil nil ((33 . 41) (32 . 34) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25935 41910 236558 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 33 42 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (33 . 42) (#("database/" 0 9 (fontified nil)) . 33) (33 . 42) (#("database" 0 8 (fontified nil)) . 33) (33 . 41) (#("database/" 0 9 (fontified nil)) . -33) (33 . 42) (#("database" 0 8 (face tree-sitter-hl-face:string fontified t)) . -33) (undo-tree-id33 . -8) (undo-tree-id34 . -8) 41) nil (25935 41910 236556 99000) 0 nil])
([nil nil ((42 . 45)) nil (25935 41910 236551 841000) 0 nil])
([nil nil ((46 . 48)) nil (25935 41910 236551 30000) 0 nil])
([nil nil ((48 . 50) (#("\"" 0 1 (fontified nil)) . -48) (48 . 49)) nil (25935 41910 236550 148000) 0 nil])
([nil nil ((49 . 51)) nil (25935 41910 236548 866000) 0 nil])
([nil nil ((52 . 54)) nil (25935 41910 236547 724000) 0 nil])
([nil nil ((55 . 62) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 41910 236546 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 55 66 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (55 . 66) (#("github.com/" 0 11 (fontified nil)) . 55) (55 . 66) (#("github." 0 7 (face tree-sitter-hl-face:string fontified nil)) . 55) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (#("github.com/" 0 11 (fontified nil)) . -62) (62 . 73)) nil (25935 41910 236544 568000) 0 nil])
([nil nil ((66 . 78)) nil (25935 41910 236541 372000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 78) nil (25935 41910 236540 159000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236535 621000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -77) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -78) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 79) nil (25935 41910 236533 627000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236511 205000) 0 nil])
([nil nil ((80 . 82) (t 25935 41910 239945 613000)) nil (25935 42324 259808 993000) 0 nil])
([nil nil ((82 . 84) (#("\"" 0 1 (fontified nil)) . -82) (82 . 83)) nil (25935 42324 259807 931000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -82) (undo-tree-id88 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 83)) nil (25935 42324 259806 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -80) (undo-tree-id86 . -1) (#("	" 0 1 (fontified t)) . -81) (undo-tree-id87 . -1) 82) nil (25935 42324 259805 126000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -77) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("v" 0 1 (fontified t)) . -78) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -79) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 80) nil (25935 42324 259802 731000) 0 nil])
([nil nil ((77 . 79)) nil (25935 42324 259798 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 71 80 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (71 . 80) (#("godotenv\"" 0 9 (fontified nil)) . 71) (71 . 80) (#("godotenv" 0 8 (fontified nil)) . 71) (71 . 79) (#("godotenv\"" 0 9 (fontified nil)) . -71) (71 . 80) (#("godotenv" 0 8 (fontified t)) . -71) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -6) 79) nil (25935 42324 259797 361000) 0 nil])
([nil nil ((80 . 82)) nil (25935 42324 259793 915000) 0 nil])
([nil nil ((82 . 83)) nil (25935 42324 259792 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 84 . 85) (#("
" 0 1 (fontified nil)) . -230) (83 . 231) 82) nil (25935 42324 259791 320000) 0 nil])
([nil nil ((#("	p
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 81) (undo-tree-id64 . -2) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -2) (undo-tree-id70 . -3) (undo-tree-id71 . -2) (undo-tree-id72 . -3) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -3) 82) nil (25935 42324 259789 206000) 0 nil])
([nil nil ((#("	\"github.com/joho/godotenv\"
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:string fontified t) 2 18 (face tree-sitter-hl-face:string fontified t) 18 27 (face tree-sitter-hl-face:string fontified t) 27 28 (fontified t)) . 53) (undo-tree-id37 . -27) (undo-tree-id38 . -28) (undo-tree-id39 . -1) (undo-tree-id40 . -18) (undo-tree-id41 . -28) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -27) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 26) (undo-tree-id55 . -26) (undo-tree-id56 . -1) (undo-tree-id57 . -27) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -28) 54) nil (25935 42324 259777 515000) 0 nil])
([nil nil ((52 . 54) (t 25935 42324 359603 65000)) nil (25935 42365 609807 672000) 0 nil])
([nil nil ((55 . 63) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 42365 609799 797000) 0 nil])
([nil nil ((859 . 860) (#("	" 0 1 (fontified nil)) . 858) (undo-tree-id95 . -1) (857 . 860) (t 25935 42365 613811 525000)) nil (25935 42440 264073 273000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -859) (undo-tree-id94 . -1) 860) nil (25935 42440 263998 274000) 0 nil])
([nil nil ((nil rear-nonsticky nil 860 . 861) (#("
" 0 1 (fontified nil)) . -958) (859 . 959)) nil (25935 42440 263996 250000) 0 nil])
([nil nil ((#("	go apiCfg.Worker(60);
" 0 1 (rear-nonsticky t fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 17 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 20 (face tree-sitter-hl-face:number fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 23 (fontified t)) . 860) (undo-tree-id89 . -22) (undo-tree-id90 . -23) (undo-tree-id91 . -1) (undo-tree-id92 . -11) (undo-tree-id93 . -17)) nil (25935 42440 263991 391000) 0 nil])
([nil nil ((64 . 66) (t 25935 42440 272366 292000)) nil (25935 42460 990438 156000) 0 nil])
([nil nil ((67 . 74) (66 . 68) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67)) nil (25935 42460 990431 744000) 0 nil])
([nil nil ((295 . 297) (t 25935 42460 998962 626000)) nil (25935 43014 524356 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 297 . 298) (#("
" 0 1 (fontified nil)) . -683) (297 . 684)) nil (25935 43014 524355 202000) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (#("
" 0 1 (fontified nil)) . -371) (296 . 372)) nil (25935 43014 524347 958000) 0 nil])
([nil nil ((75 . 77) (t 25935 43014 624357 441000)) nil (25935 43175 977548 802000) 0 nil])
([nil nil ((78 . 85) (77 . 79) (#("\"" 0 1 (fontified nil)) . -77) (77 . 78)) nil (25935 43175 977542 100000) 0 nil])
([nil nil ((306 . 308) (t 25935 43175 985006 525000)) nil (25935 43225 419279 251000) 0 nil])
([nil nil ((236 . 238)) nil (25935 43225 419278 169000) 0 nil])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -513) (237 . 514)) nil (25935 43225 419276 877000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 237) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) nil (25935 43225 419275 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id99 . -1)) nil (25935 43225 419269 643000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1)) nil (25935 43225 419264 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1622 . 1623) (#("
" 0 1 (fontified nil)) . -1703) (1621 . 1704) (t 25935 43225 426780 453000)) nil (25935 43379 58674 184000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1621) (undo-tree-id107 . -1)) nil (25935 43379 58669 806000) 0 nil])
([nil nil ((86 . 88) (t 25935 43379 66798 188000)) nil (25935 43602 299526 293000) 0 nil])
([nil nil ((89 . 94) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (88 . 89)) nil (25935 43602 299525 31000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id118 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id119 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id120 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id121 . -1) 94) nil (25935 43602 299522 636000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id117 . -1) 90) nil (25935 43602 299518 378000) 0 nil])
([nil nil ((89 . 97)) nil (25935 43602 299516 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 89 98 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (89 . 98) (#("thisweek/" 0 9 (fontified nil)) . 89) (89 . 98) (#("thisweek" 0 8 (fontified nil)) . 89) (89 . 97) (#("thisweek/" 0 9 (fontified nil)) . -89) (89 . 98) (#("thisweek" 0 8 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id115 . -8) (undo-tree-id116 . -8) 97) nil (25935 43602 299514 892000) 0 nil])
([nil nil ((98 . 112)) nil (25935 43602 299510 604000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 112) nil (25935 43602 299508 951000) 0 nil])
([nil nil ((110 . 112)) nil (25935 43602 299484 605000) 0 nil])
([nil nil ((112 . 118) (t 25935 43602 400794 139000)) nil (25935 43698 619833 60000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -112) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -113) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -114) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -115) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -116) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -117) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 118) nil (25935 43698 619830 595000) 0 nil])
([nil nil ((111 . 112)) nil (25935 43698 619803 414000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -91) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -92) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -93) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -94) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -95) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("k" 0 1 (face tree-sitter-hl-face:string fontified t)) . -96) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -97) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -99) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -100) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -101) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -102) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -103) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -104) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -105) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -107) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -108) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -109) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -110) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -111) (undo-tree-id315 . -1) 112 (t 25935 43698 628776 444000)) nil (25935 43757 468120 683000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -90) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 91) nil (25935 43757 467873 802000) 0 nil])
([nil nil ((89 . 90)) nil (25935 43757 467868 221000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id143 . -1) 90) nil (25935 43757 467867 650000) 0 nil])
([nil nil ((89 . 95)) nil (25935 43757 467866 57000) 0 nil])
([nil nil ((95 . 101)) nil (25935 43757 467865 717000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 106 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (98 . 106) (#("backend/" 0 8 (fontified nil)) . 98) (98 . 106) (#("bac" 0 3 (fontified nil)) . 98) (98 . 101) (#("backend/" 0 8 (fontified nil)) . -98) (98 . 106) (#("bac" 0 3 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id141 . -3) (undo-tree-id142 . -3) 101) nil (25935 43757 467864 615000) 0 nil])
([nil nil ((106 . 110)) nil (25935 43757 467862 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 115 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (106 . 115) (#("internal/" 0 9 (fontified nil)) . 106) (106 . 115) (#("inte" 0 4 (fontified nil)) . 106) (106 . 110) (#("internal/" 0 9 (fontified nil)) . -106) (106 . 115) (#("inte" 0 4 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 110) nil (25935 43757 467860 497000) 0 nil])
([nil nil ((115 . 120)) nil (25935 43757 467843 14000) 0 nil])
([nil nil ((1598 . 1599) (t 25938 25783 595275 947000)) nil (25938 31423 911374 250000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1598) (undo-tree-id1 . -1) 1599) nil (25938 31423 911373 46000) 0 nil])
([nil nil ((1600 . 1601) (#("	" 0 1 (fontified nil)) . 1599) (undo-tree-id0 . -1) (1598 . 1601)) nil (25938 31423 911368 555000) 0 nil])
([nil nil ((1742 . 1743) (#("	" 0 1 (fontified nil)) . 1741) (undo-tree-id39 . -1) (1740 . 1743) (t 25938 31423 927909 495000)) nil (25938 31850 791671 172000) 0 nil])
([nil nil ((1743 . 1745)) nil (25938 31850 791668 961000) 0 nil])
([nil nil ((1745 . 1751)) nil (25938 31850 791668 260000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil nil)) (1743 . 1799) (#("v1Router.Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 66 (fontified nil)) . 1743) (1743 . 1809) (#("v1Router" 0 8 (fontified nil)) . 1743) (1743 . 1751) (#("v1Router.Get" 0 12 (fontified nil)) . -1743) (1743 . 1755) (#("v1Router" 0 8 (fontified t face tree-sitter-hl-face:variable)) . -1743) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -2) (undo-tree-id38 . -2) 1751) nil (25938 31850 791667 6000) 0 nil])
([nil nil ((1756 . 1758) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1756) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 1757) (1756 . 1757)) nil (25938 31850 791662 514000) 0 nil])
([nil nil ((apply yas--snippet-revive 1743 1787 #s(yas--snippet nil (#s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil nil))) nil (25938 31850 791661 287000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1752) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1753) (undo-tree-id33 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1754) (undo-tree-id34 . -1) 1755) nil (25938 31850 791660 311000) 0 nil])
([nil nil ((1752 . 1756)) nil (25938 31850 791657 654000) 0 nil])
([nil nil ((1758 . 1762)) nil (25938 31850 791656 907000) 0 nil])
([nil nil ((1762 . 1767)) nil (25938 31850 791656 146000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1775) (undo-tree-id11 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1776) (undo-tree-id12 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1777) (undo-tree-id13 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1778) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -1779) (undo-tree-id15 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1780) (undo-tree-id16 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1781) (undo-tree-id17 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1782) (undo-tree-id18 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1783) (undo-tree-id19 . -1) (#("." 0 1 (fontified t)) . -1784) (undo-tree-id20 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1785) (undo-tree-id21 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1786) (undo-tree-id22 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1787) (undo-tree-id23 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1788) (undo-tree-id24 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1789) (undo-tree-id25 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1790) (undo-tree-id26 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1791) (undo-tree-id27 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1792) (undo-tree-id28 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1793) (undo-tree-id29 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1794) (undo-tree-id30 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1795) (undo-tree-id31 . -1) 1796) nil (25938 31850 791652 952000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1770) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1771) (undo-tree-id7 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1772) (undo-tree-id8 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1773) (undo-tree-id9 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1774) (undo-tree-id10 . -1) 1775) nil (25938 31850 791638 445000) 0 nil])
([nil nil ((1770 . 1774)) nil (25938 31850 791634 140000) 0 nil])
([nil nil ((1774 . 1778)) nil (25938 31850 791633 556000) 0 nil])
([nil nil ((1778 . 1779)) nil (25938 31850 791632 823000) 0 nil])
([nil nil ((1779 . 1785)) nil (25938 31850 791631 920000) 0 nil])
([nil nil ((1081 . 1083)) nil (25938 31850 791631 267000) 0 nil])
([nil nil ((1083 . 1096)) nil (25938 31850 791630 598000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1104) (1104 . 1105) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1104) (1104 . 1105) (1096 . 1105)) nil (25938 31850 791629 738000) 0 nil])
([nil nil ((1104 . 1110)) nil (25938 31850 791628 806000) 0 nil])
([nil nil ((1110 . 1111)) nil (25938 31850 791628 30000) 0 nil])
([nil nil ((1111 . 1116)) nil (25938 31850 791627 558000) 0 nil])
([nil nil ((1116 . 1117)) nil (25938 31850 791627 153000) 0 nil])
([nil nil ((1117 . 1119)) nil (25938 31850 791626 399000) 0 nil])
([nil nil ((apply yas--snippet-revive 1111 1125 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1111 . 1125) (#("ResponseWriter" 0 14 (fontified nil)) . 1111) (1111 . 1125) (#("Response" 0 8 (fontified nil)) . 1111) (1111 . 1119) (#("ResponseWriter" 0 14 (fontified nil)) . -1111) (1111 . 1125) (#("Response" 0 8 (fontified t face tree-sitter-hl-face:type)) . -1111) (undo-tree-id4 . -8) (undo-tree-id5 . -8) 1119) nil (25938 31850 791625 11000) 0 nil])
([nil nil ((1125 . 1130)) nil (25938 31850 791621 903000) 0 nil])
([nil nil ((1130 . 1133)) nil (25938 31850 791621 281000) 0 nil])
([nil nil ((1133 . 1135)) nil (25938 31850 791620 633000) 0 nil])
([nil nil ((1135 . 1138)) nil (25938 31850 791620 149000) 0 nil])
([nil nil ((apply yas--snippet-revive 1135 1142 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1135 . 1142) (#("Request" 0 7 (fontified nil)) . 1135) (1135 . 1142) (#("Req" 0 3 (fontified nil)) . 1135) (1135 . 1138) (#("Request" 0 7 (fontified nil)) . -1135) (1135 . 1142) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1135) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 1138) nil (25938 31850 791618 759000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1145) (1145 . 1146) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1145) (1145 . 1146) (1143 . 1146)) nil (25938 31850 791605 665000) 0 nil])
([nil nil ((1146 . 1147) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1146) (1146 . 1147) (1145 . 1147)) nil (25938 31850 791600 860000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1145 . 1146) (1145 . 1146) 1472 (t 25938 31850 806872 780000)) nil (25938 32270 736993 70000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1146) (undo-tree-id1675 . -1) 1147) nil (25938 32270 736991 843000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1414 . 1415) (1414 . 1415) 1146) nil (25938 32270 736990 451000) 0 nil])
([nil nil ((268 . 270)) nil (25938 32270 736989 375000) 0 nil])
([nil nil ((271 . 275) (270 . 272) (#("\"" 0 1 (fontified nil)) . -270) (270 . 271)) nil (25938 32270 736988 671000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -271) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -272) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -273) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -274) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) 275) nil (25938 32270 736987 284000) 0 nil])
([nil nil ((271 . 274)) nil (25938 32270 736981 136000) 0 nil])
([nil nil ((274 . 280)) nil (25938 32270 736980 612000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:string)) . -279) (undo-tree-id1666 . -1) 280) nil (25938 32270 736979 931000) 0 nil])
([nil nil ((279 . 283)) nil (25938 32270 736978 639000) 0 nil])
([nil nil ((283 . 287)) nil (25938 32270 736978 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 280 288 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (280 . 288) (#("backend/" 0 8 (fontified nil)) . 280) (280 . 288) (#("backend" 0 7 (fontified nil)) . 280) (280 . 287) (#("backend/" 0 8 (fontified nil)) . -280) (280 . 288) (#("backend" 0 7 (fontified t face tree-sitter-hl-face:string)) . -280) (undo-tree-id1664 . -7) (undo-tree-id1665 . -7) 287) nil (25938 32270 736977 208000) 0 nil])
([nil nil ((288 . 293)) nil (25938 32270 736974 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 288 297 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (288 . 297) (#("internal/" 0 9 (fontified nil)) . 288) (288 . 297) (#("inter" 0 5 (fontified nil)) . 288) (288 . 293) (#("internal/" 0 9 (fontified nil)) . -288) (288 . 297) (#("inter" 0 5 (fontified t face tree-sitter-hl-face:string)) . -288) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) 293) nil (25938 32270 736973 682000) 0 nil])
([nil nil ((297 . 301)) nil (25938 32270 736971 427000) 0 nil])
([nil nil ((apply yas--snippet-revive 297 305 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (297 . 305) (#("database" 0 8 (fontified nil)) . 297) (297 . 305) (#("data" 0 4 (fontified nil)) . 297) (297 . 301) (#("database" 0 8 (fontified nil)) . -297) (297 . 305) (#("data" 0 4 (fontified t face tree-sitter-hl-face:string)) . -297) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) 301) nil (25938 32270 736970 273000) 0 nil])
([nil nil ((863 . 866)) nil (25938 32270 736967 848000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -863) (undo-tree-id1657 . -1) (#("	" 0 1 (fontified t)) . -864) (undo-tree-id1658 . -1) (#("	" 0 1 (fontified t)) . -865) (undo-tree-id1659 . -1) 866) nil (25938 32270 736966 934000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -913) (undo-tree-id1651 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -914) (undo-tree-id1652 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -915) (undo-tree-id1653 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -916) (undo-tree-id1654 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -917) (undo-tree-id1655 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -918) (undo-tree-id1656 . -1) 919) nil (25938 32270 736963 828000) 0 nil])
([nil nil ((913 . 921)) nil (25938 32270 736958 546000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1095) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1096) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1097) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1098) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1099) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1100) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1101) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("," 0 1 (fontified t)) . -1102) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#(" " 0 1 (fontified t)) . -1103) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1104) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("," 0 1 (fontified t)) . -1105) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#(" " 0 1 (fontified t)) . -1106) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1107) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1108) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1109) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1110) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1111) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (#("
" 0 1 (fontified t)) . -1112) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("	" 0 1 (fontified t)) . -1113) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("	" 0 1 (fontified t)) . -1114) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1115) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . 1) (undo-tree-id1650 . -1) 1116) nil (25938 32270 736953 225000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1074) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("d" 0 1 (fontified t)) . -1075) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1076) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1077) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("
" 0 1 (fontified t)) . -1078) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("	" 0 1 (fontified t)) . -1079) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("	" 0 1 (fontified t)) . -1080) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1081) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (#(" " 0 1 (fontified nil)) . -1082) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1083) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("l" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1084) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1085) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1086) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#(" " 0 1 (fontified t)) . -1087) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1088) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("
" 0 1 (fontified t)) . -1089) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (#("	" 0 1 (fontified t)) . -1090) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("	" 0 1 (fontified t)) . -1091) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (#("	" 0 1 (fontified t)) . -1092) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1093) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1094) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) 1095) nil (25938 32270 736837 817000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1053) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1054) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1055) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("," 0 1 (fontified t)) . -1056) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#(" " 0 1 (fontified t)) . -1057) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1058) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1059) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1060) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("," 0 1 (fontified t)) . -1061) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#(" " 0 1 (fontified t)) . -1062) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("\"" 0 1 (fontified t)) . -1063) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("U" 0 1 (fontified t)) . -1064) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (#("n" 0 1 (fontified t)) . -1065) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("a" 0 1 (fontified t)) . -1066) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("u" 0 1 (fontified t)) . -1067) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("t" 0 1 (fontified t)) . -1068) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("h" 0 1 (fontified t)) . -1069) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("o" 0 1 (fontified t)) . -1070) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (#("r" 0 1 (fontified t)) . -1071) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#("i" 0 1 (fontified t)) . -1072) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#("z" 0 1 (fontified t)) . -1073) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) 1074) nil (25938 32270 736733 696000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1032) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1033) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1034) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1035) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1036) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("." 0 1 (fontified t)) . -1037) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1038) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1039) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1040) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1041) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1042) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1043) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1044) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1045) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1046) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1047) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1048) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1049) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1050) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1051) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1052) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 1053) nil (25938 32270 736626 422000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1011) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("	" 0 1 (fontified t)) . -1012) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1013) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1014) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t)) . -1015) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1016) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1017) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1018) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#(" " 0 1 (fontified t)) . -1019) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("!" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1020) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1021) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#(" " 0 1 (fontified t)) . -1022) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1023) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1024) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:constant\.builtin)) . -1025) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#(" " 0 1 (fontified t)) . -1026) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1027) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("
" 0 1 (fontified t)) . -1028) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("	" 0 1 (fontified t)) . -1029) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("	" 0 1 (fontified t)) . -1030) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (#("	" 0 1 (fontified t)) . -1031) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) 1032) nil (25938 32270 736489 235000) 0 nil])
([nil nil ((#("p" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -990) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -991) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("K" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -992) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -993) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -994) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -995) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -996) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("." 0 1 (fontified t)) . -997) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -998) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -999) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1000) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("," 0 1 (fontified t)) . -1001) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#(" " 0 1 (fontified t)) . -1002) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1003) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1004) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1005) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1006) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1007) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1008) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1009) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("
" 0 1 (fontified t)) . -1010) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) 1011) nil (25938 32270 736300 7000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -969) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -970) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#(" " 0 1 (fontified t)) . -971) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#(":" 0 1 (fontified t)) . -972) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -973) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -974) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -975) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("." 0 1 (fontified t)) . -976) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -977) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -978) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("." 0 1 (fontified t)) . -979) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -980) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -981) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -982) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -983) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -984) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -985) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -986) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -987) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -988) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:property)) . -989) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 990) nil (25938 32270 736085 235000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -962) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -963) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -964) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -965) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("," 0 1 (fontified t)) . -966) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#(" " 0 1 (fontified t)) . -967) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -968) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 969) nil (25938 32270 735880 316000) 0 nil])
([nil nil ((nil rear-nonsticky nil 963 . 964) (#("
" 0 1 (fontified nil)) . -1130) (962 . 1131) 961) nil (25938 32270 735660 566000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 960) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -1) (undo-tree-id67 . -2) 961) nil (25938 32270 735659 137000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -961) (undo-tree-id46 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -962) (undo-tree-id47 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -963) (undo-tree-id48 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -964) (undo-tree-id49 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -965) (undo-tree-id50 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -966) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t)) . -967) (undo-tree-id52 . -1) 968) nil (25938 32270 735645 759000) 0 nil])
([nil nil ((961 . 963)) nil (25938 32270 735639 870000) 0 nil])
([nil nil ((306 . 308)) nil (25938 32270 735639 140000) 0 nil])
([nil nil ((309 . 312) (308 . 310) (#("\"" 0 1 (fontified nil)) . -308) (308 . 309)) nil (25938 32270 735638 328000) 0 nil])
([nil nil ((312 . 314)) nil (25938 32270 735637 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 309 320 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (309 . 320) (#("github.com/" 0 11 (fontified nil)) . 309) (309 . 320) (#("githu" 0 5 (fontified nil)) . 309) (309 . 314) (#("github.com/" 0 11 (fontified nil)) . -309) (309 . 320) (#("githu" 0 5 (fontified t face tree-sitter-hl-face:string)) . -309) (undo-tree-id44 . -5) (undo-tree-id45 . -5) 314) nil (25938 32270 735635 421000) 0 nil])
([nil nil ((320 . 326)) nil (25938 32270 735632 213000) 0 nil])
([nil nil ((apply yas--snippet-revive 320 331 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (320 . 331) (#("golang-jwt/" 0 11 (fontified nil)) . 320) (320 . 331) (#("golang" 0 6 (fontified nil)) . 320) (320 . 326) (#("golang-jwt/" 0 11 (fontified nil)) . -320) (320 . 331) (#("golang" 0 6 (fontified t face tree-sitter-hl-face:string)) . -320) (undo-tree-id42 . -6) (undo-tree-id43 . -6) 326) nil (25938 32270 735630 812000) 0 nil])
([nil nil ((331 . 334)) nil (25938 32270 735626 974000) 0 nil])
([nil nil ((apply yas--snippet-revive 331 335 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (331 . 335) (#("jwt/" 0 4 (fontified nil)) . 331) (331 . 335) (#("jwt" 0 3 (fontified nil)) . 331) (331 . 334) (#("jwt/" 0 4 (fontified nil)) . -331) (331 . 335) (#("jwt" 0 3 (fontified t face tree-sitter-hl-face:string)) . -331) (undo-tree-id40 . -3) (undo-tree-id41 . -3) 334) nil (25938 32270 735625 175000) 0 nil])
([nil nil ((335 . 337)) nil (25938 32270 735607 182000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:string)) . -336) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) 337 (t 25938 32270 749898 224000)) nil (25938 32319 340684 421000) 0 nil])
([nil nil ((336 . 337)) nil (25938 32319 340663 192000) 0 nil])
([nil nil ((991 . 994) (t 25938 32319 356019 601000)) nil (25938 32355 550552 867000) 0 nil])
([nil nil ((nil rear-nonsticky nil 995 . 996) (#("
" 0 1 (fontified nil)) . -1028) (994 . 1029) 993) nil (25938 32355 550551 741000) 0 nil])
([nil nil ((996 . 998)) nil (25938 32355 550550 432000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -991) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#("	" 0 1 (fontified t)) . -992) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (#("	" 0 1 (fontified t)) . -993) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 994) nil (25938 32355 550546 704000) 0 nil])
([nil nil ((1031 . 1045) (t 25938 32355 564110 288000)) nil (25938 33158 393279 720000) 0 nil])
([nil nil ((1202 . 1203)) nil (25938 33158 393278 789000) 0 nil])
([nil nil ((1203 . 1204)) nil (25938 33158 393277 444000) 0 nil])
([nil nil ((1132 . 1134)) nil (25938 33158 393276 720000) 0 nil])
([nil nil ((1173 . 1175)) nil (25938 33158 393276 66000) 0 nil])
([nil nil ((1210 . 1213)) nil (25938 33158 393275 354000) 0 nil])
([nil nil ((1213 . 1220)) nil (25938 33158 393274 487000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1210) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("	" 0 1 (fontified t)) . -1211) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (#("	" 0 1 (fontified t)) . -1212) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1213) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1214) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1215) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1216) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1217) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1218) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("." 0 1 (fontified t)) . -1219) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) 1220) nil (25938 33158 393272 319000) 0 nil])
([nil nil ((1210 . 1213)) nil (25938 33158 393257 266000) 0 nil])
([nil nil ((1213 . 1216)) nil (25938 33158 393256 403000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1213) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1214) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1215) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) 1216) nil (25938 33158 393254 998000) 0 nil])
([nil nil ((1284 . 1295)) nil (25938 33158 393249 234000) 0 nil])
([nil nil ((1295 . 1303)) nil (25938 33158 393248 213000) 0 nil])
([nil nil ((26 . 29) (#("fm" 0 2 (fontified t face tree-sitter-hl-face:string)) . -26) 28 (29 . 32) (49 . 52) (50 . 56) (51 . 53) (55 . 62) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . 67) (69 . 70) (#("ntext" 0 5 (fontified t face tree-sitter-hl-face:string)) . 69) (84 . 121) (85 . 86) (122 . 123) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . 229) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . 231) (233 . 240) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . 233) (235 . 241) (#("uuid" 0 4 (fontified t face tree-sitter-hl-face:string)) . 235) (undo-tree-id1764 . -2) (#("/joho" 0 5 (fontified t face tree-sitter-hl-face:string)) . 253) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . 261) (263 . 265) (#("tenv\"
	\"thisweek/back" 0 5 (fontified t face tree-sitter-hl-face:string) 5 6 (fontified t) 6 7 (fontified t) 7 17 (fontified t face tree-sitter-hl-face:string) 17 21 (fontified t face tree-sitter-hl-face:string)) . 263) (#("nd" 0 2 (fontified t face tree-sitter-hl-face:string)) . 285) (288 . 290) (#("nternal/" 0 8 (fontified t face tree-sitter-hl-face:string)) . 289) (#("atabase" 0 7 (fontified t face tree-sitter-hl-face:string)) . 298) (#("golang-" 0 7 (fontified t face tree-sitter-hl-face:string)) . -320) 327 (328 . 331) (#("wt" 0 2 (fontified t face tree-sitter-hl-face:string)) . -328) 330 (331 . 335) (#("jw" 0 2 (fontified t face tree-sitter-hl-face:string)) . -331) 333 (334 . 336) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -334) 335 (#("5" 0 1 (fontified t face tree-sitter-hl-face:string)) . -336) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1329 1335 nil nil nil t nil)) nil 9 nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil nil)) (1300 . 1323) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1300) (1300 . 1328) (#("New" 0 3 (fontified nil)) . 1300) (1300 . 1303) (#("NewDecoder" 0 10 (fontified nil)) . -1300) (1300 . 1310) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1300) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) 1303) nil (25938 33158 393244 302000) 0 nil])
([nil nil ((1330 . 1331) (#("r io.Reader" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:property)) . 1330) (1329 . 1330)) nil (25938 33158 393234 349000) 0 nil])
([nil nil ((apply yas--snippet-revive 1331 1335 #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil)) (1331 . 1335) (#("Body" 0 4 (fontified nil)) . 1331) (1331 . 1335) (#("Body" 0 4 (fontified nil)) . -1331) (1331 . 1335)) nil (25938 33158 393233 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 1318 1336 #s(yas--snippet nil (#s(yas--field 1 1329 1335 nil nil nil t nil)) nil 9 nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil nil))) nil (25938 33158 393231 433000) 0 nil])
([nil nil ((1336 . 1337)) nil (25938 33158 393230 766000) 0 nil])
([nil nil ((1337 . 1339)) nil (25938 33158 393230 33000) 0 nil])
([nil nil ((1339 . 1352)) nil (25938 33158 393229 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 1348 1356 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1348 . 1356) (#("database" 0 8 (fontified nil)) . 1348) (1348 . 1356) (#("data" 0 4 (fontified nil)) . 1348) (1348 . 1352) (#("database" 0 8 (fontified nil)) . -1348) (1348 . 1356) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1348) (undo-tree-id1762 . -4) (undo-tree-id1763 . -4) 1352) nil (25938 33158 393227 853000) 0 nil])
([nil nil ((1356 . 1357)) nil (25938 33158 393224 238000) 0 nil])
([nil nil ((apply yas--snippet-revive 1357 1373 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (1357 . 1373) (#("CreateUserParams" 0 16 (fontified nil)) . 1357) (1357 . 1373) (#("CreateUserParams" 0 16 (fontified nil)) . -1357) (1357 . 1373)) nil (25938 33158 393223 325000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1374) (1374 . 1375) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1374) (1374 . 1375) (1373 . 1375)) nil (25938 33158 393221 554000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1339) (undo-tree-id1757 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1340) (undo-tree-id1758 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1341) (undo-tree-id1759 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1342) (undo-tree-id1760 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1343) (undo-tree-id1761 . -1) 1344) nil (25938 33158 393219 734000) 0 nil])
([nil nil ((1339 . 1355)) nil (25938 33158 393215 428000) 0 nil])
([nil nil ((1386 . 1388)) nil (25938 33158 393214 899000) 0 nil])
([nil nil ((1388 . 1395)) nil (25938 33158 393214 57000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1388) (undo-tree-id1750 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1389) (undo-tree-id1751 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1390) (undo-tree-id1752 . -1) (#(" " 0 1 (fontified t)) . -1391) (undo-tree-id1753 . -1) (#(":" 0 1 (fontified t)) . -1392) (undo-tree-id1754 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1393) (undo-tree-id1755 . -1) (#(" " 0 1 (fontified t)) . -1394) (undo-tree-id1756 . -1) 1395) nil (25938 33158 393212 470000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1392) (1392 . 1393) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1392) (1392 . 1393) (1388 . 1393)) nil (25938 33158 393205 879000) 0 nil])
([nil nil ((1392 . 1395)) nil (25938 33158 393204 461000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1392) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1393) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1394) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 1395) nil (25938 33158 393203 67000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1391) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1392)) nil (25938 33158 393197 144000) 0 nil])
([nil nil ((1391 . 1398)) nil (25938 33158 393194 711000) 0 nil])
([nil nil ((1398 . 1403)) nil (25938 33158 393193 722000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1398) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1399) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1400) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1401) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (#("." 0 1 (fontified t)) . -1402) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) 1403) nil (25938 33158 393192 97000) 0 nil])
([nil nil ((1398 . 1410)) nil (25938 33158 393183 811000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1413 1430 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil nil)) (1406 . 1419) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 1406) (1406 . 1424) (#("deco" 0 4 (fontified nil)) . 1406) (1406 . 1410) (#("Decode" 0 6 (fontified nil)) . -1406) (1406 . 1412) (#("deco" 0 4 (fontified t face tree-sitter-hl-face:type)) . -1406) (undo-tree-id1730 . -4) (undo-tree-id1731 . -4) 1410) nil (25938 33158 393182 572000) 0 nil])
([nil nil ((1414 . 1420) (#("v any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:variable)) . 1414) (1413 . 1414)) nil (25938 33158 393179 126000) 0 nil])
([nil nil ((apply yas--snippet-revive 1414 1430 #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil)) (1414 . 1430) (#("createUserObject" 0 16 (fontified nil)) . 1414) (1414 . 1430) (#("create" 0 6 (fontified nil)) . 1414) (1414 . 1420) (#("createUserObject" 0 16 (fontified nil)) . -1414) (1414 . 1430) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1414) (undo-tree-id1728 . -6) (undo-tree-id1729 . -6) 1420) nil (25938 33158 393177 233000) 0 nil])
([nil nil ((apply yas--snippet-revive 1406 1431 #s(yas--snippet nil (#s(yas--field 1 1413 1430 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil nil))) nil (25938 33158 393173 984000) 0 nil])
([nil nil ((1431 . 1438)) nil (25938 33158 393173 242000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1445) (1445 . 1446) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1445) (1445 . 1446) (1438 . 1446)) nil (25938 33158 393172 77000) 0 nil])
([nil nil ((1446 . 1448) (1447 . 1448) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1446) (1446 . 1448) (1445 . 1447)) nil (25938 33158 393170 202000) 0 nil])
([nil nil ((1448 . 1454)) nil (25938 33158 393169 38000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1471 1472 nil nil nil t #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil))) #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil)) #s(yas--field 3 1479 1481 nil nil nil t nil)) nil 15 nil #s(yas--field 3 1479 1481 nil nil nil t nil) nil nil)) (1454 . 1515) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1454) (1454 . 1530) (#("RespondWithError" 0 16 (fontified nil)) . -1454) (1454 . 1470)) nil (25938 33158 393168 23000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1472) (1471 . 1472)) nil (25938 33158 393166 526000) 0 nil])
([nil nil ((1475 . 1477) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1475) (1474 . 1475)) nil (25938 33158 393165 694000) 0 nil])
([nil nil ((1479 . 1481) (#("\"" 0 1 (fontified nil)) . -1479) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1480) (1479 . 1480)) nil (25938 33158 393164 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 1454 1482 #s(yas--snippet nil (#s(yas--field 1 1471 1472 nil nil nil t #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil))) #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil)) #s(yas--field 3 1479 1481 nil nil nil t nil)) nil 15 nil #s(yas--field 3 1479 1481 nil nil nil t nil) nil nil))) nil (25938 33158 393163 201000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1476) (undo-tree-id1727 . -1) 1477) nil (25938 33158 393162 487000) 0 nil])
([nil nil ((1476 . 1477)) nil (25938 33158 393161 139000) 0 nil])
([nil nil ((1480 . 1488)) nil (25938 33158 393160 686000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1480) (undo-tree-id1719 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1481) (undo-tree-id1720 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1482) (undo-tree-id1721 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1483) (undo-tree-id1722 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1484) (undo-tree-id1723 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1485) (undo-tree-id1724 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1486) (undo-tree-id1725 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -1487) (undo-tree-id1726 . -1) 1488) nil (25938 33158 393158 905000) 0 nil])
([nil nil ((1480 . 1491)) nil (25938 33158 393152 342000) 0 nil])
([nil nil ((1496 . 1498)) nil (25938 33158 393151 933000) 0 nil])
([nil nil ((1498 . 1504)) nil (25938 33158 393151 366000) 0 nil])
([nil nil ((1504 . 1507)) nil (25938 33158 393150 735000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1243) (1243 . 1244) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1243) (1243 . 1244) (1242 . 1244)) nil (25938 33158 393149 975000) 0 nil])
([nil nil ((1243 . 1244)) nil (25938 33158 393148 422000) 0 nil])
([nil nil ((1242 . 1243)) nil (25938 33158 393147 702000) 0 nil])
([nil nil ((1245 . 1249)) nil (25938 33158 393146 835000) 0 nil])
([nil nil ((apply yas--snippet-revive 1246 1255 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (1246 . 1255) (#("apiConfig" 0 9 (fontified nil)) . 1246) (1246 . 1255) (#("api" 0 3 (fontified nil)) . 1246) (1246 . 1249) (#("apiConfig" 0 9 (fontified nil)) . -1246) (1246 . 1255) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1246) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) 1249) nil (25938 33158 393143 103000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1512) (undo-tree-id1840 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1513) (undo-tree-id1841 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1514) (undo-tree-id1842 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1515) (undo-tree-id1843 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1516) (undo-tree-id1844 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1517) (undo-tree-id1845 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1518) (undo-tree-id1846 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1519) (undo-tree-id1847 . -1) (#("." 0 1 (fontified t)) . -1520) (undo-tree-id1848 . -1) 1521 (t 25938 33158 406753 554000)) nil (25938 33287 200551 143000) 0 nil])
([nil nil ((1512 . 1518)) nil (25938 33287 200543 521000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1514) (undo-tree-id1836 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1515) (undo-tree-id1837 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1516) (undo-tree-id1838 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1517) (undo-tree-id1839 . -1) 1518) nil (25938 33287 200542 243000) 0 nil])
([nil nil ((1514 . 1516)) nil (25938 33287 200538 161000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1514) (undo-tree-id1834 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1515) (undo-tree-id1835 . -1) 1516) nil (25938 33287 200537 83000) 0 nil])
([nil nil ((1514 . 1517)) nil (25938 33287 200534 939000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) #s(yas--field 2 1535 1551 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil nil)) (1517 . 1579) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 1517) (1517 . 1589) (#("CreateUser" 0 10 (fontified nil)) . -1517) (1517 . 1527)) nil (25938 33287 200533 761000) 0 nil])
([nil nil ((1529 . 1530) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 1529) (1528 . 1529)) nil (25938 33287 200532 318000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1528) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1529) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 1530) nil (25938 33287 200530 835000) 0 nil])
([nil nil ((1528 . 1533)) nil (25938 33287 200527 45000) 0 nil])
([nil nil ((apply yas--snippet-revive 1530 1533 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) nil)) (1530 . 1533) (#("ctx" 0 3 (fontified nil)) . 1530) (1530 . 1533) (#("ctx" 0 3 (fontified nil)) . 1530) (1530 . 1533) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1530) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) 1533) nil (25938 33287 200525 712000) 0 nil])
([nil nil ((1536 . 1541) (#("arg database.CreateUserParams" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 29 (fontified nil face tree-sitter-hl-face:property)) . 1536) (1535 . 1536)) nil (25938 33287 200522 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1535 1551 #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil)) (1535 . 1551) (#("createUserObject" 0 16 (fontified nil)) . 1535) (1535 . 1551) (#("create" 0 6 (fontified nil)) . 1535) (1535 . 1541) (#("createUserObject" 0 16 (fontified nil)) . -1535) (1535 . 1551) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1535) (undo-tree-id1826 . -6) (undo-tree-id1827 . -6) 1541) nil (25938 33287 200520 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 1517 1552 #s(yas--snippet nil (#s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) #s(yas--field 2 1535 1551 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil nil))) nil (25938 33287 200517 298000) 0 nil])
([nil nil ((1552 . 1553)) nil (25938 33287 200516 533000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1552) (undo-tree-id1825 . -1) 1553) nil (25938 33287 200515 525000) 0 nil])
([nil nil ((1512 . 1515)) nil (25938 33287 200514 38000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1512) (undo-tree-id1822 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1513) (undo-tree-id1823 . -1) (#(" " 0 1 (fontified t)) . -1514) (undo-tree-id1824 . -1) 1515) nil (25938 33287 200512 923000) 0 nil])
([nil nil ((1512 . 1513)) nil (25938 33287 200509 919000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1512) (undo-tree-id1821 . -1) 1513) nil (25938 33287 200509 70000) 0 nil])
([nil nil ((1512 . 1516)) nil (25938 33287 200507 556000) 0 nil])
([nil nil ((1516 . 1517)) nil (25938 33287 200506 835000) 0 nil])
([nil nil ((1517 . 1525)) nil (25938 33287 200506 96000) 0 nil])
([nil nil ((1565 . 1566)) nil (25938 33287 200505 744000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1565) (undo-tree-id1820 . -1) 1566) nil (25938 33287 200504 993000) 0 nil])
([nil nil ((1565 . 1567)) nil (25938 33287 200503 745000) 0 nil])
([nil nil ((1567 . 1571)) nil (25938 33287 200503 199000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1570) (undo-tree-id1819 . -1) 1571) nil (25938 33287 200502 577000) 0 nil])
([nil nil ((1570 . 1577)) nil (25938 33287 200500 676000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1574) (undo-tree-id1816 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1575) (undo-tree-id1817 . -1) (#(" " 0 1 (fontified t)) . -1576) (undo-tree-id1818 . -1) 1577) nil (25938 33287 200499 665000) 0 nil])
([nil nil ((1574 . 1580)) nil (25938 33287 200496 633000) 0 nil])
([nil nil ((1580 . 1581)) nil (25938 33287 200495 864000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1582) (1582 . 1583) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1582) (1582 . 1583) (1581 . 1583)) nil (25938 33287 200494 801000) 0 nil])
([nil nil ((1583 . 1585) (1584 . 1585) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1583) (1583 . 1585) (1582 . 1584)) nil (25938 33287 200493 133000) 0 nil])
([nil nil ((1585 . 1590)) nil (25938 33287 200491 911000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1589) (undo-tree-id1815 . -1) 1590) nil (25938 33287 200490 952000) 0 nil])
([nil nil ((1589 . 1590)) nil (25938 33287 200489 396000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1584) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1585) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("." 0 1 (fontified t)) . -1586) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1587) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1588) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#("." 0 1 (fontified t)) . -1589) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) 1590) nil (25938 33287 200487 643000) 0 nil])
([nil nil ((1584 . 1592)) nil (25938 33287 200477 751000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1609 1610 nil nil nil t #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil))) #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil)) #s(yas--field 3 1617 1630 nil nil nil t nil)) nil 20 nil #s(yas--field 3 1617 1630 nil nil nil t nil) nil nil)) (1592 . 1653) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1592) (1592 . 1668) (#("RespondWithError" 0 16 (fontified nil)) . -1592) (1592 . 1608)) nil (25938 33287 200476 634000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1610) (undo-tree-id1802 . -21) (1609 . 1610)) nil (25938 33287 200474 950000) 0 nil])
([nil nil ((1613 . 1615) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1613) (undo-tree-id1801 . -8) (1612 . 1613)) nil (25938 33287 200473 141000) 0 nil])
([nil nil ((1618 . 1625) (1617 . 1619) (#("\"" 0 1 (fontified nil)) . -1617) (undo-tree-id1799 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1618) (undo-tree-id1800 . -10) (1617 . 1618)) nil (25938 33287 200471 78000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1622) (undo-tree-id1796 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1623) (undo-tree-id1797 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1624) (undo-tree-id1798 . -1) 1625) nil (25938 33287 200467 694000) 0 nil])
([nil nil ((1622 . 1629)) nil (25938 33287 200464 158000) 0 nil])
([nil nil ((apply yas--snippet-revive 1592 1631 #s(yas--snippet nil (#s(yas--field 1 1609 1610 nil nil nil t #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil))) #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil)) #s(yas--field 3 1617 1630 nil nil nil t nil)) nil 20 nil #s(yas--field 3 1617 1630 nil nil nil t nil) nil nil))) nil (25938 33287 200463 352000) 0 nil])
([nil nil ((1631 . 1632)) nil (25938 33287 200462 269000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 1631) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1)) nil (25938 33287 200459 254000) 0 nil])
([nil nil ((1634 . 1636) (t 25938 33287 214523 114000)) nil (25938 33330 461808 793000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1634) (undo-tree-id1895 . -1) (#("	" 0 1 (fontified t)) . -1635) (undo-tree-id1896 . -1) 1636) nil (25938 33330 461807 715000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . 1640) (1640 . 1641) (#("}" 0 1 (fontified nil)) . -1640) (1634 . 1641)) nil (25938 33330 461805 468000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1641) (1641 . 1642) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1641) (1641 . 1642) (1640 . 1642)) nil (25938 33330 461804 20000) 0 nil])
([nil nil ((1642 . 1644) (1643 . 1644) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1642) (1642 . 1644) (1641 . 1643)) nil (25938 33330 461802 693000) 0 nil])
([nil nil ((1644 . 1646)) nil (25938 33330 461801 484000) 0 nil])
([nil nil ((1646 . 1650)) nil (25938 33330 461800 676000) 0 nil])
([nil nil ((1507 . 1510)) nil (25938 33330 461800 104000) 0 nil])
([nil nil ((1510 . 1517)) nil (25938 33330 461799 542000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1516) (undo-tree-id1894 . -1) 1517) nil (25938 33330 461798 588000) 0 nil])
([nil nil ((1659 . 1662)) nil (25938 33330 461797 81000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1675 1676 nil nil nil t #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil))) #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil)) #s(yas--field 3 1683 1687 nil nil nil t nil)) nil 21 nil #s(yas--field 3 1683 1687 nil nil nil t nil) nil nil)) (1659 . 1728) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 1659) (1659 . 1744) (#("Res" 0 3 (fontified nil)) . 1659) (1659 . 1662) (#("RespondWithJSON" 0 15 (fontified nil)) . -1659) (1659 . 1674) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1659) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) 1662) nil (25938 33330 461795 737000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1676) (undo-tree-id1891 . -21) (1675 . 1676)) nil (25938 33330 461791 30000) 0 nil])
([nil nil ((1679 . 1681) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1679) (undo-tree-id1890 . -8) (1678 . 1679)) nil (25938 33330 461789 326000) 0 nil])
([nil nil ((1684 . 1686) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-4-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face))) . 1684) (undo-tree-id1887 . -19) (undo-tree-id1888 . -8) (undo-tree-id1889 . -9) (1683 . 1684)) nil (25938 33330 461787 477000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1685) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 1686) nil (25938 33330 461784 82000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1683) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1684) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) 1685) nil (25938 33330 461775 608000) 0 nil])
([nil nil ((1683 . 1687)) nil (25938 33330 461748 973000) 0 nil])
([nil nil ((apply yas--snippet-revive 1659 1688 #s(yas--snippet nil (#s(yas--field 1 1675 1676 nil nil nil t #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil))) #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil)) #s(yas--field 3 1683 1687 nil nil nil t nil)) nil 21 nil #s(yas--field 3 1683 1687 nil nil nil t nil) nil nil))) nil (25938 33330 461744 962000) 0 nil])
([nil nil ((1519 . 1521) (t 25938 33330 476744 885000)) nil (25938 33403 839454 58000) 0 nil])
([nil nil ((1521 . 1528)) nil (25938 33403 839453 397000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1521) (undo-tree-id1915 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1522) (undo-tree-id1916 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1523) (undo-tree-id1917 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1524) (undo-tree-id1918 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1525) (undo-tree-id1919 . -1) (#(" " 0 1 (fontified t)) . -1526) (undo-tree-id1920 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1527) (undo-tree-id1921 . -1) 1528) nil (25938 33403 839451 936000) 0 nil])
([nil nil ((1521 . 1534)) nil (25938 33403 839446 625000) 0 nil])
([nil nil ((1534 . 1543)) nil (25938 33403 839446 155000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1539) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1540) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1541) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1542) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) 1543) nil (25938 33403 839445 80000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1543) (1543 . 1544) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1543) (1543 . 1544) (1539 . 1544)) nil (25938 33403 839439 163000) 0 nil])
([nil nil ((103 . 105)) nil (25938 33403 839438 395000) 0 nil])
([nil nil ((106 . 110) (105 . 107) (#("\"" 0 1 (fontified nil)) . -105) (105 . 106)) nil (25938 33403 839437 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 110 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (106 . 110) (#("time" 0 4 (fontified nil)) . 106) (106 . 110) (#("time" 0 4 (fontified nil)) . 106) (106 . 110) (#("time" 0 4 (fontified t face tree-sitter-hl-face:string)) . -106) (undo-tree-id1905 . -4) (undo-tree-id1906 . -4) 110) nil (25938 33403 839436 424000) 0 nil])
([nil nil ((1552 . 1554)) nil (25938 33403 839433 777000) 0 nil])
([nil nil ((1554 . 1560)) nil (25938 33403 839433 355000) 0 nil])
([nil nil ((apply yas--snippet-revive 1554 1570 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (1554 . 1570) (#("createUserObject" 0 16 (fontified nil)) . 1554) (1554 . 1570) (#("create" 0 6 (fontified nil)) . 1554) (1554 . 1560) (#("createUserObject" 0 16 (fontified nil)) . -1554) (1554 . 1570) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1554) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) 1560) nil (25938 33403 839431 761000) 0 nil])
([nil nil ((1570 . 1571)) nil (25938 33403 839429 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 1571 1580 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (1571 . 1580) (#("CreatedAt" 0 9 (fontified nil)) . 1571) (1571 . 1580) (#("CreatedAt" 0 9 (fontified nil)) . -1571) (1571 . 1580)) nil (25938 33403 839428 92000) 0 nil])
([nil nil ((1580 . 1587)) nil (25938 33403 839427 127000) 0 nil])
([nil nil ((apply yas--snippet-revive 1583 1592 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1583 . 1592) (#("timestamp" 0 9 (fontified nil)) . 1583) (1583 . 1592) (#("time" 0 4 (fontified nil)) . 1583) (1583 . 1587) (#("timestamp" 0 9 (fontified nil)) . -1583) (1583 . 1592) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1583) (undo-tree-id1901 . -4) (undo-tree-id1902 . -4) 1587) nil (25938 33403 839425 963000) 0 nil])
([nil nil ((1592 . 1594)) nil (25938 33403 839423 193000) 0 nil])
([nil nil ((1594 . 1600)) nil (25938 33403 839422 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 1594 1610 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (1594 . 1610) (#("createUserObject" 0 16 (fontified nil)) . 1594) (1594 . 1610) (#("create" 0 6 (fontified nil)) . 1594) (1594 . 1600) (#("createUserObject" 0 16 (fontified nil)) . -1594) (1594 . 1610) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1594) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) 1600) nil (25938 33403 839421 413000) 0 nil])
([nil nil ((1610 . 1615)) nil (25938 33403 839418 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 1611 1620 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (1611 . 1620) (#("UpdatedAt" 0 9 (fontified nil)) . 1611) (1611 . 1620) (#("Upda" 0 4 (fontified nil)) . 1611) (1611 . 1615) (#("UpdatedAt" 0 9 (fontified nil)) . -1611) (1611 . 1620) (#("Upda" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1611) (undo-tree-id1897 . -4) (undo-tree-id1898 . -4) 1615) nil (25938 33403 839416 649000) 0 nil])
([nil nil ((1620 . 1632)) nil (25938 33403 839404 272000) 0 nil])
([nil nil ((1687 . 1689) (t 25938 33403 855681 347000)) nil (25938 33455 726765 48000) 0 nil])
([nil nil ((1689 . 1692)) nil (25938 33455 726764 66000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1689) (undo-tree-id1923 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1690) (undo-tree-id1924 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1691) (undo-tree-id1925 . -1) 1692) nil (25938 33455 726762 494000) 0 nil])
([nil nil ((1689 . 1707)) nil (25938 33455 726759 90000) 0 nil])
([nil nil ((1707 . 1719)) nil (25938 33455 726758 182000) 0 nil])
([nil nil ((1719 . 1733)) nil (25938 33455 726757 429000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1732) (undo-tree-id1922 . -1) 1733) nil (25938 33455 726756 307000) 0 nil])
([nil nil ((1732 . 1741)) nil (25938 33455 726745 102000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1731) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1732) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1733) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -1734) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) 1735 (t 25938 33455 742908 136000)) nil (25938 33460 200982 382000) 0 nil])
([nil nil ((1731 . 1737)) nil (25938 33460 200954 294000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1729) (1729 . 1730) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -1729) (1729 . 1730) (1727 . 1730) (t 25938 33460 218122 700000)) nil (25938 33473 612312 386000) 0 nil])
([nil nil ((1729 . 1732)) nil (25938 33473 612311 310000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1751) (1751 . 1752) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:comment)) . -1751) (1751 . 1752) (1749 . 1752)) nil (25938 33473 612310 112000) 0 nil])
([nil nil ((1751 . 1754)) nil (25938 33473 612306 214000) 0 nil])
([nil nil ((1874 . 1876) (t 25938 33473 628058 499000)) nil (25938 33501 651830 155000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1887) (1887 . 1888) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1887) (1887 . 1888) (1876 . 1888)) nil (25938 33501 651829 199000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1882) (1882 . 1883) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1882) (1882 . 1883) (1880 . 1883)) nil (25938 33501 651827 397000) 0 nil])
([nil nil ((1882 . 1885)) nil (25938 33501 651826 335000) 0 nil])
([nil nil ((1885 . 1888)) nil (25938 33501 651825 653000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1884) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1885) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1886) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1887) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) 1888) nil (25938 33501 651824 120000) 0 nil])
([nil nil ((1884 . 1887)) nil (25938 33501 651817 763000) 0 nil])
([nil nil ((apply yas--snippet-revive 1884 1893 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1884 . 1893) (#("apiConfig" 0 9 (fontified nil)) . 1884) (1884 . 1893) (#("api" 0 3 (fontified nil)) . 1884) (1884 . 1887) (#("apiConfig" 0 9 (fontified nil)) . -1884) (1884 . 1893) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1884) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) 1887) nil (25938 33501 651814 410000) 0 nil])
([nil nil ((1901 . 1916) (t 25938 33501 659987 703000)) nil (25938 33792 169358 367000) 0 nil])
([nil nil ((apply yas--snippet-revive 1908 1922 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (1908 . 1922) (#("ResponseWriter" 0 14 (fontified nil)) . 1908) (1908 . 1922) (#("Response" 0 8 (fontified nil)) . 1908) (1908 . 1916) (#("ResponseWriter" 0 14 (fontified nil)) . -1908) (1908 . 1922) (#("Response" 0 8 (fontified t face tree-sitter-hl-face:type)) . -1908) (undo-tree-id2037 . -8) (undo-tree-id2038 . -8) 1916) nil (25938 33792 169356 814000) 0 nil])
([nil nil ((1922 . 1926)) nil (25938 33792 169349 512000) 0 nil])
([nil nil ((1926 . 1939)) nil (25938 33792 169348 13000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1942) (1942 . 1943) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1942) (1942 . 1943) (1940 . 1943)) nil (25938 33792 169345 715000) 0 nil])
([nil nil ((1943 . 1944) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1943) (1943 . 1944) (1942 . 1944)) nil (25938 33792 169336 186000) 0 nil])
([nil nil ((1874 . 1876)) nil (25938 33792 169335 240000) 0 nil])
([nil nil ((1876 . 1881)) nil (25938 33792 169334 449000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1880) (undo-tree-id2036 . -1) 1881) nil (25938 33792 169333 849000) 0 nil])
([nil nil ((1880 . 1885)) nil (25938 33792 169332 434000) 0 nil])
([nil nil ((1876 . 1881)) nil (25938 33792 169332 4000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1891) (1891 . 1892) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1891) (1891 . 1892) (1890 . 1892)) nil (25938 33792 169331 140000) 0 nil])
([nil nil ((1962 . 1967)) nil (25938 33792 169330 205000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1966) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) 1967) nil (25938 33792 169329 525000) 0 nil])
([nil nil ((1966 . 1968)) nil (25938 33792 169327 806000) 0 nil])
([nil nil ((1968 . 1981)) nil (25938 33792 169327 330000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1986) (1986 . 1987) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1986) (1986 . 1987) (1981 . 1987)) nil (25938 33792 169326 313000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1978) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1979) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1980) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1981) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1982) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1983) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1984) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1985) (undo-tree-id2030 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1986) (undo-tree-id2031 . -1) (undo-tree-id2032 . 1) (undo-tree-id2033 . -1) 1987) nil (25938 33792 169323 973000) 0 nil])
([nil nil ((1978 . 1981)) nil (25938 33792 169310 738000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1989 1990 nil nil nil t nil)) nil 30 nil #s(yas--field 1 1989 1990 nil nil nil t nil) nil nil)) (1978 . 2001) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1978) (1978 . 2006) (#("New" 0 3 (fontified nil)) . 1978) (1978 . 1981) (#("NewDecoder" 0 10 (fontified nil)) . -1978) (1978 . 1988) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1978) (undo-tree-id2014 . -3) (undo-tree-id2015 . -3) 1981) nil (25938 33792 169309 651000) 0 nil])
([nil nil ((#("r io.Reader" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:property)) . 1990) (1989 . 1990)) nil (25938 33792 169307 220000) 0 nil])
([nil nil ((apply yas--snippet-revive 1978 1991 #s(yas--snippet nil (#s(yas--field 1 1989 1990 nil nil nil t nil)) nil 30 nil #s(yas--field 1 1989 1990 nil nil nil t nil) nil nil))) nil (25938 33792 169306 699000) 0 nil])
([nil nil ((1991 . 1992)) nil (25938 33792 169306 234000) 0 nil])
([nil nil ((1992 . 1994)) nil (25938 33792 169305 890000) 0 nil])
([nil nil ((1990 . 1995)) nil (25938 33792 169305 456000) 0 nil])
([nil nil ((1997 . 1999)) nil (25938 33792 169305 28000) 0 nil])
([nil nil ((1999 . 2009)) nil (25938 33792 169304 437000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2006) (undo-tree-id2011 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2007) (undo-tree-id2012 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2008) (undo-tree-id2013 . -1) 2009) nil (25938 33792 169303 353000) 0 nil])
([nil nil ((2006 . 2007)) nil (25938 33792 169300 924000) 0 nil])
([nil nil ((2007 . 2010)) nil (25938 33792 169300 469000) 0 nil])
([nil nil ((apply yas--snippet-revive 2007 2047 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2007 . 2047) (#("database.GetUserByEmailAndPasswordParams" 0 40 (fontified nil)) . 2007) (2007 . 2047) (#("Get" 0 3 (fontified nil)) . 2007) (2007 . 2010) (#("database.GetUserByEmailAndPasswordParams" 0 40 (fontified nil)) . -2007) (2007 . 2047) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2007) (undo-tree-id2009 . -3) (undo-tree-id2010 . -3) 2010) nil (25938 33792 169299 398000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2048) (2048 . 2049) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2048) (2048 . 2049) (2047 . 2049)) nil (25938 33792 169296 692000) 0 nil])
([nil nil ((2049 . 2051)) nil (25938 33792 169295 774000) 0 nil])
([nil nil ((2051 . 2060)) nil (25938 33792 169295 254000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2051) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2052) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2053) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#(" " 0 1 (fontified t)) . -2054) (undo-tree-id2003 . -1) (#(":" 0 1 (fontified t)) . -2055) (undo-tree-id2004 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2056) (undo-tree-id2005 . -1) (#(" " 0 1 (fontified t)) . -2057) (undo-tree-id2006 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2058) (undo-tree-id2007 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2059) (undo-tree-id2008 . -1) 2060) nil (25938 33792 169293 369000) 0 nil])
([nil nil ((2051 . 2059)) nil (25938 33792 169285 595000) 0 nil])
([nil nil ((2059 . 2066)) nil (25938 33792 169285 52000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2061) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2062) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2063) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2064) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (#("." 0 1 (fontified t)) . -2065) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) 2066) nil (25938 33792 169283 599000) 0 nil])
([nil nil ((2061 . 2069)) nil (25938 33792 169276 534000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2068) (undo-tree-id1986 . -1) 2069) nil (25938 33792 169275 845000) 0 nil])
([nil nil ((2068 . 2069)) nil (25938 33792 169274 561000) 0 nil])
([nil nil ((2069 . 2072)) nil (25938 33792 169274 55000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil nil nil)) nil 32 nil #s(yas--field 1 2076 2081 nil nil nil nil nil) nil nil)) (2069 . 2082) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 2069) (2069 . 2087) (#("Dec" 0 3 (fontified nil)) . 2069) (2069 . 2072) (#("Decode" 0 6 (fontified nil)) . -2069) (2069 . 2075) (#("Dec" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2069) (undo-tree-id1984 . -3) (undo-tree-id1985 . -3) 2072) nil (25938 33792 169272 588000) 0 nil])
([nil nil ((apply yas--snippet-revive 2069 2082 #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil nil nil)) nil 32 nil #s(yas--field 1 2076 2081 nil nil nil nil nil) nil nil))) nil (25938 33792 169269 884000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2076) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (#(" " 0 1 (fontified t)) . -2077) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2078) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2079) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2080) (undo-tree-id1983 . -1) 2081) nil (25938 33792 169268 636000) 0 nil])
([nil nil ((2076 . 2080)) nil (25938 33792 169262 118000) 0 nil])
([nil nil ((2081 . 2092)) nil (25938 33792 169261 754000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2095) (2095 . 2096) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2095) (2095 . 2096) (2092 . 2096)) nil (25938 33792 169260 986000) 0 nil])
([nil nil ((2096 . 2098) (2097 . 2098) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2096) (2096 . 2098) (2095 . 2097)) nil (25938 33792 169259 971000) 0 nil])
([nil nil ((2098 . 2104)) nil (25938 33792 169258 859000) 0 nil])
([nil nil ((2097 . 2099) (#("		" 0 2 (fontified nil)) . 2096) (undo-tree-id1974 . -2) (2098 . 2099)) nil (25938 33792 169257 764000) 0 nil])
([nil nil ((2096 . 2098)) nil (25938 33792 169256 321000) 0 nil])
([nil nil ((2098 . 2104)) nil (25938 33792 169255 873000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2121 2122 nil nil nil t #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil))) #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil)) #s(yas--field 3 2129 2142 nil nil nil t nil)) nil 33 nil #s(yas--field 3 2129 2142 nil nil nil t nil) nil nil)) (2104 . 2165) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2104) (2104 . 2180) (#("RespondWithError" 0 16 (fontified nil)) . -2104) (2104 . 2120)) nil (25938 33792 169255 69000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2122) (undo-tree-id1971 . -21) (undo-tree-id1972 . -2) (undo-tree-id1973 . -3) (2121 . 2122)) nil (25938 33792 169253 881000) 0 nil])
([nil nil ((2125 . 2127) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2125) (undo-tree-id1968 . -8) (undo-tree-id1969 . -5) (undo-tree-id1970 . -6) (2124 . 2125)) nil (25938 33792 169250 569000) 0 nil])
([nil nil ((2130 . 2141) (2129 . 2131) (#("\"" 0 1 (fontified nil)) . -2129) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 2130) (undo-tree-id1965 . -10) (undo-tree-id1966 . -4) (undo-tree-id1967 . -5) (2129 . 2130)) nil (25938 33792 169246 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 2104 2143 #s(yas--snippet nil (#s(yas--field 1 2121 2122 nil nil nil t #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil))) #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil)) #s(yas--field 3 2129 2142 nil nil nil t nil)) nil 33 nil #s(yas--field 3 2129 2142 nil nil nil t nil) nil nil))) nil (25938 33792 169232 4000) 0 nil])
([nil nil ((1874 . 1876) (t 25938 33792 185992 988000)) nil (25938 33923 233044 4000) 0 nil])
([nil nil ((1876 . 1887)) nil (25938 33923 233043 309000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1881) (undo-tree-id2125 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1882) (undo-tree-id2126 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1883) (undo-tree-id2127 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1884) (undo-tree-id2128 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1885) (undo-tree-id2129 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1886) (undo-tree-id2130 . -1) 1887) nil (25938 33923 233042 191000) 0 nil])
([nil nil ((1881 . 1890)) nil (25938 33923 233037 419000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1891) (1891 . 1892) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1891) (1891 . 1892) (1890 . 1892)) nil (25938 33923 233036 692000) 0 nil])
([nil nil ((1891 . 1894)) nil (25938 33923 233035 817000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1893) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) 1894) nil (25938 33923 233035 87000) 0 nil])
([nil nil ((1893 . 1906)) nil (25938 33923 233033 28000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1910) (1910 . 1911) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1910) (1910 . 1911) (1906 . 1911)) nil (25938 33923 233031 861000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1899) (undo-tree-id2122 . -1) 1900) nil (25938 33923 233030 535000) 0 nil])
([nil nil ((1899 . 1900)) nil (25938 33923 233029 305000) 0 nil])
([nil nil ((1911 . 1913)) nil (25938 33923 233028 716000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1911) (undo-tree-id2120 . -1) (#(" " 0 1 (fontified t)) . -1912) (undo-tree-id2121 . -1) 1913) nil (25938 33923 233027 912000) 0 nil])
([nil nil ((1911 . 1915)) nil (25938 33923 233024 425000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1913) (undo-tree-id2118 . -1) (#(" " 0 1 (fontified t)) . -1914) (undo-tree-id2119 . -1) 1915) nil (25938 33923 233023 746000) 0 nil])
([nil nil ((1913 . 1915)) nil (25938 33923 233021 957000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1913) (undo-tree-id2116 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1914) (undo-tree-id2117 . -1) 1915) nil (25938 33923 233021 267000) 0 nil])
([nil nil ((1913 . 1916)) nil (25938 33923 233019 418000) 0 nil])
([nil nil ((1916 . 1917)) nil (25938 33923 233018 844000) 0 nil])
([nil nil ((1917 . 1919)) nil (25938 33923 233018 442000) 0 nil])
([nil nil ((1919 . 1922)) nil (25938 33923 233017 908000) 0 nil])
([nil nil ((1912 . 1914)) nil (25938 33923 233017 304000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1927) (1927 . 1928) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1927) (1927 . 1928) (1925 . 1928)) nil (25938 33923 233016 339000) 0 nil])
([nil nil ((1928 . 1929) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1928) (1928 . 1929) (1927 . 1929)) nil (25938 33923 233015 268000) 0 nil])
([nil nil ((1929 . 1936)) nil (25938 33923 233014 435000) 0 nil])
([nil nil ((1936 . 1937)) nil (25938 33923 233014 104000) 0 nil])
([nil nil ((1937 . 1945)) nil (25938 33923 233013 764000) 0 nil])
([nil nil ((1945 . 1948)) nil (25938 33923 233013 115000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1956 1957 nil nil nil t nil)) nil 34 nil #s(yas--field 1 1956 1957 nil nil nil t nil) nil nil)) (1945 . 1968) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1945) (1945 . 1973) (#("New" 0 3 (fontified nil)) . 1945) (1945 . 1948) (#("NewDecoder" 0 10 (fontified nil)) . -1945) (1945 . 1955) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1945) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) 1948) nil (25938 33923 233011 832000) 0 nil])
([nil nil ((#("r io.Reader" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:property)) . 1957) (1956 . 1957)) nil (25938 33923 233008 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 1945 1958 #s(yas--snippet nil (#s(yas--field 1 1956 1957 nil nil nil t nil)) nil 34 nil #s(yas--field 1 1956 1957 nil nil nil t nil) nil nil))) nil (25938 33923 233008 240000) 0 nil])
([nil nil ((1958 . 1959)) nil (25938 33923 233007 701000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1958) (undo-tree-id2113 . -1) 1959) nil (25938 33923 233007 78000) 0 nil])
([nil nil ((1958 . 1960)) nil (25938 33923 233005 859000) 0 nil])
([nil nil ((1960 . 1967)) nil (25938 33923 233005 355000) 0 nil])
([nil nil ((1967 . 1969) (#(" " 0 1 (fontified nil)) . 1966) (undo-tree-id2112 . -1) (1967 . 1968)) nil (25938 33923 233004 619000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1960) (undo-tree-id2103 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1961) (undo-tree-id2104 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1962) (undo-tree-id2105 . -1) (#(" " 0 1 (fontified t)) . -1963) (undo-tree-id2106 . -1) (#(":" 0 1 (fontified t)) . -1964) (undo-tree-id2107 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1965) (undo-tree-id2108 . -1) (#("
" 0 1 (fontified t)) . -1966) (undo-tree-id2109 . -1) (#("	" 0 1 (fontified t)) . -1967) (undo-tree-id2110 . -1) (#("	" 0 1 (fontified t)) . -1968) (undo-tree-id2111 . -1) 1969) nil (25938 33923 233001 742000) 0 nil])
([nil nil ((1960 . 1976)) nil (25938 33923 232995 283000) 0 nil])
([nil nil ((apply yas--snippet-revive 1972 1979 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1972 . 1979) (#("Decoder" 0 7 (fontified nil)) . 1972) (1972 . 1979) (#("Deco" 0 4 (fontified nil)) . 1972) (1972 . 1976) (#("Decoder" 0 7 (fontified nil)) . -1972) (1972 . 1979) (#("Deco" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1972) (undo-tree-id2101 . -4) (undo-tree-id2102 . -4) 1976) nil (25938 33923 232993 823000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1967) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1968) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1969) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1970) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("." 0 1 (fontified t)) . -1971) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1972) (undo-tree-id2094 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1973) (undo-tree-id2095 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1974) (undo-tree-id2096 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1975) (undo-tree-id2097 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1976) (undo-tree-id2098 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1977) (undo-tree-id2099 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1978) (undo-tree-id2100 . -1) 1979) nil (25938 33923 232989 540000) 0 nil])
([nil nil ((1967 . 1975)) nil (25938 33923 232976 912000) 0 nil])
([nil nil ((#("
func parseJSON(payload *interface{}, r io.Reader) {
	decoder := json.NewDecoder(r)
	return decoder.
}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 15 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 23 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 23 24 (fontified t) 24 25 (fontified t face tree-sitter-hl-face:operator) 25 34 (fontified t face tree-sitter-hl-face:keyword) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 38 (fontified t) 38 39 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 39 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 49 (fontified t face tree-sitter-hl-face:type) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-1-face)) 52 53 (fontified t) 53 54 (fontified t) 54 61 (fontified t face tree-sitter-hl-face:variable) 61 62 (fontified t) 62 64 (fontified t face tree-sitter-hl-face:operator) 64 65 (fontified t) 65 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 80 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 80 81 (fontified t face (rainbow-delimiters-depth-2-face)) 81 82 (fontified t face tree-sitter-hl-face:variable) 82 83 (fontified t face (rainbow-delimiters-depth-2-face)) 83 84 (fontified t) 84 85 (fontified t) 85 91 (fontified t face tree-sitter-hl-face:keyword) 91 92 (fontified t) 92 99 (fontified t face tree-sitter-hl-face:variable) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t face (rainbow-delimiters-depth-1-face)) 102 103 (fontified t)) . 1875) (undo-tree-id2039 . -101) (undo-tree-id2040 . 3) (undo-tree-id2041 . -102) (undo-tree-id2042 . -100) (undo-tree-id2043 . -54) (undo-tree-id2044 . -81) (undo-tree-id2045 . -51) (undo-tree-id2046 . -84) (undo-tree-id2047 . -51) (undo-tree-id2048 . -84) (undo-tree-id2049 . -98) (undo-tree-id2050 . -51) (undo-tree-id2051 . -84) (undo-tree-id2052 . -99) (undo-tree-id2053 . -99) (undo-tree-id2054 . -99) (undo-tree-id2055 . -99) (undo-tree-id2056 . -99) (undo-tree-id2057 . -102) (undo-tree-id2058 . -100) (undo-tree-id2059 . -51) (undo-tree-id2060 . -84) (undo-tree-id2061 . -100) (undo-tree-id2062 . 3) (undo-tree-id2063 . -100) (undo-tree-id2064 . -100) (undo-tree-id2065 . -100) (undo-tree-id2066 . -101) (undo-tree-id2067 . -100) (undo-tree-id2068 . -100) (undo-tree-id2069 . -102) (undo-tree-id2070 . -99) (undo-tree-id2071 . -99) (undo-tree-id2072 . -99) (undo-tree-id2073 . -99) (undo-tree-id2074 . -6) (undo-tree-id2075 . -99) (undo-tree-id2076 . -99) (undo-tree-id2077 . -101) (undo-tree-id2078 . -101) (undo-tree-id2079 . -103) (undo-tree-id2080 . -101) (undo-tree-id2081 . -101) (undo-tree-id2082 . -101) (undo-tree-id2083 . -103)) nil (25938 33923 232973 257000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2257 . 2258) (nil fontified nil 2155 . 2258) (2155 . 2258) 2096 (t 25938 33923 250036 727000)) nil (25938 34057 4093 982000) 0 nil])
([nil nil ((#("
func parseJSON(payload *interface{}, r io.Reader) {
	decoder := json.NewDecoder(r)
	return decoder.
}
" 0 1 (fontified nil) 1 5 (fontified nil face tree-sitter-hl-face:keyword) 5 6 (fontified nil) 6 15 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 15 16 (fontified nil face (rainbow-delimiters-depth-2-face)) 16 23 (fontified nil face tree-sitter-hl-face:variable) 23 24 (fontified nil) 24 25 (fontified nil face tree-sitter-hl-face:operator) 25 34 (fontified nil face tree-sitter-hl-face:keyword) 34 35 (fontified nil face (rainbow-delimiters-depth-3-face)) 35 36 (fontified nil face (rainbow-delimiters-depth-3-face)) 36 38 (fontified nil) 38 39 (fontified nil face tree-sitter-hl-face:variable) 39 40 (fontified nil) 40 42 (fontified nil face tree-sitter-hl-face:variable) 42 43 (fontified nil) 43 49 (fontified nil face tree-sitter-hl-face:property) 49 50 (fontified nil face (rainbow-delimiters-depth-2-face)) 50 51 (fontified nil) 51 52 (fontified nil face (rainbow-delimiters-depth-2-face)) 52 54 (fontified nil) 54 61 (fontified nil face tree-sitter-hl-face:variable) 61 62 (fontified nil) 62 64 (fontified nil face tree-sitter-hl-face:operator) 64 65 (fontified nil) 65 69 (fontified nil face tree-sitter-hl-face:variable) 69 70 (fontified nil) 70 80 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 80 81 (fontified nil face (rainbow-delimiters-depth-3-face)) 81 82 (fontified nil face tree-sitter-hl-face:variable) 82 83 (fontified nil face (rainbow-delimiters-depth-3-face)) 83 85 (fontified nil) 85 91 (fontified nil face tree-sitter-hl-face:keyword) 91 92 (fontified nil) 92 99 (fontified nil face tree-sitter-hl-face:variable) 99 101 (fontified nil) 101 102 (fontified nil face (rainbow-delimiters-depth-2-face)) 102 103 (fontified nil rear-nonsticky nil)) . 2155) (undo-tree-id3388 . -103) (nil fontified t 2254 . 2256) (nil fontified t 2247 . 2254) (nil fontified t 2246 . 2247) (nil fontified t 2240 . 2246) (nil fontified t 2238 . 2240) (nil fontified t 2237 . 2238) (nil fontified t 2236 . 2237) (nil fontified t 2235 . 2236) (nil fontified t 2225 . 2235) (nil fontified t 2224 . 2225) (nil fontified t 2220 . 2224) (nil fontified t 2219 . 2220) (nil fontified t 2217 . 2219) (nil fontified t 2216 . 2217) (nil fontified t 2209 . 2216) (nil fontified t 2207 . 2209) (nil fontified t 2206 . 2207) (nil fontified t 2205 . 2206) (nil fontified t 2204 . 2205) (nil fontified t 2198 . 2204) (nil fontified t 2197 . 2198) (nil fontified t 2195 . 2197) (nil fontified t 2194 . 2195) (nil fontified t 2193 . 2194) (nil fontified t 2191 . 2193) (nil fontified t 2190 . 2191) (nil fontified t 2189 . 2190) (nil fontified t 2180 . 2189) (nil fontified t 2179 . 2180) (nil fontified t 2178 . 2179) (nil fontified t 2171 . 2178) (nil fontified t 2170 . 2171) (nil fontified t 2161 . 2170) (nil fontified t 2160 . 2161) (nil fontified t 2156 . 2160) (nil fontified t 2155 . 2156) (nil rear-nonsticky t 2257 . 2258)) nil (25938 34057 4092 85000) 0 nil])
([nil nil ((2076 . 2077) (t 25938 33923 250036 727000)) nil (25938 34057 4086 756000) 0 nil])
([nil nil ((2158 . 2160)) nil (25938 34057 4086 212000) 0 nil])
([nil nil ((2160 . 2175)) nil (25938 34057 4085 648000) 0 nil])
([nil nil ((apply yas--snippet-revive 2171 2179 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2171 . 2179) (#("database" 0 8 (fontified nil)) . 2171) (2171 . 2179) (#("data" 0 4 (fontified nil)) . 2171) (2171 . 2175) (#("database" 0 8 (fontified nil)) . -2171) (2171 . 2179) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2171) (undo-tree-id3386 . -4) (undo-tree-id3387 . -4) 2175) nil (25938 34057 4084 730000) 0 nil])
([nil nil ((2179 . 2183)) nil (25938 34057 4082 483000) 0 nil])
([nil nil ((apply yas--snippet-revive 2180 2211 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (2180 . 2211) (#("GetUserByEmailAndPasswordParams" 0 31 (fontified nil)) . 2180) (2180 . 2211) (#("get" 0 3 (fontified nil)) . 2180) (2180 . 2183) (#("GetUserByEmailAndPasswordParams" 0 31 (fontified nil)) . -2180) (2180 . 2211) (#("get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2180) (undo-tree-id3384 . -3) (undo-tree-id3385 . -3) 2183) nil (25938 34057 4081 396000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2212) (2212 . 2213) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2212) (2212 . 2213) (2211 . 2213)) nil (25938 34057 4078 443000) 0 nil])
([nil nil ((2212 . 2216)) nil (25938 34057 4077 731000) 0 nil])
([nil nil ((2217 . 2218)) nil (25938 34057 4077 259000) 0 nil])
([nil nil ((2003 . 2009)) nil (25938 34057 4076 893000) 0 nil])
([nil nil ((2222 . 2228)) nil (25938 34057 4076 225000) 0 nil])
([nil nil ((2087 . 2090)) nil (25938 34057 4075 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 2083 2093 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (2083 . 2093) (#("userParams" 0 10 (fontified nil)) . 2083) (2083 . 2093) (#("userPar" 0 7 (fontified nil)) . 2083) (2083 . 2090) (#("userParams" 0 10 (fontified nil)) . -2083) (2083 . 2093) (#("userPar" 0 7 (fontified t face tree-sitter-hl-face:variable)) . -2083) (undo-tree-id3382 . -7) (undo-tree-id3383 . -7) 2090) nil (25938 34057 4074 532000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2216) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2217) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2218) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2219) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2220) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2221) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2222) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2223) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . 1) (undo-tree-id3333 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2224) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2225) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2226) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2227) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2228) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2229) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2230) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2231) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2232) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2233) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2234) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . 1) (undo-tree-id3378 . -1) (#(";" 0 1 (fontified t)) . -2235) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) 2236) nil (25938 34057 4067 839000) 0 nil])
([nil nil ((2216 . 2217)) nil (25938 34057 4011 749000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2196) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2197) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2198) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2199) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2200) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2201) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2202) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2203) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2204) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2205) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2206) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2207) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2208) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2209) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2210) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2211) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2212) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2213) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2214) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2215) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2216) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) 2217) nil (25938 34057 4007 441000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2190) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (#("." 0 1 (fontified t)) . -2191) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2192) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2193) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2194) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2195) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) 2196) nil (25938 34057 3969 12000) 0 nil])
([nil nil ((2190 . 2192)) nil (25938 34057 3957 393000) 0 nil])
([nil nil ((apply yas--snippet-revive 2192 2199 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (2192 . 2199) (#("Queries" 0 7 (fontified nil)) . 2192) (2192 . 2199) (#("Queries" 0 7 (fontified nil)) . -2192) (2192 . 2199)) nil (25938 34057 3956 484000) 0 nil])
([nil nil ((2199 . 2200)) nil (25938 34057 3955 213000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2199) (undo-tree-id3212 . -1) 2200) nil (25938 34057 3954 597000) 0 nil])
([nil nil ((2199 . 2202)) nil (25938 34057 3953 526000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2200) (undo-tree-id3210 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2201) (undo-tree-id3211 . -1) 2202) nil (25938 34057 3952 843000) 0 nil])
([nil nil ((2200 . 2203)) nil (25938 34057 3951 40000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2200) (undo-tree-id3207 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2201) (undo-tree-id3208 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2202) (undo-tree-id3209 . -1) 2203) nil (25938 34057 3950 76000) 0 nil])
([nil nil ((2200 . 2201)) nil (25938 34057 3946 350000) 0 nil])
([nil nil ((2201 . 2203)) nil (25938 34057 3945 906000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2191) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (#("Q" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2192) (undo-tree-id3196 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2193) (undo-tree-id3197 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2194) (undo-tree-id3198 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2195) (undo-tree-id3199 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2196) (undo-tree-id3200 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2197) (undo-tree-id3201 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2198) (undo-tree-id3202 . -1) (#("." 0 1 (fontified t)) . -2199) (undo-tree-id3203 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2200) (undo-tree-id3204 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2201) (undo-tree-id3205 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2202) (undo-tree-id3206 . -1) 2203) nil (25938 34057 3943 791000) 0 nil])
([nil nil ((2191 . 2192)) nil (25938 34057 3934 420000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2196 2212 nil nil nil nil nil)) nil 40 nil #s(yas--field 1 2196 2212 nil nil nil nil nil) nil nil)) (2192 . 2213) (#("New(${1:db database.DBTX})" 0 26 (fontified nil)) . 2192) (2192 . 2218) (#("New" 0 3 (fontified nil)) . -2192) (2192 . 2195)) nil (25938 34057 3933 689000) 0 nil])
([nil nil ((apply yas--snippet-revive 2192 2213 #s(yas--snippet nil (#s(yas--field 1 2196 2212 nil nil nil nil nil)) nil 40 nil #s(yas--field 1 2196 2212 nil nil nil nil nil) nil nil))) nil (25938 34057 3932 309000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2192) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2193) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2194) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2195) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2196) (undo-tree-id2844 . 1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2197) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (#(" " 0 1 (fontified t)) . -2198) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2199) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2200) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2201) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2202) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2203) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2204) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2205) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2206) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (#("." 0 1 (fontified t)) . -2207) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2208) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2209) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2210) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (#("X" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2211) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2212) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . 1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) 2213) nil (25938 34057 3918 508000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2182) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2183) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2184) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2185) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2186) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2187) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2188) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2189) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2190) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (#("." 0 1 (fontified t)) . -2191) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) 2192) nil (25938 34057 3548 406000) 0 nil])
([nil nil ((2182 . 2183)) nil (25938 34057 2848 989000) 0 nil])
([nil nil ((2183 . 2185) (t 25938 34057 22072 323000)) nil (25938 34154 148651 821000) 0 nil])
([nil nil ((apply yas--snippet-revive 2185 2187 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (2185 . 2187) (#("DB" 0 2 (fontified nil)) . 2185) (2185 . 2187) (#("DB" 0 2 (fontified nil)) . -2185) (2185 . 2187)) nil (25938 34154 148650 762000) 0 nil])
([nil nil ((2187 . 2189)) nil (25938 34154 148649 624000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2187) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (#("." 0 1 (fontified t)) . -2188) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) 2189) nil (25938 34154 148648 794000) 0 nil])
([nil nil ((2187 . 2188)) nil (25938 34154 148645 688000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2214 2217 nil nil nil t #s(yas--field 2 2219 2229 nil nil nil t nil)) #s(yas--field 2 2219 2229 nil nil nil t nil)) nil 42 nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil nil)) (2188 . 2280) (#("GetUserByEmailAndPassword(${1:ctx context.Context}, ${2:arg database.GetUserByEmailAndPasswordParams})" 0 102 (fontified nil)) . 2188) (2188 . 2290) (#("GetUserByEmailAndPassword" 0 25 (fontified nil)) . -2188) (2188 . 2213)) nil (25938 34154 148644 741000) 0 nil])
([nil nil ((2215 . 2217) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 2215) (2214 . 2215)) nil (25938 34154 148643 602000) 0 nil])
([nil nil ((2220 . 2223) (#("arg database.GetUserByEmailAndPasswordParams" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 44 (fontified nil face tree-sitter-hl-face:property)) . 2220) (2219 . 2220)) nil (25938 34154 148642 762000) 0 nil])
([nil nil ((apply yas--snippet-revive 2219 2229 #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil)) (2219 . 2229) (#("userParams" 0 10 (fontified nil)) . 2219) (2219 . 2229) (#("user" 0 4 (fontified nil)) . 2219) (2219 . 2223) (#("userParams" 0 10 (fontified nil)) . -2219) (2219 . 2229) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2219) (undo-tree-id3409 . -4) (undo-tree-id3410 . -4) 2223) nil (25938 34154 148641 277000) 0 nil])
([nil nil ((apply yas--snippet-revive 2188 2230 #s(yas--snippet nil (#s(yas--field 1 2214 2217 nil nil nil t #s(yas--field 2 2219 2229 nil nil nil t nil)) #s(yas--field 2 2219 2229 nil nil nil t nil)) nil 42 nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil nil))) nil (25938 34154 148638 760000) 0 nil])
([nil nil ((2214 . 2216)) nil (25938 34154 148638 211000) 0 nil])
([nil nil ((2232 . 2234)) nil (25938 34154 148637 657000) 0 nil])
([nil nil ((2234 . 2237)) nil (25938 34154 148637 118000) 0 nil])
([nil nil ((2237 . 2244)) nil (25938 34154 148636 464000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2241) (undo-tree-id3406 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2242) (undo-tree-id3407 . -1) (#(" " 0 1 (fontified t)) . -2243) (undo-tree-id3408 . -1) 2244) nil (25938 34154 148635 428000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2249) (2249 . 2250) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2249) (2249 . 2250) (2241 . 2250)) nil (25938 34154 148632 62000) 0 nil])
([nil nil ((2250 . 2252) (2251 . 2252) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2250) (2250 . 2252) (2249 . 2251)) nil (25938 34154 148631 3000) 0 nil])
([nil nil ((2252 . 2258)) nil (25938 34154 148630 165000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2275 2276 nil nil nil t #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil))) #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil)) #s(yas--field 3 2283 2296 nil nil nil t nil)) nil 44 nil #s(yas--field 3 2283 2296 nil nil nil t nil) nil nil)) (2258 . 2319) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2258) (2258 . 2334) (#("RespondWithError" 0 16 (fontified nil)) . -2258) (2258 . 2274)) nil (25938 34154 148628 886000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2276) (2275 . 2276)) nil (25938 34154 148627 562000) 0 nil])
([nil nil ((2279 . 2281) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2279) (2278 . 2279)) nil (25938 34154 148626 477000) 0 nil])
([nil nil ((2284 . 2293) (2283 . 2285) (#("\"" 0 1 (fontified nil)) . -2283) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 2284) (2283 . 2284)) nil (25938 34154 148625 173000) 0 nil])
([nil nil ((2293 . 2295)) nil (25938 34154 148624 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 2258 2297 #s(yas--snippet nil (#s(yas--field 1 2275 2276 nil nil nil t #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil))) #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil)) #s(yas--field 3 2283 2296 nil nil nil t nil)) nil 44 nil #s(yas--field 3 2283 2296 nil nil nil t nil) nil nil))) nil (25938 34154 148623 712000) 0 nil])
([nil nil ((2232 . 2234)) nil (25938 34154 148622 879000) 0 nil])
([nil nil ((2234 . 2244)) nil (25938 34154 148622 6000) 0 nil])
([nil nil ((2244 . 2252)) nil (25938 34154 148621 163000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2249) (undo-tree-id3403 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2250) (undo-tree-id3404 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2251) (undo-tree-id3405 . -1) 2252) nil (25938 34154 148620 50000) 0 nil])
([nil nil ((2249 . 2253)) nil (25938 34154 148617 14000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2249) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2250) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2251) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -2252) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) 2253) nil (25938 34154 148615 62000) 0 nil])
([nil nil ((2249 . 2266)) nil (25938 34154 148594 785000) 0 nil])
([nil nil ((2334 . 2340) (t 25938 34154 166752 357000)) nil (25938 34173 216455 207000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2341) (2341 . 2342) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2341) (2341 . 2342) (2340 . 2342)) nil (25938 34173 216454 443000) 0 nil])
([nil nil ((2342 . 2344) (2343 . 2344) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2342) (2342 . 2344) (2341 . 2343)) nil (25938 34173 216453 444000) 0 nil])
([nil nil ((2344 . 2350)) nil (25938 34173 216452 102000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2366 2367 nil nil nil t #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil))) #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil)) #s(yas--field 3 2374 2378 nil nil nil t nil)) nil 45 nil #s(yas--field 3 2374 2378 nil nil nil t nil) nil nil)) (2350 . 2419) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2350) (2350 . 2435) (#("RespondWithJSON" 0 15 (fontified nil)) . -2350) (2350 . 2365)) nil (25938 34173 216450 906000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2367) (undo-tree-id3421 . -21) (undo-tree-id3422 . -2) (undo-tree-id3423 . -3) (2366 . 2367)) nil (25938 34173 216449 84000) 0 nil])
([nil nil ((2370 . 2372) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2370) (undo-tree-id3418 . -8) (undo-tree-id3419 . -5) (undo-tree-id3420 . -6) (2369 . 2370)) nil (25938 34173 216445 602000) 0 nil])
([nil nil ((2375 . 2378) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-4-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2375) (undo-tree-id3415 . -19) (undo-tree-id3416 . -8) (undo-tree-id3417 . -9) (2374 . 2375)) nil (25938 34173 216441 837000) 0 nil])
([nil nil ((apply yas--snippet-revive 2350 2379 #s(yas--snippet nil (#s(yas--field 1 2366 2367 nil nil nil t #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil))) #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil)) #s(yas--field 3 2374 2378 nil nil nil t nil)) nil 45 nil #s(yas--field 3 2374 2378 nil nil nil t nil) nil nil))) nil (25938 34173 216429 670000) 0 nil])
([nil nil ((1892 . 1894) (t 25938 34173 236150 771000)) nil (25938 34232 953808 512000) 0 nil])
([nil nil ((1894 . 1912)) nil (25938 34232 953807 462000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1899) (undo-tree-id3478 . -1) 1900) nil (25938 34232 953806 728000) 0 nil])
([nil nil ((1899 . 1900)) nil (25938 34232 953804 50000) 0 nil])
([nil nil ((1912 . 1916)) nil (25938 34232 953803 494000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1925) (1925 . 1926) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1925) (1925 . 1926) (1916 . 1926)) nil (25938 34232 953802 689000) 0 nil])
([nil nil ((1926 . 1927) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1926) (1926 . 1927) (1925 . 1927)) nil (25938 34232 953800 983000) 0 nil])
([nil nil ((1927 . 1929)) nil (25938 34232 953800 169000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1927) (undo-tree-id3476 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1928) (undo-tree-id3477 . -1) 1929) nil (25938 34232 953799 328000) 0 nil])
([nil nil ((1927 . 1938)) nil (25938 34232 953797 122000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id3474 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1937) (undo-tree-id3475 . -1) 1938) nil (25938 34232 953796 206000) 0 nil])
([nil nil ((1936 . 1937)) nil (25938 34232 953794 130000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id3473 . -1) 1937) nil (25938 34232 953793 372000) 0 nil])
([nil nil ((1936 . 1939)) nil (25938 34232 953792 4000) 0 nil])
([nil nil ((apply yas--snippet-revive 1936 1940 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (1936 . 1940) (#("User" 0 4 (fontified nil)) . 1936) (1936 . 1940) (#("Use" 0 3 (fontified nil)) . 1936) (1936 . 1939) (#("User" 0 4 (fontified nil)) . -1936) (1936 . 1940) (#("Use" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id3453 . -3) (undo-tree-id3454 . -3) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -3) (undo-tree-id3467 . -3) (undo-tree-id3468 . -3) (undo-tree-id3469 . -3) (undo-tree-id3470 . -3) (undo-tree-id3471 . -3) (undo-tree-id3472 . -3) 1939) nil (25938 34232 953790 414000) 0 nil])
([nil nil ((1940 . 1942)) nil (25938 34232 953776 197000) 0 nil])
([nil nil ((1942 . 1947)) nil (25938 34232 953775 595000) 0 nil])
([nil nil ((1947 . 1948) (#("	" 0 1 (fontified nil)) . -1941) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (1947 . 1948)) nil (25938 34232 953774 794000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1946) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (#(" " 0 1 (fontified t)) . -1947) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) 1948) nil (25938 34232 953768 962000) 0 nil])
([nil nil ((1941 . 1942)) nil (25938 34232 953746 707000) 0 nil])
([nil nil ((1942 . 1943)) nil (25938 34232 953746 93000) 0 nil])
([nil nil ((1948 . 1955)) nil (25938 34232 953742 488000) 0 nil])
([nil nil ((1891 . 1893) (t 25938 34232 971892 653000)) nil (25938 34319 45783 491000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1892) (undo-tree-id3635 . -1) 1893) nil (25938 34319 45782 632000) 0 nil])
([nil nil ((1892 . 1901)) nil (25938 34319 45781 394000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1900) (undo-tree-id3634 . -1) 1901) nil (25938 34319 45780 524000) 0 nil])
([nil nil ((1900 . 1902)) nil (25938 34319 45779 1000) 0 nil])
([nil nil ((1902 . 1907)) nil (25938 34319 45778 319000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1904) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1905) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1906) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) 1907) nil (25938 34319 45776 231000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1900) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (#(" " 0 1 (fontified t)) . -1901) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1902) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1903) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) 1904) nil (25938 34319 45741 537000) 0 nil])
([nil nil ((1632 . 1634) (t 25938 34319 64392 736000)) nil (25939 48980 735375 630000) 0 nil])
([nil nil ((1634 . 1637)) nil (25939 48980 735374 740000) 0 nil])
([nil nil ((apply yas--snippet-revive 1634 1650 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1634 . 1650) (#("createUserObject" 0 16 (fontified nil)) . 1634) (1634 . 1650) (#("cre" 0 3 (fontified nil)) . 1634) (1634 . 1637) (#("createUserObject" 0 16 (fontified nil)) . -1634) (1634 . 1650) (#("cre" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1634) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 1637) nil (25939 48980 735373 740000) 0 nil])
([nil nil ((1650 . 1651)) nil (25939 48980 735370 271000) 0 nil])
([nil nil ((apply yas--snippet-revive 1651 1659 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1651 . 1659) (#("Password" 0 8 (fontified nil)) . 1651) (1651 . 1659) (#("Password" 0 8 (fontified nil)) . -1651) (1651 . 1659)) nil (25939 48980 735369 373000) 0 nil])
([nil nil ((1659 . 1664)) nil (25939 48980 735368 389000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1663) (undo-tree-id18 . -1) 1664) nil (25939 48980 735367 663000) 0 nil])
([nil nil ((1663 . 1667)) nil (25939 48980 735366 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1662 1684 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1662 . 1684) (#("createUserObject.Email" 0 22 (fontified nil)) . 1662) (1662 . 1684) (#("creat" 0 5 (fontified nil)) . 1662) (1662 . 1667) (#("createUserObject.Email" 0 22 (fontified nil)) . -1662) (1662 . 1684) (#("creat" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -1662) (undo-tree-id16 . -5) (undo-tree-id17 . -5) 1667) nil (25939 48980 735365 188000) 0 nil])
([nil nil ((1684 . 1685)) nil (25939 48980 735361 570000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1679) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1680) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1681) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1682) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1683) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("." 0 1 (fontified t)) . -1684) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1685) nil (25939 48980 735360 198000) 0 nil])
([nil nil ((1679 . 1683)) nil (25939 48980 735351 868000) 0 nil])
([nil nil ((apply yas--snippet-revive 1679 1687 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1679 . 1687) (#("Password" 0 8 (fontified nil)) . 1679) (1679 . 1687) (#("Pass" 0 4 (fontified nil)) . 1679) (1679 . 1683) (#("Password" 0 8 (fontified nil)) . -1679) (1679 . 1687) (#("Pass" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1679) (undo-tree-id2 . -4) (undo-tree-id3 . -4) 1683) nil (25939 48980 735350 931000) 0 nil])
([nil nil ((184 . 186)) nil (25939 48980 735348 209000) 0 nil])
([nil nil ((186 . 188) (#("\"" 0 1 (fontified nil)) . -186) (186 . 187)) nil (25939 48980 735347 437000) 0 nil])
([nil nil ((368 . 370)) nil (25939 48980 735346 656000) 0 nil])
([nil nil ((370 . 372) (#("\"" 0 1 (fontified nil)) . -370) (370 . 371)) nil (25939 48980 735345 921000) 0 nil])
([nil nil ((371 . 376)) nil (25939 48980 735344 886000) 0 nil])
([nil nil ((apply yas--snippet-revive 371 382 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (371 . 382) (#("github.com/" 0 11 (fontified nil)) . 371) (371 . 382) (#("githu" 0 5 (fontified nil)) . 371) (371 . 376) (#("github.com/" 0 11 (fontified nil)) . -371) (371 . 382) (#("githu" 0 5 (face tree-sitter-hl-face:string fontified t)) . -371) (undo-tree-id0 . -5) (undo-tree-id1 . -5) 376) nil (25939 48980 735343 581000) 0 nil])
([nil nil ((382 . 391)) nil (25939 48980 735315 980000) 0 nil])
([nil nil ((391 . 397)) nil (25939 48980 735312 725000) 0 nil])
([nil nil ((#("	\"\"
" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:string fontified t) 3 4 (fontified t)) . 185) (undo-tree-id136 . -4) (undo-tree-id137 . 4) (undo-tree-id138 . -3) (t 25939 48980 752868 636000)) nil (25939 49003 561090 331000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -185) (undo-tree-id95 . -1) (undo-tree-id96 . 1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("	" 0 1 (fontified t)) . -186) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 187) nil (25939 49003 561086 194000) 0 nil])
([nil nil ((185 . 187)) nil (25939 49003 560998 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -184) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t)) . -185) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -186) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 187) nil (25939 49003 560995 69000) 0 nil])
([nil nil ((184 . 186)) nil (25939 49003 560936 929000) 0 nil])
([nil nil ((1691 . 1702) (t 25939 49003 578821 236000)) nil (25939 49035 999833 884000) 0 nil])
([nil nil ((apply yas--snippet-revive 1729 1749 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (#("ime\"
	\"t" 0 4 (face tree-sitter-hl-face:string fontified t) 4 6 (fontified t) 6 8 (face tree-sitter-hl-face:string fontified t)) . -107) (187 . 188) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -187) 188 (189 . 198) (362 . 392) (366 . 371) (#("ithub" 0 5 (face tree-sitter-hl-face:string fontified t)) . -367) (#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -373) (375 . 377) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -375) 376 (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1698 . 1718) (#("GenerateFromPassword" 0 20 (fontified nil)) . 1698) (1698 . 1718) (#("GenecreateUserObject" 0 4 (fontified nil) 4 20 (face tree-sitter-hl-face:property fontified nil)) . 1698) (1698 . 1702) (#("GenerateFromPassword" 0 20 (fontified nil)) . -1698) (1698 . 1718) (#("Gene" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1698) (undo-tree-id144 . -4) (undo-tree-id145 . -4) 1702) nil (25939 49035 999832 47000) 0 nil])
([nil nil ((1749 . 1751)) nil (25939 49035 999826 612000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1750) (undo-tree-id141 . -1) (undo-tree-id142 . 1) (undo-tree-id143 . -1) 1751) nil (25939 49035 999825 523000) 0 nil])
([nil nil ((1750 . 1753)) nil (25939 49035 999822 428000) 0 nil])
([nil nil ((apply yas--snippet-revive 1750 1766 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1750 . 1766) (#("createUserObject" 0 16 (fontified nil)) . 1750) (1750 . 1766) (#("cre" 0 3 (fontified nil)) . 1750) (1750 . 1753) (#("createUserObject" 0 16 (fontified nil)) . -1750) (1750 . 1766) (#("cre" 0 3 (fontified t)) . -1750) (undo-tree-id139 . -3) (undo-tree-id140 . -3) 1753) nil (25939 49035 999820 835000) 0 nil])
([nil nil ((1775 . 1776) (#(")" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1775) (1775 . 1776)) nil (25939 49035 999808 125000) 0 nil])
([nil nil ((1719 . 1724) (t 25939 49036 17753 900000)) nil (25939 49088 349875 205000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1723) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 1724) nil (25939 49088 349874 139000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1721) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1722) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 1723) nil (25939 49088 349871 939000) 0 nil])
([nil nil ((1721 . 1725)) nil (25939 49088 349868 453000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1719) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#(" " 0 1 (fontified t)) . -1720) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1721) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1722) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1723) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1724) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 1725) nil (25939 49088 349866 767000) 0 nil])
([nil nil ((1752 . 1758) (#("]" 0 1 (fontified nil)) . -1751) (1751 . 1752) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1751) (1751 . 1752) (1750 . 1752)) nil (25939 49088 349857 300000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1757) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . 1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 1758) nil (25939 49088 349855 162000) 0 nil])
([nil nil ((1782 . 1786) (#(")" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1782) (1782 . 1783)) nil (25939 49088 349841 365000) 0 nil])
([nil nil (1786) nil (25939 49134 564318 212000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1701) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1702) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1703) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1704) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1705) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1706) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1707) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1708) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1709) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("." 0 1 (fontified nil)) . -1710) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1711) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1712) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1713) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1714) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1715) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1716) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1717) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1718) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -1719) (undo-tree-id224 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1720) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -1721) (undo-tree-id226 . -1) 1722 (t 25939 49088 368172 371000)) nil (25939 49134 564314 595000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1694) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1695) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1696) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1697) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1698) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1699) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1700) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 1701) nil (25939 49134 564288 59000) 0 nil])
([nil nil ((1694 . 1696)) nil (25939 49134 564278 714000) 0 nil])
([nil nil ((1696 . 1708)) nil (25939 49134 564278 316000) 0 nil])
([nil nil ((1773 . 1775)) nil (25939 49134 564277 884000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1791) (1791 . 1792) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1791) (1791 . 1792) (1775 . 1792)) nil (25939 49134 564277 173000) 0 nil])
([nil nil ((1792 . 1794) (1793 . 1794) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1792) (1792 . 1794) (1791 . 1793)) nil (25939 49134 564276 257000) 0 nil])
([nil nil ((1794 . 1799)) nil (25939 49134 564275 537000) 0 nil])
([nil nil ((1799 . 1800)) nil (25939 49134 564274 969000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1817 1818 nil nil nil t #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil))) #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil)) #s(yas--field 3 1825 1848 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1825 1848 nil nil nil t nil) nil nil)) (1800 . 1861) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1800) (1800 . 1876) (#("RespondWithError" 0 16 (fontified nil)) . -1800) (1800 . 1816)) nil (25939 49134 564274 191000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1818) (undo-tree-id173 . -21) (1817 . 1818)) nil (25939 49134 564273 137000) 0 nil])
([nil nil ((1821 . 1823) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1821) (undo-tree-id172 . -8) (1820 . 1821)) nil (25939 49134 564271 486000) 0 nil])
([nil nil ((1826 . 1838) (1825 . 1827) (#("\"" 0 1 (fontified nil)) . -1825) (undo-tree-id170 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 1826) (undo-tree-id171 . -10) (1825 . 1826)) nil (25939 49134 564269 485000) 0 nil])
([nil nil ((1838 . 1847)) nil (25939 49134 564260 768000) 0 nil])
([nil nil ((apply yas--snippet-revive 1800 1849 #s(yas--snippet nil (#s(yas--field 1 1817 1818 nil nil nil t #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil))) #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil)) #s(yas--field 3 1825 1848 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1825 1848 nil nil nil t nil) nil nil))) nil (25939 49134 564256 642000) 0 nil])
([nil nil ((1773 . 1775) (t 25939 49134 581984 905000)) nil (25939 49146 905885 394000) 0 nil])
([nil nil ((1775 . 1781)) nil (25939 49146 905884 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 1775 1791 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (1775 . 1791) (#("createUserObject" 0 16 (fontified nil)) . 1775) (1775 . 1791) (#("create" 0 6 (fontified nil)) . 1775) (1775 . 1781) (#("createUserObject" 0 16 (fontified nil)) . -1775) (1775 . 1791) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1775) (undo-tree-id233 . -6) (undo-tree-id234 . -6) 1781) nil (25939 49146 905883 185000) 0 nil])
([nil nil ((1791 . 1796)) nil (25939 49146 905879 825000) 0 nil])
([nil nil ((apply yas--snippet-revive 1792 1800 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (1792 . 1800) (#("Password" 0 8 (fontified nil)) . 1792) (1792 . 1800) (#("Pass" 0 4 (fontified nil)) . 1792) (1792 . 1796) (#("Password" 0 8 (fontified nil)) . -1792) (1792 . 1800) (#("Pass" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1792) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) 1796) nil (25939 49146 905877 820000) 0 nil])
([nil nil ((1800 . 1807)) nil (25939 49146 905862 794000) 0 nil])
([nil nil ((#("A" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2530) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2531) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2532) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (#("P" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2533) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2534) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2535) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2536) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("w" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2537) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2538) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2539) (undo-tree-id583 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2540) (undo-tree-id584 . -1) 2541 (t 25939 49146 925158 751000)) nil (25939 49857 178003 962000) 0 nil])
([nil nil ((2530 . 2541)) nil (25939 49857 177989 840000) 0 nil])
([nil nil ((#("A" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2530) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2531) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2532) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("P" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2533) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil)) . -2534) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil)) . -2535) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil)) . -2536) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("w" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2537) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2538) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2539) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2540) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) 2541 (t 25939 49146 925158 751000)) nil (25939 49857 177986 482000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2364) (undo-tree-id490 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2365) (undo-tree-id491 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2366) (undo-tree-id492 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2367) (undo-tree-id493 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2368) (undo-tree-id494 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2369) (undo-tree-id495 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2370) (undo-tree-id496 . -1) (#("w" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2371) (undo-tree-id497 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2372) (undo-tree-id498 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2373) (undo-tree-id499 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2374) (undo-tree-id500 . -1) 2375) nil (25939 49857 177946 99000) 0 nil])
([nil nil ((2220 . 2222)) nil (25939 49857 177938 775000) 0 nil])
([nil nil ((2222 . 2227)) nil (25939 49857 177938 281000) 0 nil])
([nil nil ((2227 . 2243)) nil (25939 49857 177937 836000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2241) (undo-tree-id488 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2242) (undo-tree-id489 . -1) 2243) nil (25939 49857 177937 134000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2245) (2245 . 2246) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2245) (2245 . 2246) (2241 . 2246)) nil (25939 49857 177934 762000) 0 nil])
([nil nil ((2246 . 2247) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2246) (2246 . 2247) (2245 . 2247)) nil (25939 49857 177933 673000) 0 nil])
([nil nil ((2247 . 2259)) nil (25939 49857 177932 545000) 0 nil])
([nil nil ((apply yas--snippet-revive 2253 2259 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (2253 . 2259) (#("string" 0 6 (fontified nil)) . 2253) (2253 . 2259) (#("string" 0 6 (fontified nil)) . 2253) (2253 . 2259) (#("string" 0 6 (face tree-sitter-hl-face:type fontified t)) . -2253) (undo-tree-id486 . -6) (undo-tree-id487 . -6) 2259) nil (25939 49857 177931 603000) 0 nil])
([nil nil ((2259 . 2261)) nil (25939 49857 177929 368000) 0 nil])
([nil nil ((2261 . 2276)) nil (25939 49857 177928 769000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2247) (undo-tree-id485 . -1) 2248) nil (25939 49857 177928 31000) 0 nil])
([nil nil ((2247 . 2248)) nil (25939 49857 177926 570000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2261) (undo-tree-id484 . -1) 2262) nil (25939 49857 177925 901000) 0 nil])
([nil nil ((2261 . 2262)) nil (25939 49857 177924 636000) 0 nil])
([nil nil ((2261 . 2267) (2260 . 2262) (#("`" 0 1 (fontified nil)) . -2260) (2259 . 2261)) nil (25939 49857 177923 972000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -2266) (undo-tree-id483 . -1) 2267) nil (25939 49857 177923 38000) 0 nil])
([nil nil ((2267 . 2270) (2266 . 2268) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2266) (2266 . 2267)) nil (25939 49857 177920 164000) 0 nil])
([nil nil ((2270 . 2272)) nil (25939 49857 177919 267000) 0 nil])
([nil nil ((2299 . 2307) (2298 . 2300) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2298) (2293 . 2299) (2292 . 2294) (#("`" 0 1 (fontified nil)) . -2292) (2291 . 2293)) nil (25939 49857 177918 452000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2441) (undo-tree-id463 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2442) (undo-tree-id464 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2443) (undo-tree-id465 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2444) (undo-tree-id466 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2445) (undo-tree-id467 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2446) (undo-tree-id468 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2447) (undo-tree-id469 . -1) (#("B" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2448) (undo-tree-id470 . -1) (#("y" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2449) (undo-tree-id471 . -1) (#("E" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2450) (undo-tree-id472 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2451) (undo-tree-id473 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2452) (undo-tree-id474 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2453) (undo-tree-id475 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2454) (undo-tree-id476 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2455) (undo-tree-id477 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2456) (undo-tree-id478 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2457) (undo-tree-id479 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2458) (undo-tree-id480 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2459) (undo-tree-id481 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2460) (undo-tree-id482 . -1) 2461) nil (25939 49857 177915 402000) 0 nil])
([nil nil ((2441 . 2450)) nil (25939 49857 177902 133000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2432) (undo-tree-id454 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2433) (undo-tree-id455 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2434) (undo-tree-id456 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2435) (undo-tree-id457 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2436) (undo-tree-id458 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2437) (undo-tree-id459 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2438) (undo-tree-id460 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2439) (undo-tree-id461 . -1) (#("." 0 1 (fontified t)) . -2440) (undo-tree-id462 . -1) 2441) nil (25939 49857 177900 553000) 0 nil])
([nil nil ((2556 . 2558)) nil (25939 49857 177892 235000) 0 nil])
([nil nil ((2422 . 2425)) nil (25939 49857 177891 784000) 0 nil])
([nil nil ((2561 . 2569)) nil (25939 49857 177891 237000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2568) (undo-tree-id453 . -1) 2569) nil (25939 49857 177890 690000) 0 nil])
([nil nil ((2568 . 2574)) nil (25939 49857 177889 378000) 0 nil])
([nil nil ((apply yas--snippet-revive 2570 2578 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (2570 . 2578) (#("database" 0 8 (fontified nil)) . 2570) (2570 . 2578) (#("data" 0 4 (fontified nil)) . 2570) (2570 . 2574) (#("database" 0 8 (fontified nil)) . -2570) (2570 . 2578) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2570) (undo-tree-id451 . -4) (undo-tree-id452 . -4) 2574) nil (25939 49857 177888 420000) 0 nil])
([nil nil ((2578 . 2579)) nil (25939 49857 177885 940000) 0 nil])
([nil nil ((2579 . 2587)) nil (25939 49857 177885 493000) 0 nil])
([nil nil ((#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2586) (undo-tree-id450 . -1) 2587) nil (25939 49857 177884 981000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2578) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2579) (undo-tree-id443 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2580) (undo-tree-id444 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2581) (undo-tree-id445 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2582) (undo-tree-id446 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2583) (undo-tree-id447 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2584) (undo-tree-id448 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2585) (undo-tree-id449 . -1) 2586) nil (25939 49857 177882 851000) 0 nil])
([nil nil ((2578 . 2582)) nil (25939 49857 177865 367000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2581) (undo-tree-id440 . -1) 2582) nil (25939 49857 177864 794000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2568) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#(" " 0 1 (fontified t)) . -2569) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2570) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2571) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2572) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2573) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2574) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2575) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2576) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2577) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("." 0 1 (fontified t)) . -2578) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2579) (undo-tree-id438 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2580) (undo-tree-id439 . -1) 2581) nil (25939 49857 177861 843000) 0 nil])
([nil nil ((2568 . 2575)) nil (25939 49857 177846 474000) 0 nil])
([nil nil ((apply yas--snippet-revive 2571 2579 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (2571 . 2579) (#("database" 0 8 (fontified nil)) . 2571) (2571 . 2579) (#("data" 0 4 (fontified nil)) . 2571) (2571 . 2575) (#("database" 0 8 (fontified nil)) . -2571) (2571 . 2579) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2571) (undo-tree-id414 . -4) (undo-tree-id415 . -4) 2575) nil (25939 49857 177845 431000) 0 nil])
([nil nil ((2579 . 2584)) nil (25939 49857 177842 964000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2563) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2564) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2565) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2566) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#(" " 0 1 (fontified t)) . -2567) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#(":" 0 1 (fontified t)) . -2568) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2569) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#(" " 0 1 (fontified t)) . -2570) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2571) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2572) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2573) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2574) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2575) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2576) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -2577) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2578) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("." 0 1 (fontified t)) . -2579) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2580) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2581) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2582) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2583) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) 2584) nil (25939 49857 177838 269000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2559) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("	" 0 1 (fontified t)) . -2560) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2561) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2562) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 2563) nil (25939 49857 177760 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2600) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2601) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2602) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2603) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2604) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("P" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2605) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2606) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2607) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2608) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2609) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2610) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 2611) nil (25939 49857 177746 842000) 0 nil])
([nil nil ((2600 . 2607)) nil (25939 49857 177552 471000) 0 nil])
([nil nil ((apply yas--snippet-revive 2601 2620 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (2601 . 2620) (#("userReqParams.Email" 0 19 (fontified nil)) . 2601) (2601 . 2620) (#("userRe" 0 6 (fontified nil)) . 2601) (2601 . 2607) (#("userReqParams.Email" 0 19 (fontified nil)) . -2601) (2601 . 2620) (#("userRe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2601) (undo-tree-id254 . -6) (undo-tree-id255 . -6) 2607) nil (25939 49857 177551 258000) 0 nil])
([nil nil ((2621 . 2623)) nil (25939 49857 177548 539000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2621) (undo-tree-id252 . -1) (#("	" 0 1 (fontified t)) . -2622) (undo-tree-id253 . -1) 2623) nil (25939 49857 177547 889000) 0 nil])
([nil nil ((2768 . 2771)) nil (25939 49857 177546 255000) 0 nil])
([nil nil ((2720 . 2723)) nil (25939 49857 177545 823000) 0 nil])
([nil nil ((2723 . 2729)) nil (25939 49857 177545 344000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2732) (undo-tree-id245 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2733) (undo-tree-id246 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2734) (undo-tree-id247 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2735) (undo-tree-id248 . -1) (#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2736) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t)) . -2737) (undo-tree-id250 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2738) (undo-tree-id251 . -1) 2739) nil (25939 49857 177543 910000) 0 nil])
([nil nil ((2732 . 2734)) nil (25939 49857 177538 338000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2732) (undo-tree-id243 . -1) (#("	" 0 1 (fontified t)) . -2733) (undo-tree-id244 . -1) 2734) nil (25939 49857 177537 657000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2734) (undo-tree-id242 . -1) 2735) nil (25939 49857 177535 833000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2770) (undo-tree-id235 . -1) (#("	" 0 1 (fontified t)) . -2771) (undo-tree-id236 . -1) (#("
" 0 1 (fontified t)) . -2772) (undo-tree-id237 . -1) (#("	" 0 1 (fontified t)) . -2773) (undo-tree-id238 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2774) (undo-tree-id239 . -1) (undo-tree-id240 . 1) (undo-tree-id241 . -1) 2775) nil (25939 49857 177533 660000) 0 nil])
([nil nil ((2770 . 2772)) nil (25939 49857 177520 423000) 0 nil])
([nil nil ((2478 . 2481)) nil (25939 49857 177516 721000) 0 nil])
([nil nil ((2735 . 2737) (t 25939 49857 198316 703000)) nil (25939 50194 222429 555000) 0 nil])
([nil nil ((2737 . 2751)) nil (25939 50194 222428 916000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2737) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2738) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2739) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2740) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("," 0 1 (fontified t)) . -2741) (undo-tree-id635 . -1) (#(" " 0 1 (fontified t)) . -2742) (undo-tree-id636 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2743) (undo-tree-id637 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2744) (undo-tree-id638 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2745) (undo-tree-id639 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2746) (undo-tree-id640 . -1) (#(" " 0 1 (fontified t)) . -2747) (undo-tree-id641 . -1) (#(":" 0 1 (fontified t)) . -2748) (undo-tree-id642 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2749) (undo-tree-id643 . -1) (#(" " 0 1 (fontified t)) . -2750) (undo-tree-id644 . -1) 2751) nil (25939 50194 222426 281000) 0 nil])
([nil nil ((2737 . 2744)) nil (25939 50194 222413 890000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2740) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2741) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2742) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2743) (undo-tree-id625 . -1) (undo-tree-id626 . -1) 2744) nil (25939 50194 222412 368000) 0 nil])
([nil nil ((2740 . 2744)) nil (25939 50194 222407 260000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2740) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2741) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2742) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2743) (undo-tree-id617 . -1) (undo-tree-id618 . -1) 2744) nil (25939 50194 222406 101000) 0 nil])
([nil nil ((2740 . 2743)) nil (25939 50194 222401 178000) 0 nil])
([nil nil ((apply yas--snippet-revive 2740 2746 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (2740 . 2746) (#("bcrypt" 0 6 (fontified nil)) . 2740) (2740 . 2746) (#("bcr" 0 3 (fontified nil)) . 2740) (2740 . 2743) (#("bcrypt" 0 6 (fontified nil)) . -2740) (2740 . 2746) (#("bcr" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2740) (undo-tree-id609 . -3) (undo-tree-id610 . -3) 2743) nil (25939 50194 222400 210000) 0 nil])
([nil nil ((2746 . 2747)) nil (25939 50194 222397 877000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) #s(yas--field 2 2785 2807 nil nil nil t nil)) nil 15 nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil nil)) (2747 . 2809) (#("CompareHashAndPassword(${1:hashedPassword []byte}, ${2:password []byte})" 0 72 (fontified nil)) . 2747) (2747 . 2819) (#("CompareHashAndPassword" 0 22 (fontified nil)) . -2747) (2747 . 2769)) nil (25939 50194 222396 741000) 0 nil])
([nil nil ((2771 . 2772) (#("hashedPassword []byte" 0 14 (face tree-sitter-hl-face:variable fontified nil) 14 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-3-face) fontified nil) 16 17 (face (rainbow-delimiters-depth-3-face) fontified nil) 17 21 (face tree-sitter-hl-face:type fontified nil)) . 2771) (2770 . 2771)) nil (25939 50194 222395 680000) 0 nil])
([nil nil ((2772 . 2775)) nil (25939 50194 222395 41000) 0 nil])
([nil nil ((apply yas--snippet-revive 2775 2783 #s(yas--snippet nil nil nil 16 nil nil #s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil #s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) nil)) (2775 . 2783) (#("Password" 0 8 (fontified nil)) . 2775) (2775 . 2783) (#("Password" 0 8 (fontified nil)) . -2775) (2775 . 2783)) nil (25939 50194 222394 239000) 0 nil])
([nil nil ((#("password []byte" 0 8 (face tree-sitter-hl-face:type fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 15 (face tree-sitter-hl-face:type fontified t)) . 2785)) nil (25939 50194 222393 73000) 0 nil])
([nil nil ((2785 . 2789)) nil (25939 50194 222392 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 2785 2798 #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (2785 . 2798) (#("userReqParams" 0 13 (fontified nil)) . 2785) (2785 . 2798) (#("user" 0 4 (fontified nil)) . 2785) (2785 . 2789) (#("userReqParams" 0 13 (fontified nil)) . -2785) (2785 . 2798) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2785) (undo-tree-id607 . -4) (undo-tree-id608 . -4) 2789) nil (25939 50194 222391 705000) 0 nil])
([nil nil ((2798 . 2799)) nil (25939 50194 222389 103000) 0 nil])
([nil nil ((apply yas--snippet-revive 2799 2807 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (2799 . 2807) (#("Password" 0 8 (fontified nil)) . 2799) (2799 . 2807) (#("Password" 0 8 (fontified nil)) . -2799) (2799 . 2807)) nil (25939 50194 222388 466000) 0 nil])
([nil nil ((apply yas--snippet-revive 2747 2808 #s(yas--snippet nil (#s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) #s(yas--field 2 2785 2807 nil nil nil t nil)) nil 15 nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil nil))) nil (25939 50194 222387 520000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -2772) (2772 . 2773) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2772) (2772 . 2773) (2770 . 2773)) nil (25939 50194 222386 980000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2770) (undo-tree-id606 . -1) 2771) nil (25939 50194 222386 54000) 0 nil])
([nil nil ((2772 . 2778)) nil (25939 50194 222384 983000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2777) (undo-tree-id603 . -1) (undo-tree-id604 . 1) (undo-tree-id605 . -1) 2778) nil (25939 50194 222384 352000) 0 nil])
([nil nil ((2790 . 2791) (#(")" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -2790) (2790 . 2791)) nil (25939 50194 222328 664000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -2794) (2794 . 2795) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2794) (2794 . 2795) (2793 . 2795)) nil (25939 50194 222327 880000) 0 nil])
([nil nil ((2795 . 2801)) nil (25939 50194 222327 124000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2800) (undo-tree-id600 . -1) (undo-tree-id601 . 1) (undo-tree-id602 . -1) 2801) nil (25939 50194 222326 386000) 0 nil])
([nil nil ((2823 . 2824) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2823) (2823 . 2824)) nil (25939 50194 222323 953000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2833) (2833 . 2834) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2833) (2833 . 2834) (2824 . 2834)) nil (25939 50194 222323 57000) 0 nil])
([nil nil ((2834 . 2836) (2835 . 2836) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2834) (2834 . 2836) (2833 . 2835)) nil (25939 50194 222321 999000) 0 nil])
([nil nil ((2836 . 2842)) nil (25939 50194 222321 273000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2858 2859 nil nil nil t #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil))) #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil)) #s(yas--field 3 2866 2870 nil nil nil t nil)) nil 19 nil #s(yas--field 3 2866 2870 nil nil nil t nil) nil nil)) (2842 . 2911) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2842) (2842 . 2927) (#("RespondWithJSON" 0 15 (fontified nil)) . -2842) (2842 . 2857)) nil (25939 50194 222320 386000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2859) (2858 . 2859)) nil (25939 50194 222319 432000) 0 nil])
([nil nil ((2862 . 2864) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2862) (2861 . 2862)) nil (25939 50194 222318 821000) 0 nil])
([nil nil ((2867 . 2870) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2867) (2866 . 2867)) nil (25939 50194 222318 126000) 0 nil])
([nil nil ((apply yas--snippet-revive 2842 2871 #s(yas--snippet nil (#s(yas--field 1 2858 2859 nil nil nil t #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil))) #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil)) #s(yas--field 3 2866 2870 nil nil nil t nil)) nil 19 nil #s(yas--field 3 2866 2870 nil nil nil t nil) nil nil))) nil (25939 50194 222317 401000) 0 nil])
([nil nil ((2311 . 2313)) nil (25939 50194 222316 858000) 0 nil])
([nil nil ((2313 . 2318)) nil (25939 50194 222316 395000) 0 nil])
([nil nil ((2232 . 2235) 2230) nil (25939 50194 222315 934000) 0 nil])
([nil nil ((2314 . 2316)) nil (25939 50194 222315 365000) 0 nil])
([nil nil ((2316 . 2335)) nil (25939 50194 222314 938000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2342) (2342 . 2343) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2342) (2342 . 2343) (2335 . 2343)) nil (25939 50194 222314 211000) 0 nil])
([nil nil ((2343 . 2344) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2343) (2343 . 2344) (2342 . 2344)) nil (25939 50194 222313 97000) 0 nil])
([nil nil ((2344 . 2358)) nil (25939 50194 222312 411000) 0 nil])
([nil nil ((#("<" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2357) (undo-tree-id599 . -1) 2358) nil (25939 50194 222311 645000) 0 nil])
([nil nil ((2364 . 2369) (2363 . 2365) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2363) (2358 . 2364) (2357 . 2359) (#("`" 0 1 (fontified nil)) . -2357) (2357 . 2358)) nil (25939 50194 222310 159000) 0 nil])
([nil nil ((2371 . 2373)) nil (25939 50194 222309 54000) 0 nil])
([nil nil ((2373 . 2374)) nil (25939 50194 222308 448000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2373) (undo-tree-id598 . -1) 2374) nil (25939 50194 222307 654000) 0 nil])
([nil nil ((2342 . 2344)) nil (25939 50194 222306 165000) 0 nil])
([nil nil ((2344 . 2346)) nil (25939 50194 222305 770000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2345) (undo-tree-id597 . -1) 2346) nil (25939 50194 222305 213000) 0 nil])
([nil nil ((2345 . 2348)) nil (25939 50194 222304 65000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2347) (undo-tree-id596 . -1) 2348) nil (25939 50194 222303 424000) 0 nil])
([nil nil ((2347 . 2351)) nil (25939 50194 222302 106000) 0 nil])
([nil nil ((apply yas--snippet-revive 2347 2356 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (2347 . 2356) (#("uuid.UUID" 0 9 (fontified nil)) . 2347) (2347 . 2356) (#("UUID" 0 4 (fontified nil)) . 2347) (2347 . 2351) (#("uuid.UUID" 0 9 (fontified nil)) . -2347) (2347 . 2356) (#("UUID" 0 4 (face tree-sitter-hl-face:type fontified t)) . -2347) (undo-tree-id594 . -4) (undo-tree-id595 . -4) 2351) nil (25939 50194 222301 27000) 0 nil])
([nil nil ((2356 . 2357)) nil (25939 50194 222298 265000) 0 nil])
([nil nil ((2364 . 2366) (2363 . 2365) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2363) (2358 . 2364) (2357 . 2359) (#("`" 0 1 (fontified nil)) . -2357) (2357 . 2358)) nil (25939 50194 222297 408000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2347) (undo-tree-id585 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2348) (undo-tree-id586 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2349) (undo-tree-id587 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2350) (undo-tree-id588 . -1) (#("." 0 1 (fontified t)) . -2351) (undo-tree-id589 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2352) (undo-tree-id590 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2353) (undo-tree-id591 . -1) (#("I" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2354) (undo-tree-id592 . -1) (#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2355) (undo-tree-id593 . -1) 2356) nil (25939 50194 222294 878000) 0 nil])
([nil nil ((2347 . 2353)) nil (25939 50194 222276 962000) 0 nil])
([nil nil ((2394 . 2396) (t 25939 50194 244637 155000)) nil (25939 50230 402776 253000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2396) (undo-tree-id654 . -1) (#("	" 0 1 (fontified t)) . -2397) (undo-tree-id655 . -1) 2398) nil (25939 50230 402774 986000) 0 nil])
([nil nil ((#("	Id string `json:\"id\"`
" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:property fontified t) 3 4 (fontified t) 4 10 (face tree-sitter-hl-face:type fontified t) 10 11 (fontified t) 11 17 (face tree-sitter-hl-face:string fontified t) 17 21 (face tree-sitter-hl-face:string fontified t) 21 22 (face tree-sitter-hl-face:string fontified t) 22 23 (fontified t)) . 2343) (undo-tree-id649 . 22) (undo-tree-id650 . -22) (undo-tree-id651 . 13) (undo-tree-id652 . -10) (undo-tree-id653 . -1)) nil (25939 50230 402772 530000) 0 nil])
([nil nil ((2373 . 2385)) nil (25939 50230 402767 505000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2373) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 2374) nil (25939 50230 402766 314000) 0 nil])
([nil nil ((2373 . 2374)) nil (25939 50230 402755 263000) 0 nil])
([nil nil ((2393 . 2398) (2392 . 2394) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2392) (2387 . 2393) (2386 . 2388) (#("`" 0 1 (fontified nil)) . -2386) (2385 . 2387)) nil (25939 50230 402751 28000) 0 nil])
([nil nil ((2400 . 2402) (t 25939 50230 415742 254000)) nil (25939 50252 226153 365000) 0 nil])
([nil nil ((2402 . 2416)) nil (25939 50252 226152 440000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2412) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2413) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2414) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2415) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) 2416) nil (25939 50252 226150 420000) 0 nil])
([nil nil ((#("	CreatedAt 
" 0 1 (fontified t) 1 10 (face tree-sitter-hl-face:type fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 2401) (undo-tree-id656 . 1) (undo-tree-id657 . -11) (undo-tree-id658 . -11) (undo-tree-id659 . -10) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . 1) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -1) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -10) (undo-tree-id677 . -10) (undo-tree-id678 . -10) (undo-tree-id679 . -10) (undo-tree-id680 . -10) (undo-tree-id681 . -12) 2411) nil (25939 50252 226125 936000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2343 . 2344) (#("
" 0 1 (fontified nil)) . -2493) (2342 . 2494) 2341 (t 25939 50252 245803 743000)) nil (25939 50289 465485 222000) 0 nil])
([nil nil ((#("	Email string `json:\"email\"`
	Token string `json:\"token\"`
" 0 1 (fontified t) 1 6 (face tree-sitter-hl-face:property fontified t) 6 7 (fontified t) 7 13 (face tree-sitter-hl-face:type fontified t) 13 14 (fontified t) 14 20 (face tree-sitter-hl-face:string fontified t) 20 27 (face tree-sitter-hl-face:string fontified t) 27 28 (face tree-sitter-hl-face:string fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (face tree-sitter-hl-face:property fontified t) 31 35 (face tree-sitter-hl-face:property fontified t) 35 36 (fontified t) 36 42 (face tree-sitter-hl-face:type fontified t) 42 43 (fontified t) 43 49 (face tree-sitter-hl-face:string fontified t) 49 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face tree-sitter-hl-face:string fontified t) 57 58 (fontified t)) . 2494) (undo-tree-id713 . -30) (undo-tree-id714 . -57) (undo-tree-id715 . -30) (undo-tree-id716 . -1) (undo-tree-id717 . -30) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -30) (undo-tree-id724 . -58) (undo-tree-id725 . -1) (undo-tree-id726 . -30) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -29) (undo-tree-id730 . -30) (undo-tree-id731 . -30) (undo-tree-id732 . -30) (undo-tree-id733 . -35) (undo-tree-id734 . -30) (undo-tree-id735 . -30) (undo-tree-id736 . -30) (undo-tree-id737 . -58) 2524) nil (25939 50289 465481 338000) 0 nil])
([nil nil ((#("type 
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2497) (undo-tree-id738 . -5) (t 25939 50289 484905 655000)) nil (25939 50307 84601 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2497)) nil (25939 50307 84561 145000) 0 nil])
([nil nil ((2624 . 2627)) nil (25939 50307 84557 549000) 0 nil])
([nil nil ((2811 . 2813) (t 25939 50307 105952 688000)) nil (25939 50668 149919 923000) 0 nil])
([nil nil ((2813 . 2816)) nil (25939 50668 149919 362000) 0 nil])
([nil nil ((2816 . 2828)) nil (25939 50668 149919 15000) 0 nil])
([nil nil ((apply yas--snippet-revive 2823 2835 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (2823 . 2835) (#("LoginResUser" 0 12 (fontified nil)) . 2823) (2823 . 2835) (#("Login" 0 5 (fontified nil)) . 2823) (2823 . 2828) (#("LoginResUser" 0 12 (fontified nil)) . -2823) (2823 . 2835) (#("Login" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -2823) (undo-tree-id745 . -5) (undo-tree-id746 . -5) 2828) nil (25939 50668 149917 943000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2836) (2836 . 2837) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2836) (2836 . 2837) (2835 . 2837)) nil (25939 50668 149914 628000) 0 nil])
([nil nil ((2837 . 2839)) nil (25939 50668 149913 717000) 0 nil])
([nil nil ((2839 . 2842)) nil (25939 50668 149913 222000) 0 nil])
([nil nil ((2842 . 2843)) nil (25939 50668 149912 651000) 0 nil])
([nil nil ((2821 . 2822)) nil (25939 50668 149912 236000) 0 nil])
([nil nil ((2844 . 2845)) nil (25939 50668 149911 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 2840 2847 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (2840 . 2847) (#("resUser" 0 7 (fontified nil)) . 2840) (2840 . 2847) (#("resUs" 0 5 (fontified nil)) . 2840) (2840 . 2845) (#("resUser" 0 7 (fontified nil)) . -2840) (2840 . 2847) (#("resUs" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -2840) (undo-tree-id743 . -5) (undo-tree-id744 . -5) 2845) nil (25939 50668 149910 762000) 0 nil])
([nil nil ((2847 . 2848)) nil (25939 50668 149908 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 2848 2857 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (2848 . 2857) (#("CreatedAt" 0 9 (fontified nil)) . 2848) (2848 . 2857) (#("CreatedAt" 0 9 (fontified nil)) . -2848) (2848 . 2857)) nil (25939 50668 149907 625000) 0 nil])
([nil nil ((2857 . 2865)) nil (25939 50668 149906 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 2865 2874 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (2865 . 2874) (#("CreatedAt" 0 9 (fontified nil)) . 2865) (2865 . 2874) (#("CreatedAt" 0 9 (fontified nil)) . -2865) (2865 . 2874)) nil (25939 50668 149906 30000) 0 nil])
([nil nil ((2874 . 2876)) nil (25939 50668 149905 0) 0 nil])
([nil nil ((2876 . 2879)) nil (25939 50668 149904 601000) 0 nil])
([nil nil ((2879 . 2884)) nil (25939 50668 149904 96000) 0 nil])
([nil nil ((2884 . 2886)) nil (25939 50668 149903 625000) 0 nil])
([nil nil ((2886 . 2888)) nil (25939 50668 149903 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 2884 2893 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (2884 . 2893) (#("UpdatedAt" 0 9 (fontified nil)) . 2884) (2884 . 2893) (#("Upda" 0 4 (fontified nil)) . 2884) (2884 . 2888) (#("UpdatedAt" 0 9 (fontified nil)) . -2884) (2884 . 2893) (#("Upda" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2884) (undo-tree-id741 . -4) (undo-tree-id742 . -4) 2888) nil (25939 50668 149901 727000) 0 nil])
([nil nil ((2893 . 2901)) nil (25939 50668 149898 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 2901 2910 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (2901 . 2910) (#("UpdatedAt" 0 9 (fontified nil)) . 2901) (2901 . 2910) (#("UpdatedAt" 0 9 (fontified nil)) . -2901) (2901 . 2910)) nil (25939 50668 149898 46000) 0 nil])
([nil nil ((2910 . 2912)) nil (25939 50668 149897 174000) 0 nil])
([nil nil ((2912 . 2915)) nil (25939 50668 149896 781000) 0 nil])
([nil nil ((2915 . 2920)) nil (25939 50668 149896 258000) 0 nil])
([nil nil ((2920 . 2923)) nil (25939 50668 149895 668000) 0 nil])
([nil nil ((apply yas--snippet-revive 2920 2925 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (2920 . 2925) (#("Email" 0 5 (fontified nil)) . 2920) (2920 . 2925) (#("Ema" 0 3 (fontified nil)) . 2920) (2920 . 2923) (#("Email" 0 5 (fontified nil)) . -2920) (2920 . 2925) (#("Ema" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2920) (undo-tree-id739 . -3) (undo-tree-id740 . -3) 2923) nil (25939 50668 149893 909000) 0 nil])
([nil nil ((2925 . 2932)) nil (25939 50668 149884 249000) 0 nil])
([nil nil ((2932 . 2933)) nil (25939 50668 149883 796000) 0 nil])
([nil nil ((2933 . 2938)) nil (25939 50668 149883 316000) 0 nil])
([nil nil ((2938 . 2940)) nil (25939 50668 149882 804000) 0 nil])
([nil nil ((2940 . 2948)) nil (25939 50668 149882 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 2948 2950 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (2948 . 2950) (#("ID" 0 2 (fontified nil)) . 2948) (2948 . 2950) (#("ID" 0 2 (fontified nil)) . -2948) (2948 . 2950)) nil (25939 50668 149881 410000) 0 nil])
([nil nil ((2950 . 2958)) nil (25939 50668 149880 225000) 0 nil])
([nil nil ((apply yas--snippet-revive 2958 2960 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (2958 . 2960) (#("ID" 0 2 (fontified nil)) . 2958) (2958 . 2960) (#("ID" 0 2 (fontified nil)) . -2958) (2958 . 2960)) nil (25939 50668 149876 146000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -3042) (undo-tree-id763 . -1) 3043 (t 25939 50668 170875 970000)) nil (25939 52421 594935 584000) 0 nil])
([nil nil ((3042 . 3043)) nil (25939 52421 594934 2000) 0 nil])
([nil nil ((#("B" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3046) (undo-tree-id752 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3047) (undo-tree-id753 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3048) (undo-tree-id754 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -3049) (undo-tree-id755 . -1) (#("R" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3050) (undo-tree-id756 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3051) (undo-tree-id757 . -1) (#("q" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3052) (undo-tree-id758 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3053) (undo-tree-id759 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3054) (undo-tree-id760 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3055) (undo-tree-id761 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3056) (undo-tree-id762 . -1) 3057) nil (25939 52421 594932 86000) 0 nil])
([nil nil ((3046 . 3054)) nil (25939 52421 594923 25000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3052) (undo-tree-id750 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3053) (undo-tree-id751 . -1) 3054) nil (25939 52421 594922 159000) 0 nil])
([nil nil ((3052 . 3058)) nil (25939 52421 594919 806000) 0 nil])
([nil nil ((#("3" 0 1 (face tree-sitter-hl-face:number fontified t)) . -3042) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 3043) nil (25939 52421 594918 382000) 0 nil])
([nil nil ((3042 . 3043)) nil (25939 52510 389490 244000) 0 nil])
([nil nil ((2493 . 2495) (t 25939 52513 805369 586000)) nil (25939 52551 955128 296000) 0 nil] [nil nil ((#("type AuthenticatedUser struct {
	database.User
  token string
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 22 (face tree-sitter-hl-face:type fontified t) 22 23 (fontified t) 23 29 (face tree-sitter-hl-face:keyword fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 42 (fontified t) 42 46 (face tree-sitter-hl-face:type fontified t) 46 49 (fontified t) 49 54 (face tree-sitter-hl-face:property fontified t) 54 55 (fontified t) 55 61 (face tree-sitter-hl-face:type fontified t) 61 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t) 63 64 (fontified t)) . 2157) (undo-tree-id767 . -62) (undo-tree-id768 . -63) (undo-tree-id769 . -62) (undo-tree-id771 . -49) (undo-tree-id773 . -45) (undo-tree-id775 . -62) (undo-tree-id777 . -62) (undo-tree-id779 . -62) (undo-tree-id781 . -62) (undo-tree-id783 . -62) (undo-tree-id785 . -62) (undo-tree-id787 . -62) (t 25939 52421 612154 425000)) ((2157 . 2221)) (25939 52509 650126 15000) 0 nil])
([nil nil ((2495 . 2508)) nil (25939 52551 955127 913000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2157) (undo-tree-id764 . -1) (undo-tree-id765 . 1)) ((2157 . 2158)) (25939 52508 861933 934000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2495) (undo-tree-id822 . -1) 2496) nil (25939 52551 955127 391000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 3184) (undo-tree-id789 . -2) (t 25939 52450 104221 129000)) ((3184 . 3187) (t 25939 52464 482254 717000)) (25939 52508 663100 126000) 0 nil])
([nil nil ((2495 . 2496)) nil (25939 52551 955126 437000) 0 nil])
([nil nil ((2170 . 2171) (#("Us" 0 2 (face tree-sitter-hl-face:type fontified t)) . 2170) (2173 . 2175) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2173) (2562 . 2563) (#("Us" 0 2 (face tree-sitter-hl-face:type fontified t)) . 2562) (2565 . 2567) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2565) 2554 (t 25939 52464 482254 717000)) ((2565 . 2566) (#("st" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2565) (2562 . 2564) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2562) (2173 . 2174) (#("st" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2173) (2170 . 2172) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2170)) (25939 52508 460699 357000) 0 nil])
([nil nil ((2501 . 2505)) nil (25939 52551 955126 27000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2267) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) 2268) ((2267 . 2268)) (25939 52508 276801 959000) 0 nil])
([nil nil ((2516 . 2518) (#("`" 0 1 (fontified nil)) . -2516) (2511 . 2517)) nil (25939 52551 955125 478000) 0 nil])
([nil nil ((2267 . 2268)) ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2267) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1)) (25939 52507 958050 37000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2515) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) 2516) nil (25939 52551 955124 622000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2267) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1)) ((2267 . 2268)) (25939 52507 575867 195000) 0 nil])
([nil nil ((2516 . 2522)) nil (25939 52551 955120 556000) 0 nil])
([nil nil ((2267 . 2268)) ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2267) (undo-tree-id804 . -1)) (25939 52507 137625 542000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -2521) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) 2522) nil (25939 52551 955119 616000) 0 nil])
([nil nil ((2565 . 2566) (#("st" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2565) (2562 . 2564) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2562) (2173 . 2174) (#("st" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2173) (2170 . 2172) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2170)) ((2170 . 2171) (#("Us" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2170) (2173 . 2175) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2173) (2562 . 2563) (#("Us" 0 2 (face tree-sitter-hl-face:type fontified nil)) . 2562) (2565 . 2567) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . 2565) (undo-tree-id803 . -1) (t 25939 52464 482254 717000)) (25939 52506 39266 375000) 0 nil])
([nil nil ((2521 . 2523) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2521) (2521 . 2522)) nil (25939 52551 955110 511000) 0 nil])
nil
([nil nil ((2522 . 2527)) nil (25939 52551 955106 929000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2145) (undo-tree-id849 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2146) (undo-tree-id850 . -1) (#(" " 0 1 (fontified t)) . -2147) (undo-tree-id851 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2148) (undo-tree-id852 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2149) (undo-tree-id853 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2150) (undo-tree-id854 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2151) (undo-tree-id855 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2152) (undo-tree-id856 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2153) (undo-tree-id857 . -1) 2154 (t 25939 52551 973458 115000)) nil (25939 53069 847536 162000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2144) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . 1) (undo-tree-id845 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2145) (undo-tree-id846 . -1) (undo-tree-id847 . 1) (undo-tree-id848 . -1) 2146) nil (25939 53069 847528 424000) 0 nil])
([nil nil ((2145 . 2146) (2144 . 2146)) nil (25939 53069 847523 477000) 0 nil])
([nil nil ((#("9" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2145) (undo-tree-id841 . -1) 2146) nil (25939 53069 847522 853000) 0 nil])
([nil nil ((2145 . 2148)) nil (25939 53069 847521 432000) 0 nil])
([nil nil ((2148 . 2156)) nil (25939 53069 847520 856000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2144) (undo-tree-id826 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2145) (undo-tree-id827 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2146) (undo-tree-id828 . -1) (#(" " 0 1 (fontified t)) . -2147) (undo-tree-id829 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2148) (undo-tree-id830 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2149) (undo-tree-id831 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2150) (undo-tree-id832 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2151) (undo-tree-id833 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2152) (undo-tree-id834 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2153) (undo-tree-id835 . -1) (#("," 0 1 (fontified t)) . -2154) (undo-tree-id836 . -1) (#(" " 0 1 (fontified t)) . -2155) (undo-tree-id837 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2156) (undo-tree-id838 . -1) (undo-tree-id839 . 1) (undo-tree-id840 . -1) 2157) nil (25939 53069 847518 283000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2145) (2145 . 2146) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2145) (2145 . 2146) (2144 . 2146)) nil (25939 53069 847505 488000) 0 nil])
([nil nil ((2145 . 2158)) nil (25939 53069 847504 787000) 0 nil])
([nil nil ((2165 . 2166) (2159 . 2166)) nil (25939 53069 847504 322000) 0 nil])
([nil nil ((#("9" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2165) (undo-tree-id825 . -1) 2166) nil (25939 53069 847503 640000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2136) (2136 . 2137) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2136) (2136 . 2137) (2134 . 2137)) nil (25939 53069 847501 713000) 0 nil])
([nil nil ((2136 . 2141)) nil (25939 53069 847500 603000) 0 nil])
([nil nil ((apply yas--snippet-revive 2138 2147 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (2138 . 2147) (#("apiConfig" 0 9 (fontified nil)) . 2138) (2138 . 2147) (#("api" 0 3 (fontified nil)) . 2138) (2138 . 2141) (#("apiConfig" 0 9 (fontified nil)) . -2138) (2138 . 2147) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2138) (undo-tree-id823 . -3) (undo-tree-id824 . -3) 2141) nil (25939 53069 847499 376000) 0 nil])
([nil nil ((2172 . 2181)) nil (25939 53069 847487 807000) 0 nil])
([nil nil ((2181 . 2185)) nil (25939 53069 847487 223000) 0 nil])
([nil nil ((2185 . 2191)) nil (25939 53069 847486 684000) 0 nil])
([nil nil ((2191 . 2194)) nil (25939 53069 847486 284000) 0 nil])
([nil nil ((2201 . 2214)) nil (25939 53069 847485 859000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2217) (2217 . 2218) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2217) (2217 . 2218) (2215 . 2218)) nil (25939 53069 847485 271000) 0 nil])
([nil nil ((2218 . 2219) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2218) (2218 . 2219) (2217 . 2219)) nil (25939 53069 847484 446000) 0 nil])
([nil nil ((2219 . 2230)) nil (25939 53069 847483 527000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2231) (2231 . 2232) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2231) (2231 . 2232) (2230 . 2232)) nil (25939 53069 847482 733000) 0 nil])
([nil nil ((2231 . 2235)) nil (25939 53069 847481 560000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2201) (2201 . 2202) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2201) (2201 . 2202) (2200 . 2202)) nil (25939 53069 847480 228000) 0 nil])
([nil nil ((2201 . 2203)) nil (25939 53069 847479 117000) 0 nil])
([nil nil ((2204 . 2205)) nil (25939 53069 847478 399000) 0 nil])
([nil nil ((2203 . 2210)) nil (25939 53069 847474 632000) 0 nil])
([nil nil ((2247 . 2252) (t 25939 53069 868637 399000)) nil (25939 53216 138394 134000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2255) (2255 . 2256) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2255) (2255 . 2256) (2253 . 2256)) nil (25939 53216 138393 265000) 0 nil])
([nil nil ((2256 . 2258) (2257 . 2258) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2256) (2256 . 2258) (2255 . 2257)) nil (25939 53216 138392 292000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2255) (2255 . 2256) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2255) (2255 . 2256) (2253 . 2256)) nil (25939 53216 138391 28000) 0 nil])
([nil nil ((2255 . 2261)) nil (25939 53216 138389 980000) 0 nil])
([nil nil ((2261 . 2262)) nil (25939 53216 138389 344000) 0 nil])
([nil nil ((2262 . 2268)) nil (25939 53216 138388 862000) 0 nil])
([nil nil ((2274 . 2278)) nil (25939 53216 138388 466000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2277) (undo-tree-id897 . -1) (undo-tree-id898 . -1) 2278) nil (25939 53216 138387 834000) 0 nil])
([nil nil ((apply yas--snippet-revive 2274 2282 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2274 . 2282) (#("godotenv" 0 8 (fontified nil)) . 2274) (2274 . 2282) (#("god" 0 3 (fontified nil)) . 2274) (2274 . 2277) (#("godotenv" 0 8 (fontified nil)) . -2274) (2274 . 2282) (#("god" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2274) (undo-tree-id895 . -3) (undo-tree-id896 . -3) 2277) nil (25939 53216 138385 47000) 0 nil])
([nil nil ((2282 . 2283)) nil (25939 53216 138382 747000) 0 nil])
([nil nil ((2283 . 2284)) nil (25939 53216 138382 203000) 0 nil])
([nil nil ((2284 . 2286)) nil (25939 53216 138381 685000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2288 2288 nil nil nil t nil)) nil 32 nil #s(yas--field 1 2288 2288 nil nil nil t nil) nil nil)) (2283 . 2308) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 2283) (2283 . 2313) (#("Loa" 0 3 (fontified nil)) . 2283) (2283 . 2286) (#("Load" 0 4 (fontified nil)) . -2283) (2283 . 2287) (#("Loa" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2283) (undo-tree-id893 . -3) (undo-tree-id894 . -3) 2286) nil (25939 53216 138380 238000) 0 nil])
([nil nil ((#("filenames ...string" 0 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 13 (face tree-sitter-hl-face:operator fontified t) 13 19 (face tree-sitter-hl-face:variable fontified t)) . 2288)) nil (25939 53216 138377 754000) 0 nil])
([nil nil ((apply yas--snippet-revive 2283 2289 #s(yas--snippet nil (#s(yas--field 1 2288 2288 nil nil nil t nil)) nil 32 nil #s(yas--field 1 2288 2288 nil nil nil t nil) nil nil))) nil (25939 53216 138377 407000) 0 nil])
([nil nil ((2289 . 2292)) nil (25939 53216 138376 983000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2293 . 2294) (#("
" 0 1 (fontified nil)) . -2444) (2292 . 2445) 2291) nil (25939 53216 138376 428000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2290) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -1) (undo-tree-id892 . -2) 2291) nil (25939 53216 138375 164000) 0 nil])
([nil nil ((1079 . 1080) (#("  " 0 2 (fontified t)) . -1079) 1081 (1115 . 1116) (#("  " 0 2 (fontified t)) . -1115) 1117 (1218 . 1219) (#("  " 0 2 (fontified t)) . -1218) 1220 (1259 . 1260) (#("  " 0 2 (fontified t)) . -1259) 1261 (1292 . 1293) (#("  " 0 2 (fontified t)) . -1292) 1294 (#("		" 0 2 (fontified t)) . 1297) (#(";" 0 1 (fontified t)) . 1418) (2028 . 2029) (#("  " 0 2 (fontified t)) . 2028) (2291 . 2292) (2328 . 2329) 2291 (2362 . 2363) (2386 . 2387) (2495 . 2496) (#("  " 0 2 (fontified t)) . 2495) (2546 . 2549) (#(" " 0 1 (fontified t)) . 2820) (#(";" 0 1 (fontified t)) . 2927) (#("  " 0 2 (fontified t)) . 3577) ("

	" . 4099)) nil (25939 53216 138370 507000) 0 nil])
([nil nil ((2436 . 2439)) nil (25939 53216 138367 697000) 0 nil])
([nil nil ((2439 . 2450)) nil (25939 53216 138367 335000) 0 nil])
([nil nil ((apply yas--snippet-revive 2446 2455 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (2446 . 2455) (#("ExpiresAt" 0 9 (fontified nil)) . 2446) (2446 . 2455) (#("Expi" 0 4 (fontified nil)) . 2446) (2446 . 2450) (#("ExpiresAt" 0 9 (fontified nil)) . -2446) (2446 . 2455) (#("Expi" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2446) (undo-tree-id887 . -4) (undo-tree-id888 . -4) 2450) nil (25939 53216 138366 162000) 0 nil])
([nil nil ((2455 . 2458)) nil (25939 53216 138362 560000) 0 nil])
([nil nil ((2458 . 2462)) nil (25939 53216 138361 961000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2477 2541 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil nil)) (2462 . 2489) (#("NewNumericDate(${1:t time.Time})" 0 32 (fontified nil)) . 2462) (2462 . 2494) (#("NewNumericDate" 0 14 (fontified nil)) . -2462) (2462 . 2476)) nil (25939 53216 138361 58000) 0 nil])
([nil nil ((2478 . 2484) (#("t time.Time" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 11 (face tree-sitter-hl-face:property fontified nil)) . 2478) (undo-tree-id886 . -11) (2477 . 2478)) nil (25939 53216 138359 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 2484 2492 #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2484 . 2492) (#("IssuedAt" 0 8 (fontified nil)) . 2484) (undo-tree-id884 . -8) (2484 . 2492) (#("IssuedAt" 0 8 (fontified nil)) . -2484) (undo-tree-id885 . -8) (2484 . 2492)) nil (25939 53216 138357 938000) 0 nil])
([nil nil ((2492 . 2493)) nil (25939 53216 138355 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 2493 2497 #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2493 . 2497) (#("Time" 0 4 (fontified nil)) . 2493) (undo-tree-id882 . -4) (2493 . 2497) (#("Time" 0 4 (fontified nil)) . -2493) (undo-tree-id883 . -4) (2493 . 2497)) nil (25939 53216 138355 34000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2493) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2494) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2495) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2496) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) 2497) nil (25939 53216 138352 28000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2497) (2497 . 2498) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2497) (2497 . 2498) (2493 . 2498)) nil (25939 53216 138343 548000) 0 nil])
([nil nil ((2497 . 2502)) nil (25939 53216 138342 725000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2501) (undo-tree-id868 . -1) (undo-tree-id869 . -1) 2502) nil (25939 53216 138342 223000) 0 nil])
([nil nil ((2501 . 2503)) nil (25939 53216 138339 701000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2502) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 2503) nil (25939 53216 138339 151000) 0 nil])
([nil nil ((2502 . 2503)) nil (25939 53216 138337 447000) 0 nil])
([nil nil ((2503 . 2505)) nil (25939 53216 138336 753000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2504) (undo-tree-id864 . -1) (undo-tree-id865 . -1) 2505) nil (25939 53216 138336 108000) 0 nil])
([nil nil ((2504 . 2505)) nil (25939 53216 138334 370000) 0 nil])
([nil nil ((apply yas--snippet-revive 2502 2508 #s(yas--snippet nil nil nil 37 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2502 . 2508) (#("Second" 0 6 (fontified nil)) . 2502) (2502 . 2508) (#("Sec" 0 3 (fontified nil)) . 2502) (2502 . 2505) (#("Second" 0 6 (fontified nil)) . -2502) (2502 . 2508) (#("Sec" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2502) (undo-tree-id862 . -3) (undo-tree-id863 . -3) 2505) nil (25939 53216 138333 14000) 0 nil])
([nil nil ((2508 . 2516)) nil (25939 53216 138330 412000) 0 nil])
([nil nil ((2516 . 2518)) nil (25939 53216 138329 976000) 0 nil])
([nil nil ((apply yas--snippet-revive 2514 2524 #s(yas--snippet nil nil #s(yas--exit 2523 nil) 38 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2523 nil) 38 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2514 . 2524) (#("Duration($0)" 0 12 (fontified nil)) . 2514) (2514 . 2526) (#("Dura" 0 4 (fontified nil)) . 2514) (2514 . 2518) (#("Duration()" 0 10 (fontified nil)) . -2514) (2514 . 2524) (#("Dura" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2514) (undo-tree-id860 . -4) (undo-tree-id861 . -4) 2518) nil (25939 53216 138328 887000) 0 nil])
([nil nil ((2523 . 2530)) nil (25939 53216 138325 580000) 0 nil])
([nil nil ((apply yas--snippet-revive 2523 2539 #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2523 . 2539) (#("expiresInSeconds" 0 16 (fontified nil)) . 2523) (2523 . 2539) (#("expires" 0 7 (fontified nil)) . 2523) (2523 . 2530) (#("expiresInSeconds" 0 16 (fontified nil)) . -2523) (2523 . 2539) (#("expires" 0 7 (face tree-sitter-hl-face:variable fontified t)) . -2523) (undo-tree-id858 . -7) (undo-tree-id859 . -7) 2530) nil (25939 53216 138323 862000) 0 nil])
([nil nil ((apply yas--snippet-revive 2462 2542 #s(yas--snippet nil (#s(yas--field 1 2477 2541 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil nil))) nil (25939 53216 138311 52000) 0 nil])
([nil nil ((2542 . 2545) (t 25939 53216 165965 842000)) nil (25939 53363 561067 884000) 0 nil])
([nil nil ((2545 . 2552)) nil (25939 53363 561067 273000) 0 nil])
([nil nil ((2552 . 2555)) nil (25939 53363 561066 872000) 0 nil])
([nil nil ((apply yas--snippet-revive 2552 2559 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (2552 . 2559) (#("Subject" 0 7 (fontified nil)) . 2552) (2552 . 2559) (#("Sub" 0 3 (fontified nil)) . 2552) (2552 . 2555) (#("Subject" 0 7 (fontified nil)) . -2552) (2552 . 2559) (#("Sub" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2552) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) 2555) nil (25939 53363 561065 706000) 0 nil])
([nil nil ((2559 . 2564)) nil (25939 53363 561063 304000) 0 nil])
([nil nil ((2564 . 2567)) nil (25939 53363 561062 913000) 0 nil])
([nil nil ((2567 . 2583)) nil (25939 53363 561062 398000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) #s(yas--field 3 2624 2624 nil nil nil t nil)) nil 41 nil #s(yas--field 3 2624 2624 nil nil nil t nil) nil nil)) (2580 . 2663) (#("NewWithClaims(${1:method jwt.SigningMethod}, ${2:claims jwt.Claims}, ${3:opts ...jwt.TokenOption})" 0 98 (fontified nil)) . 2580) (2580 . 2678) (#("New" 0 3 (fontified nil)) . 2580) (2580 . 2583) (#("NewWithClaims" 0 13 (fontified nil)) . -2580) (2580 . 2593) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2580) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) 2583) nil (25939 53363 561061 351000) 0 nil])
([nil nil ((2595 . 2602) (#("method jwt.SigningMethod" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 10 (face tree-sitter-hl-face:variable fontified nil) 10 11 (fontified nil) 11 24 (face tree-sitter-hl-face:property fontified nil)) . 2595) (2594 . 2595)) nil (25939 53363 561058 505000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2600) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2601) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) 2602) nil (25939 53363 561057 458000) 0 nil])
([nil nil ((2600 . 2602)) nil (25939 53363 561054 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 2598 2616 #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) nil)) (2598 . 2616) (#("SigningMethodHS256" 0 18 (fontified nil)) . 2598) (2598 . 2616) (#("Sign" 0 4 (fontified nil)) . 2598) (2598 . 2602) (#("SigningMethodHS256" 0 18 (fontified nil)) . -2598) (2598 . 2616) (#("Sign" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2598) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) 2602) nil (25939 53363 561053 298000) 0 nil])
([nil nil ((2619 . 2624) (#("claims jwt.Claims" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 10 (face tree-sitter-hl-face:variable fontified nil) 10 11 (fontified nil) 11 17 (face tree-sitter-hl-face:property fontified nil)) . 2619) (2618 . 2619)) nil (25939 53363 561050 528000) 0 nil])
([nil nil ((apply yas--snippet-revive 2618 2624 #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) nil)) (2618 . 2624) (#("claims" 0 6 (fontified nil)) . 2618) (2618 . 2624) (#("claims" 0 6 (fontified nil)) . 2618) (2618 . 2624) (#("claims" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2618) (undo-tree-id1006 . -6) (undo-tree-id1007 . -6) 2624) nil (25939 53363 561049 56000) 0 nil])
([nil nil ((#("opts ...jwt.TokenOption" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 8 (face tree-sitter-hl-face:operator fontified t) 8 11 (face tree-sitter-hl-face:variable fontified t) 11 12 (fontified t) 12 23 (face tree-sitter-hl-face:variable fontified t)) . 2626)) nil (25939 53363 561046 517000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2624) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#(" " 0 1 (fontified t)) . -2625) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) 2626) nil (25939 53363 561045 599000) 0 nil])
([nil nil ((apply yas--snippet-revive 2580 2625 #s(yas--snippet nil (#s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) #s(yas--field 3 2624 2624 nil nil nil t nil)) nil 41 nil #s(yas--field 3 2624 2624 nil nil nil t nil) nil nil))) nil (25939 53363 561040 929000) 0 nil])
([nil nil ((2625 . 2628)) nil (25939 53363 561040 357000) 0 nil])
([nil nil ((2628 . 2640)) nil (25939 53363 561039 576000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2639) (undo-tree-id1001 . -1) 2640) nil (25939 53363 561038 668000) 0 nil])
([nil nil ((2639 . 2654)) nil (25939 53363 561037 239000) 0 nil])
([nil nil ((2654 . 2658)) nil (25939 53363 561036 495000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2667 2684 nil nil nil t nil)) nil 44 nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil nil)) (2654 . 2683) (#("SignedString(${1:key interface{\\}})" 0 35 (fontified nil)) . 2654) (2654 . 2689) (#("Sign" 0 4 (fontified nil)) . 2654) (2654 . 2658) (#("SignedString" 0 12 (fontified nil)) . -2654) (2654 . 2666) (#("Sign" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2654) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) 2658) nil (25939 53363 561035 144000) 0 nil])
([nil nil ((2669 . 2673) (#("]" 0 1 (fontified nil)) . -2668) (2668 . 2669) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2668) (2668 . 2669) (2668 . 2669) (#("key interface{}" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 12 (face tree-sitter-hl-face:keyword fontified nil) 12 13 (face tree-sitter-hl-face:keyword fontified nil) 13 14 (face (rainbow-delimiters-depth-4-face) fontified nil) 14 15 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2668) (2667 . 2668)) nil (25939 53363 561031 804000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2674) (2674 . 2675) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -2674) (2674 . 2675) (2673 . 2675)) nil (25939 53363 561030 308000) 0 nil])
([nil nil ((2674 . 2677)) nil (25939 53363 561029 201000) 0 nil])
([nil nil ((apply yas--snippet-revive 2674 2683 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil)) (2674 . 2683) (#("jwtSecret" 0 9 (fontified nil)) . 2674) (2674 . 2683) (#("jwt" 0 3 (fontified nil)) . 2674) (2674 . 2677) (#("jwtSecret" 0 9 (fontified nil)) . -2674) (2674 . 2683) (#("jwt" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2674) (undo-tree-id997 . -3) (undo-tree-id998 . -3) 2677) nil (25939 53363 561028 8000) 0 nil])
([nil nil ((apply yas--snippet-revive 2654 2685 #s(yas--snippet nil (#s(yas--field 1 2667 2684 nil nil nil t nil)) nil 44 nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil nil))) nil (25939 53363 561024 943000) 0 nil])
([nil nil ((2685 . 2688)) nil (25939 53363 561024 465000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2685) (undo-tree-id994 . -1) (#("	" 0 1 (fontified t)) . -2686) (undo-tree-id995 . -1) (#("	" 0 1 (fontified t)) . -2687) (undo-tree-id996 . -1) 2688) nil (25939 53363 561023 404000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2627) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2628) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2629) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2630) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2631) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2632) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2633) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2634) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2635) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2636) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2637) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2638) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("," 0 1 (fontified t)) . -2639) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#(" " 0 1 (fontified t)) . -2640) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("e" 0 1 (fontified t)) . -2641) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (#("r" 0 1 (fontified t)) . -2642) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (#("r" 0 1 (fontified t)) . -2643) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#(" " 0 1 (fontified t)) . -2644) (undo-tree-id990 . -1) (#(":" 0 1 (fontified t)) . -2645) (undo-tree-id991 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2646) (undo-tree-id992 . -1) (#(" " 0 1 (fontified t)) . -2647) (undo-tree-id993 . -1) 2648) nil (25939 53363 561014 953000) 0 nil])
([nil nil ((2627 . 2630)) nil (25939 53363 560592 338000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2628) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2629) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) 2630) nil (25939 53363 560590 657000) 0 nil])
([nil nil ((2628 . 2629)) nil (25939 53363 560570 483000) 0 nil])
([nil nil ((2629 . 2636)) nil (25939 53363 560566 836000) 0 nil])
([nil nil ((2678 . 2680) (t 25939 53363 583295 624000)) nil (25939 53593 757166 556000) 0 nil])
([nil nil ((2680 . 2692)) nil (25939 53593 757165 818000) 0 nil])
([nil nil ((2692 . 2700)) nil (25939 53593 757165 216000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2701) (2701 . 2702) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2701) (2701 . 2702) (2700 . 2702)) nil (25939 53593 757164 432000) 0 nil])
([nil nil ((2702 . 2717) (2701 . 2703) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2701) (2701 . 2702)) nil (25939 53593 757163 323000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2711) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2712) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2713) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2714) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2715) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2716) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) 2717) nil (25939 53593 757161 565000) 0 nil])
([nil nil ((2711 . 2718)) nil (25939 53593 756970 750000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2680) (undo-tree-id1060 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2681) (undo-tree-id1061 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2682) (undo-tree-id1062 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2683) (undo-tree-id1063 . -1) 2684) nil (25939 53593 756969 930000) 0 nil])
([nil nil ((2680 . 2685)) nil (25939 53593 756967 61000) 0 nil])
([nil nil ((2701 . 2704)) nil (25939 53593 756966 726000) 0 nil])
([nil nil ((2704 . 2713)) nil (25939 53593 756966 296000) 0 nil])
([nil nil ((2732 . 2734)) nil (25939 53593 756965 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2740 . 2741) (nil fontified nil 2734 . 2741) (2734 . 2741) 2733) nil (25939 53593 756965 357000) 0 nil])
([nil nil ((2742 . 2743)) nil (25939 53593 756964 705000) 0 nil])
([nil nil ((2704 . 2706)) nil (25939 53593 756964 155000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2680) (undo-tree-id1055 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2681) (undo-tree-id1056 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2682) (undo-tree-id1057 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2683) (undo-tree-id1058 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2684) (undo-tree-id1059 . -1) 2685) nil (25939 53593 756963 53000) 0 nil])
([nil nil ((2680 . 2684)) nil (25939 53593 756959 257000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2681) (undo-tree-id1052 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2682) (undo-tree-id1053 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2683) (undo-tree-id1054 . -1) 2684) nil (25939 53593 756958 526000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2686) (2686 . 2687) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2686) (2686 . 2687) (2681 . 2687)) nil (25939 53593 756956 0) 0 nil])
([nil nil ((2686 . 2691)) nil (25939 53593 756955 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 2688 2697 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (2688 . 2697) (#("apiConfig" 0 9 (fontified nil)) . 2688) (2688 . 2697) (#("api" 0 3 (fontified nil)) . 2688) (2688 . 2691) (#("apiConfig" 0 9 (fontified nil)) . -2688) (2688 . 2697) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2688) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) 2691) nil (25939 53593 756953 894000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2714) (undo-tree-id1048 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2715) (undo-tree-id1049 . -1) 2716) nil (25939 53593 756951 143000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2716) (2716 . 2717) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2716) (2716 . 2717) (2714 . 2717)) nil (25939 53593 756948 880000) 0 nil])
([nil nil ((2716 . 2729)) nil (25939 53593 756948 111000) 0 nil])
([nil nil ((2731 . 2733)) nil (25939 53593 756947 475000) 0 nil])
([nil nil ((2733 . 2734) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2733) (2733 . 2734) (2732 . 2734)) nil (25939 53593 756946 591000) 0 nil])
([nil nil ((#("a.mintToken(\"thisweek-refresh\", 5184000);" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 11 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (face tree-sitter-hl-face:string fontified t) 13 21 (face tree-sitter-hl-face:string fontified t) 21 22 (face tree-sitter-hl-face:string fontified t) 22 29 (face tree-sitter-hl-face:string fontified t) 29 30 (face tree-sitter-hl-face:string fontified t) 30 32 (fontified t) 32 38 (face tree-sitter-hl-face:number fontified t) 38 39 (face tree-sitter-hl-face:number rear-nonsticky t fontified t) 39 40 (face (rainbow-delimiters-depth-1-face) fontified t) 40 41 (fontified t)) . 2736) (undo-tree-id1042 . -40) (undo-tree-id1043 . 40) (undo-tree-id1044 . -40) (undo-tree-id1045 . -40) (undo-tree-id1046 . -40) (undo-tree-id1047 . -40) 2776) nil (25939 53593 756945 526000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2774 . 2775) (nil fontified nil 2734 . 2775) (2734 . 2775) 2733) nil (25939 53593 756941 151000) 0 nil])
([nil nil ((#(";" 0 1 (rear-nonsticky t fontified t)) . -2774) (undo-tree-id1041 . -1) 2775) nil (25939 53593 756940 186000) 0 nil])
([nil nil ((2734 . 2741)) nil (25939 53593 756938 750000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2715) (2715 . 2716) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2715) (2715 . 2716) (2714 . 2716)) nil (25939 53593 756937 995000) 0 nil])
([nil nil ((2715 . 2725)) nil (25939 53593 756936 912000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2717) (undo-tree-id1040 . -1) 2718) nil (25939 53593 756936 136000) 0 nil])
([nil nil ((2187 . 2189)) nil (25939 53593 756934 704000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2188) (undo-tree-id1037 . -1) (undo-tree-id1038 . 1) (undo-tree-id1039 . -1) 2189) nil (25939 53593 756934 52000) 0 nil])
([nil nil ((2219 . 2220) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2219) (2219 . 2220)) nil (25939 53593 756931 764000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2219) (undo-tree-id1026 . -1) (undo-tree-id1027 . 1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) 2220) nil (25939 53593 756930 395000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2187) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 2188) nil (25939 53593 756920 439000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2793) (2793 . 2794) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2793) (2793 . 2794) (2792 . 2794) (t 25939 53593 779808 806000)) nil (25939 53622 258277 676000) 0 nil])
([nil nil ((2793 . 2795)) nil (25939 53622 258273 290000) 0 nil])
([nil nil ((2798 . 2800) (t 25939 53622 281872 241000)) nil (25939 53658 327533 683000) 0 nil])
([nil nil ((2150 . 2154)) nil (25939 53658 327533 98000) 0 nil])
([nil nil ((2152 . 2159)) nil (25939 53658 327532 641000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2252) (undo-tree-id1302 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2253) (undo-tree-id1303 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2254) (undo-tree-id1304 . -1) (#(" " 0 1 (fontified t)) . -2255) (undo-tree-id1305 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2256) (undo-tree-id1306 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2257) (undo-tree-id1307 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2258) (undo-tree-id1308 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2259) (undo-tree-id1309 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2260) (undo-tree-id1310 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2261) (undo-tree-id1311 . -1) (#("g" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2262) (undo-tree-id1312 . -1) (#("," 0 1 (fontified t)) . -2263) (undo-tree-id1313 . -1) (#(" " 0 1 (fontified t)) . -2264) (undo-tree-id1314 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2265) (undo-tree-id1315 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2266) (undo-tree-id1316 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2267) (undo-tree-id1317 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2268) (undo-tree-id1318 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -2269) (undo-tree-id1319 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2270) (undo-tree-id1320 . -1) (#(" " 0 1 (fontified t)) . -2271) (undo-tree-id1321 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2272) (undo-tree-id1322 . -1) 2273) nil (25939 53658 327529 264000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2231) (undo-tree-id1281 . -1) (#("	" 0 1 (fontified t)) . -2232) (undo-tree-id1282 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2233) (undo-tree-id1283 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2234) (undo-tree-id1284 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2235) (undo-tree-id1285 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2236) (undo-tree-id1286 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2237) (undo-tree-id1287 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2238) (undo-tree-id1288 . -1) (#(" " 0 1 (fontified t)) . -2239) (undo-tree-id1289 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2240) (undo-tree-id1290 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2241) (undo-tree-id1291 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2242) (undo-tree-id1292 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2243) (undo-tree-id1293 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2244) (undo-tree-id1294 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2245) (undo-tree-id1295 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2246) (undo-tree-id1296 . -1) (#(" " 0 1 (fontified t)) . -2247) (undo-tree-id1297 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2248) (undo-tree-id1298 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2249) (undo-tree-id1299 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2250) (undo-tree-id1300 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2251) (undo-tree-id1301 . -1) 2252) nil (25939 53658 327510 55000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2645) (undo-tree-id1277 . -1) (#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -2646) (undo-tree-id1278 . -1) (undo-tree-id1279 . 1) (undo-tree-id1280 . -1) 2647) nil (25939 53658 327421 997000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2197) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2198) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2199) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2200) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2201) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2202) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2203) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2204) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#(" " 0 1 (fontified t)) . -2205) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2206) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2207) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2208) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2209) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2210) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2211) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2212) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . 1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 2213) nil (25939 53658 327408 502000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2743) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2744) (undo-tree-id1325 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2745) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2746) (undo-tree-id1328 . -1) (undo-tree-id1329 . 1) (undo-tree-id1330 . -1) 2747 (t 25939 53658 350952 497000)) nil (25939 53667 594939 925000) 0 nil])
([nil nil ((2715 . 2719)) nil (25939 53667 594923 555000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2750 . 2751) (#("
" 0 1 (fontified nil)) . -2869) (2750 . 2870) (t 25939 53667 617973 112000)) nil (25939 53705 396245 360000) 0 nil])
([nil nil ((#("A" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2654) (undo-tree-id1405 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2655) (undo-tree-id1406 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2656) (undo-tree-id1407 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2657) (undo-tree-id1408 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2658) (undo-tree-id1409 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -2659) (undo-tree-id1410 . -1) 2660) nil (25939 53705 396243 704000) 0 nil])
([nil nil ((2654 . 2661)) nil (25939 53705 396239 345000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2850) (undo-tree-id1398 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2851) (undo-tree-id1399 . -1) (#("f" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2852) (undo-tree-id1400 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2853) (undo-tree-id1401 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2854) (undo-tree-id1402 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2855) (undo-tree-id1403 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2856) (undo-tree-id1404 . -1) 2857) nil (25939 53705 396238 131000) 0 nil])
([nil nil ((2850 . 2856)) nil (25939 53705 396230 641000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2859) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2860) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("8" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2861) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2862) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2863) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2864) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2865) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 2866) nil (25939 53705 396227 400000) 0 nil])
([nil nil ((2859 . 2864)) nil (25939 53705 396167 975000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2697) (undo-tree-id1450 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2698) (undo-tree-id1451 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2699) (undo-tree-id1452 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2700) (undo-tree-id1453 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2701) (undo-tree-id1454 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2702) (undo-tree-id1455 . -1) (#(" " 0 1 (fontified t)) . -2703) (undo-tree-id1456 . -1) 2704 (t 25939 53705 420057 184000)) nil (25939 53936 334302 977000) 0 nil])
([nil nil ((2697 . 2703)) nil (25939 53936 334297 474000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2702) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) 2703) nil (25939 53936 334296 895000) 0 nil])
([nil nil ((2702 . 2717)) nil (25939 53936 334294 947000) 0 nil])
([nil nil ((2761 . 2763)) nil (25939 53936 334294 542000) 0 nil])
([nil nil ((2763 . 2765)) nil (25939 53936 334294 201000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2778) (2778 . 2779) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2778) (2778 . 2779) (2765 . 2779)) nil (25939 53936 334293 612000) 0 nil])
([nil nil ((2779 . 2781) (2780 . 2781) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2779) (2779 . 2781) (2778 . 2780)) nil (25939 53936 334292 591000) 0 nil])
([nil nil ((2781 . 2792)) nil (25939 53936 334291 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 2788 2799 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (2788 . 2799) (#("tokenString" 0 11 (fontified nil)) . 2788) (2788 . 2799) (#("toke" 0 4 (fontified nil)) . 2788) (2788 . 2792) (#("tokenString" 0 11 (fontified nil)) . -2788) (2788 . 2799) (#("toke" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2788) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) 2792) nil (25939 53936 334290 506000) 0 nil])
([nil nil ((2799 . 2802)) nil (25939 53936 334287 668000) 0 nil])
([nil nil ((2802 . 2804)) nil (25939 53936 334287 272000) 0 nil])
([nil nil ((2807 . 2809)) nil (25939 53936 334286 824000) 0 nil])
([nil nil ((2807 . 2812)) nil (25939 53936 334286 376000) 0 nil])
([nil nil ((2812 . 2815)) nil (25939 53936 334285 796000) 0 nil])
([nil nil ((#("!" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2770) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) 2771) nil (25939 53936 334284 728000) 0 nil])
([nil nil ((2770 . 2771)) nil (25939 53936 334130 644000) 0 nil])
([nil nil ((#("	} else {}
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t) 3 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (fontified t)) . 2805) (undo-tree-id1411 . 2) (undo-tree-id1412 . -10) (undo-tree-id1413 . -7) (undo-tree-id1414 . -8) (undo-tree-id1415 . 1) (undo-tree-id1416 . -9) (undo-tree-id1417 . -9) (undo-tree-id1418 . -9) (undo-tree-id1419 . -9) (undo-tree-id1420 . -9) (undo-tree-id1421 . -9) (undo-tree-id1422 . -9) (undo-tree-id1423 . -9) (undo-tree-id1424 . -9) (undo-tree-id1425 . -9) (undo-tree-id1426 . -8) (undo-tree-id1427 . -8) (undo-tree-id1428 . 3) (undo-tree-id1429 . -9) (undo-tree-id1430 . 2) (undo-tree-id1431 . -10) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) (undo-tree-id1434 . -8) (undo-tree-id1435 . -8) (undo-tree-id1436 . -8) (undo-tree-id1437 . -8) (undo-tree-id1438 . -8) (undo-tree-id1439 . -11) 2813) nil (25939 53936 334127 223000) 0 nil])
([nil nil ((2806 . 2807) (#("}" 0 1 (fontified nil)) . -2806) (2806 . 2807) (t 25939 53936 361570 167000)) nil (25939 53939 750818 488000) 0 nil])
([nil nil ((2807 . 2809) (t 25939 53939 774577 742000)) nil (25939 53954 376058 777000) 0 nil])
([nil nil ((2809 . 2815)) nil (25939 53954 376058 43000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2808) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2809) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2810) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2811) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2812) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2813) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2814) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) 2815) nil (25939 53954 376056 463000) 0 nil])
([nil nil ((#("		return tokenString, err
" 0 2 (fontified t) 2 8 (face tree-sitter-hl-face:keyword fontified t) 8 9 (fontified t) 9 20 (face tree-sitter-hl-face:variable fontified t) 20 22 (fontified t) 22 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t)) . 2779) (undo-tree-id1466 . 26) (undo-tree-id1467 . -25)) nil (25939 53954 376046 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2784 . 2785) (#("
" 0 1 (fontified nil)) . -2808) (2782 . 2809)) nil (25939 53954 376044 109000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2782) (undo-tree-id1465 . -1)) nil (25939 53954 376043 219000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2217) (#("	" 0 1 (fontified t)) . -2235) (#("	" 0 1 (fontified t)) . -2274) (#("	" 0 1 (fontified t)) . -2309) (#("	" 0 1 (fontified t)) . -2334) (#("	" 0 1 (fontified t)) . -2391) (2461 . 2462) (2462 . 2463) (#("	" 0 1 (fontified t)) . -2496) (#("	" 0 1 (fontified t)) . -2518) (#("  " 0 2 (fontified t)) . -2580) (#("	" 0 1 (fontified t)) . -2627) (#("	" 0 1 (fontified t)) . 2782) (#("
" 0 1 (fontified t)) . 2926) 2782) nil (25939 53954 376040 415000) 0 nil])
([nil nil ((2769 . 2772)) nil (25939 53954 376037 879000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2770) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) 2772) nil (25939 53954 376034 847000) 0 nil])
([nil nil ((368 . 7830) (#("ithub.com/x/crypto/bcrypt\"
	\"golang.org/x/crypto/bcrypt\"
)

func readinessHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithJSON(w, 200, struct {
		Status string `json:\"status\"`
	}{Status: \"OK\"})
}

func errorHandler(w http.ResponseWriter, r *http.Request) {
	utils.RespondWithError(w, 500, \"Internal Server Error\")
}

type apiConfig struct {
	DB  *database.Queries
	ctx context.Context
}

type authedHandler func(http.ResponseWriter, *http.Request, database.User)

func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		jwtToken := strings.Split(bearerToken, \" \")[1]
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})

	}
}

func (a apiConfig) registerHandler(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	createUserObject := database.CreateUserParams{}
	if err := decoder.Decode(&createUserObject); err != nil {
		utils.RespondWithError(w, 400, \"Bad request\")
		return
	}
	timestamp := time.Now()
	createUserObject.CreatedAt = timestamp
	createUserObject.UpdatedAt = timestamp
	pass, perr := bcrypt.GenerateFromPassword([]byte(createUserObject.Password), 8)
	createUserObject.Password = pass
	if perr != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
	}
	user, err := a.DB.CreateUser(a.ctx, createUserObject)
	// check error if it is a database one (500) or client error (400)
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad request\")
	} else {
		utils.RespondWithJSON(w, 200, user)
	}
}

func (a apiConfig) mintToken(id string, issuer string, expiresInSeconds int) (string, error) {
	godotenv.Load()
	jwtSecret := os.Getenv(\"JWT_SECRET\")
	claims := jwt.RegisteredClaims{}
	claims.Issuer = issuer
	claims.IssuedAt = jwt.NewNumericDate(time.Now().UTC())
	claims.ExpiresAt = jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))
	claims.Subject = id
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(jwtSecret))
}

func (a apiConfig) mintRefreshToken(id string) (string, error) {
	tokenString, err := a.mintToken(id, \"thisweek-refresh\", 5184000)
	if err == nil {

	}
	return tokenString, err
}

func (a apiConfig) mintAccessToken(id string) (string, error) {
	return a.mintToken(id, \"thisweek-access\", 86400)
}

type AuthenticatedUser struct {
	database.User
	token string
}

type LoginReqUser struct {
	Email    string `json:\"email\"`
	Password string `json:\"password\"`
}

type LoginResUser struct {
	ID        uuid.UUID `json:\"id\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
	Email     string    `json:\"email\"`
	Token     string    `json:\"token\"`
}

func (a apiConfig) login(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	userReqParams := LoginReqUser{}
	if err := decoder.Decode(&userReqParams); err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\")
		return
	}
	user, err := a.DB.GetUserByEmail(a.ctx, userReqParams.Email)
	resUser := LoginResUser{}
	resUser.CreatedAt = user.CreatedAt
	resUser.UpdatedAt = user.UpdatedAt
	resUser.Email = user.Email
	resUser.ID = user.ID
	// Handle user or database error
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
		return
	}
	if bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(userReqParams.Password)) == nil {
		utils.RespondWithJSON(w, 200, user)
	}
	utils.RespondWithJSON(w, 200, user)

}

func main() {
	godotenv.Load()
	port := os.Getenv(\"PORT\")

	dbURL := os.Getenv(\"CONN\")
	db, derr := sql.Open(\"postgres\", dbURL)
	if derr != nil {
		fmt.Println(derr.Error())
		return
	}

	dbQueries := database.New(db)
	apiCfg := apiConfig{}
	apiCfg.DB = dbQueries

	apiCfg.ctx = context.Background()

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins: []string{\"*\"},
		AllowedMethods: []string{\"GET, POST, OPTIONS, PUT, DELETE\"},
		AllowedHeaders: []string{\"*\"},
	}))

	v1Router := chi.NewRouter()
	r.Mount(\"/v1\", v1Router)

	v1Router.Get(\"/readiness\", readinessHandler)
	v1Router.Get(\"/err\", errorHandler)

	v1Router.Post(\"/register\", " 0 26 (fontified t face tree-sitter-hl-face:string) 26 28 (fontified t) 28 56 (fontified t face tree-sitter-hl-face:string) 56 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-1-face)) 58 60 (fontified t) 60 64 (fontified t face tree-sitter-hl-face:keyword) 64 65 (fontified t) 65 81 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 81 82 (fontified t face (rainbow-delimiters-depth-1-face)) 82 83 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 83 89 (fontified t) 89 103 (fontified t face tree-sitter-hl-face:type) 103 105 (fontified t) 105 106 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 106 107 (fontified t) 107 108 (fontified t face tree-sitter-hl-face:operator) 108 113 (fontified t) 113 120 (fontified t face tree-sitter-hl-face:type) 120 121 (fontified t face (rainbow-delimiters-depth-1-face)) 121 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-1-face)) 123 125 (fontified t) 125 130 (fontified t face tree-sitter-hl-face:variable) 130 131 (fontified t) 131 146 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 146 147 (fontified t face (rainbow-delimiters-depth-2-face)) 147 148 (fontified t face tree-sitter-hl-face:variable) 148 150 (fontified t) 150 153 (fontified t face tree-sitter-hl-face:number) 153 155 (fontified t) 155 161 (fontified t face tree-sitter-hl-face:keyword) 161 162 (fontified t) 162 163 (fontified t face (rainbow-delimiters-depth-3-face)) 163 166 (fontified t) 166 172 (fontified t face tree-sitter-hl-face:property) 172 173 (fontified t) 173 179 (fontified t face tree-sitter-hl-face:type) 179 180 (fontified t) 180 195 (fontified t face tree-sitter-hl-face:string) 195 197 (fontified t) 197 198 (fontified t face (rainbow-delimiters-depth-3-face)) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 205 (fontified t face tree-sitter-hl-face:variable) 205 207 (fontified t) 207 211 (fontified t face tree-sitter-hl-face:string) 211 212 (fontified t face (rainbow-delimiters-depth-3-face)) 212 213 (fontified t face (rainbow-delimiters-depth-2-face)) 213 214 (fontified t) 214 215 (fontified t face (rainbow-delimiters-depth-1-face)) 215 217 (fontified t) 217 221 (fontified t face tree-sitter-hl-face:keyword) 221 222 (fontified t) 222 234 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 234 235 (fontified t face (rainbow-delimiters-depth-1-face)) 235 236 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 236 242 (fontified t) 242 256 (fontified t face tree-sitter-hl-face:type) 256 258 (fontified t) 258 259 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 259 260 (fontified t) 260 261 (fontified t face tree-sitter-hl-face:operator) 261 266 (fontified t) 266 273 (fontified t face tree-sitter-hl-face:type) 273 274 (fontified t face (rainbow-delimiters-depth-1-face)) 274 275 (fontified t) 275 276 (fontified t face (rainbow-delimiters-depth-1-face)) 276 278 (fontified t) 278 283 (fontified t face tree-sitter-hl-face:variable) 283 284 (fontified t) 284 300 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 300 301 (fontified t face (rainbow-delimiters-depth-2-face)) 301 302 (fontified t face tree-sitter-hl-face:variable) 302 304 (fontified t) 304 307 (fontified t face tree-sitter-hl-face:number) 307 309 (fontified t) 309 332 (fontified t face tree-sitter-hl-face:string) 332 333 (fontified t face (rainbow-delimiters-depth-2-face)) 333 334 (fontified t) 334 335 (fontified t face (rainbow-delimiters-depth-1-face)) 335 337 (fontified t) 337 341 (fontified t face tree-sitter-hl-face:keyword) 341 342 (fontified t) 342 351 (fontified t face tree-sitter-hl-face:type) 351 352 (fontified t) 352 358 (fontified t face tree-sitter-hl-face:keyword) 358 359 (fontified t) 359 360 (fontified t face (rainbow-delimiters-depth-1-face)) 360 362 (fontified t) 362 364 (fontified t face tree-sitter-hl-face:property) 364 366 (fontified t) 366 367 (fontified t face tree-sitter-hl-face:operator) 367 376 (fontified t) 376 383 (fontified t face tree-sitter-hl-face:type) 383 385 (fontified t) 385 388 (fontified t face tree-sitter-hl-face:property) 388 397 (fontified t) 397 404 (fontified t face tree-sitter-hl-face:type) 404 405 (fontified t) 405 406 (fontified t face (rainbow-delimiters-depth-1-face)) 406 408 (fontified t) 408 412 (fontified t face tree-sitter-hl-face:keyword) 412 413 (fontified t) 413 426 (fontified t face tree-sitter-hl-face:type) 426 427 (fontified t) 427 431 (fontified t face tree-sitter-hl-face:keyword) 431 432 (fontified t face (rainbow-delimiters-depth-1-face)) 432 437 (fontified t) 437 451 (fontified t face tree-sitter-hl-face:type) 451 453 (fontified t) 453 454 (fontified t face tree-sitter-hl-face:operator) 454 459 (fontified t) 459 466 (fontified t face tree-sitter-hl-face:type) 466 477 (fontified t) 477 481 (fontified t face tree-sitter-hl-face:type) 481 482 (fontified t face (rainbow-delimiters-depth-1-face)) 482 484 (fontified t) 484 488 (fontified t face tree-sitter-hl-face:keyword) 488 489 (fontified t) 489 490 (fontified t face (rainbow-delimiters-depth-1-face)) 490 491 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 491 492 (fontified t) 492 493 (fontified t face tree-sitter-hl-face:operator) 493 502 (fontified t face tree-sitter-hl-face:type) 502 503 (fontified t face (rainbow-delimiters-depth-1-face)) 503 504 (fontified t) 504 516 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 516 517 (fontified t face (rainbow-delimiters-depth-1-face)) 517 524 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 524 525 (fontified t) 525 538 (fontified t face tree-sitter-hl-face:type) 538 539 (fontified t face (rainbow-delimiters-depth-1-face)) 539 545 (fontified t) 545 556 (fontified t face tree-sitter-hl-face:type) 556 557 (fontified t) 557 558 (fontified t face (rainbow-delimiters-depth-1-face)) 558 560 (fontified t) 560 566 (fontified t face tree-sitter-hl-face:keyword) 566 567 (fontified t) 567 571 (fontified t face tree-sitter-hl-face:keyword) 571 572 (fontified t face (rainbow-delimiters-depth-2-face)) 572 573 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 573 579 (fontified t) 579 593 (fontified t face tree-sitter-hl-face:type) 593 595 (fontified t) 595 596 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 596 597 (fontified t) 597 598 (fontified t face tree-sitter-hl-face:operator) 598 603 (fontified t) 603 610 (fontified t face tree-sitter-hl-face:type) 610 611 (fontified t face (rainbow-delimiters-depth-2-face)) 611 612 (fontified t) 612 613 (fontified t face (rainbow-delimiters-depth-2-face)) 613 616 (fontified t) 616 627 (fontified t face tree-sitter-hl-face:variable) 627 628 (fontified t) 628 630 (fontified t face tree-sitter-hl-face:operator) 630 631 (fontified t) 631 632 (fontified t face tree-sitter-hl-face:variable) 632 633 (fontified t) 633 639 (fontified t face tree-sitter-hl-face:property) 639 640 (fontified t) 640 643 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 643 644 (fontified t face (rainbow-delimiters-depth-3-face)) 644 659 (fontified t face tree-sitter-hl-face:string) 659 660 (fontified t face (rainbow-delimiters-depth-3-face)) 660 663 (fontified t) 663 671 (fontified t face tree-sitter-hl-face:variable) 671 672 (fontified t) 672 674 (fontified t face tree-sitter-hl-face:operator) 674 675 (fontified t) 675 682 (fontified t face tree-sitter-hl-face:variable) 682 683 (fontified t) 683 688 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 688 689 (fontified t face (rainbow-delimiters-depth-3-face)) 689 700 (fontified t face tree-sitter-hl-face:variable) 700 702 (fontified t) 702 705 (fontified t face tree-sitter-hl-face:string) 705 706 (fontified t face (rainbow-delimiters-depth-3-face)) 706 707 (fontified t face (rainbow-delimiters-depth-3-face)) 707 708 (fontified t face tree-sitter-hl-face:number) 708 709 (fontified t face (rainbow-delimiters-depth-3-face)) 709 712 (fontified t) 712 718 (fontified t face tree-sitter-hl-face:variable) 718 719 (fontified t) 719 721 (fontified t face tree-sitter-hl-face:operator) 721 726 (fontified t) 726 742 (fontified t face tree-sitter-hl-face:type) 742 743 (fontified t face (rainbow-delimiters-depth-3-face)) 743 744 (fontified t face (rainbow-delimiters-depth-3-face)) 744 747 (fontified t) 747 752 (fontified t face tree-sitter-hl-face:variable) 752 754 (fontified t) 754 757 (fontified t face tree-sitter-hl-face:variable) 757 758 (fontified t) 758 760 (fontified t face tree-sitter-hl-face:operator) 760 761 (fontified t) 761 764 (fontified t face tree-sitter-hl-face:variable) 764 765 (fontified t) 765 780 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 780 781 (fontified t face (rainbow-delimiters-depth-3-face)) 781 789 (fontified t face tree-sitter-hl-face:variable) 789 791 (fontified t) 791 792 (fontified t face tree-sitter-hl-face:operator) 792 798 (fontified t face tree-sitter-hl-face:variable) 798 800 (fontified t) 800 804 (fontified t face tree-sitter-hl-face:keyword) 804 805 (fontified t face (rainbow-delimiters-depth-4-face)) 805 810 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 810 811 (fontified t) 811 812 (fontified t face tree-sitter-hl-face:operator) 812 816 (fontified t) 816 821 (fontified t face tree-sitter-hl-face:type) 821 822 (fontified t face (rainbow-delimiters-depth-4-face)) 822 823 (fontified t) 823 824 (fontified t face (rainbow-delimiters-depth-4-face)) 824 833 (fontified t face tree-sitter-hl-face:keyword) 833 834 (fontified t face (rainbow-delimiters-depth-5-face)) 834 835 (fontified t face (rainbow-delimiters-depth-5-face)) 835 837 (fontified t) 837 842 (fontified t face tree-sitter-hl-face:type) 842 843 (fontified t face (rainbow-delimiters-depth-4-face)) 843 844 (fontified t) 844 845 (fontified t face (rainbow-delimiters-depth-4-face)) 845 849 (fontified t) 849 858 (fontified t face tree-sitter-hl-face:variable) 858 859 (fontified t) 859 861 (fontified t face tree-sitter-hl-face:operator) 861 862 (fontified t) 862 864 (fontified t face tree-sitter-hl-face:variable) 864 865 (fontified t) 865 871 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 871 872 (fontified t face (rainbow-delimiters-depth-5-face)) 872 884 (fontified t face tree-sitter-hl-face:string) 884 885 (fontified t face (rainbow-delimiters-depth-5-face)) 885 889 (fontified t) 889 895 (fontified t face tree-sitter-hl-face:keyword) 895 896 (fontified t) 896 897 (fontified t face (rainbow-delimiters-depth-5-face)) 897 898 (fontified t face (rainbow-delimiters-depth-5-face)) 898 902 (fontified t face tree-sitter-hl-face:type) 902 903 (fontified t face (rainbow-delimiters-depth-5-face)) 903 912 (fontified t face tree-sitter-hl-face:variable) 912 913 (fontified t face (rainbow-delimiters-depth-5-face)) 913 915 (fontified t) 915 918 (fontified t face tree-sitter-hl-face:constant\.builtin) 918 921 (fontified t) 921 922 (fontified t face (rainbow-delimiters-depth-4-face)) 922 923 (fontified t face (rainbow-delimiters-depth-3-face)) 923 926 (fontified t) 926 927 (fontified t face (rainbow-delimiters-depth-2-face)) 927 928 (fontified t) 928 929 (fontified t face (rainbow-delimiters-depth-1-face)) 929 931 (fontified t) 931 935 (fontified t face tree-sitter-hl-face:keyword) 935 936 (fontified t) 936 937 (fontified t face (rainbow-delimiters-depth-1-face)) 937 938 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 938 939 (fontified t) 939 948 (fontified t face tree-sitter-hl-face:type) 948 949 (fontified t face (rainbow-delimiters-depth-1-face)) 949 950 (fontified t) 950 965 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 965 966 (fontified t face (rainbow-delimiters-depth-1-face)) 966 967 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 967 973 (fontified t) 973 987 (fontified t face tree-sitter-hl-face:type) 987 989 (fontified t) 989 990 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 990 991 (fontified t) 991 992 (fontified t face tree-sitter-hl-face:operator) 992 997 (fontified t) 997 1004 (fontified t face tree-sitter-hl-face:type) 1004 1005 (fontified t face (rainbow-delimiters-depth-1-face)) 1005 1006 (fontified t) 1006 1007 (fontified t face (rainbow-delimiters-depth-1-face)) 1007 1009 (fontified t) 1009 1016 (fontified t face tree-sitter-hl-face:variable) 1016 1017 (fontified t) 1017 1019 (fontified t face tree-sitter-hl-face:operator) 1019 1020 (fontified t) 1020 1024 (fontified t face tree-sitter-hl-face:variable) 1024 1025 (fontified t) 1025 1035 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1035 1036 (fontified t face (rainbow-delimiters-depth-2-face)) 1036 1037 (fontified t face tree-sitter-hl-face:variable) 1037 1038 (fontified t) 1038 1042 (fontified t face tree-sitter-hl-face:property) 1042 1043 (fontified t face (rainbow-delimiters-depth-2-face)) 1043 1045 (fontified t) 1045 1061 (fontified t face tree-sitter-hl-face:variable) 1061 1062 (fontified t) 1062 1064 (fontified t face tree-sitter-hl-face:operator) 1064 1074 (fontified t) 1074 1090 (fontified t face tree-sitter-hl-face:type) 1090 1091 (fontified t face (rainbow-delimiters-depth-2-face)) 1091 1092 (fontified t face (rainbow-delimiters-depth-2-face)) 1092 1094 (fontified t) 1094 1096 (fontified t face tree-sitter-hl-face:keyword) 1096 1097 (fontified t) 1097 1100 (fontified t face tree-sitter-hl-face:variable) 1100 1101 (fontified t) 1101 1103 (fontified t face tree-sitter-hl-face:operator) 1103 1104 (fontified t) 1104 1111 (fontified t face tree-sitter-hl-face:variable) 1111 1112 (fontified t) 1112 1118 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1118 1119 (fontified t face (rainbow-delimiters-depth-2-face)) 1119 1120 (fontified t face tree-sitter-hl-face:operator) 1120 1133 (fontified t face tree-sitter-hl-face:variable) 1133 1136 (fontified t face tree-sitter-hl-face:variable) 1136 1137 (fontified t face (rainbow-delimiters-depth-2-face)) 1137 1139 (fontified t) 1139 1142 (fontified t face tree-sitter-hl-face:variable) 1142 1143 (fontified t) 1143 1145 (fontified t face tree-sitter-hl-face:operator) 1145 1146 (fontified t) 1146 1149 (fontified t face tree-sitter-hl-face:constant\.builtin) 1149 1150 (fontified t) 1150 1151 (fontified t face (rainbow-delimiters-depth-2-face)) 1151 1154 (fontified t) 1154 1159 (fontified t face tree-sitter-hl-face:variable) 1159 1160 (fontified t) 1160 1176 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1176 1177 (fontified t face (rainbow-delimiters-depth-3-face)) 1177 1178 (fontified t face tree-sitter-hl-face:variable) 1178 1180 (fontified t) 1180 1183 (fontified t face tree-sitter-hl-face:number) 1183 1185 (fontified t) 1185 1198 (fontified t face tree-sitter-hl-face:string) 1198 1199 (fontified t face (rainbow-delimiters-depth-3-face)) 1199 1202 (fontified t) 1202 1208 (fontified t face tree-sitter-hl-face:keyword) 1208 1210 (fontified t) 1210 1211 (fontified t face (rainbow-delimiters-depth-2-face)) 1211 1213 (fontified t) 1213 1222 (fontified t face tree-sitter-hl-face:variable) 1222 1223 (fontified t) 1223 1225 (fontified t face tree-sitter-hl-face:operator) 1225 1226 (fontified t) 1226 1230 (fontified t face tree-sitter-hl-face:variable) 1230 1231 (fontified t) 1231 1234 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1234 1235 (fontified t face (rainbow-delimiters-depth-2-face)) 1235 1236 (fontified t face (rainbow-delimiters-depth-2-face)) 1236 1238 (fontified t) 1238 1254 (fontified t face tree-sitter-hl-face:variable) 1254 1255 (fontified t) 1255 1264 (fontified t face tree-sitter-hl-face:property) 1264 1265 (fontified t) 1265 1266 (fontified t face tree-sitter-hl-face:operator) 1266 1267 (fontified t) 1267 1276 (fontified t face tree-sitter-hl-face:variable) 1276 1278 (fontified t) 1278 1294 (fontified t face tree-sitter-hl-face:variable) 1294 1295 (fontified t) 1295 1304 (fontified t face tree-sitter-hl-face:property) 1304 1305 (fontified t) 1305 1306 (fontified t face tree-sitter-hl-face:operator) 1306 1307 (fontified t) 1307 1316 (fontified t face tree-sitter-hl-face:variable) 1316 1318 (fontified t) 1318 1322 (fontified t face tree-sitter-hl-face:variable) 1322 1324 (fontified t) 1324 1328 (fontified t face tree-sitter-hl-face:variable) 1328 1329 (fontified t) 1329 1331 (fontified t face tree-sitter-hl-face:operator) 1331 1332 (fontified t) 1332 1338 (fontified t face tree-sitter-hl-face:variable) 1338 1339 (fontified t) 1339 1359 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1359 1360 (fontified t face (rainbow-delimiters-depth-2-face)) 1360 1361 (fontified t face (rainbow-delimiters-depth-3-face)) 1361 1362 (fontified t face (rainbow-delimiters-depth-3-face)) 1362 1366 (fontified t face tree-sitter-hl-face:type) 1366 1367 (fontified t face (rainbow-delimiters-depth-3-face)) 1367 1383 (fontified t face tree-sitter-hl-face:variable) 1383 1384 (fontified t) 1384 1392 (fontified t face tree-sitter-hl-face:property) 1392 1393 (fontified t face (rainbow-delimiters-depth-3-face)) 1393 1395 (fontified t) 1395 1396 (fontified t face tree-sitter-hl-face:number) 1396 1397 (fontified t face (rainbow-delimiters-depth-2-face)) 1397 1399 (fontified t) 1399 1415 (fontified t face tree-sitter-hl-face:variable) 1415 1416 (fontified t) 1416 1424 (fontified t face tree-sitter-hl-face:property) 1424 1425 (fontified t) 1425 1426 (fontified t face tree-sitter-hl-face:operator) 1426 1427 (fontified t) 1427 1431 (fontified t face tree-sitter-hl-face:variable) 1431 1433 (fontified t) 1433 1435 (fontified t face tree-sitter-hl-face:keyword) 1435 1436 (fontified t) 1436 1440 (fontified t face tree-sitter-hl-face:variable) 1440 1441 (fontified t) 1441 1443 (fontified t face tree-sitter-hl-face:operator) 1443 1444 (fontified t) 1444 1447 (fontified t face tree-sitter-hl-face:constant\.builtin) 1447 1448 (fontified t) 1448 1449 (fontified t face (rainbow-delimiters-depth-2-face)) 1449 1452 (fontified t) 1452 1457 (fontified t face tree-sitter-hl-face:variable) 1457 1458 (fontified t) 1458 1474 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1474 1475 (fontified t face (rainbow-delimiters-depth-3-face)) 1475 1476 (fontified t face tree-sitter-hl-face:variable) 1476 1478 (fontified t) 1478 1481 (fontified t face tree-sitter-hl-face:number) 1481 1483 (fontified t) 1483 1506 (fontified t face tree-sitter-hl-face:string) 1506 1507 (fontified t face (rainbow-delimiters-depth-3-face)) 1507 1509 (fontified t) 1509 1510 (fontified t face (rainbow-delimiters-depth-2-face)) 1510 1512 (fontified t) 1512 1516 (fontified t face tree-sitter-hl-face:variable) 1516 1518 (fontified t) 1518 1521 (fontified t face tree-sitter-hl-face:variable) 1521 1522 (fontified t) 1522 1524 (fontified t face tree-sitter-hl-face:operator) 1524 1525 (fontified t) 1525 1526 (fontified t face tree-sitter-hl-face:variable) 1526 1527 (fontified t) 1527 1529 (fontified t face tree-sitter-hl-face:property) 1529 1530 (fontified t) 1530 1540 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1540 1541 (fontified t face (rainbow-delimiters-depth-2-face)) 1541 1542 (fontified t face tree-sitter-hl-face:variable) 1542 1543 (fontified t) 1543 1546 (fontified t face tree-sitter-hl-face:property) 1546 1548 (fontified t) 1548 1564 (fontified t face tree-sitter-hl-face:variable) 1564 1565 (fontified t face (rainbow-delimiters-depth-2-face)) 1565 1567 (fontified t) 1567 1633 (fontified t face tree-sitter-hl-face:comment) 1633 1635 (fontified t) 1635 1637 (fontified t face tree-sitter-hl-face:keyword) 1637 1638 (fontified t) 1638 1641 (fontified t face tree-sitter-hl-face:variable) 1641 1642 (fontified t) 1642 1644 (fontified t face tree-sitter-hl-face:operator) 1644 1645 (fontified t) 1645 1648 (fontified t face tree-sitter-hl-face:constant\.builtin) 1648 1649 (fontified t) 1649 1650 (fontified t face (rainbow-delimiters-depth-2-face)) 1650 1653 (fontified t) 1653 1658 (fontified t face tree-sitter-hl-face:variable) 1658 1659 (fontified t) 1659 1675 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1675 1676 (fontified t face (rainbow-delimiters-depth-3-face)) 1676 1677 (fontified t face tree-sitter-hl-face:variable) 1677 1679 (fontified t) 1679 1682 (fontified t face tree-sitter-hl-face:number) 1682 1684 (fontified t) 1684 1697 (fontified t face tree-sitter-hl-face:string) 1697 1698 (fontified t face (rainbow-delimiters-depth-3-face)) 1698 1700 (fontified t) 1700 1701 (fontified t face (rainbow-delimiters-depth-2-face)) 1701 1702 (fontified t) 1702 1706 (fontified t face tree-sitter-hl-face:keyword) 1706 1707 (fontified t) 1707 1708 (fontified t face (rainbow-delimiters-depth-2-face)) 1708 1711 (fontified t) 1711 1716 (fontified t face tree-sitter-hl-face:variable) 1716 1717 (fontified t) 1717 1732 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1732 1733 (fontified t face (rainbow-delimiters-depth-3-face)) 1733 1734 (fontified t face tree-sitter-hl-face:variable) 1734 1736 (fontified t) 1736 1739 (fontified t face tree-sitter-hl-face:number) 1739 1741 (fontified t) 1741 1745 (fontified t face tree-sitter-hl-face:variable) 1745 1746 (fontified t face (rainbow-delimiters-depth-3-face)) 1746 1748 (fontified t) 1748 1749 (fontified t face (rainbow-delimiters-depth-2-face)) 1749 1750 (fontified t) 1750 1751 (fontified t face (rainbow-delimiters-depth-1-face)) 1751 1753 (fontified t) 1753 1757 (fontified t face tree-sitter-hl-face:keyword) 1757 1758 (fontified t) 1758 1759 (fontified t face (rainbow-delimiters-depth-1-face)) 1759 1760 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1760 1761 (fontified t) 1761 1770 (fontified t face tree-sitter-hl-face:type) 1770 1771 (fontified t face (rainbow-delimiters-depth-1-face)) 1771 1772 (fontified t) 1772 1781 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 1781 1782 (fontified t face (rainbow-delimiters-depth-1-face)) 1782 1784 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1784 1785 (fontified t) 1785 1791 (fontified t face tree-sitter-hl-face:type) 1791 1793 (fontified t) 1793 1799 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1799 1800 (fontified t) 1800 1806 (fontified t face tree-sitter-hl-face:type) 1806 1808 (fontified t) 1808 1824 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1824 1825 (fontified t) 1825 1828 (fontified t face tree-sitter-hl-face:type) 1828 1829 (fontified t face (rainbow-delimiters-depth-1-face)) 1829 1830 (fontified t) 1830 1831 (fontified t face (rainbow-delimiters-depth-1-face)) 1831 1837 (fontified t face tree-sitter-hl-face:type) 1837 1839 (fontified t) 1839 1844 (fontified t face tree-sitter-hl-face:type) 1844 1845 (fontified t face (rainbow-delimiters-depth-1-face)) 1845 1846 (fontified t) 1846 1847 (fontified t face (rainbow-delimiters-depth-1-face)) 1847 1849 (fontified t) 1849 1857 (fontified t face tree-sitter-hl-face:variable) 1857 1858 (fontified t) 1858 1862 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1862 1863 (fontified t face (rainbow-delimiters-depth-2-face)) 1863 1864 (fontified t face (rainbow-delimiters-depth-2-face)) 1864 1866 (fontified t) 1866 1875 (fontified t face tree-sitter-hl-face:variable) 1875 1876 (fontified t) 1876 1878 (fontified t face tree-sitter-hl-face:operator) 1878 1879 (fontified t) 1879 1881 (fontified t face tree-sitter-hl-face:variable) 1881 1882 (fontified t) 1882 1888 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1888 1889 (fontified t face (rainbow-delimiters-depth-2-face)) 1889 1901 (fontified t face tree-sitter-hl-face:string) 1901 1902 (fontified t face (rainbow-delimiters-depth-2-face)) 1902 1904 (fontified t) 1904 1910 (fontified t face tree-sitter-hl-face:variable) 1910 1911 (fontified t) 1911 1913 (fontified t face tree-sitter-hl-face:operator) 1913 1918 (fontified t) 1918 1934 (fontified t face tree-sitter-hl-face:type) 1934 1935 (fontified t face (rainbow-delimiters-depth-2-face)) 1935 1936 (fontified t face (rainbow-delimiters-depth-2-face)) 1936 1938 (fontified t) 1938 1944 (fontified t face tree-sitter-hl-face:variable) 1944 1945 (fontified t) 1945 1951 (fontified t face tree-sitter-hl-face:property) 1951 1952 (fontified t) 1952 1953 (fontified t face tree-sitter-hl-face:operator) 1953 1954 (fontified t) 1954 1960 (fontified t face tree-sitter-hl-face:variable) 1960 1962 (fontified t) 1962 1968 (fontified t face tree-sitter-hl-face:variable) 1968 1969 (fontified t) 1969 1977 (fontified t face tree-sitter-hl-face:property) 1977 1978 (fontified t) 1978 1979 (fontified t face tree-sitter-hl-face:operator) 1979 1980 (fontified t) 1980 1983 (fontified t face tree-sitter-hl-face:variable) 1983 1984 (fontified t) 1984 1998 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 1998 1999 (fontified t face (rainbow-delimiters-depth-2-face)) 1999 2003 (fontified t face tree-sitter-hl-face:variable) 2003 2004 (fontified t) 2004 2007 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2007 2008 (fontified t face (rainbow-delimiters-depth-3-face)) 2008 2009 (fontified t face (rainbow-delimiters-depth-3-face)) 2009 2010 (fontified t) 2010 2013 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2013 2014 (fontified t face (rainbow-delimiters-depth-3-face)) 2014 2015 (fontified t face (rainbow-delimiters-depth-3-face)) 2015 2016 (fontified t face (rainbow-delimiters-depth-2-face)) 2016 2018 (fontified t) 2018 2024 (fontified t face tree-sitter-hl-face:variable) 2024 2025 (fontified t) 2025 2034 (fontified t face tree-sitter-hl-face:property) 2034 2035 (fontified t) 2035 2036 (fontified t face tree-sitter-hl-face:operator) 2036 2037 (fontified t) 2037 2040 (fontified t face tree-sitter-hl-face:variable) 2040 2041 (fontified t) 2041 2055 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2055 2056 (fontified t face (rainbow-delimiters-depth-2-face)) 2056 2062 (fontified t face tree-sitter-hl-face:variable) 2062 2063 (fontified t) 2063 2071 (fontified t face tree-sitter-hl-face:property) 2071 2072 (fontified t) 2072 2075 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2075 2076 (fontified t face (rainbow-delimiters-depth-3-face)) 2076 2080 (fontified t face tree-sitter-hl-face:variable) 2080 2081 (fontified t) 2081 2087 (fontified t face tree-sitter-hl-face:property) 2087 2088 (fontified t) 2088 2089 (fontified t face tree-sitter-hl-face:operator) 2089 2090 (fontified t) 2090 2094 (fontified t face tree-sitter-hl-face:variable) 2094 2095 (fontified t) 2095 2103 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2103 2104 (fontified t face (rainbow-delimiters-depth-4-face)) 2104 2120 (fontified t face tree-sitter-hl-face:variable) 2120 2121 (fontified t face (rainbow-delimiters-depth-4-face)) 2121 2122 (fontified t face (rainbow-delimiters-depth-3-face)) 2122 2123 (fontified t face (rainbow-delimiters-depth-2-face)) 2123 2125 (fontified t) 2125 2131 (fontified t face tree-sitter-hl-face:variable) 2131 2132 (fontified t) 2132 2139 (fontified t face tree-sitter-hl-face:property) 2139 2140 (fontified t) 2140 2141 (fontified t face tree-sitter-hl-face:operator) 2141 2142 (fontified t) 2142 2144 (fontified t face tree-sitter-hl-face:variable) 2144 2146 (fontified t) 2146 2151 (fontified t face tree-sitter-hl-face:variable) 2151 2152 (fontified t) 2152 2154 (fontified t face tree-sitter-hl-face:operator) 2154 2155 (fontified t) 2155 2158 (fontified t face tree-sitter-hl-face:variable) 2158 2159 (fontified t) 2159 2172 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2172 2173 (fontified t face (rainbow-delimiters-depth-2-face)) 2173 2176 (fontified t face tree-sitter-hl-face:variable) 2176 2177 (fontified t) 2177 2195 (fontified t face tree-sitter-hl-face:property) 2195 2197 (fontified t) 2197 2203 (fontified t face tree-sitter-hl-face:variable) 2203 2204 (fontified t face (rainbow-delimiters-depth-2-face)) 2204 2206 (fontified t) 2206 2212 (fontified t face tree-sitter-hl-face:keyword) 2212 2213 (fontified t) 2213 2218 (fontified t face tree-sitter-hl-face:variable) 2218 2219 (fontified t) 2219 2231 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2231 2232 (fontified t face (rainbow-delimiters-depth-2-face)) 2232 2233 (fontified t face (rainbow-delimiters-depth-3-face)) 2233 2234 (fontified t face (rainbow-delimiters-depth-3-face)) 2234 2238 (fontified t face tree-sitter-hl-face:type) 2238 2239 (fontified t face (rainbow-delimiters-depth-3-face)) 2239 2248 (fontified t face tree-sitter-hl-face:variable) 2248 2249 (fontified t face (rainbow-delimiters-depth-3-face)) 2249 2250 (fontified t face (rainbow-delimiters-depth-2-face)) 2250 2251 (fontified t) 2251 2252 (fontified t face (rainbow-delimiters-depth-1-face)) 2252 2254 (fontified t) 2254 2258 (fontified t face tree-sitter-hl-face:keyword) 2258 2259 (fontified t) 2259 2260 (fontified t face (rainbow-delimiters-depth-1-face)) 2260 2261 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2261 2262 (fontified t) 2262 2271 (fontified t face tree-sitter-hl-face:type) 2271 2272 (fontified t face (rainbow-delimiters-depth-1-face)) 2272 2273 (fontified t) 2273 2289 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 2289 2290 (fontified t face (rainbow-delimiters-depth-1-face)) 2290 2292 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2292 2293 (fontified t) 2293 2299 (fontified t face tree-sitter-hl-face:type) 2299 2300 (fontified t face (rainbow-delimiters-depth-1-face)) 2300 2301 (fontified t) 2301 2302 (fontified t face (rainbow-delimiters-depth-1-face)) 2302 2308 (fontified t face tree-sitter-hl-face:type) 2308 2310 (fontified t) 2310 2315 (fontified t face tree-sitter-hl-face:type) 2315 2316 (fontified t face (rainbow-delimiters-depth-1-face)) 2316 2317 (fontified t) 2317 2318 (fontified t face (rainbow-delimiters-depth-1-face)) 2318 2320 (fontified t) 2320 2331 (fontified t face tree-sitter-hl-face:variable) 2331 2333 (fontified t) 2333 2336 (fontified t face tree-sitter-hl-face:variable) 2336 2337 (fontified t) 2337 2339 (fontified t face tree-sitter-hl-face:operator) 2339 2340 (fontified t) 2340 2341 (fontified t face tree-sitter-hl-face:variable) 2341 2342 (fontified t) 2342 2351 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2351 2352 (fontified t face (rainbow-delimiters-depth-2-face)) 2352 2354 (fontified t face tree-sitter-hl-face:variable) 2354 2356 (fontified t) 2356 2374 (fontified t face tree-sitter-hl-face:string) 2374 2376 (fontified t) 2376 2383 (fontified t face tree-sitter-hl-face:number) 2383 2384 (fontified t face (rainbow-delimiters-depth-2-face)) 2384 2386 (fontified t) 2386 2388 (fontified t face tree-sitter-hl-face:keyword) 2388 2389 (fontified t) 2389 2392 (fontified t face tree-sitter-hl-face:variable) 2392 2393 (fontified t) 2393 2395 (fontified t face tree-sitter-hl-face:operator) 2395 2396 (fontified t) 2396 2399 (fontified t face tree-sitter-hl-face:constant\.builtin) 2399 2400 (fontified t) 2400 2401 (fontified t face (rainbow-delimiters-depth-2-face)) 2401 2404 (fontified t) 2404 2405 (fontified t face (rainbow-delimiters-depth-2-face)) 2405 2407 (fontified t) 2407 2413 (fontified t face tree-sitter-hl-face:keyword) 2413 2414 (fontified t) 2414 2425 (fontified t face tree-sitter-hl-face:variable) 2425 2427 (fontified t) 2427 2430 (fontified t face tree-sitter-hl-face:variable) 2430 2431 (fontified t) 2431 2432 (fontified t face (rainbow-delimiters-depth-1-face)) 2432 2434 (fontified t) 2434 2438 (fontified t face tree-sitter-hl-face:keyword) 2438 2439 (fontified t) 2439 2440 (fontified t face (rainbow-delimiters-depth-1-face)) 2440 2441 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2441 2442 (fontified t) 2442 2451 (fontified t face tree-sitter-hl-face:type) 2451 2452 (fontified t face (rainbow-delimiters-depth-1-face)) 2452 2453 (fontified t) 2453 2468 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 2468 2469 (fontified t face (rainbow-delimiters-depth-1-face)) 2469 2471 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2471 2472 (fontified t) 2472 2478 (fontified t face tree-sitter-hl-face:type) 2478 2479 (fontified t face (rainbow-delimiters-depth-1-face)) 2479 2480 (fontified t) 2480 2481 (fontified t face (rainbow-delimiters-depth-1-face)) 2481 2487 (fontified t face tree-sitter-hl-face:type) 2487 2489 (fontified t) 2489 2494 (fontified t face tree-sitter-hl-face:type) 2494 2495 (fontified t face (rainbow-delimiters-depth-1-face)) 2495 2496 (fontified t) 2496 2497 (fontified t face (rainbow-delimiters-depth-1-face)) 2497 2499 (fontified t) 2499 2505 (fontified t face tree-sitter-hl-face:keyword) 2505 2506 (fontified t) 2506 2507 (fontified t face tree-sitter-hl-face:variable) 2507 2508 (fontified t) 2508 2517 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 2517 2518 (fontified t face (rainbow-delimiters-depth-2-face)) 2518 2520 (fontified t face tree-sitter-hl-face:variable) 2520 2522 (fontified t) 2522 2539 (fontified t face tree-sitter-hl-face:string) 2539 2541 (fontified t) 2541 2546 (fontified t face tree-sitter-hl-face:number) 2546 2547 (fontified t face (rainbow-delimiters-depth-2-face)) 2547 2548 (fontified t) 2548 2549 (fontified t face (rainbow-delimiters-depth-1-face)) 2549 2551 (fontified t) 2551 2555 (fontified t face tree-sitter-hl-face:keyword) 2555 2556 (fontified t) 2556 2573 (fontified t face tree-sitter-hl-face:type) 2573 2574 (fontified t) 2574 2580 (fontified t face tree-sitter-hl-face:keyword) 2580 2581 (fontified t) 2581 2582 (fontified t face (rainbow-delimiters-depth-1-face)) 2582 2593 (fontified t) 2593 2597 (fontified t face tree-sitter-hl-face:type) 2597 2599 (fontified t) 2599 2604 (fontified t face tree-sitter-hl-face:property) 2604 2605 (fontified t) 2605 2611 (fontified t face tree-sitter-hl-face:type) 2611 2612 (fontified t) 2612 2613 (fontified t face (rainbow-delimiters-depth-1-face)) 2613 2615 (fontified t) 2615 2619 (fontified t face tree-sitter-hl-face:keyword) 2619 2620 (fontified t) 2620 2632 (fontified t face tree-sitter-hl-face:type) 2632 2633 (fontified t) 2633 4369 (fontified nil)) . 368) (undo-tree-id6 . -2253) (undo-tree-id7 . -1277) (undo-tree-id8 . -2253) (undo-tree-id9 . -2253) (undo-tree-id10 . -2253) (undo-tree-id11 . -2253) (undo-tree-id12 . -2253) (undo-tree-id13 . -2253) (undo-tree-id14 . -1848) (t 25939 53954 399610 199000)) nil (25943 49143 577278 120000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5211) (undo-tree-id0 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5212) (undo-tree-id1 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5213) (undo-tree-id2 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5214) (undo-tree-id3 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5215) (undo-tree-id4 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5216) (undo-tree-id5 . -1) 5217 (t 25943 49092 285607 278000)) nil (25943 49143 577270 372000) 0 nil])
([nil nil ((5211 . 5218)) nil (25943 49143 577233 781000) 0 nil])
([nil nil ((875 . 876) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 875) 881 (1118 . 1119) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 1118) (1981 . 1982) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 1981) (2823 . 2824) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2823) (3325 . 3326) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 3325) (3691 . 3692) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 3691) (3859 . 3860) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 3859) (4434 . 4435) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 4434) (6048 . 6049) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 6048) (7368 . 7369) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 7368) (t 25943 49143 602525 717000)) nil (25943 49292 71058 703000) 0 nil])
([nil nil ((#("type ApiConfig struct {
	DB  *database.Queries
	ctx context.Context
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t face tree-sitter-hl-face:type) 6 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t) 15 21 (fontified t face tree-sitter-hl-face:keyword) 21 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 25 (fontified t) 25 27 (fontified t face tree-sitter-hl-face:property) 27 29 (fontified t) 29 30 (fontified t face tree-sitter-hl-face:operator) 30 39 (fontified t) 39 46 (fontified t face tree-sitter-hl-face:type) 46 48 (fontified t) 48 51 (fontified t face tree-sitter-hl-face:property) 51 60 (fontified t) 60 67 (fontified t face tree-sitter-hl-face:type) 67 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-1-face)) 69 70 (fontified t)) . 870) (undo-tree-id88 . -68) (undo-tree-id89 . -69) (undo-tree-id90 . -11) (undo-tree-id91 . -68) (undo-tree-id92 . -68) (t 25943 49292 95388 375000)) nil (25943 49668 630925 139000) 0 nil])
([nil nil ((1048 . 1052)) nil (25943 49668 630921 588000) 0 nil])
([nil nil ((1052 . 1054)) nil (25943 49668 630921 87000) 0 nil])
([nil nil ((1054 . 1056) (#("Api" 0 1 (fontified t face tree-sitter-hl-face:type) 1 3 (fontified t face tree-sitter-hl-face:type)) . 1054) (undo-tree-id87 . 2)) nil (25943 49668 630920 379000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1043) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1044) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1045) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#(" " 0 1 (fontified t)) . -1046) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1047) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1048) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1049) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1050) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1051) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1052) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("." 0 1 (fontified t)) . -1053) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1054) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1055) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1056) (undo-tree-id63 . 1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1057) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1058) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1059) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1060) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1061) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1062) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . 1) (undo-tree-id86 . -1) 1063) nil (25943 49668 630915 59000) 0 nil])
([nil nil ((1078 . 1084)) nil (25943 49668 630870 558000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1082) (undo-tree-id15 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1083) (undo-tree-id16 . -1) 1084) nil (25943 49668 630869 367000) 0 nil])
([nil nil ((1082 . 1088)) nil (25943 49668 630860 202000) 0 nil])
([nil nil ((apply yas--snippet-revive 1088 1096 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1088 . 1096) (#("DBConfig" 0 8 (fontified nil)) . 1088) (1088 . 1096) (#("DBConfig" 0 8 (fontified nil)) . -1088) (1088 . 1096)) nil (25943 49668 630855 546000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1077) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("," 0 1 (fontified t)) . -1078) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#(" " 0 1 (fontified t)) . -1079) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1080) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#(" " 0 1 (fontified t)) . -1081) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1082) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1083) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1084) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1085) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1086) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("." 0 1 (fontified t)) . -1087) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1088) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1089) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1090) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1091) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1092) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1093) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1094) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1095) (undo-tree-id263 . -1) 1096 (t 25943 49668 659653 981000)) nil (25943 49831 516228 147000) 0 nil])
([nil nil ((1077 . 1078)) nil (25943 49831 516202 95000) 0 nil])
([nil nil ((1057 . 1058)) nil (25943 49831 516201 418000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1057) (undo-tree-id226 . -1) 1058) nil (25943 49831 516200 284000) 0 nil])
([nil nil ((1057 . 1066)) nil (25943 49831 516198 564000) 0 nil])
([nil nil ((apply yas--snippet-revive 1066 1074 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1066 . 1074) (#("DBConfig" 0 8 (fontified nil)) . 1066) (1066 . 1074) (#("DBConfig" 0 8 (fontified nil)) . -1066) (1066 . 1074)) nil (25943 49831 516197 657000) 0 nil])
([nil nil ((1074 . 1076)) nil (25943 49831 516196 573000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1984 . 1985) (#("
" 0 1 (fontified nil)) . -2038) (1983 . 2039) 1942) nil (25943 49831 516195 918000) 0 nil])
([nil nil ((2803 . 2804) (2800 . 2801) (2801 . 2802)) nil (25943 49831 516194 679000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2803) (undo-tree-id225 . -1) (2804 . 2805) (#("}" 0 1 (fontified nil)) . -2804) (2804 . 2805)) nil (25943 49831 516193 648000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1910) (undo-tree-id208 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1911) (undo-tree-id209 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1912) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -1913) (undo-tree-id211 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1914) (undo-tree-id212 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1915) (undo-tree-id213 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1916) (undo-tree-id214 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1917) (undo-tree-id215 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1918) (undo-tree-id216 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1919) (undo-tree-id217 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1920) (undo-tree-id218 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1921) (undo-tree-id219 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1922) (undo-tree-id220 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1923) (undo-tree-id221 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1924) (undo-tree-id222 . -1) (undo-tree-id223 . 1) (undo-tree-id224 . -1) 1925) nil (25943 49831 516190 282000) 0 nil])
([nil nil ((1927 . 1929)) nil (25943 49831 516170 531000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1927) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id207 . -1) 1929) nil (25943 49831 516169 736000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1944) (undo-tree-id185 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1945) (undo-tree-id186 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1946) (undo-tree-id187 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1947) (undo-tree-id188 . -1) (#("," 0 1 (fontified t)) . -1948) (undo-tree-id189 . -1) (#(" " 0 1 (fontified t)) . -1949) (undo-tree-id190 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1950) (undo-tree-id191 . -1) (#(" " 0 1 (fontified t)) . -1951) (undo-tree-id192 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1952) (undo-tree-id193 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1953) (undo-tree-id194 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1954) (undo-tree-id195 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1955) (undo-tree-id196 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1956) (undo-tree-id197 . -1) (#("." 0 1 (fontified t)) . -1957) (undo-tree-id198 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1958) (undo-tree-id199 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1959) (undo-tree-id200 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1960) (undo-tree-id201 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1961) (undo-tree-id202 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1962) (undo-tree-id203 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1963) (undo-tree-id204 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1964) (undo-tree-id205 . -1) 1965) nil (25943 49831 516164 219000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1927) (undo-tree-id168 . -1) (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id169 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1929) (undo-tree-id170 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1930) (undo-tree-id171 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1931) (undo-tree-id172 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1932) (undo-tree-id173 . -1) (#("." 0 1 (fontified t)) . -1933) (undo-tree-id174 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1934) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1935) (undo-tree-id176 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id177 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1937) (undo-tree-id178 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1938) (undo-tree-id179 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1939) (undo-tree-id180 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1940) (undo-tree-id181 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1941) (undo-tree-id182 . -1) (#("W" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1942) (undo-tree-id183 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1943) (undo-tree-id184 . -1) 1944) nil (25943 49831 516145 75000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1926) (undo-tree-id167 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 1927)) nil (25943 49831 516132 302000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1925) (undo-tree-id166 . -1) 1926) nil (25943 49831 516130 723000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1927) (1927 . 1928) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1927) (1927 . 1928) (1925 . 1928)) nil (25943 49831 516128 768000) 0 nil])
([nil nil ((1927 . 1928)) nil (25943 49831 516127 419000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . 1927)) nil (25943 49831 516126 465000) 0 nil])
([nil nil ((#("r()" 0 1 (fontified nil face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face)) 2 3 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1925) (undo-tree-id160 . 1) (undo-tree-id161 . -2) (undo-tree-id162 . 1) (undo-tree-id163 . -3) (undo-tree-id164 . 2) (undo-tree-id165 . -2) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1927) (1927 . 1928) (#(")" 0 1 (fontified nil)) . 1927) (1927 . 1928)) nil (25943 49831 516125 234000) 0 nil])
([nil nil ((1925 . 1926)) nil (25943 49831 516119 667000) 0 nil])
([nil nil ((1926 . 1928)) nil (25943 49831 516119 223000) 0 nil])
([nil nil ((1927 . 1944)) nil (25943 49831 516118 565000) 0 nil])
([nil nil ((1944 . 1965)) nil (25943 49831 516118 156000) 0 nil])
([nil nil ((1927 . 1929)) nil (25943 49831 516117 489000) 0 nil])
([nil nil ((#("a " 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1 2 (fontified t)) . 1927) (undo-tree-id159 . -2)) nil (25943 49831 516116 887000) 0 nil])
([nil nil ((1910 . 1925)) nil (25943 49831 516115 455000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . 2804) (2804 . 2805) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2804) (2803 . 2804)) nil (25943 49831 516114 328000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2803) (undo-tree-id158 . -1) (2804 . 2805) (#("}" 0 1 (fontified nil)) . -2804) (2804 . 2805)) nil (25943 49831 516113 28000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1910) (undo-tree-id141 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1911) (undo-tree-id142 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1912) (undo-tree-id143 . -1) (#(" " 0 1 (fontified t)) . -1913) (undo-tree-id144 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1914) (undo-tree-id145 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1915) (undo-tree-id146 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1916) (undo-tree-id147 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1917) (undo-tree-id148 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1918) (undo-tree-id149 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1919) (undo-tree-id150 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1920) (undo-tree-id151 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1921) (undo-tree-id152 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1922) (undo-tree-id153 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1923) (undo-tree-id154 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1924) (undo-tree-id155 . -1) (undo-tree-id156 . 1) (undo-tree-id157 . -1) 1925) nil (25943 49831 516109 673000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1944) (undo-tree-id120 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1945) (undo-tree-id121 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1946) (undo-tree-id122 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1947) (undo-tree-id123 . -1) (#("," 0 1 (fontified t)) . -1948) (undo-tree-id124 . -1) (#(" " 0 1 (fontified t)) . -1949) (undo-tree-id125 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1950) (undo-tree-id126 . -1) (#(" " 0 1 (fontified t)) . -1951) (undo-tree-id127 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1952) (undo-tree-id128 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1953) (undo-tree-id129 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1954) (undo-tree-id130 . -1) (#("t" 0 1 (fontified nil)) . -1955) (undo-tree-id131 . -1) (#("p" 0 1 (fontified nil)) . -1956) (undo-tree-id132 . -1) (#("." 0 1 (fontified nil)) . -1957) (undo-tree-id133 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1958) (undo-tree-id134 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1959) (undo-tree-id135 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1960) (undo-tree-id136 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1961) (undo-tree-id137 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1962) (undo-tree-id138 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1963) (undo-tree-id139 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1964) (undo-tree-id140 . -1) 1965) nil (25943 49831 516039 714000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1927) (undo-tree-id103 . -1) (#(" " 0 1 (fontified t)) . -1928) (undo-tree-id104 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1929) (undo-tree-id105 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1930) (undo-tree-id106 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1931) (undo-tree-id107 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1932) (undo-tree-id108 . -1) (#("." 0 1 (fontified t)) . -1933) (undo-tree-id109 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1934) (undo-tree-id110 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1935) (undo-tree-id111 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1936) (undo-tree-id112 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1937) (undo-tree-id113 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1938) (undo-tree-id114 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1939) (undo-tree-id115 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1940) (undo-tree-id116 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1941) (undo-tree-id117 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1942) (undo-tree-id118 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1943) (undo-tree-id119 . -1) 1944) nil (25943 49831 516022 827000) 0 nil])
([nil nil ((1927 . 1929)) nil (25943 49831 516010 240000) 0 nil])
([nil nil ((1929 . 1936)) nil (25943 49831 516009 622000) 0 nil])
([nil nil ((apply yas--snippet-revive 1936 1944 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (1936 . 1944) (#("DBConfig" 0 8 (fontified nil)) . 1936) (1936 . 1944) (#("DBConfig" 0 8 (fontified nil)) . -1936) (1936 . 1944)) nil (25943 49831 516008 306000) 0 nil])
([nil nil ((1945 . 1949)) nil (25943 49831 516006 652000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1946) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1947) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1948) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 1949) nil (25943 49831 516005 298000) 0 nil])
([nil nil ((1946 . 1955)) nil (25943 49831 515915 745000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1954) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 1955) nil (25943 49831 515914 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 1951 1958 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (1951 . 1958) (#("Handler" 0 7 (fontified nil)) . 1951) (1951 . 1958) (#("Han" 0 3 (fontified nil)) . 1951) (1951 . 1954) (#("Handler" 0 7 (fontified nil)) . -1951) (1951 . 1958) (#("Han" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1951) (undo-tree-id93 . -3) (undo-tree-id94 . -3) 1954) nil (25943 49831 515909 631000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2788) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2789) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#(" " 0 1 (fontified t)) . -2790) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2791) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2792) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2793) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2794) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("C" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2795) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2796) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2797) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("f" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2798) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2799) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2800) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2801) (undo-tree-id324 . -1) (undo-tree-id325 . 1) (undo-tree-id326 . -1) (#(" " 0 1 (fontified t)) . -2802) (undo-tree-id327 . -1) 2803 (t 25943 49831 545977 644000)) nil (25943 49881 120119 140000) 0 nil])
([nil nil ((2798 . 2807)) nil (25943 49881 119987 306000) 0 nil])
([nil nil ((apply yas--snippet-revive 2807 2815 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2807 . 2815) (#("DBConfig" 0 8 (fontified nil)) . 2807) (2807 . 2815) (#("DBConfig" 0 8 (fontified nil)) . -2807) (2807 . 2815)) nil (25943 49881 119986 286000) 0 nil])
([nil nil ((2815 . 2817)) nil (25943 49881 119985 179000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3300) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3301) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3302) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3303) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3304) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3305) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3306) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3307) (undo-tree-id293 . -1) (undo-tree-id294 . 1) (undo-tree-id295 . -1) (#(" " 0 1 (fontified t)) . -3308) (undo-tree-id296 . -1) 3309) nil (25943 49881 119982 806000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3294) (undo-tree-id268 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -3295) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#(" " 0 1 (fontified t)) . -3296) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -3297) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3298) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3299) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 3300) nil (25943 49881 119970 333000) 0 nil])
([nil nil ((3311 . 3318)) nil (25943 49881 119961 981000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3314) (undo-tree-id264 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3315) (undo-tree-id265 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3316) (undo-tree-id266 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3317) (undo-tree-id267 . -1) 3318) nil (25943 49881 119960 260000) 0 nil])
([nil nil ((3314 . 3320)) nil (25943 49881 119949 115000) 0 nil])
([nil nil ((apply yas--snippet-revive 3320 3328 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (3320 . 3328) (#("DBConfig" 0 8 (fontified nil)) . 3320) (3320 . 3328) (#("DBConfig" 0 8 (fontified nil)) . -3320) (3320 . 3328)) nil (25943 49881 119947 853000) 0 nil])
([nil nil ((3328 . 3330)) nil (25943 49881 119943 310000) 0 nil])
([nil nil ((3392 . 3395) (t 25943 49881 146062 56000)) nil (25943 49971 640006 156000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3611) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3612) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3613) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 3614) nil (25943 49971 640004 809000) 0 nil])
([nil nil ((3611 . 3614)) nil (25943 49971 639999 405000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -3380) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("." 0 1 (fontified t)) . -3381) (undo-tree-id394 . -1) (undo-tree-id395 . -1) 3382) nil (25943 49971 639998 569000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3665) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -3666) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(" " 0 1 (fontified t)) . -3667) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -3668) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3669) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3670) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3671) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3672) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3673) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3674) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3675) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3676) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3677) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3678) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . 1) (undo-tree-id390 . -1) (#(" " 0 1 (fontified t)) . -3679) (undo-tree-id391 . -1) 3680) nil (25943 49971 639992 97000) 0 nil])
([nil nil ((3681 . 3684)) nil (25943 49971 639956 610000) 0 nil])
([nil nil ((3684 . 3688)) nil (25943 49971 639956 48000) 0 nil])
([nil nil ((3688 . 3690)) nil (25943 49971 639955 371000) 0 nil])
([nil nil ((3690 . 3700)) nil (25943 49971 639954 683000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3696) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3697) (undo-tree-id332 . -1) (#("," 0 1 (fontified t)) . -3698) (undo-tree-id333 . -1) (#(" " 0 1 (fontified t)) . -3699) (undo-tree-id334 . -1) 3700) nil (25943 49971 639953 529000) 0 nil])
([nil nil ((3696 . 3700)) nil (25943 49971 639949 554000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -3737) (undo-tree-id328 . -1) (#("." 0 1 (fontified t)) . -3738) (undo-tree-id329 . -1) 3739) nil (25943 49971 639947 708000) 0 nil])
([nil nil ((3747 . 3750)) nil (25943 49971 639936 814000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3838) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . 1) (undo-tree-id421 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -3839) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#(" " 0 1 (fontified t)) . -3840) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -3841) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3842) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3843) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3844) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3845) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3846) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3847) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3848) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3849) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3850) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3851) (undo-tree-id446 . -1) (undo-tree-id447 . 1) (undo-tree-id448 . -1) (#(" " 0 1 (fontified t)) . -3852) (undo-tree-id449 . -1) 3853 (t 25943 49971 670208 733000)) nil (25943 50000 236126 451000) 0 nil])
([nil nil ((3851 . 3855)) nil (25943 50000 236105 46000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3853) (undo-tree-id416 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3854) (undo-tree-id417 . -1) 3855) nil (25943 50000 236104 144000) 0 nil])
([nil nil ((3853 . 3859)) nil (25943 50000 236101 746000) 0 nil])
([nil nil ((apply yas--snippet-revive 3859 3867 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (3859 . 3867) (#("DBConfig" 0 8 (fontified nil)) . 3859) (3859 . 3867) (#("DBConfig" 0 8 (fontified nil)) . -3859) (3859 . 3867)) nil (25943 50000 236100 959000) 0 nil])
([nil nil ((3853 . 3854)) nil (25943 50000 236099 440000) 0 nil])
([nil nil ((3868 . 3870)) nil (25943 50000 236098 888000) 0 nil])
([nil nil ((3909 . 3912)) nil (25943 50000 236098 475000) 0 nil])
([nil nil ((3912 . 3918)) nil (25943 50000 236092 379000) 0 nil])
([nil nil ((apply yas--snippet-revive 3915 3922 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (3915 . 3922) (#("Handler" 0 7 (fontified nil)) . 3915) (3915 . 3922) (#("Han" 0 3 (fontified nil)) . 3915) (3915 . 3918) (#("Handler" 0 7 (fontified nil)) . -3915) (3915 . 3922) (#("Han" 0 3 (fontified t face tree-sitter-hl-face:type)) . -3915) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -2) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) 3918) nil (25943 50000 236089 166000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4429) (undo-tree-id454 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4430) (undo-tree-id455 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4431) (undo-tree-id456 . -1) (#(" " 0 1 (fontified t)) . -4432) (undo-tree-id457 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4433) (undo-tree-id458 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4434) (undo-tree-id459 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4435) (undo-tree-id460 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4436) (undo-tree-id461 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4437) (undo-tree-id462 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4438) (undo-tree-id463 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4439) (undo-tree-id464 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4440) (undo-tree-id465 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4441) (undo-tree-id466 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4442) (undo-tree-id467 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4443) (undo-tree-id468 . -1) (undo-tree-id469 . 1) (undo-tree-id470 . -1) 4444 (t 25943 50000 262253 785000)) nil (25943 50018 709445 106000) 0 nil])
([nil nil ((4449 . 4455)) nil (25943 50018 709433 652000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4454) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 4455) nil (25943 50018 709432 652000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4453) (undo-tree-id450 . -1) (undo-tree-id451 . -1) 4454) nil (25943 50018 709430 639000) 0 nil])
([nil nil ((4453 . 4458)) nil (25943 50018 709422 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 4458 4466 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (4458 . 4466) (#("DBConfig" 0 8 (fontified nil)) . 4458) (4458 . 4466) (#("DBConfig" 0 8 (fontified nil)) . -4458) (4458 . 4466)) nil (25943 50018 709421 350000) 0 nil])
([nil nil ((4466 . 4468)) nil (25943 50018 709417 297000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4217) (undo-tree-id474 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4218) (undo-tree-id475 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4219) (undo-tree-id476 . -1) 4220 (t 25943 50018 736282 677000)) nil (25943 50045 450819 581000) 0 nil])
([nil nil ((4217 . 4220)) nil (25943 50045 450816 938000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4832) (undo-tree-id471 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4833) (undo-tree-id472 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4834) (undo-tree-id473 . -1) 4835) nil (25943 50045 450815 321000) 0 nil])
([nil nil ((4832 . 4835)) nil (25943 50045 450804 232000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -5329) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("." 0 1 (fontified t)) . -5330) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 5331 (t 25943 50045 476324 240000)) nil (25943 50052 783103 264000) 0 nil])
([nil nil ((5345 . 5348) (t 25943 50052 808335 591000)) nil (25943 50058 652223 539000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -6049) (undo-tree-id487 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -6050) (undo-tree-id488 . -1) (#(" " 0 1 (fontified t)) . -6051) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6052) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6053) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6054) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6055) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6056) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6057) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6058) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6059) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6060) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6061) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -6062) (undo-tree-id511 . -1) (undo-tree-id512 . 1) (undo-tree-id513 . -1) (#(" " 0 1 (fontified t)) . -6063) (undo-tree-id514 . -1) 6064 (t 25943 50058 677344 666000)) nil (25943 50076 201223 458000) 0 nil])
([nil nil ((6055 . 6064)) nil (25943 50076 201109 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 6064 6072 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (6064 . 6072) (#("DBConfig" 0 8 (fontified nil)) . 6064) (6064 . 6072) (#("DBConfig" 0 8 (fontified nil)) . -6064) (6064 . 6072)) nil (25943 50076 201108 999000) 0 nil])
([nil nil ((6072 . 6074)) nil (25943 50076 201107 727000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6072) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) 6073) nil (25943 50076 201106 374000) 0 nil])
([nil nil ((6073 . 6074)) nil (25943 50076 201086 265000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6337) (undo-tree-id538 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6338) (undo-tree-id539 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6339) (undo-tree-id540 . -1) 6340 (t 25943 50076 230371 739000)) nil (25943 50143 536468 712000) 0 nil])
([nil nil ((6337 . 6340)) nil (25943 50143 536356 57000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6406) (undo-tree-id536 . -1) (#("." 0 1 (fontified t)) . -6407) (undo-tree-id537 . -1) 6408) nil (25943 50143 536354 766000) 0 nil])
([nil nil ((6422 . 6424)) nil (25943 50143 536352 393000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6423) (undo-tree-id534 . -1) (undo-tree-id535 . -1) 6424) nil (25943 50143 536351 195000) 0 nil])
([nil nil ((6423 . 6425)) nil (25943 50143 536348 784000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6554) (undo-tree-id532 . -1) (#("." 0 1 (fontified t)) . -6555) (undo-tree-id533 . -1) 6556) nil (25943 50143 536347 393000) 0 nil])
([nil nil ((6571 . 6574)) nil (25943 50143 536344 587000) 0 nil])
([nil nil ((6115 . 6117)) nil (25943 50143 536343 715000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6129) (6129 . 6130) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6129) (6129 . 6130) (6117 . 6130)) nil (25943 50143 536342 616000) 0 nil])
([nil nil ((6129 . 6132)) nil (25943 50143 536341 19000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6130) (undo-tree-id530 . -1) (#(" " 0 1 (fontified t)) . -6131) (undo-tree-id531 . -1) 6132) nil (25943 50143 536339 673000) 0 nil])
([nil nil ((6130 . 6139)) nil (25943 50143 536337 255000) 0 nil])
([nil nil ((apply yas--snippet-revive 6136 6150 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (6136 . 6150) (#("ResponseWriter" 0 14 (fontified nil)) . 6136) (6136 . 6150) (#("Res" 0 3 (fontified nil)) . 6136) (6136 . 6139) (#("ResponseWriter" 0 14 (fontified nil)) . -6136) (6136 . 6150) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -6136) (undo-tree-id528 . -3) (undo-tree-id529 . -3) 6139) nil (25943 50143 536335 917000) 0 nil])
([nil nil ((6150 . 6152)) nil (25943 50143 536332 9000) 0 nil])
([nil nil ((6152 . 6160)) nil (25943 50143 536331 92000) 0 nil])
([nil nil ((#("ő" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6158) (undo-tree-id526 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6159) (undo-tree-id527 . -1) 6160) nil (25943 50143 536329 924000) 0 nil])
([nil nil ((6158 . 6163)) nil (25943 50143 536327 254000) 0 nil])
([nil nil ((apply yas--snippet-revive 6160 6167 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (6160 . 6167) (#("Request" 0 7 (fontified nil)) . 6160) (6160 . 6167) (#("Req" 0 3 (fontified nil)) . 6160) (6160 . 6163) (#("Request" 0 7 (fontified nil)) . -6160) (6160 . 6167) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -6160) (undo-tree-id524 . -3) (undo-tree-id525 . -3) 6163) nil (25943 50143 536325 863000) 0 nil])
([nil nil ((6168 . 6171)) nil (25943 50143 536322 266000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -6170) (undo-tree-id521 . -1) (undo-tree-id522 . 1) (undo-tree-id523 . -1) 6171) nil (25943 50143 536321 55000) 0 nil])
([nil nil ((7203 . 7205) (7165 . 7167) (#("	" 0 1 (fontified nil)) . -7165) (7201 . 7202)) nil (25943 50143 536317 747000) 0 nil])
([nil nil ((7203 . 7204) (#("		" 0 2 (fontified nil)) . -7203) (undo-tree-id520 . -2) (7205 . 7206) (#("}" 0 1 (fontified nil)) . -7205) (7205 . 7206)) nil (25943 50143 536315 773000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1038) (2017 . 2018) (2053 . 2054) (2102 . 2103) (2162 . 2163) (2210 . 2211) (2218 . 2219) (2221 . 2222) (2246 . 2247) (2286 . 2287) (2326 . 2327) (2407 . 2408) (2460 . 2461) (2479 . 2480) (2536 . 2537) (2539 . 2540) (2593 . 2594) (2662 . 2663) (2678 . 2679) (2727 . 2728) (2736 . 2737) (2774 . 2775) (#("		" 0 2 (fontified t)) . 4940) (#("		" 0 2 (fontified t)) . 5300) (6172 . 6173) (6207 . 6208) (6240 . 6241) (6298 . 6299) (6344 . 6345) (6354 . 6355) (6356 . 6357) (6419 . 6420) (6445 . 6446) (6498 . 6499) (6518 . 6519) (6574 . 6575) (6583 . 6584) (6587 . 6588) (6647 . 6648) (6665 . 6666) (6723 . 6724) (6726 . 6727) (6755 . 6756) (6791 . 6792) (6827 . 6828) (6855 . 6856) (6877 . 6878) (6914 . 6915) (6948 . 6949) (6965 . 6966) (7014 . 7015) (7023 . 7024) (7026 . 7027) (7124 . 7125) (7162 . 7163) 7205) nil (25943 50143 536312 184000) 0 nil])
([nil nil ((6129 . 6139)) nil (25943 50143 536303 839000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6138) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) 6139) nil (25943 50143 536302 120000) 0 nil])
([nil nil ((6138 . 6142)) nil (25943 50143 536288 179000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7498) (undo-tree-id543 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7499) (undo-tree-id544 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7500) (undo-tree-id545 . -1) 7501 (t 25943 50143 568474 904000)) nil (25943 50159 394683 226000) 0 nil])
([nil nil ((7498 . 7502)) nil (25943 50159 394680 294000) 0 nil])
([nil nil ((7502 . 7504)) nil (25943 50159 394679 878000) 0 nil])
([nil nil ((7504 . 7506)) nil (25943 50159 394679 190000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7504) (undo-tree-id541 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -7505) (undo-tree-id542 . -1) 7506) nil (25943 50159 394677 538000) 0 nil])
([nil nil ((7504 . 7506)) nil (25943 50159 394666 114000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7547) (undo-tree-id546 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7548) (undo-tree-id547 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -7549) (undo-tree-id548 . -1) 7550 (t 25943 50159 421499 69000)) nil (25943 50165 603684 762000) 0 nil])
([nil nil ((7547 . 7550)) nil (25943 50165 603672 821000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7959) (undo-tree-id706 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7960) (undo-tree-id707 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7961) (undo-tree-id708 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7962) (undo-tree-id709 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7963) (undo-tree-id710 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7964) (undo-tree-id711 . -1) (#("." 0 1 (fontified t)) . -7965) (undo-tree-id712 . -1) 7966 (t 25943 50165 630508 523000)) nil (25943 50202 554642 667000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7975) (7975 . 7976) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -7975) (7975 . 7976) (7974 . 7976)) nil (25943 50202 554635 557000) 0 nil])
([nil nil ((7975 . 7976)) nil (25943 50202 554634 355000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -7975) (undo-tree-id704 . -1) (undo-tree-id705 . -1) 7976) nil (25943 50202 554633 345000) 0 nil])
([nil nil ((7975 . 7978)) nil (25943 50202 554631 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 7975 7982 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (7975 . 7982) (#("&apiCfg" 0 7 (fontified nil)) . 7975) (7975 . 7982) (#("api" 0 3 (fontified nil)) . 7975) (7975 . 7978) (#("apiCfg" 0 6 (fontified nil)) . -7975) (7975 . 7981) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -7975) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 7978) nil (25943 50202 554629 842000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6107) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6108) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6109) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6110) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (#("," 0 1 (fontified t)) . -6111) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#(" " 0 1 (fontified t)) . -6112) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6113) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (#(" " 0 1 (fontified t)) . -6114) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6115) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6116) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6117) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6118) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("p" 0 1 (fontified nil)) . -6119) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("." 0 1 (fontified nil)) . -6120) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6121) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6122) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6123) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6124) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6125) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6126) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6127) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) 6128) nil (25943 50202 554622 869000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6088) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -6089) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6090) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#(" " 0 1 (fontified t)) . -6091) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6092) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6093) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6094) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6095) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("." 0 1 (fontified t)) . -6096) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6097) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6098) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6099) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6100) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6101) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6102) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6103) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6104) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6105) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6106) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) 6107) nil (25943 50202 554561 671000) 0 nil])
([nil nil ((4601 . 4607) (t 25943 50202 585564 692000)) nil (25943 50273 464550 607000) 0 nil])
([nil nil ((4607 . 4608)) nil (25943 50273 464549 590000) 0 nil])
([nil nil ((4608 . 4612)) nil (25943 50273 464548 842000) 0 nil])
([nil nil ((4612 . 4617)) nil (25943 50273 464548 322000) 0 nil])
([nil nil ((4617 . 4621)) nil (25943 50273 464547 664000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4525) (undo-tree-id985 . -1) (#("," 0 1 (fontified t)) . -4526) (undo-tree-id986 . -1) (#(" " 0 1 (fontified t)) . -4527) (undo-tree-id987 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4528) (undo-tree-id988 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4529) (undo-tree-id989 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4530) (undo-tree-id990 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4531) (undo-tree-id991 . -1) (#(" " 0 1 (fontified t)) . -4532) (undo-tree-id992 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4533) (undo-tree-id993 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4534) (undo-tree-id994 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4535) (undo-tree-id995 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4536) (undo-tree-id996 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4537) (undo-tree-id997 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4538) (undo-tree-id998 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4539) (undo-tree-id999 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4540) (undo-tree-id1000 . -1) (#("." 0 1 (fontified t)) . -4541) (undo-tree-id1001 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4542) (undo-tree-id1002 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4543) (undo-tree-id1003 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4544) (undo-tree-id1004 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4545) (undo-tree-id1005 . -1) 4546) nil (25943 50273 464544 166000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4504) (undo-tree-id964 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4505) (undo-tree-id965 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4506) (undo-tree-id966 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4507) (undo-tree-id967 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4508) (undo-tree-id968 . -1) (#("," 0 1 (fontified nil)) . -4509) (undo-tree-id969 . -1) (#(" " 0 1 (fontified t)) . -4510) (undo-tree-id970 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4511) (undo-tree-id971 . -1) (#(" " 0 1 (fontified t)) . -4512) (undo-tree-id972 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4513) (undo-tree-id973 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4514) (undo-tree-id974 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4515) (undo-tree-id975 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4516) (undo-tree-id976 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4517) (undo-tree-id977 . -1) (#("." 0 1 (fontified t)) . -4518) (undo-tree-id978 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4519) (undo-tree-id979 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4520) (undo-tree-id980 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4521) (undo-tree-id981 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4522) (undo-tree-id982 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4523) (undo-tree-id983 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4524) (undo-tree-id984 . -1) 4525) nil (25943 50273 464523 738000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4486) (undo-tree-id946 . -1) (#(" " 0 1 (fontified t)) . -4487) (undo-tree-id947 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4488) (undo-tree-id948 . -1) (#(" " 0 1 (fontified t)) . -4489) (undo-tree-id949 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4490) (undo-tree-id950 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4491) (undo-tree-id951 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4492) (undo-tree-id952 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4493) (undo-tree-id953 . -1) (#("." 0 1 (fontified t)) . -4494) (undo-tree-id954 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4495) (undo-tree-id955 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4496) (undo-tree-id956 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4497) (undo-tree-id957 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4498) (undo-tree-id958 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4499) (undo-tree-id959 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4500) (undo-tree-id960 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4501) (undo-tree-id961 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4502) (undo-tree-id962 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4503) (undo-tree-id963 . -1) 4504) nil (25943 50273 464506 743000) 0 nil])
([nil nil ((4487 . 4493)) nil (25943 50273 464493 46000) 0 nil])
([nil nil ((4493 . 4494)) nil (25943 50273 464492 110000) 0 nil])
([nil nil ((4494 . 4498)) nil (25943 50273 464491 520000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4497) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 4498) nil (25943 50273 464490 491000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4488) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4489) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4490) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4491) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("." 0 1 (fontified t)) . -4492) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4493) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4494) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4495) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4496) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) 4497) nil (25943 50273 464481 601000) 0 nil])
([nil nil ((4488 . 4492)) nil (25943 50273 464193 679000) 0 nil])
([nil nil ((apply yas--snippet-revive 4488 4501 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (4488 . 4501) (#("authedHandler" 0 13 (fontified nil)) . 4488) (4488 . 4501) (#("Auth" 0 4 (fontified nil)) . 4488) (4488 . 4492) (#("authedHandler" 0 13 (fontified nil)) . -4488) (4488 . 4501) (#("Auth" 0 4 (fontified t face tree-sitter-hl-face:type)) . -4488) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) 4492) nil (25943 50273 464190 393000) 0 nil])
([nil nil ((#("func mintToken(a *utils.DBConfig, id string, issuer string, expiresInSeconds int) (string, error) {
	godotenv.Load()
	jwtSecret := os.Getenv(\"JWT_SECRET\")
	claims := jwt.RegisteredClaims{}
	claims.Issuer = issuer
	claims.IssuedAt = jwt.NewNumericDate(time.Now().UTC())
	claims.ExpiresAt = jwt.NewNumericDate(claims.IssuedAt.Add(time.Second * time.Duration(expiresInSeconds)))
	claims.Subject = id
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(jwtSecret))
}

func mintRefreshToken(a *utils.DBConfig, id string) (string, error) {
	tokenString, err := mintToken(a, id, RefreshTokenIssuer, 5184000)
	if err == nil {
		godotenv.Load()
		refreshObject := database.AddRefreshTokenParams{}
		refreshObject.IssuedAt = time.Now()
		refreshObject.ID = tokenString
		a.DB.AddRefreshToken(a.CTX, refreshObject)
	}
	return tokenString, err
}

func mintAccessToken(a *utils.DBConfig, id string) (string, error) {
	return mintToken(a, id, \"thisweek-access\", 86400)
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 14 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 16 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 16 17 (fontified t) 17 18 (fontified t face tree-sitter-hl-face:operator) 18 24 (fontified t) 24 32 (fontified t face tree-sitter-hl-face:type) 32 34 (fontified t) 34 36 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 36 37 (fontified t) 37 43 (fontified t face tree-sitter-hl-face:type) 43 45 (fontified t) 45 51 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 51 52 (fontified t) 52 58 (fontified t face tree-sitter-hl-face:type) 58 60 (fontified t) 60 76 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 76 77 (fontified t) 77 80 (fontified t face tree-sitter-hl-face:type) 80 81 (fontified t face (rainbow-delimiters-depth-1-face)) 81 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-1-face)) 83 89 (fontified t face tree-sitter-hl-face:type) 89 91 (fontified t) 91 96 (fontified t face tree-sitter-hl-face:type) 96 97 (fontified t face (rainbow-delimiters-depth-1-face)) 97 98 (fontified t) 98 99 (fontified t face (rainbow-delimiters-depth-1-face)) 99 100 (fontified t) 100 101 (fontified t) 101 109 (fontified t face tree-sitter-hl-face:variable) 109 110 (fontified t) 110 114 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 114 115 (fontified t face (rainbow-delimiters-depth-2-face)) 115 116 (fontified t face (rainbow-delimiters-depth-2-face)) 116 118 (fontified t) 118 127 (fontified t face tree-sitter-hl-face:variable) 127 128 (fontified t) 128 130 (fontified t face tree-sitter-hl-face:operator) 130 131 (fontified t) 131 133 (fontified t face tree-sitter-hl-face:variable) 133 134 (fontified t) 134 140 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 153 (fontified t face tree-sitter-hl-face:string) 153 154 (fontified t face (rainbow-delimiters-depth-2-face)) 154 156 (fontified t) 156 162 (fontified t face tree-sitter-hl-face:variable) 162 163 (fontified t) 163 165 (fontified t face tree-sitter-hl-face:operator) 165 170 (fontified t) 170 186 (fontified t face tree-sitter-hl-face:type) 186 187 (fontified t face (rainbow-delimiters-depth-2-face)) 187 188 (fontified t face (rainbow-delimiters-depth-2-face)) 188 190 (fontified t) 190 196 (fontified t face tree-sitter-hl-face:variable) 196 197 (fontified t) 197 203 (fontified t face tree-sitter-hl-face:property) 203 204 (fontified t) 204 205 (fontified t face tree-sitter-hl-face:operator) 205 206 (fontified t) 206 212 (fontified t face tree-sitter-hl-face:variable) 212 214 (fontified t) 214 220 (fontified t face tree-sitter-hl-face:variable) 220 221 (fontified t) 221 229 (fontified t face tree-sitter-hl-face:property) 229 230 (fontified t) 230 231 (fontified t face tree-sitter-hl-face:operator) 231 232 (fontified t) 232 235 (fontified t face tree-sitter-hl-face:variable) 235 236 (fontified t) 236 250 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 250 251 (fontified t face (rainbow-delimiters-depth-2-face)) 251 255 (fontified t face tree-sitter-hl-face:variable) 255 256 (fontified t) 256 259 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 259 260 (fontified t face (rainbow-delimiters-depth-3-face)) 260 261 (fontified t face (rainbow-delimiters-depth-3-face)) 261 262 (fontified t) 262 265 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 265 266 (fontified t face (rainbow-delimiters-depth-3-face)) 266 267 (fontified t face (rainbow-delimiters-depth-3-face)) 267 268 (fontified t face (rainbow-delimiters-depth-2-face)) 268 270 (fontified t) 270 276 (fontified t face tree-sitter-hl-face:variable) 276 277 (fontified t) 277 286 (fontified t face tree-sitter-hl-face:property) 286 287 (fontified t) 287 288 (fontified t face tree-sitter-hl-face:operator) 288 289 (fontified t) 289 292 (fontified t face tree-sitter-hl-face:variable) 292 293 (fontified t) 293 307 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 307 308 (fontified t face (rainbow-delimiters-depth-2-face)) 308 314 (fontified t face tree-sitter-hl-face:variable) 314 315 (fontified t) 315 323 (fontified t face tree-sitter-hl-face:property) 323 324 (fontified t) 324 327 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 327 328 (fontified t face (rainbow-delimiters-depth-3-face)) 328 332 (fontified t face tree-sitter-hl-face:variable) 332 333 (fontified t) 333 339 (fontified t face tree-sitter-hl-face:property) 339 340 (fontified t) 340 341 (fontified t face tree-sitter-hl-face:operator) 341 342 (fontified t) 342 346 (fontified t face tree-sitter-hl-face:variable) 346 347 (fontified t) 347 355 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 355 356 (fontified t face (rainbow-delimiters-depth-4-face)) 356 372 (fontified t face tree-sitter-hl-face:variable) 372 373 (fontified t face (rainbow-delimiters-depth-4-face)) 373 374 (fontified t face (rainbow-delimiters-depth-3-face)) 374 375 (fontified t face (rainbow-delimiters-depth-2-face)) 375 377 (fontified t) 377 383 (fontified t face tree-sitter-hl-face:variable) 383 384 (fontified t) 384 391 (fontified t face tree-sitter-hl-face:property) 391 392 (fontified t) 392 393 (fontified t face tree-sitter-hl-face:operator) 393 394 (fontified t) 394 396 (fontified t face tree-sitter-hl-face:variable) 396 398 (fontified t) 398 403 (fontified t face tree-sitter-hl-face:variable) 403 404 (fontified t) 404 406 (fontified t face tree-sitter-hl-face:operator) 406 407 (fontified t) 407 410 (fontified t face tree-sitter-hl-face:variable) 410 411 (fontified t) 411 424 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 424 425 (fontified t face (rainbow-delimiters-depth-2-face)) 425 428 (fontified t face tree-sitter-hl-face:variable) 428 429 (fontified t) 429 447 (fontified t face tree-sitter-hl-face:property) 447 449 (fontified t) 449 455 (fontified t face tree-sitter-hl-face:variable) 455 456 (fontified t face (rainbow-delimiters-depth-2-face)) 456 458 (fontified t) 458 464 (fontified t face tree-sitter-hl-face:keyword) 464 465 (fontified t) 465 470 (fontified t face tree-sitter-hl-face:variable) 470 471 (fontified t) 471 483 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 483 484 (fontified t face (rainbow-delimiters-depth-2-face)) 484 485 (fontified t face (rainbow-delimiters-depth-3-face)) 485 486 (fontified t face (rainbow-delimiters-depth-3-face)) 486 490 (fontified t face tree-sitter-hl-face:type) 490 491 (fontified t face (rainbow-delimiters-depth-3-face)) 491 500 (fontified t face tree-sitter-hl-face:variable) 500 501 (fontified t face (rainbow-delimiters-depth-3-face)) 501 502 (fontified t face (rainbow-delimiters-depth-2-face)) 502 503 (fontified t) 503 504 (fontified t face (rainbow-delimiters-depth-1-face)) 504 505 (fontified t) 505 506 (fontified t) 506 510 (fontified t face tree-sitter-hl-face:keyword) 510 511 (fontified t) 511 527 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 527 528 (fontified t face (rainbow-delimiters-depth-1-face)) 528 529 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 529 530 (fontified t) 530 531 (fontified t face tree-sitter-hl-face:operator) 531 537 (fontified t) 537 545 (fontified t face tree-sitter-hl-face:type) 545 547 (fontified t) 547 549 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 549 550 (fontified t) 550 556 (fontified t face tree-sitter-hl-face:type) 556 557 (fontified t face (rainbow-delimiters-depth-1-face)) 557 558 (fontified t) 558 559 (fontified t face (rainbow-delimiters-depth-1-face)) 559 565 (fontified t face tree-sitter-hl-face:type) 565 567 (fontified t) 567 572 (fontified t face tree-sitter-hl-face:type) 572 573 (fontified t face (rainbow-delimiters-depth-1-face)) 573 574 (fontified t) 574 575 (fontified t face (rainbow-delimiters-depth-1-face)) 575 576 (fontified t) 576 577 (fontified t) 577 588 (fontified t face tree-sitter-hl-face:variable) 588 590 (fontified t) 590 593 (fontified t face tree-sitter-hl-face:variable) 593 594 (fontified t) 594 596 (fontified t face tree-sitter-hl-face:operator) 596 597 (fontified t) 597 606 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 606 607 (fontified t face (rainbow-delimiters-depth-2-face)) 607 608 (fontified t face tree-sitter-hl-face:variable) 608 610 (fontified t) 610 612 (fontified t face tree-sitter-hl-face:variable) 612 614 (fontified t) 614 632 (fontified t face tree-sitter-hl-face:variable) 632 634 (fontified t) 634 641 (fontified t face tree-sitter-hl-face:number) 641 642 (fontified t face (rainbow-delimiters-depth-2-face)) 642 643 (fontified t) 643 644 (fontified t) 644 646 (fontified t face tree-sitter-hl-face:keyword) 646 647 (fontified t) 647 650 (fontified t face tree-sitter-hl-face:variable) 650 651 (fontified t) 651 653 (fontified t face tree-sitter-hl-face:operator) 653 654 (fontified t) 654 657 (fontified t face tree-sitter-hl-face:constant\.builtin) 657 658 (fontified t) 658 659 (face (rainbow-delimiters-depth-2-face) fontified t) 659 662 (fontified t) 662 665 (face tree-sitter-hl-face:variable fontified t) 665 670 (face tree-sitter-hl-face:variable fontified t) 670 671 (fontified t) 671 675 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 675 676 (face (rainbow-delimiters-depth-3-face) fontified t) 676 677 (face (rainbow-delimiters-depth-3-face) fontified t) 677 678 (fontified t) 678 680 (fontified t) 680 687 (fontified t face tree-sitter-hl-face:variable) 687 693 (fontified t face tree-sitter-hl-face:variable) 693 694 (fontified t) 694 696 (fontified t face tree-sitter-hl-face:operator) 696 706 (fontified t) 706 727 (fontified t face tree-sitter-hl-face:type) 727 728 (fontified t face (rainbow-delimiters-depth-3-face)) 728 729 (fontified t face (rainbow-delimiters-depth-3-face)) 729 730 (fontified t) 730 732 (fontified t) 732 745 (fontified t face tree-sitter-hl-face:variable) 745 746 (fontified t) 746 754 (fontified t face tree-sitter-hl-face:property) 754 755 (fontified t) 755 756 (fontified t face tree-sitter-hl-face:operator) 756 757 (fontified t) 757 761 (fontified t face tree-sitter-hl-face:variable) 761 762 (fontified t) 762 765 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 765 766 (fontified t face (rainbow-delimiters-depth-3-face)) 766 767 (fontified t face (rainbow-delimiters-depth-3-face)) 767 770 (fontified t) 770 783 (fontified t face tree-sitter-hl-face:variable) 783 784 (fontified t) 784 786 (fontified t face tree-sitter-hl-face:property) 786 787 (fontified t) 787 788 (fontified t face tree-sitter-hl-face:operator) 788 789 (fontified t) 789 800 (fontified t face tree-sitter-hl-face:variable) 800 801 (fontified t) 801 803 (fontified t) 803 804 (fontified t face tree-sitter-hl-face:variable) 804 805 (fontified t) 805 807 (fontified t face tree-sitter-hl-face:property) 807 808 (fontified t) 808 823 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 823 824 (fontified t face (rainbow-delimiters-depth-3-face)) 824 825 (fontified t face tree-sitter-hl-face:variable) 825 826 (fontified t) 826 829 (fontified t face tree-sitter-hl-face:property) 829 831 (fontified t) 831 844 (fontified t face tree-sitter-hl-face:variable) 844 845 (fontified t face (rainbow-delimiters-depth-3-face)) 845 846 (fontified t) 846 847 (fontified t) 847 848 (fontified t face (rainbow-delimiters-depth-2-face)) 848 850 (fontified t) 850 856 (fontified t face tree-sitter-hl-face:keyword) 856 857 (fontified t) 857 868 (fontified t face tree-sitter-hl-face:variable) 868 870 (fontified t) 870 873 (fontified t face tree-sitter-hl-face:variable) 873 874 (fontified t) 874 875 (fontified t face (rainbow-delimiters-depth-1-face)) 875 876 (fontified t) 876 877 (fontified t) 877 881 (fontified t face tree-sitter-hl-face:keyword) 881 882 (fontified t) 882 897 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 897 898 (fontified t face (rainbow-delimiters-depth-1-face)) 898 899 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 899 900 (fontified t) 900 901 (fontified t face tree-sitter-hl-face:operator) 901 907 (fontified t) 907 915 (fontified t face tree-sitter-hl-face:type) 915 917 (fontified t) 917 919 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 919 920 (fontified t) 920 926 (fontified t face tree-sitter-hl-face:type) 926 927 (fontified t face (rainbow-delimiters-depth-1-face)) 927 928 (fontified t) 928 929 (fontified t face (rainbow-delimiters-depth-1-face)) 929 935 (fontified t face tree-sitter-hl-face:type) 935 937 (fontified t) 937 942 (fontified t face tree-sitter-hl-face:type) 942 943 (fontified t face (rainbow-delimiters-depth-1-face)) 943 944 (fontified t) 944 945 (fontified t face (rainbow-delimiters-depth-1-face)) 945 946 (fontified t) 946 947 (fontified t) 947 953 (fontified t face tree-sitter-hl-face:keyword) 953 954 (fontified t) 954 963 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 963 964 (fontified t face (rainbow-delimiters-depth-2-face)) 964 965 (fontified t face tree-sitter-hl-face:variable) 965 967 (fontified t) 967 969 (fontified t face tree-sitter-hl-face:variable) 969 971 (fontified t) 971 988 (fontified t face tree-sitter-hl-face:string) 988 990 (fontified t) 990 995 (fontified t face tree-sitter-hl-face:number) 995 996 (fontified t face (rainbow-delimiters-depth-2-face)) 996 997 (fontified t) 997 998 (fontified t face (rainbow-delimiters-depth-1-face)) 998 999 (fontified t)) . 2803) (undo-tree-id1088 . -997) (undo-tree-id1089 . -998) (undo-tree-id1090 . -997) (undo-tree-id1091 . -826) (undo-tree-id1092 . -826) (undo-tree-id1093 . -882) (undo-tree-id1094 . -599) (undo-tree-id1095 . -600) (undo-tree-id1096 . -882) (undo-tree-id1097 . -997) (undo-tree-id1098 . -997) (t 25943 50273 495672 109000)) nil (25943 51967 610240 62000) 0 nil])
([nil nil ((#("const AccessTokenIssuer = \"thisweek-access\"
const RefreshTokenIssuer = \"thisweek-refresh\"
" 0 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 23 (fontified t face tree-sitter-hl-face:variable) 23 24 (fontified t) 24 25 (fontified t face tree-sitter-hl-face:operator) 25 26 (fontified t) 26 43 (fontified t face tree-sitter-hl-face:string) 43 44 (fontified t) 44 49 (fontified t face tree-sitter-hl-face:keyword) 49 50 (fontified t) 50 68 (fontified t face tree-sitter-hl-face:variable) 68 69 (fontified t) 69 70 (fontified t face tree-sitter-hl-face:operator) 70 71 (fontified t) 71 89 (fontified t face tree-sitter-hl-face:string) 89 90 (fontified t)) . 871) (undo-tree-id1081 . -88) (undo-tree-id1082 . -89) (undo-tree-id1083 . -88) (undo-tree-id1084 . -43) (undo-tree-id1085 . -43) (undo-tree-id1086 . -43) (undo-tree-id1087 . -88) 914) nil (25943 51967 610231 568000) 0 nil])
([nil nil ((#("		jwtToken := strings.Split(bearerToken, \" \")[1]
		claims := jwt.RegisteredClaims{}
		token, err := jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
			jwtSecret := os.Getenv(\"JWT_SECRET\")
			return []byte(jwtSecret), nil
		})
		if err != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		userId, perr := uuid.Parse(claims.Subject)
		if perr != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
		user, derr := a.DB.GetUserById(a.ctx, userId)
		if derr != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
		}
" 0 2 (fontified t) 2 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 39 (fontified t face tree-sitter-hl-face:variable) 39 41 (fontified t) 41 44 (fontified t face tree-sitter-hl-face:string) 44 45 (fontified t face (rainbow-delimiters-depth-3-face)) 45 46 (fontified t face (rainbow-delimiters-depth-3-face)) 46 47 (fontified t face tree-sitter-hl-face:number) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 51 (fontified t) 51 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 60 (fontified t face tree-sitter-hl-face:operator) 60 65 (fontified t) 65 81 (fontified t face tree-sitter-hl-face:type) 81 82 (fontified t face (rainbow-delimiters-depth-3-face)) 82 83 (fontified t face (rainbow-delimiters-depth-3-face)) 83 84 (fontified t) 84 86 (fontified t) 86 91 (fontified t face tree-sitter-hl-face:variable) 91 93 (fontified t) 93 96 (fontified t face tree-sitter-hl-face:variable) 96 97 (fontified t) 97 99 (fontified t face tree-sitter-hl-face:operator) 99 100 (fontified t) 100 103 (fontified t face tree-sitter-hl-face:variable) 103 104 (fontified t) 104 119 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 119 120 (fontified t face (rainbow-delimiters-depth-3-face)) 120 128 (fontified t face tree-sitter-hl-face:variable) 128 130 (fontified t) 130 131 (fontified t face tree-sitter-hl-face:operator) 131 137 (fontified t face tree-sitter-hl-face:variable) 137 139 (fontified t) 139 143 (fontified t face tree-sitter-hl-face:keyword) 143 144 (fontified t face (rainbow-delimiters-depth-4-face)) 144 149 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 149 150 (fontified t) 150 151 (fontified t face tree-sitter-hl-face:operator) 151 155 (fontified t) 155 160 (fontified t face tree-sitter-hl-face:type) 160 161 (fontified t face (rainbow-delimiters-depth-4-face)) 161 162 (fontified t) 162 163 (fontified t face (rainbow-delimiters-depth-4-face)) 163 172 (fontified t face tree-sitter-hl-face:keyword) 172 173 (fontified t face (rainbow-delimiters-depth-5-face)) 173 174 (fontified t face (rainbow-delimiters-depth-5-face)) 174 176 (fontified t) 176 181 (fontified t face tree-sitter-hl-face:type) 181 182 (fontified t face (rainbow-delimiters-depth-4-face)) 182 183 (fontified t) 183 184 (fontified t face (rainbow-delimiters-depth-4-face)) 184 188 (fontified t) 188 197 (fontified t face tree-sitter-hl-face:variable) 197 198 (fontified t) 198 200 (fontified t face tree-sitter-hl-face:operator) 200 201 (fontified t) 201 203 (fontified t face tree-sitter-hl-face:variable) 203 204 (fontified t) 204 210 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 210 211 (fontified t face (rainbow-delimiters-depth-5-face)) 211 223 (fontified t face tree-sitter-hl-face:string) 223 224 (fontified t face (rainbow-delimiters-depth-5-face)) 224 228 (fontified t) 228 234 (fontified t face tree-sitter-hl-face:keyword) 234 235 (fontified t) 235 236 (fontified t face (rainbow-delimiters-depth-5-face)) 236 237 (fontified t face (rainbow-delimiters-depth-5-face)) 237 241 (fontified t face tree-sitter-hl-face:type) 241 242 (fontified t face (rainbow-delimiters-depth-5-face)) 242 251 (fontified t face tree-sitter-hl-face:variable) 251 252 (fontified t face (rainbow-delimiters-depth-5-face)) 252 254 (fontified t) 254 257 (fontified t face tree-sitter-hl-face:constant\.builtin) 257 260 (fontified t) 260 261 (fontified t face (rainbow-delimiters-depth-4-face)) 261 262 (fontified t face (rainbow-delimiters-depth-3-face)) 262 265 (fontified t) 265 267 (fontified t face tree-sitter-hl-face:keyword) 267 268 (fontified t) 268 271 (fontified t face tree-sitter-hl-face:variable) 271 272 (fontified t) 272 274 (fontified t face tree-sitter-hl-face:operator) 274 275 (fontified t) 275 278 (fontified t face tree-sitter-hl-face:constant\.builtin) 278 279 (fontified t) 279 281 (fontified t face tree-sitter-hl-face:operator) 281 282 (fontified t) 282 283 (fontified t face tree-sitter-hl-face:operator) 283 288 (fontified t face tree-sitter-hl-face:variable) 288 289 (fontified t) 289 294 (fontified t face tree-sitter-hl-face:property) 294 295 (fontified t) 295 297 (fontified t face tree-sitter-hl-face:operator) 297 298 (fontified t) 298 304 (fontified t face tree-sitter-hl-face:variable) 304 305 (fontified t) 305 311 (fontified t face tree-sitter-hl-face:property) 311 312 (fontified t) 312 314 (fontified t face tree-sitter-hl-face:operator) 314 315 (fontified t) 315 332 (fontified t face tree-sitter-hl-face:variable) 332 333 (fontified t) 333 334 (fontified t face (rainbow-delimiters-depth-3-face)) 334 338 (fontified t) 338 343 (fontified t face tree-sitter-hl-face:variable) 343 344 (fontified t) 344 360 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 360 361 (fontified t face (rainbow-delimiters-depth-4-face)) 361 362 (fontified t face tree-sitter-hl-face:variable) 362 364 (fontified t) 364 367 (fontified t face tree-sitter-hl-face:number) 367 369 (fontified t) 369 383 (fontified t face tree-sitter-hl-face:string) 383 384 (fontified t face (rainbow-delimiters-depth-4-face)) 384 388 (fontified t) 388 394 (fontified t face tree-sitter-hl-face:keyword) 394 397 (fontified t) 397 398 (fontified t face (rainbow-delimiters-depth-3-face)) 398 401 (fontified t) 401 407 (fontified t face tree-sitter-hl-face:variable) 407 409 (fontified t) 409 413 (fontified t face tree-sitter-hl-face:variable) 413 414 (fontified t) 414 416 (fontified t face tree-sitter-hl-face:operator) 416 417 (fontified t) 417 421 (fontified t face tree-sitter-hl-face:variable) 421 422 (fontified t) 422 427 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 427 428 (fontified t face (rainbow-delimiters-depth-3-face)) 428 434 (fontified t face tree-sitter-hl-face:variable) 434 435 (fontified t) 435 442 (fontified t face tree-sitter-hl-face:property) 442 443 (fontified t face (rainbow-delimiters-depth-3-face)) 443 446 (fontified t) 446 448 (fontified t face tree-sitter-hl-face:keyword) 448 449 (fontified t) 449 453 (fontified t face tree-sitter-hl-face:variable) 453 454 (fontified t) 454 456 (fontified t face tree-sitter-hl-face:operator) 456 457 (fontified t) 457 460 (fontified t face tree-sitter-hl-face:constant\.builtin) 460 461 (fontified t) 461 462 (fontified t face (rainbow-delimiters-depth-3-face)) 462 466 (fontified t) 466 471 (fontified t face tree-sitter-hl-face:variable) 471 472 (fontified t) 472 488 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 488 489 (fontified t face (rainbow-delimiters-depth-4-face)) 489 490 (fontified t face tree-sitter-hl-face:variable) 490 492 (fontified t) 492 495 (fontified t face tree-sitter-hl-face:number) 495 497 (fontified t) 497 511 (fontified t face tree-sitter-hl-face:string) 511 512 (fontified t face (rainbow-delimiters-depth-4-face)) 512 516 (fontified t) 516 522 (fontified t face tree-sitter-hl-face:keyword) 522 525 (fontified t) 525 526 (fontified t face (rainbow-delimiters-depth-3-face)) 526 529 (fontified t) 529 533 (fontified t face tree-sitter-hl-face:variable) 533 535 (fontified t) 535 539 (fontified t face tree-sitter-hl-face:variable) 539 540 (fontified t) 540 542 (fontified t face tree-sitter-hl-face:operator) 542 543 (fontified t) 543 544 (fontified t face tree-sitter-hl-face:variable) 544 545 (fontified t) 545 547 (fontified t face tree-sitter-hl-face:property) 547 548 (fontified t) 548 559 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 559 560 (fontified t face (rainbow-delimiters-depth-3-face)) 560 561 (fontified t face tree-sitter-hl-face:variable) 561 562 (fontified t) 562 565 (fontified t face tree-sitter-hl-face:property) 565 567 (fontified t) 567 573 (fontified t face tree-sitter-hl-face:variable) 573 574 (fontified t face (rainbow-delimiters-depth-3-face)) 574 575 (fontified t) 575 577 (fontified t) 577 579 (fontified t face tree-sitter-hl-face:keyword) 579 580 (fontified t) 580 582 (fontified t face tree-sitter-hl-face:variable) 582 584 (fontified t face tree-sitter-hl-face:variable) 584 585 (fontified t) 585 587 (fontified t face tree-sitter-hl-face:operator) 587 588 (fontified t) 588 591 (fontified t face tree-sitter-hl-face:constant\.builtin) 591 592 (fontified t) 592 593 (fontified t face (rainbow-delimiters-depth-3-face)) 593 594 (fontified t) 594 597 (fontified t) 597 602 (fontified t face tree-sitter-hl-face:variable) 602 603 (fontified t) 603 619 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 619 620 (fontified t face (rainbow-delimiters-depth-4-face)) 620 621 (fontified t face tree-sitter-hl-face:variable) 621 623 (fontified t) 623 626 (fontified t face tree-sitter-hl-face:number) 626 628 (fontified t) 628 642 (fontified t face tree-sitter-hl-face:string) 642 643 (fontified t face (rainbow-delimiters-depth-4-face)) 643 647 (fontified t) 647 653 (fontified t face tree-sitter-hl-face:keyword) 653 656 (fontified t) 656 657 (fontified t face (rainbow-delimiters-depth-3-face)) 657 658 (fontified t)) . 1129) (undo-tree-id1073 . -656) (undo-tree-id1074 . -657) (undo-tree-id1075 . -656) (undo-tree-id1076 . -2) (undo-tree-id1077 . -262) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -656) 1131) nil (25943 51967 610226 738000) 0 nil])
([nil nil ((1128 . 1131)) nil (25943 51967 610221 159000) 0 nil])
([nil nil ((1131 . 1144)) nil (25943 51967 610220 550000) 0 nil])
([nil nil ((1144 . 1150)) nil (25943 51967 610219 388000) 0 nil])
([nil nil ((1144 . 1149)) nil (25943 51967 610218 541000) 0 nil])
([nil nil ((1155 . 1156)) nil (25943 51967 610218 97000) 0 nil])
([nil nil ((apply yas--snippet-revive 1183 1202 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (102 . 136) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (1149 . 1168) (#("ValidateBearerToken" 0 19 (fontified nil)) . 1149) (1149 . 1168) (#("Validat" 0 7 (fontified nil)) . 1149) (1149 . 1156) (#("ValidateBearerToken" 0 19 (fontified nil)) . -1149) (1149 . 1168) (#("Validat" 0 7 (fontified t face tree-sitter-hl-face:property)) . -1149) (undo-tree-id1071 . -7) (undo-tree-id1072 . -7) 1156) nil (25943 51967 610216 976000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1203) (1203 . 1204) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1203) (1203 . 1204) (1202 . 1204)) nil (25943 51967 610214 186000) 0 nil])
([nil nil ((1203 . 1206)) nil (25943 51967 610213 457000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1204) (undo-tree-id1069 . -1) (#(" " 0 1 (fontified t)) . -1205) (undo-tree-id1070 . -1) 1206) nil (25943 51967 610212 611000) 0 nil])
([nil nil ((1204 . 1209)) nil (25943 51967 610210 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 1206 1217 #s(yas--snippet nil nil nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil nil nil)) (1206 . 1217) (#("bearerToken" 0 11 (fontified nil)) . 1206) (1206 . 1217) (#("bea" 0 3 (fontified nil)) . 1206) (1206 . 1209) (#("bearerToken" 0 11 (fontified nil)) . -1206) (1206 . 1217) (#("bea" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1206) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) 1209) nil (25943 51967 610209 320000) 0 nil])
([nil nil ((1165 . 1168)) nil (25943 51967 610205 374000) 0 nil])
([nil nil ((1221 . 1233)) nil (25943 51967 610204 508000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1235) (1235 . 1236) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1235) (1235 . 1236) (1233 . 1236)) nil (25943 51967 610203 682000) 0 nil])
([nil nil ((1236 . 1239) (1237 . 1239) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1236) (1236 . 1239) (1235 . 1237)) nil (25943 51967 610202 803000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1227) (undo-tree-id1066 . -1) 1228) nil (25943 51967 610201 943000) 0 nil])
([nil nil ((1227 . 1228)) nil (25943 51967 610200 746000) 0 nil])
([nil nil ((#("		handler(w, r, user)
" 0 2 (fontified t) 2 9 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:variable) 14 16 (fontified t) 16 20 (fontified t face tree-sitter-hl-face:variable) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t)) . 1244) (undo-tree-id1058 . 1) (undo-tree-id1059 . -21) (undo-tree-id1060 . 22) (undo-tree-id1061 . -20) (undo-tree-id1062 . 2) (undo-tree-id1063 . -21) (undo-tree-id1064 . 13) (undo-tree-id1065 . -10) 1264) nil (25943 51967 610199 921000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1241 . 1242) (#("
" 0 1 (fontified nil)) . -1261) (1239 . 1262) 1237) nil (25943 51967 610194 528000) 0 nil])
([nil nil ((#("			
" 0 3 (fontified t) 3 4 (fontified t)) . 1236) (undo-tree-id1056 . -3) (undo-tree-id1057 . -2) 1238) nil (25943 51967 610193 627000) 0 nil])
([nil nil ((1238 . 1240)) nil (25943 51967 610191 508000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1270) (1270 . 1271) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1270) (1270 . 1271) (1263 . 1271)) nil (25943 51967 610190 639000) 0 nil])
([nil nil ((1271 . 1274) (1272 . 1274) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1271) (1271 . 1274) (1270 . 1272)) nil (25943 51967 610189 233000) 0 nil])
([nil nil ((1274 . 1285)) nil (25943 51967 610188 425000) 0 nil])
([nil nil ((apply yas--snippet-revive 1280 1293 #s(yas--snippet nil nil nil 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil nil nil)) (1280 . 1293) (#("ErrorResponse" 0 13 (fontified nil)) . 1280) (1280 . 1293) (#("Error" 0 5 (fontified nil)) . 1280) (1280 . 1285) (#("ErrorResponse" 0 13 (fontified nil)) . -1280) (1280 . 1293) (#("Error" 0 5 (fontified t face tree-sitter-hl-face:property)) . -1280) (undo-tree-id1054 . -5) (undo-tree-id1055 . -5) 1285) nil (25943 51967 610187 171000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1278) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("." 0 1 (fontified t)) . -1279) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (#("E" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1280) (undo-tree-id1041 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1281) (undo-tree-id1042 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1282) (undo-tree-id1043 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1283) (undo-tree-id1044 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1284) (undo-tree-id1045 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1285) (undo-tree-id1046 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1286) (undo-tree-id1047 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1287) (undo-tree-id1048 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1288) (undo-tree-id1049 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1289) (undo-tree-id1050 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1290) (undo-tree-id1051 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1291) (undo-tree-id1052 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1292) (undo-tree-id1053 . -1) 1293) nil (25943 51967 610182 430000) 0 nil])
([nil nil ((1278 . 1280)) nil (25943 51967 610169 647000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1297 1298 nil nil nil t #s(yas--field 2 1300 1303 nil nil nil t #s(yas--field 3 1305 1317 nil nil nil t nil))) #s(yas--field 2 1300 1303 nil nil nil t #s(yas--field 3 1305 1317 nil nil nil t nil)) #s(yas--field 3 1305 1317 nil nil nil t nil)) nil 46 nil #s(yas--field 3 1305 1317 nil nil nil t nil) nil nil)) (1280 . 1341) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1280) (1280 . 1356) (#("RespondWithError" 0 16 (fontified nil)) . -1280) (1280 . 1296)) nil (25943 51967 610168 919000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1298) (1297 . 1298)) nil (25943 51967 610167 843000) 0 nil])
([nil nil ((1301 . 1303) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1301) (1300 . 1301)) nil (25943 51967 610167 195000) 0 nil])
([nil nil ((1306 . 1316) (1305 . 1307) (#("\"" 0 1 (fontified nil)) . -1305) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1306) (1305 . 1306)) nil (25943 51967 610166 317000) 0 nil])
([nil nil ((apply yas--snippet-revive 1280 1318 #s(yas--snippet nil (#s(yas--field 1 1297 1298 nil nil nil t #s(yas--field 2 1300 1303 nil nil nil t #s(yas--field 3 1305 1317 nil nil nil t nil))) #s(yas--field 2 1300 1303 nil nil nil t #s(yas--field 3 1305 1317 nil nil nil t nil)) #s(yas--field 3 1305 1317 nil nil nil t nil)) nil 46 nil #s(yas--field 3 1305 1317 nil nil nil t nil) nil nil))) nil (25943 51967 610165 216000) 0 nil])
([nil nil ((#("		} else {
			utils.RespondWithError(w, 401, \"UNauthorit\")
		}
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-3-face)) 3 4 (fontified t) 4 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t) 11 14 (fontified t) 14 19 (fontified t face tree-sitter-hl-face:variable) 19 20 (fontified t) 20 36 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 36 37 (fontified t face (rainbow-delimiters-depth-4-face)) 37 38 (fontified t face tree-sitter-hl-face:variable) 38 40 (fontified t) 40 43 (fontified t face tree-sitter-hl-face:number) 43 45 (fontified t) 45 57 (fontified t face tree-sitter-hl-face:string) 57 58 (fontified t face (rainbow-delimiters-depth-4-face)) 58 59 (fontified t) 59 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-3-face)) 62 63 (fontified t)) . 1260) (undo-tree-id1023 . -61) (undo-tree-id1024 . 7) (undo-tree-id1025 . -62) (undo-tree-id1026 . -61) (undo-tree-id1027 . -2) (undo-tree-id1028 . -63) (undo-tree-id1029 . -46) (undo-tree-id1030 . -2) (undo-tree-id1031 . -37) (undo-tree-id1032 . 7) (undo-tree-id1033 . -2) (undo-tree-id1034 . -61) (undo-tree-id1035 . 61) (undo-tree-id1036 . -3) 1262) nil (25943 51967 610164 112000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1165) (undo-tree-id1020 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1166) (undo-tree-id1021 . -1) (#(" " 0 1 (fontified t)) . -1167) (undo-tree-id1022 . -1) 1168) nil (25943 51967 610154 11000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1231) (undo-tree-id1019 . -1) 1232) nil (25943 51967 610151 77000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1218) (undo-tree-id1006 . -1) (#(" " 0 1 (fontified t)) . -1219) (undo-tree-id1007 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1220) (undo-tree-id1008 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1221) (undo-tree-id1009 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1222) (undo-tree-id1010 . -1) (#(" " 0 1 (fontified nil)) . -1223) (undo-tree-id1011 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1224) (undo-tree-id1012 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1225) (undo-tree-id1013 . -1) (#(" " 0 1 (fontified t)) . -1226) (undo-tree-id1014 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1227) (undo-tree-id1015 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1228) (undo-tree-id1016 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:constant\.builtin)) . -1229) (undo-tree-id1017 . -1) (#(" " 0 1 (fontified t)) . -1230) (undo-tree-id1018 . -1) 1231) nil (25943 51967 610148 248000) 0 nil])
([nil nil ((1218 . 1221)) nil (25943 51967 610128 474000) 0 nil])
([nil nil ((1221 . 1226)) nil (25943 51967 610127 855000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1236) (1236 . 1237) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1236) (1236 . 1237) (1226 . 1237)) nil (25943 51967 610126 795000) 0 nil])
([nil nil ((1237 . 1240) (1238 . 1240) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1237) (1237 . 1240) (1236 . 1238)) nil (25943 51967 610122 501000) 0 nil])
([nil nil ((#("		  handler(w, r, user)
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (fontified t) 4 11 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 11 12 (fontified t face (rainbow-delimiters-depth-3-face)) 12 13 (fontified t face tree-sitter-hl-face:variable) 13 15 (fontified t) 15 16 (fontified t face tree-sitter-hl-face:variable) 16 18 (fontified t) 18 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t)) . 1245) (undo-tree-id1140 . -24) (undo-tree-id1141 . 20) (undo-tree-id1142 . -23) (undo-tree-id1143 . -24) (undo-tree-id1144 . -24) (undo-tree-id1145 . -24) (undo-tree-id1146 . -24) (undo-tree-id1147 . -24) (undo-tree-id1148 . -3) 1248 (t 25943 51967 643212 717000)) nil (25943 52068 642514 141000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1248 . 1249) (#("
" 0 1 (fontified nil)) . -1268) (1244 . 1269) 1242) nil (25943 52068 642507 431000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t rear-nonsticky t)) . -1248) (undo-tree-id1139 . -1) 1249) nil (25943 52068 642506 573000) 0 nil])
([nil nil ((1251 . 1252) (1244 . 1252)) nil (25943 52068 642505 73000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1251) (undo-tree-id1138 . -1) 1252) nil (25943 52068 642504 150000) 0 nil])
([nil nil ((1252 . 1255) (1253 . 1255) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1252) (1252 . 1255) (1251 . 1253)) nil (25943 52068 642502 625000) 0 nil])
([nil nil ((#("		}
		 handler(w, r, user)
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-3-face)) 3 4 (fontified t) 4 5 (fontified t) 5 6 (rear-nonsticky t fontified t) 6 7 (fontified t) 7 14 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 14 15 (fontified t face (rainbow-delimiters-depth-3-face)) 15 16 (fontified t face tree-sitter-hl-face:variable) 16 18 (fontified t) 18 19 (fontified t face tree-sitter-hl-face:variable) 19 21 (fontified t) 21 25 (fontified t face tree-sitter-hl-face:variable) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t)) . 1256) (undo-tree-id1129 . -27) (undo-tree-id1130 . 19) (undo-tree-id1131 . -26) (undo-tree-id1132 . -27) (undo-tree-id1133 . -27) (undo-tree-id1134 . -27) (undo-tree-id1135 . -27) (undo-tree-id1136 . -27) (undo-tree-id1137 . -7) 1263) nil (25943 52068 642501 111000) 0 nil])
([nil nil ((1256 . 1283)) nil (25943 52068 642494 345000) 0 nil])
([nil nil ((#("		 handler(w, r, user)
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 3 (fontified t) 3 10 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t face tree-sitter-hl-face:variable) 12 14 (fontified t) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 17 (fontified t) 17 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t)) . 1260) (undo-tree-id1120 . -23) (undo-tree-id1121 . 19) (undo-tree-id1122 . -22) (undo-tree-id1123 . -23) (undo-tree-id1124 . -23) (undo-tree-id1125 . -23) (undo-tree-id1126 . -23) (undo-tree-id1127 . -23) (undo-tree-id1128 . -3) 1263) nil (25943 52068 642493 223000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1254 . 1255) (#("
" 0 1 (fontified nil)) . -1274) (1251 . 1275) 1242) nil (25943 52068 642487 30000) 0 nil])
([nil nil ((#("			
" 0 4 (fontified t)) . 1275) (undo-tree-id1118 . -3) (undo-tree-id1119 . -2) 1277) nil (25943 52068 642485 810000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -905) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (#("			" 0 3 (fontified t)) . 1237) (undo-tree-id1115 . 1) (undo-tree-id1116 . -2) (undo-tree-id1117 . -1) (1252 . 1253) (#(" " 0 1 (fontified t rear-nonsticky t)) . 1254) (#("
" 0 1 (fontified t)) . 2181) 1238) nil (25943 52068 642482 861000) 0 nil])
([nil nil ((1236 . 1238)) nil (25943 52068 642478 716000) 0 nil])
([nil nil ((1238 . 1242)) nil (25943 52068 642478 111000) 0 nil])
([nil nil ((1242 . 1248)) nil (25943 52068 642477 481000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1265 1266 nil nil nil t #s(yas--field 2 1268 1271 nil nil nil t #s(yas--field 3 1273 1287 nil nil nil t nil))) #s(yas--field 2 1268 1271 nil nil nil t #s(yas--field 3 1273 1287 nil nil nil t nil)) #s(yas--field 3 1273 1287 nil nil nil t nil)) nil 47 nil #s(yas--field 3 1273 1287 nil nil nil t nil) nil nil)) (1248 . 1309) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1248) (1248 . 1324) (#("RespondWithError" 0 16 (fontified nil)) . -1248) (1248 . 1264)) nil (25943 52068 642476 690000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1266) (1265 . 1266)) nil (25943 52068 642475 232000) 0 nil])
([nil nil ((1269 . 1271) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1269) (1268 . 1269)) nil (25943 52068 642474 628000) 0 nil])
([nil nil ((1274 . 1282) (1273 . 1275) (#("\"" 0 1 (fontified nil)) . -1273) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1274) (1273 . 1274)) nil (25943 52068 642473 624000) 0 nil])
([nil nil ((1282 . 1285)) nil (25943 52068 642472 712000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1274) (undo-tree-id1102 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1275) (undo-tree-id1103 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1276) (undo-tree-id1104 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1277) (undo-tree-id1105 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1278) (undo-tree-id1106 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1279) (undo-tree-id1107 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1280) (undo-tree-id1108 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -1281) (undo-tree-id1109 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1282) (undo-tree-id1110 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1283) (undo-tree-id1111 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1284) (undo-tree-id1112 . -1) 1285) nil (25943 52068 642470 913000) 0 nil])
([nil nil ((1274 . 1276)) nil (25943 52068 642462 610000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1274) (undo-tree-id1100 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1275) (undo-tree-id1101 . -1) 1276) nil (25943 52068 642461 841000) 0 nil])
([nil nil ((1274 . 1286)) nil (25943 52068 642459 241000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1280) (undo-tree-id1099 . -1) 1281) nil (25943 52068 642458 250000) 0 nil])
([nil nil ((1280 . 1281)) nil (25943 52068 642450 253000) 0 nil])
([nil nil ((apply yas--snippet-revive 1248 1288 #s(yas--snippet nil (#s(yas--field 1 1265 1266 nil nil nil t #s(yas--field 2 1268 1271 nil nil nil t #s(yas--field 3 1273 1287 nil nil nil t nil))) #s(yas--field 2 1268 1271 nil nil nil t #s(yas--field 3 1273 1287 nil nil nil t nil)) #s(yas--field 3 1273 1287 nil nil nil t nil)) nil 47 nil #s(yas--field 3 1273 1287 nil nil nil t nil) nil nil))) nil (25943 52068 642449 746000) 0 nil])
([nil nil ((1217 . 1220)) nil (25943 52068 642449 347000) 0 nil])
([nil nil ((1220 . 1241)) nil (25943 52068 642448 884000) 0 nil])
([nil nil ((1241 . 1248)) nil (25943 52068 642447 873000) 0 nil])
([nil nil ((1248 . 1249)) nil (25943 52068 642444 144000) 0 nil])
([nil nil ((#("	\"strings\"
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:string) 9 10 (fontified t face tree-sitter-hl-face:string) 10 11 (fontified t)) . 93) (undo-tree-id1149 . -10) (undo-tree-id1150 . -9) (undo-tree-id1151 . -1) (undo-tree-id1152 . -10) 102 (t 25943 52068 674541 7000)) nil (25943 52082 651273 9000) 0 nil])
([nil nil ((#("		derr := a.DB.RevokeRefreshToken(a.CTX, refreshTokenObj.token)
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 8 (fontified t face tree-sitter-hl-face:operator) 8 9 (fontified t face tree-sitter-hl-face:operator) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 14 (fontified t face tree-sitter-hl-face:property) 14 15 (fontified t) 15 33 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 33 34 (fontified t face (rainbow-delimiters-depth-3-face)) 34 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 39 (fontified t face tree-sitter-hl-face:property) 39 41 (fontified t) 41 56 (fontified t face tree-sitter-hl-face:variable) 56 57 (fontified t) 57 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t face (rainbow-delimiters-depth-3-face)) 63 64 (fontified t)) . 2650) (undo-tree-id1180 . -63) (undo-tree-id1181 . -8) 2658 (t 25943 52082 681585 208000)) nil (25943 52167 303186 745000) 0 nil])
([nil nil ((2698 . 2699)) nil (25943 52167 303184 514000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2715 . 2716) (#("
" 0 1 (fontified nil)) . -2777) (2713 . 2778) 2698) nil (25943 52167 303183 635000) 0 nil])
([nil nil ((#("derr := a.DB.RevokeRefreshToken(a.CTX, refreshTokenObj.token)" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 6 (fontified t face tree-sitter-hl-face:operator) 6 7 (fontified t face tree-sitter-hl-face:operator) 7 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 12 (fontified t face tree-sitter-hl-face:property) 12 13 (fontified t) 13 31 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 33 (fontified t face tree-sitter-hl-face:variable) 33 34 (fontified t) 34 37 (fontified t face tree-sitter-hl-face:property) 37 39 (fontified t) 39 54 (fontified t face tree-sitter-hl-face:variable) 54 55 (fontified t) 55 60 (fontified t face tree-sitter-hl-face:property) 60 61 (fontified t face (rainbow-delimiters-depth-4-face))) . 2716) (undo-tree-id1171 . -60) (undo-tree-id1172 . -60) (undo-tree-id1173 . -60) (undo-tree-id1174 . -60) (undo-tree-id1175 . -60) (undo-tree-id1176 . 1) (undo-tree-id1177 . -61) (undo-tree-id1178 . 30) (undo-tree-id1179 . -32) 2776) nil (25943 52167 303182 286000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2759 . 2760) (nil fontified nil 2699 . 2760) (2699 . 2760) 2698) nil (25943 52167 303073 731000) 0 nil])
([nil nil ((2760 . 2761)) nil (25943 52167 303072 711000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2775) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#("	" 0 1 (fontified t)) . -2776) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("	" 0 1 (fontified t rear-nonsticky t)) . -2777) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) 2778) nil (25943 52167 303071 342000) 0 nil])
([nil nil ((#("		// TODO: handle not found as not an error
" 0 2 (fontified t) 2 37 (fontified t face tree-sitter-hl-face:comment) 37 40 (fontified t face tree-sitter-hl-face:comment) 40 41 (fontified t face tree-sitter-hl-face:comment) 41 43 (fontified t face tree-sitter-hl-face:comment) 43 44 (fontified t)) . 2650) (undo-tree-id1153 . 1) (undo-tree-id1154 . -43) (undo-tree-id1155 . -42) 2692) nil (25943 52167 303060 157000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2733 . 2734) (#("
" 0 1 (fontified nil)) . -2775) (2731 . 2776) 2692) nil (25943 52167 303050 505000) 0 nil])
([nil nil ((2734 . 2736)) nil (25943 52167 303046 263000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -3769) (undo-tree-id1182 . -1) 3770 (t 25943 52167 333846 372000)) nil (25943 52276 646859 299000) 0 nil])
([nil nil ((3769 . 3770)) nil (25943 52276 646851 408000) 0 nil])
([nil nil ((3769 . 3774)) nil (25943 52276 646850 533000) 0 nil])
([nil nil ((3657 . 3661)) nil (25943 52276 646849 361000) 0 nil])
([nil nil ((3661 . 3662)) nil (25943 52276 646845 542000) 0 nil])
([nil nil ((4893 . 4895) (t 25943 52276 677170 465000)) nil (25943 52314 601754 386000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -4895) (undo-tree-id1183 . -1) 4896) nil (25943 52314 601753 173000) 0 nil])
([nil nil ((4895 . 4896)) nil (25943 52314 601745 241000) 0 nil])
([nil nil ((4894 . 4897)) nil (25943 52314 601744 474000) 0 nil])
([nil nil ((5051 . 5056)) nil (25943 52314 601740 575000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -5056) (undo-tree-id1184 . 1) (undo-tree-id1185 . 1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) 5057 (t 25943 52314 631279 971000)) nil (25943 52326 221230 560000) 0 nil])
([nil nil ((5056 . 5057)) nil (25943 52326 221214 472000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2033) (undo-tree-id1193 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2034) (undo-tree-id1194 . -1) (#("x" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2035) (undo-tree-id1195 . -1) 2036 (t 25943 52326 257313 236000)) nil (25943 52391 803172 360000) 0 nil])
([nil nil ((2033 . 2036)) nil (25943 52391 803160 252000) 0 nil])
([nil nil ((6386 . 6388) (t 25943 52391 832498 581000)) nil (25943 53436 350079 868000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6386) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (#(" " 0 1 (fontified t)) . -6387) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) 6388) nil (25943 53436 350078 815000) 0 nil])
([nil nil ((6363 . 6369)) nil (25943 53436 350073 478000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil 48 nil #s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil nil)) (6363 . 6417) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 6363) (6363 . 6427) (#("authenregisterHandler" 0 6 (fontified nil) 6 21 (fontified nil face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . 6363) (6363 . 6369) (#("authenticate" 0 12 (fontified nil)) . -6363) (6363 . 6375) (#("authen" 0 6 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6363) (undo-tree-id1438 . -6) (undo-tree-id1439 . -6) 6369) nil (25943 53436 350072 565000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 3 (fontified t face tree-sitter-hl-face:operator) 3 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 17 (fontified t face tree-sitter-hl-face:property)) . 6376)) nil (25943 53436 350069 973000) 0 nil])
([nil nil ((6376 . 6380)) nil (25943 53436 350069 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 6377 6383 #s(yas--snippet nil nil nil 49 nil nil #s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil #s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil)) (6377 . 6383) (#("apiCfg" 0 6 (fontified nil)) . 6377) (6377 . 6383) (#("api" 0 3 (fontified nil)) . 6377) (6377 . 6380) (#("apiCfg" 0 6 (fontified nil)) . -6377) (6377 . 6383) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6377) (undo-tree-id1436 . -3) (undo-tree-id1437 . -3) 6380) nil (25943 53436 350068 264000) 0 nil])
([nil nil ((apply yas--snippet-revive 6363 6407 #s(yas--snippet nil (#s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil 48 nil #s(yas--field 1 6376 6383 nil nil nil t #s(yas--field 2 6385 6406 nil nil nil nil nil)) nil nil))) nil (25943 53436 350065 605000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6405) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) 6406) nil (25943 53436 350064 751000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6385) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6386) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6387) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6388) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6389) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6390) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6391) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#(" " 0 1 (fontified t)) . -6392) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6393) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6394) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6395) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6396) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6397) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6398) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (#("H" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6399) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6400) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6401) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6402) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6403) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6404) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) 6405) nil (25943 53436 350060 304000) 0 nil])
([nil nil ((6385 . 6393)) nil (25943 53436 350034 130000) 0 nil])
([nil nil ((6393 . 6396)) nil (25943 53436 350033 510000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6400 6400 nil nil nil t nil)) nil 50 nil #s(yas--field 1 6400 6400 nil nil nil t nil) nil nil)) (6385 . 6419) (#("registerHandler(${1:a *utils.DBConfig})" 0 39 (fontified nil)) . 6385) (6385 . 6424) (#("registerHan" 0 11 (fontified nil)) . 6385) (6385 . 6396) (#("registerHandler" 0 15 (fontified nil)) . -6385) (6385 . 6400) (#("registerHan" 0 11 (fontified t face tree-sitter-hl-face:variable)) . -6385) (undo-tree-id1392 . -11) (undo-tree-id1393 . -11) 6396) nil (25943 53436 350032 205000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 3 (fontified t face tree-sitter-hl-face:operator) 3 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 17 (fontified t face tree-sitter-hl-face:property)) . 6401)) nil (25943 53436 350029 270000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6400) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . 1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6401) (undo-tree-id1389 . 1) (undo-tree-id1390 . -1) (undo-tree-id1391 . 1)) nil (25943 53436 350028 211000) 0 nil])
([nil nil ((apply yas--snippet-revive 6385 6400 #s(yas--snippet nil (#s(yas--field 1 6400 6400 nil nil nil t nil)) nil 50 nil #s(yas--field 1 6400 6400 nil nil nil t nil) nil nil))) nil (25943 53436 349916 560000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6400) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . 1) (undo-tree-id1382 . -1) 6401) nil (25943 53436 349915 738000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6409) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . 1) (undo-tree-id1378 . -1) 6410) nil (25943 53436 349911 894000) 0 nil])
([nil nil ((6410 . 6411) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6410) (6409 . 6411) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6409) (6409 . 6410)) nil (25943 53436 349908 908000) 0 nil])
([nil nil ((2245 . 2248)) nil (25943 53436 349908 67000) 0 nil])
([nil nil ((2248 . 2254)) nil (25943 53436 349907 473000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2245) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("	" 0 1 (fontified t)) . -2246) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("	" 0 1 (fontified t)) . -2247) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2248) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2249) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2250) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2251) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2252) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2253) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) 2254) nil (25943 53436 349905 596000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1394) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1395) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1396) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1397) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("." 0 1 (fontified t)) . -1398) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1399) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1400) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1401) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1402) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1403) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1404) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1405) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) 1406) nil (25943 53436 349892 52000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1399) (1399 . 1400) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1399) (1399 . 1400) (1394 . 1400)) nil (25943 53436 349873 547000) 0 nil])
([nil nil ((1399 . 1405)) nil (25943 53436 349872 730000) 0 nil])
([nil nil ((1405 . 1406)) nil (25943 53436 349872 324000) 0 nil])
([nil nil ((1406 . 1409)) nil (25943 53436 349871 900000) 0 nil])
([nil nil ((apply yas--snippet-revive 1406 1414 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (1406 . 1414) (#("Response" 0 8 (fontified nil)) . 1406) (1406 . 1414) (#("Res" 0 3 (fontified nil)) . 1406) (1406 . 1409) (#("Response" 0 8 (fontified nil)) . -1406) (1406 . 1414) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1406) (undo-tree-id1331 . -3) (undo-tree-id1332 . -3) 1409) nil (25943 53436 349870 895000) 0 nil])
([nil nil ((1414 . 1415)) nil (25943 53436 349868 491000) 0 nil])
([nil nil ((apply yas--snippet-revive 1406 1420 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (1406 . 1420) (#("ResponseWriter" 0 14 (fontified nil)) . 1406) (1406 . 1420) (#("ResponseW" 0 9 (fontified nil)) . 1406) (1406 . 1415) (#("ResponseWriter" 0 14 (fontified nil)) . -1406) (1406 . 1420) (#("ResponseW" 0 9 (fontified t face tree-sitter-hl-face:type)) . -1406) (undo-tree-id1329 . -9) (undo-tree-id1330 . -9) 1415) nil (25943 53436 349867 516000) 0 nil])
([nil nil ((1420 . 1427)) nil (25943 53436 349864 923000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1425) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1426) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) 1427) nil (25943 53436 349864 36000) 0 nil])
([nil nil ((1425 . 1426)) nil (25943 53436 349861 132000) 0 nil])
([nil nil ((1426 . 1428)) nil (25943 53436 349860 650000) 0 nil])
([nil nil ((1428 . 1430)) nil (25943 53436 349860 248000) 0 nil])
([nil nil ((1430 . 1433)) nil (25943 53436 349859 769000) 0 nil])
([nil nil ((apply yas--snippet-revive 1430 1437 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (1430 . 1437) (#("Request" 0 7 (fontified nil)) . 1430) (1430 . 1437) (#("Req" 0 3 (fontified nil)) . 1430) (1430 . 1433) (#("Request" 0 7 (fontified nil)) . -1430) (1430 . 1437) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1430) (undo-tree-id1323 . -3) (undo-tree-id1324 . -3) 1433) nil (25943 53436 349858 610000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6396) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6397) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6398) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6399) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6400) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6401) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6402) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6403) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6404) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6405) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6406) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6407) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (#("&" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6408) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6409) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6410) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6411) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#("C" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6412) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (#("f" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6413) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6414) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("," 0 1 (fontified t)) . -6415) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (#(" " 0 1 (fontified t)) . -6416) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) 6417) nil (25943 53436 349850 637000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6394) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6395) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) 6396) nil (25943 53436 349695 104000) 0 nil])
([nil nil ((6394 . 6395)) nil (25943 53436 349685 224000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6420) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . 1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) 6421) nil (25943 53436 349681 810000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2389) (undo-tree-id1523 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2390) (undo-tree-id1524 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2391) (undo-tree-id1525 . -1) (#("," 0 1 (fontified t)) . -2392) (undo-tree-id1526 . -1) (#(" " 0 1 (fontified t)) . -2393) (undo-tree-id1527 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2394) (undo-tree-id1528 . -1) (#(" " 0 1 (fontified t)) . -2395) (undo-tree-id1529 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2396) (undo-tree-id1530 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2397) (undo-tree-id1531 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2398) (undo-tree-id1532 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2399) (undo-tree-id1533 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2400) (undo-tree-id1534 . -1) (#("." 0 1 (fontified t)) . -2401) (undo-tree-id1535 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2402) (undo-tree-id1536 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2403) (undo-tree-id1537 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2404) (undo-tree-id1538 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2405) (undo-tree-id1539 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2406) (undo-tree-id1540 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2407) (undo-tree-id1541 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2408) (undo-tree-id1542 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2409) (undo-tree-id1543 . -1) (undo-tree-id1544 . 1) (undo-tree-id1545 . -1) 2410 (t 25943 53436 384157 755000)) nil (25943 53492 958337 884000) 0 nil])
([nil nil ((#("g" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2368) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (#("," 0 1 (fontified nil)) . -2369) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (#(" " 0 1 (fontified t)) . -2370) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("w" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2371) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (#(" " 0 1 (fontified t)) . -2372) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2373) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2374) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2375) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2376) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (#("." 0 1 (fontified t)) . -2377) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2378) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2379) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2380) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2381) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2382) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2383) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2384) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2385) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2386) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2387) (undo-tree-id1521 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2388) (undo-tree-id1522 . -1) 2389) nil (25943 53492 958317 635000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2367) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) 2368) nil (25943 53492 958150 489000) 0 nil])
([nil nil ((2369 . 2370) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2369) (2367 . 2370)) nil (25943 53492 958148 700000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2371) (undo-tree-id1469 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2372) (undo-tree-id1470 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2373) (undo-tree-id1471 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2374) (undo-tree-id1472 . -1) (#("." 0 1 (fontified t)) . -2375) (undo-tree-id1473 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2376) (undo-tree-id1474 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2377) (undo-tree-id1475 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2378) (undo-tree-id1476 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2379) (undo-tree-id1477 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2380) (undo-tree-id1478 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2381) (undo-tree-id1479 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2382) (undo-tree-id1480 . -1) 2383) nil (25943 53492 958146 143000) 0 nil])
([nil nil ((2371 . 2372)) nil (25943 53492 958137 559000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2376) (2376 . 2377) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2376) (2376 . 2377) (2372 . 2377)) nil (25943 53492 958136 757000) 0 nil])
([nil nil ((2376 . 2384)) nil (25943 53492 958135 879000) 0 nil])
([nil nil ((2384 . 2387)) nil (25943 53492 958135 335000) 0 nil])
([nil nil ((apply yas--snippet-revive 2383 2390 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (2383 . 2390) (#("Handler" 0 7 (fontified nil)) . 2383) (2383 . 2390) (#("Hand" 0 4 (fontified nil)) . 2383) (2383 . 2387) (#("Handler" 0 7 (fontified nil)) . -2383) (2383 . 2390) (#("Hand" 0 4 (fontified t face tree-sitter-hl-face:type)) . -2383) (undo-tree-id1467 . -4) (undo-tree-id1468 . -4) 2387) nil (25943 53492 958133 910000) 0 nil])
([nil nil ((2390 . 2392)) nil (25943 53492 958131 84000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2390) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (#(" " 0 1 (fontified t)) . -2391) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) 2392) nil (25943 53492 958129 820000) 0 nil])
([nil nil ((2390 . 2398)) nil (25943 53492 958126 673000) 0 nil])
([nil nil ((2398 . 2399)) nil (25943 53492 958126 25000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2395) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2396) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2397) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (#("." 0 1 (fontified t)) . -2398) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) 2399) nil (25943 53492 958124 717000) 0 nil])
([nil nil ((2395 . 2403)) nil (25943 53492 958118 615000) 0 nil])
([nil nil ((apply yas--snippet-revive 2400 2407 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (2400 . 2407) (#("Request" 0 7 (fontified nil)) . 2400) (2400 . 2407) (#("Req" 0 3 (fontified nil)) . 2400) (2400 . 2403) (#("Request" 0 7 (fontified nil)) . -2400) (2400 . 2407) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2400) (undo-tree-id1445 . -3) (undo-tree-id1446 . -3) (undo-tree-id1447 . -3) (undo-tree-id1448 . -3) (undo-tree-id1449 . -3) (undo-tree-id1450 . -3) (undo-tree-id1451 . -3) (undo-tree-id1452 . -3) (undo-tree-id1453 . -3) (undo-tree-id1454 . -3) 2403) nil (25943 53492 958114 913000) 0 nil])
([nil nil ((6405 . 6407) (t 25943 53492 990635 26000)) nil (25943 53598 324348 827000) 0 nil])
([nil nil ((6407 . 6412)) nil (25943 53598 324348 266000) 0 nil])
([nil nil ((apply yas--snippet-revive 6407 6415 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (6407 . 6415) (#("v1Router" 0 8 (fontified nil)) . 6407) (6407 . 6415) (#("v1Rou" 0 5 (fontified nil)) . 6407) (6407 . 6412) (#("v1Router" 0 8 (fontified nil)) . -6407) (6407 . 6415) (#("v1Rou" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -6407) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) 6412) nil (25943 53598 324347 202000) 0 nil])
([nil nil ((6415 . 6419)) nil (25943 53598 324344 490000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6417) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6418) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) 6419) nil (25943 53598 324343 441000) 0 nil])
([nil nil ((6417 . 6419)) nil (25943 53598 324340 417000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6421 6441 nil nil nil t #s(yas--field 2 6443 6464 nil nil nil t nil)) #s(yas--field 2 6443 6464 nil nil nil t nil)) nil 57 nil #s(yas--field 2 6443 6464 nil nil nil t nil) nil nil)) (6416 . 6464) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 6416) (6416 . 6474) (#("Pos" 0 3 (fontified nil)) . 6416) (6416 . 6419) (#("Post" 0 4 (fontified nil)) . -6416) (6416 . 6420) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6416) (undo-tree-id1582 . -3) (undo-tree-id1583 . -3) 6419) nil (25943 53598 324339 416000) 0 nil])
([nil nil ((6422 . 6440) (6421 . 6423) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6421) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 6422) (6421 . 6422)) nil (25943 53598 324335 938000) 0 nil])
([nil nil ((6444 . 6449) (#("handlerFn http.HandlerFunc" 0 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 26 (fontified nil face tree-sitter-hl-face:property)) . 6444) (6443 . 6444)) nil (25943 53598 324334 611000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6456 6463 nil nil nil t nil)) nil 58 nil #s(yas--field 1 6456 6463 nil nil nil t nil) #s(yas--field 2 6443 6464 nil nil nil t nil) nil)) (6443 . 6474) (#("revokeTokens(${1:a *utils.DBConfig})" 0 36 (fontified nil)) . 6443) (6443 . 6479) (#("revoke" 0 6 (fontified nil)) . 6443) (6443 . 6449) (#("revokeTokens" 0 12 (fontified nil)) . -6443) (6443 . 6455) (#("revoke" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -6443) (undo-tree-id1580 . -6) (undo-tree-id1581 . -6) 6449) nil (25943 53598 324333 365000) 0 nil])
([nil nil ((6457 . 6460) (#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 6457) (6456 . 6457)) nil (25943 53598 324329 980000) 0 nil])
([nil nil ((apply yas--snippet-revive 6457 6463 #s(yas--snippet nil nil nil 59 nil nil #s(yas--field 1 6456 6463 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil #s(yas--field 1 6456 6463 nil nil nil t nil) nil)) (6457 . 6463) (#("apiCfg" 0 6 (fontified nil)) . 6457) (6457 . 6463) (#("api" 0 3 (fontified nil)) . 6457) (6457 . 6460) (#("apiCfg" 0 6 (fontified nil)) . -6457) (6457 . 6463) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6457) (undo-tree-id1578 . -3) (undo-tree-id1579 . -3) 6460) nil (25943 53598 324328 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 6443 6464 #s(yas--snippet nil (#s(yas--field 1 6456 6463 nil nil nil t nil)) nil 58 nil #s(yas--field 1 6456 6463 nil nil nil t nil) #s(yas--field 2 6443 6464 nil nil nil t nil) nil))) nil (25943 53598 324326 23000) 0 nil])
([nil nil ((apply yas--snippet-revive 6416 6465 #s(yas--snippet nil (#s(yas--field 1 6421 6441 nil nil nil t #s(yas--field 2 6443 6464 nil nil nil t nil)) #s(yas--field 2 6443 6464 nil nil nil t nil)) nil 57 nil #s(yas--field 2 6443 6464 nil nil nil t nil) nil nil))) nil (25943 53598 324325 584000) 0 nil])
([nil nil ((2905 . 2908)) nil (25943 53598 324325 141000) 0 nil])
([nil nil ((2908 . 2914)) nil (25943 53598 324324 573000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2905) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("	" 0 1 (fontified t)) . -2906) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("	" 0 1 (fontified t)) . -2907) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2908) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2909) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2910) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2911) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2912) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2913) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) 2914) nil (25943 53598 324322 240000) 0 nil])
([nil nil ((2371 . 2373)) nil (25943 53598 324309 431000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2372) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . 1) (undo-tree-id1559 . -1) 2373) nil (25943 53598 324308 319000) 0 nil])
([nil nil ((2409 . 2410) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2409) (2409 . 2410)) nil (25943 53598 324304 898000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2409) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . 1) (undo-tree-id1555 . -1) 2410) nil (25943 53598 324303 695000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2371) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) 2372) nil (25943 53598 324297 687000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2383) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2384) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2385) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2386) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2387) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2388) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2389) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) 2390 (t 25943 53598 355452 731000)) nil (25943 53644 658585 715000) 0 nil])
([nil nil ((2383 . 2386)) nil (25943 53644 658571 284000) 0 nil])
([nil nil ((apply yas--snippet-revive 2383 2391 #s(yas--snippet nil nil nil 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil nil nil)) (2383 . 2391) (#("Response" 0 8 (fontified nil)) . 2383) (2383 . 2391) (#("Res" 0 3 (fontified nil)) . 2383) (2383 . 2386) (#("Response" 0 8 (fontified nil)) . -2383) (2383 . 2391) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2383) (undo-tree-id1660 . -3) (undo-tree-id1661 . -3) 2386) nil (25943 53644 658569 695000) 0 nil])
([nil nil ((2391 . 2392)) nil (25943 53644 658566 851000) 0 nil])
([nil nil ((apply yas--snippet-revive 2383 2397 #s(yas--snippet nil nil nil 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 61 nil nil nil nil)) (2383 . 2397) (#("ResponseWriter" 0 14 (fontified nil)) . 2383) (2383 . 2397) (#("ResponseW" 0 9 (fontified nil)) . 2383) (2383 . 2392) (#("ResponseWriter" 0 14 (fontified nil)) . -2383) (2383 . 2397) (#("ResponseW" 0 9 (fontified t face tree-sitter-hl-face:type)) . -2383) (undo-tree-id1658 . -9) (undo-tree-id1659 . -9) 2392) nil (25943 53644 658565 461000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4548) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4549) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4550) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4551) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#("." 0 1 (fontified t)) . -4552) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4553) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4554) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4555) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4556) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4557) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4558) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4559) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) 4560) nil (25943 53644 658560 216000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4553) (4553 . 4554) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4553) (4553 . 4554) (4548 . 4554)) nil (25943 53644 658534 448000) 0 nil])
([nil nil ((4553 . 4559)) nil (25943 53644 658533 614000) 0 nil])
([nil nil ((4559 . 4560)) nil (25943 53644 658532 957000) 0 nil])
([nil nil ((4560 . 4565)) nil (25943 53644 658531 883000) 0 nil])
([nil nil ((apply yas--snippet-revive 4560 4574 #s(yas--snippet nil nil nil 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 62 nil nil nil nil)) (4560 . 4574) (#("ResponseWriter" 0 14 (fontified nil)) . 4560) (4560 . 4574) (#("Respo" 0 5 (fontified nil)) . 4560) (4560 . 4565) (#("ResponseWriter" 0 14 (fontified nil)) . -4560) (4560 . 4574) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -4560) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) 4565) nil (25943 53644 658530 836000) 0 nil])
([nil nil ((4574 . 4579)) nil (25943 53644 658528 311000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4578) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) 4579) nil (25943 53644 658527 725000) 0 nil])
([nil nil ((4578 . 4580)) nil (25943 53644 658525 901000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4579) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) 4580) nil (25943 53644 658525 161000) 0 nil])
([nil nil ((4579 . 4582)) nil (25943 53644 658523 126000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4578) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4579) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4580) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4581) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) 4582) nil (25943 53644 658522 38000) 0 nil])
([nil nil ((4578 . 4583)) nil (25943 53644 658515 783000) 0 nil])
([nil nil ((4583 . 4584)) nil (25943 53644 658515 80000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4583) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) 4584) nil (25943 53644 658514 16000) 0 nil])
([nil nil ((4583 . 4584)) nil (25943 53644 658511 789000) 0 nil])
([nil nil ((4584 . 4585)) nil (25943 53644 658511 365000) 0 nil])
([nil nil ((4585 . 4587)) nil (25943 53644 658510 472000) 0 nil])
([nil nil ((apply yas--snippet-revive 4584 4591 #s(yas--snippet nil nil nil 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 63 nil nil nil nil)) (4584 . 4591) (#("Request" 0 7 (fontified nil)) . 4584) (4584 . 4591) (#("Req" 0 3 (fontified nil)) . 4584) (4584 . 4587) (#("Request" 0 7 (fontified nil)) . -4584) (4584 . 4591) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4584) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) 4587) nil (25943 53644 658506 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6445 . 6446) (#("
" 0 1 (fontified nil)) . -6498) (6444 . 6499) 6443 (t 25943 53644 690786 914000)) nil (25943 53667 13242 41000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6462) (undo-tree-id1697 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6463) (undo-tree-id1698 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6464) (undo-tree-id1699 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6465) (undo-tree-id1700 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6466) (undo-tree-id1701 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6467) (undo-tree-id1702 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6468) (undo-tree-id1703 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6469) (undo-tree-id1704 . -1) 6470) nil (25943 53667 13240 92000) 0 nil])
([nil nil ((6462 . 6467)) nil (25943 53667 13233 488000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6480) (undo-tree-id1692 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6481) (undo-tree-id1693 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6482) (undo-tree-id1694 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6483) (undo-tree-id1695 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6484) (undo-tree-id1696 . -1) 6485) nil (25943 53667 13232 118000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6470) (undo-tree-id1682 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6471) (undo-tree-id1683 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6472) (undo-tree-id1684 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6473) (undo-tree-id1685 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6474) (undo-tree-id1686 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6475) (undo-tree-id1687 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6476) (undo-tree-id1688 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6477) (undo-tree-id1689 . -1) (#("H" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6478) (undo-tree-id1690 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -6479) (undo-tree-id1691 . -1) 6480) nil (25943 53667 13225 236000) 0 nil])
([nil nil ((6470 . 6475)) nil (25943 53667 13206 954000) 0 nil])
([nil nil ((#("// If no change will happen on this -> make a DB wrapper out of this
// If a change were to happen break the db related sutff to a different struct
// I don't auth to depend on server api config

" 0 68 (fontified t face tree-sitter-hl-face:comment) 68 69 (fontified t) 69 147 (fontified t face tree-sitter-hl-face:comment) 147 148 (fontified t) 148 194 (fontified t face tree-sitter-hl-face:comment) 194 195 (fontified t) 195 196 (fontified t)) . 698) (undo-tree-id1705 . -196) (undo-tree-id1706 . -195) (undo-tree-id1707 . -195) (undo-tree-id1708 . -195) (undo-tree-id1709 . -196) (undo-tree-id1710 . -195) (undo-tree-id1711 . -195) (undo-tree-id1712 . -195) (undo-tree-id1713 . -195) (undo-tree-id1714 . -195) (undo-tree-id1715 . -195) (undo-tree-id1716 . -195) (undo-tree-id1717 . -195) (undo-tree-id1718 . -196) (undo-tree-id1719 . -195) (undo-tree-id1720 . -195) (undo-tree-id1721 . -195) (undo-tree-id1722 . -195) (undo-tree-id1723 . -195) (undo-tree-id1724 . -148) (undo-tree-id1725 . -148) (undo-tree-id1726 . -196) (t 25943 53667 48943 222000)) nil (25943 53688 221116 953000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2773) (undo-tree-id1758 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2774) (undo-tree-id1759 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2775) (undo-tree-id1760 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2776) (undo-tree-id1761 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2777) (undo-tree-id1762 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2778) (undo-tree-id1763 . -1) (#(" " 0 1 (fontified t)) . -2779) (undo-tree-id1764 . -1) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2780) (undo-tree-id1765 . -1) (#("
" 0 1 (fontified t)) . -2781) (undo-tree-id1766 . -1) (#("	" 0 1 (fontified nil)) . -2782) (undo-tree-id1767 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2783) (undo-tree-id1768 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2784) (undo-tree-id1769 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2785) (undo-tree-id1770 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2786) (undo-tree-id1771 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2787) (undo-tree-id1772 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2788) (undo-tree-id1773 . -1) (#(" " 0 1 (fontified t)) . -2789) (undo-tree-id1774 . -1) (#("f" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2790) (undo-tree-id1775 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2791) (undo-tree-id1776 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2792) (undo-tree-id1777 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2793) (undo-tree-id1778 . -1) 2794 (t 25943 53688 254088 660000)) nil (25943 53805 19238 792000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2752) (undo-tree-id1737 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2753) (undo-tree-id1738 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2754) (undo-tree-id1739 . -1) (#("." 0 1 (fontified t)) . -2755) (undo-tree-id1740 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2756) (undo-tree-id1741 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2757) (undo-tree-id1742 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2758) (undo-tree-id1743 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2759) (undo-tree-id1744 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2760) (undo-tree-id1745 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2761) (undo-tree-id1746 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2762) (undo-tree-id1747 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2763) (undo-tree-id1748 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2764) (undo-tree-id1749 . -1) (#(" " 0 1 (fontified t)) . -2765) (undo-tree-id1750 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2766) (undo-tree-id1751 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2767) (undo-tree-id1752 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2768) (undo-tree-id1753 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2769) (undo-tree-id1754 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2770) (undo-tree-id1755 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2771) (undo-tree-id1756 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2772) (undo-tree-id1757 . -1) 2773) nil (25943 53805 19219 6000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2746) (undo-tree-id1731 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2747) (undo-tree-id1732 . -1) (#(" " 0 1 (fontified t)) . -2748) (undo-tree-id1733 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2749) (undo-tree-id1734 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2750) (undo-tree-id1735 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2751) (undo-tree-id1736 . -1) 2752) nil (25943 53805 19202 977000) 0 nil])
([nil nil ((2747 . 2749)) nil (25943 53805 19197 118000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2748) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) 2749) nil (25943 53805 19196 75000) 0 nil])
([nil nil ((2748 . 2750)) nil (25943 53805 19193 441000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2749) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) 2750) nil (25943 53805 19192 648000) 0 nil])
([nil nil ((2749 . 2755)) nil (25943 53805 19184 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 2755 2763 #s(yas--snippet nil nil nil 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 64 nil nil nil nil)) (2755 . 2763) (#("DBConfig" 0 8 (fontified nil)) . 2755) (2755 . 2763) (#("DBConfig" 0 8 (fontified nil)) . -2755) (2755 . 2763)) nil (25943 53805 19182 797000) 0 nil])
([nil nil ((2763 . 2765)) nil (25943 53805 19178 355000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t face (rainbow-delimiters-unmatched-face)) 1 2 (fontified t)) . 3842) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . 2) (undo-tree-id1785 . -1) (t 25943 53805 51845 584000)) nil (25943 53816 716919 237000) 0 nil])
([nil nil ((1061 . 1064) (#("      " 0 6 (fontified t)) . -1061) 1067 (2562 . 2563) (#("  " 0 2 (fontified t)) . -2562) 2564 (#("	" 0 1 (fontified t)) . -2828) (#("	" 0 1 (fontified t)) . -2865) (#("	" 0 1 (fontified t)) . -2907) (#("	" 0 1 (fontified t)) . 2967) (#("	" 0 1 (fontified t)) . 3014) (#("	" 0 1 (fontified t)) . 3025) (#("	" 0 1 (fontified t)) . 3028) (#("	" 0 1 (fontified t)) . 3103) (#("	" 0 1 (fontified t)) . 3121) (#("	" 0 1 (fontified t)) . 3168) (#("	" 0 1 (fontified t)) . 3179) (#("	" 0 1 (fontified t)) . 3183) (#("	" 0 1 (fontified t)) . 3218) (#("	" 0 1 (fontified t)) . 3327) (#("	" 0 1 (fontified t)) . 3365) (#("	" 0 1 (fontified t)) . -3398) 3399 (#("	" 0 1 (fontified t)) . -3403) (#("	" 0 1 (fontified t)) . -3481) (#("	" 0 1 (fontified t)) . -3531) (#("	" 0 1 (fontified t)) . -3541) (#("	" 0 1 (fontified t)) . -3546) (#("	" 0 1 (fontified t)) . -3614) (#("	" 0 1 (fontified t)) . -3633) (#("	" 0 1 (fontified t)) . -3692) (#("	" 0 1 (fontified t)) . -3702) (#("	" 0 1 (fontified t)) . -3706) (#("	" 0 1 (fontified t)) . -3749) (#("	" 0 1 (fontified t)) . -3775) (#("	" 0 1 (fontified t)) . -3779) (#("	" 0 1 (fontified t)) . -3830) (#("	" 0 1 (fontified t)) . -3839) 3842) nil (25943 53816 716900 638000) 0 nil])
([nil nil ((6282 . 6284) (t 25943 53816 749917 657000)) nil (25943 53885 835746 400000) 0 nil])
([nil nil ((6284 . 6291)) nil (25943 53885 835745 473000) 0 nil])
([nil nil ((apply yas--snippet-revive 6284 6292 #s(yas--snippet nil nil nil 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 65 nil nil nil nil)) (6284 . 6292) (#("v1Router" 0 8 (fontified nil)) . 6284) (6284 . 6292) (#("v1Route" 0 7 (fontified nil)) . 6284) (6284 . 6291) (#("v1Router" 0 8 (fontified nil)) . -6284) (6284 . 6292) (#("v1Route" 0 7 (fontified t face tree-sitter-hl-face:variable)) . -6284) (undo-tree-id1792 . -7) (undo-tree-id1793 . -7) 6291) nil (25943 53885 835743 998000) 0 nil])
([nil nil ((722 . 724)) nil (25943 53885 835740 235000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -723) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) 724) nil (25943 53885 835739 356000) 0 nil])
([nil nil ((723 . 724)) nil (25943 53885 835737 89000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -722) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#(" " 0 1 (fontified t)) . -723) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) 724) nil (25943 53885 835735 974000) 0 nil])
([nil nil ((722 . 728)) nil (25943 53885 835725 368000) 0 nil])
([nil nil ((apply yas--snippet-revive 728 736 #s(yas--snippet nil nil nil 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 66 nil nil nil nil)) (728 . 736) (#("DBConfig" 0 8 (fontified nil)) . 728) (728 . 736) (#("DBConfig" 0 8 (fontified nil)) . -728) (728 . 736)) nil (25943 53885 835724 60000) 0 nil])
([nil nil ((736 . 738)) nil (25943 53885 835719 876000) 0 nil])
([nil nil ((1149 . 1152) (t 25943 53885 872331 326000)) nil (25943 53898 669200 66000) 0 nil])
([nil nil ((722 . 723) (t 25943 53898 700405 942000)) nil (25943 53910 694039 528000) 0 nil])
([nil nil ((6312 . 6315) (t 25943 53910 724475 303000)) nil (25943 54031 976021 301000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6314) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) 6315) nil (25943 54031 976020 579000) 0 nil])
([nil nil ((6314 . 6316)) nil (25943 54031 976018 717000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6318 6339 nil nil nil t #s(yas--field 2 6341 6384 nil nil nil t nil)) #s(yas--field 2 6341 6384 nil nil nil t nil)) nil 67 nil #s(yas--field 2 6341 6384 nil nil nil t nil) nil nil)) (6313 . 6361) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 6313) (6313 . 6371) (#("Pos" 0 3 (fontified nil)) . 6313) (6313 . 6316) (#("Post" 0 4 (fontified nil)) . -6313) (6313 . 6317) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6313) (undo-tree-id1985 . -3) (undo-tree-id1986 . -3) 6316) nil (25943 54031 976017 675000) 0 nil])
([nil nil ((6319 . 6328) (6318 . 6320) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6318) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 6319) (6318 . 6319)) nil (25943 54031 976014 864000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6326) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6327) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) 6328) nil (25943 54031 976013 206000) 0 nil])
([nil nil ((6326 . 6333)) nil (25943 54031 976008 990000) 0 nil])
([nil nil ((6333 . 6339)) nil (25943 54031 976008 535000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6338) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) 6339) nil (25943 54031 976008 24000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 26 (fontified t face tree-sitter-hl-face:property)) . 6341)) nil (25943 54031 976006 207000) 0 nil])
([nil nil ((6341 . 6344)) nil (25943 54031 976005 793000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6354 6361 nil nil nil t #s(yas--field 2 6363 6383 nil nil nil t nil)) #s(yas--field 2 6363 6383 nil nil nil t nil)) nil 68 nil #s(yas--field 2 6363 6383 nil nil nil t nil) #s(yas--field 2 6341 6384 nil nil nil t nil) nil)) (6341 . 6395) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 6341) (6341 . 6405) (#("aut" 0 3 (fontified nil)) . 6341) (6341 . 6344) (#("authenticate" 0 12 (fontified nil)) . -6341) (6341 . 6353) (#("aut" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6341) (undo-tree-id1977 . -3) (undo-tree-id1978 . -3) 6344) nil (25943 54031 976004 758000) 0 nil])
([nil nil ((6355 . 6358) (#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 6355) (6354 . 6355)) nil (25943 54031 976002 257000) 0 nil])
([nil nil ((6358 . 6361)) nil (25943 54031 976001 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 6355 6361 #s(yas--snippet nil nil nil 69 nil nil #s(yas--field 1 6354 6361 nil nil nil t #s(yas--field 2 6363 6383 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 69 nil nil #s(yas--field 1 6354 6361 nil nil nil t #s(yas--field 2 6363 6383 nil nil nil t nil)) nil)) (6355 . 6361) (#("apiCfg" 0 6 (fontified nil)) . 6355) (6355 . 6361) (#("apiCfg" 0 6 (fontified nil)) . 6355) (6355 . 6361) (#("apiCfg" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -6355) (undo-tree-id1975 . -6) (undo-tree-id1976 . -6) 6361) nil (25943 54031 976000 682000) 0 nil])
([nil nil ((6363 . 6365) (#("\"" 0 1 (fontified nil)) . -6363) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 6364) (6363 . 6364)) nil (25943 54031 975997 695000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -6363) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 6364)) nil (25943 54031 975996 681000) 0 nil])
([nil nil ((6363 . 6368)) nil (25943 54031 975994 854000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6381 6381 nil nil nil t #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)))) #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil))) #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)) #s(yas--field 4 6423 6441 nil nil nil nil nil)) nil 70 nil #s(yas--field 1 6381 6381 nil nil nil t #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)))) #s(yas--field 2 6363 6383 nil nil nil t nil) nil)) (6363 . 6459) (#("refreshAccessToken(${1:a utils.DBConfig}, ${2:w http.ResponseWriter}, ${3:r *http.Request}, ${4:user database.User})" 0 116 (fontified nil)) . 6363) (6363 . 6479) (#("refre" 0 5 (fontified nil)) . 6363) (6363 . 6368) (#("refreshAccessToken" 0 18 (fontified nil)) . -6363) (6363 . 6381) (#("refre" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -6363) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) 6368) nil (25943 54031 975993 769000) 0 nil])
([nil nil ((#("a utils.DBConfig" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 16 (fontified t face tree-sitter-hl-face:property)) . 6382)) nil (25943 54031 975991 294000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -6381) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) 6382) nil (25943 54031 975990 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 6363 6442 #s(yas--snippet nil (#s(yas--field 1 6381 6381 nil nil nil t #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)))) #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil))) #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)) #s(yas--field 4 6423 6441 nil nil nil nil nil)) nil 70 nil #s(yas--field 1 6381 6381 nil nil nil t #s(yas--field 2 6383 6404 nil nil nil nil #s(yas--field 3 6406 6421 nil nil nil nil #s(yas--field 4 6423 6441 nil nil nil nil nil)))) #s(yas--field 2 6363 6383 nil nil nil t nil) nil))) nil (25943 54031 975987 704000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6421) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (#(" " 0 1 (fontified t)) . -6422) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6423) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6424) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6425) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6426) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (#(" " 0 1 (fontified nil)) . -6427) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (#("d" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6428) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6429) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6430) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6431) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6432) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6433) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6434) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6435) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (#("." 0 1 (fontified t)) . -6436) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6437) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6438) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6439) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6440) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6441) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . 1) (undo-tree-id1966 . -1) 6442) nil (25943 54031 975984 470000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6400) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6401) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6402) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6403) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (#("," 0 1 (fontified t)) . -6404) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#(" " 0 1 (fontified t)) . -6405) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6406) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (#(" " 0 1 (fontified t)) . -6407) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6408) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6409) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6410) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6411) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6412) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (#("." 0 1 (fontified t)) . -6413) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6414) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6415) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6416) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6417) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6418) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6419) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6420) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) 6421) nil (25943 54031 975948 211000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6379) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6380) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("," 0 1 (fontified t)) . -6381) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (#(" " 0 1 (fontified t)) . -6382) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6383) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (#(" " 0 1 (fontified t)) . -6384) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6385) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6386) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6387) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (#("p" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -6388) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (#("." 0 1 (fontified t)) . -6389) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6390) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6391) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6392) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6393) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6394) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6395) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6396) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6397) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6398) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6399) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) 6400) nil (25943 54031 975803 680000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6372) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6373) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6374) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6375) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6376) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6377) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6378) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) 6379) nil (25943 54031 975768 237000) 0 nil])
([nil nil ((6372 . 6378)) nil (25943 54031 975752 724000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6376) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6377) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) 6378) nil (25943 54031 975751 591000) 0 nil])
([nil nil ((6376 . 6379)) nil (25943 54031 975748 50000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6377) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6378) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) 6379) nil (25943 54031 975746 860000) 0 nil])
([nil nil ((6377 . 6383)) nil (25943 54031 975743 73000) 0 nil])
([nil nil ((6383 . 6385)) nil (25943 54031 975742 152000) 0 nil])
([nil nil ((6385 . 6386) (#("		" 0 2 (fontified nil)) . 6384) (6384 . 6386) (#("	" 0 1 (fontified nil)) . -6384) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (6385 . 6386)) nil (25943 54031 975740 680000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6382) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (#("
" 0 1 (fontified t)) . -6383) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("
" 0 1 (fontified t)) . -6384) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("	" 0 1 (fontified t)) . -6385) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) 6386) nil (25943 54031 975737 140000) 0 nil])
([nil nil ((6382 . 6383)) nil (25943 54031 975730 226000) 0 nil])
([nil nil ((apply yas--snippet-revive 6341 6384 #s(yas--snippet nil (#s(yas--field 1 6354 6361 nil nil nil t #s(yas--field 2 6363 6383 nil nil nil t nil)) #s(yas--field 2 6363 6383 nil nil nil t nil)) nil 68 nil #s(yas--field 2 6363 6383 nil nil nil t nil) #s(yas--field 2 6341 6384 nil nil nil t nil) nil))) nil (25943 54031 975729 487000) 0 nil])
([nil nil ((apply yas--snippet-revive 6313 6385 #s(yas--snippet nil (#s(yas--field 1 6318 6339 nil nil nil t #s(yas--field 2 6341 6384 nil nil nil t nil)) #s(yas--field 2 6341 6384 nil nil nil t nil)) nil 67 nil #s(yas--field 2 6341 6384 nil nil nil t nil) nil nil))) nil (25943 54031 975728 609000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6382) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) 6383) nil (25943 54031 975727 424000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6372) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) 6373) nil (25943 54031 975724 410000) 0 nil])
([nil nil ((2765 . 2766)) nil (25943 54031 975712 515000) 0 nil])
([nil nil ((#("		resUser := LoginResUser{}
" 0 2 (fontified t) 2 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 12 (face tree-sitter-hl-face:operator fontified t) 12 13 (fontified t) 13 25 (face tree-sitter-hl-face:type fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 28 (fontified t)) . 4662) (undo-tree-id0 . -26) (undo-tree-id1 . -27) (undo-tree-id2 . -27) (undo-tree-id3 . -27) (undo-tree-id4 . -26) (undo-tree-id5 . -26) (undo-tree-id6 . 2) (undo-tree-id7 . -27) (undo-tree-id8 . 3) (undo-tree-id9 . -26) (undo-tree-id10 . -26) (undo-tree-id11 . -26) (undo-tree-id12 . -26) (undo-tree-id13 . -26) (undo-tree-id14 . -26) (undo-tree-id15 . -26) (undo-tree-id16 . -26) (undo-tree-id17 . -28) (undo-tree-id18 . -27) 4688 (t 25943 54032 9146 495000)) nil (25944 64376 729682 302000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4963 . 4964) (#("
" 0 1 (fontified nil)) . -4989) (4961 . 4990) 4960) nil (25944 64376 729642 199000) 0 nil])
([nil nil ((4274 . 4276) (t 25944 64376 763831 443000)) nil (25944 64869 126568 114000) 0 nil])
([nil nil ((4276 . 4286)) nil (25944 64869 126567 335000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4285) (undo-tree-id144 . -1) 4286) nil (25944 64869 126566 791000) 0 nil])
([nil nil ((4285 . 4287)) nil (25944 64869 126565 509000) 0 nil])
([nil nil ((#("b" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4286) (undo-tree-id143 . -1) 4287) nil (25944 64869 126564 727000) 0 nil])
([nil nil ((4286 . 4294)) nil (25944 64869 126563 336000) 0 nil])
([nil nil ((4294 . 4296)) nil (25944 64869 126562 575000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4306) (4306 . 4307) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4306) (4306 . 4307) (4296 . 4307)) nil (25944 64869 126561 670000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4309) (4309 . 4310) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4309) (4309 . 4310) (4307 . 4310)) nil (25944 64869 126560 22000) 0 nil])
([nil nil ((4309 . 4314)) nil (25944 64869 126558 839000) 0 nil])
([nil nil ((apply yas--snippet-revive 4309 4321 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (4309 . 4321) (#("LoginResUser" 0 12 (fontified nil)) . 4309) (4309 . 4321) (#("Login" 0 5 (fontified nil)) . 4309) (4309 . 4314) (#("LoginResUser" 0 12 (fontified nil)) . -4309) (4309 . 4321) (#("Login" 0 5 (face tree-sitter-hl-face:type fontified t)) . -4309) (undo-tree-id141 . -5) (undo-tree-id142 . -5) 4314) nil (25944 64869 126557 483000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4308) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 4309) nil (25944 64869 126553 960000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -4320) (undo-tree-id136 . -1) (undo-tree-id137 . 1) (undo-tree-id138 . -1) 4321) nil (25944 64869 126551 403000) 0 nil])
([nil nil ((4320 . 4321)) nil (25944 64869 126548 791000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4322) (4322 . 4323) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4322) (4322 . 4323) (4321 . 4323)) nil (25944 64869 126547 708000) 0 nil])
([nil nil ((4323 . 4324) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4323) (4323 . 4324) (4322 . 4324)) nil (25944 64869 126545 810000) 0 nil])
([nil nil ((4306 . 4315)) nil (25944 64869 126544 768000) 0 nil])
([nil nil ((4315 . 4324)) nil (25944 64869 126544 71000) 0 nil])
([nil nil ((4311 . 4312)) nil (25944 64869 126543 353000) 0 nil])
([nil nil ((4343 . 4359)) nil (25944 64869 126542 752000) 0 nil])
([nil nil ((apply yas--snippet-revive 4354 4366 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (4354 . 4366) (#("LoginResUser" 0 12 (fontified nil)) . 4354) (4354 . 4366) (#("Login" 0 5 (fontified nil)) . 4354) (4354 . 4359) (#("LoginResUser" 0 12 (fontified nil)) . -4354) (4354 . 4366) (#("Login" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -4354) (undo-tree-id134 . -5) (undo-tree-id135 . -5) 4359) nil (25944 64869 126541 516000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4367) (4367 . 4368) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4367) (4367 . 4368) (4366 . 4368)) nil (25944 64869 126538 303000) 0 nil])
([nil nil ((4368 . 4370)) nil (25944 64869 126537 377000) 0 nil])
([nil nil ((4370 . 4378)) nil (25944 64869 126536 981000) 0 nil])
([nil nil ((apply yas--snippet-revive 4378 4380 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (4378 . 4380) (#("ID" 0 2 (fontified nil)) . 4378) (4378 . 4380) (#("ID" 0 2 (fontified nil)) . -4378) (4378 . 4380)) nil (25944 64869 126536 192000) 0 nil])
([nil nil ((4380 . 4383)) nil (25944 64869 126534 785000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4368) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("	" 0 1 (fontified t)) . -4369) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4370) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4371) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4372) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4373) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4374) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4375) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4376) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("." 0 1 (fontified t)) . -4377) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4378) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4379) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#(" " 0 1 (fontified t)) . -4380) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4381) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#(" " 0 1 (fontified t)) . -4382) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 4383) nil (25944 64869 126531 832000) 0 nil])
([nil nil ((#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4284) (undo-tree-id97 . -1) (#("D" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4285) (undo-tree-id98 . -1) (#("B" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4286) (undo-tree-id99 . -1) (#("U" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4287) (undo-tree-id100 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4288) (undo-tree-id101 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4289) (undo-tree-id102 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4290) (undo-tree-id103 . -1) 4291) nil (25944 64869 126324 751000) 0 nil])
([nil nil ((4284 . 4294)) nil (25944 64869 126313 271000) 0 nil])
([nil nil ((4309 . 4316)) nil (25944 64869 126312 417000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4313) (undo-tree-id94 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4314) (undo-tree-id95 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4315) (undo-tree-id96 . -1) 4316) nil (25944 64869 126311 226000) 0 nil])
([nil nil ((4313 . 4317)) nil (25944 64869 126308 249000) 0 nil])
([nil nil ((apply yas--snippet-revive 4317 4325 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (4317 . 4325) (#("DBConfig" 0 8 (fontified nil)) . 4317) (4317 . 4325) (#("DBConfig" 0 8 (fontified nil)) . -4317) (4317 . 4325)) nil (25944 64869 126307 197000) 0 nil])
([nil nil ((4325 . 4327)) nil (25944 64869 126306 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4391 . 4392) (#("
" 0 1 (fontified nil)) . -4511) (4389 . 4512) 4388) nil (25944 64869 126305 69000) 0 nil])
([nil nil ((#("	resUser := LoginResUser{}
" 0 1 (fontified t) 1 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 11 (face tree-sitter-hl-face:operator fontified t) 11 12 (fontified t) 12 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t)) . 4363) (undo-tree-id90 . -26) (undo-tree-id91 . -3) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 4366) nil (25944 64869 126303 668000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -4363) (#("	" 0 1 (fontified t)) . 4426) 4365) nil (25944 64869 126300 42000) 0 nil])
([nil nil ((4364 . 4367)) nil (25944 64869 126299 198000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4441) (4441 . 4442) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4441) (4441 . 4442) (4427 . 4442)) nil (25944 64869 126298 222000) 0 nil])
([nil nil ((4442 . 4444) (4443 . 4444) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 4442) (4442 . 4444) (4441 . 4443)) nil (25944 64869 126296 477000) 0 nil])
([nil nil ((#("	token, terr := auth.MintAccessToken(a, user.ID.String())
" 0 1 (fontified t) 1 6 (face tree-sitter-hl-face:variable fontified t) 6 8 (fontified t) 8 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 36 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face tree-sitter-hl-face:variable fontified t) 38 40 (fontified t) 40 44 (face tree-sitter-hl-face:variable fontified t) 44 45 (fontified t) 45 47 (face tree-sitter-hl-face:property fontified t) 47 48 (fontified t) 48 54 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 58 (fontified t)) . 4448) (undo-tree-id87 . -57) (undo-tree-id88 . -2) (undo-tree-id89 . 55) 4450) nil (25944 64869 126294 621000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4442 . 4443) (#("
" 0 1 (fontified nil)) . -4499) (4441 . 4500) 4363) nil (25944 64869 126291 435000) 0 nil])
([nil nil ((4443 . 4445)) nil (25944 64869 126289 714000) 0 nil])
([nil nil ((4443 . 4444) (#("  " 0 2 (fontified t)) . -4443) (undo-tree-id86 . -2) 4445 (#("		" 0 2 (fontified t)) . 4502) 4445) nil (25944 64869 126288 465000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4326) (undo-tree-id66 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4327) (undo-tree-id67 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4328) (undo-tree-id68 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4329) (undo-tree-id69 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4330) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -4331) (undo-tree-id71 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4332) (undo-tree-id72 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4333) (undo-tree-id73 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4334) (undo-tree-id74 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4335) (undo-tree-id75 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4336) (undo-tree-id76 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4337) (undo-tree-id77 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4338) (undo-tree-id78 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4339) (undo-tree-id79 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4340) (undo-tree-id80 . -1) (#("." 0 1 (fontified t)) . -4341) (undo-tree-id81 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4342) (undo-tree-id82 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4343) (undo-tree-id83 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4344) (undo-tree-id84 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4345) (undo-tree-id85 . -1) 4346) nil (25944 64869 126283 604000) 0 nil])
([nil nil ((4326 . 4330)) nil (25944 64869 126264 970000) 0 nil])
([nil nil ((4330 . 4333)) nil (25944 64869 126263 646000) 0 nil])
([nil nil ((4333 . 4339)) nil (25944 64869 126262 794000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4398) (undo-tree-id49 . -1) (#(" " 0 1 (fontified t)) . -4399) (undo-tree-id50 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4400) (undo-tree-id51 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4401) (undo-tree-id52 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4402) (undo-tree-id53 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4403) (undo-tree-id54 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4404) (undo-tree-id55 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4405) (undo-tree-id56 . -1) (#("q" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4406) (undo-tree-id57 . -1) (#("P" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4407) (undo-tree-id58 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4408) (undo-tree-id59 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4409) (undo-tree-id60 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4410) (undo-tree-id61 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4411) (undo-tree-id62 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4412) (undo-tree-id63 . -1) (#("." 0 1 (fontified t)) . -4413) (undo-tree-id64 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4414) (undo-tree-id65 . -1) 4415) nil (25944 64869 126259 763000) 0 nil])
([nil nil ((4398 . 4400)) nil (25944 64869 126245 593000) 0 nil])
([nil nil ((4398 . 4399)) nil (25944 64869 126244 777000) 0 nil])
([nil nil ((4423 . 4426)) nil (25944 64869 126243 922000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4484) (4484 . 4485) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -4484) (4484 . 4485) (4482 . 4485)) nil (25944 64869 126242 904000) 0 nil])
([nil nil ((4485 . 4488) (4486 . 4488) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 4485) (4485 . 4488) (4484 . 4486)) nil (25944 64869 126240 867000) 0 nil])
([nil nil ((4482 . 4495)) nil (25944 64869 126239 75000) 0 nil])
([nil nil ((#("	if user, err := a.DB.GetUserByEmail(a.CTX, email); err == nil {
		if token, terr := auth.MintAccessToken(a, user.ID.String()); terr == nil {
			
		}

	}
" 0 1 (fontified t rear-nonsticky t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 8 (face tree-sitter-hl-face:variable fontified t) 8 10 (fontified t) 10 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (fontified t) 14 16 (face tree-sitter-hl-face:operator fontified t) 16 17 (fontified t) 17 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (fontified t) 19 21 (face tree-sitter-hl-face:property fontified t) 21 22 (fontified t) 22 36 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face tree-sitter-hl-face:variable fontified t) 38 39 (fontified t) 39 42 (face tree-sitter-hl-face:property fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (face tree-sitter-hl-face:variable fontified t) 45 49 (face tree-sitter-hl-face:variable fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 52 (fontified t) 52 55 (face tree-sitter-hl-face:variable fontified t) 55 56 (fontified t) 56 58 (face tree-sitter-hl-face:operator fontified t) 58 59 (fontified t) 59 62 (face tree-sitter-hl-face:constant\.builtin fontified t) 62 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 65 (fontified t) 65 66 (rear-nonsticky t fontified t) 66 67 (fontified t) 67 69 (face tree-sitter-hl-face:keyword fontified t) 69 70 (fontified t) 70 75 (face tree-sitter-hl-face:variable fontified t) 75 77 (fontified t) 77 81 (face tree-sitter-hl-face:variable fontified t) 81 82 (fontified t) 82 84 (face tree-sitter-hl-face:operator fontified t) 84 85 (fontified t) 85 89 (face tree-sitter-hl-face:variable fontified t) 89 90 (fontified t) 90 105 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 105 106 (face (rainbow-delimiters-depth-3-face) fontified t) 106 107 (face tree-sitter-hl-face:variable fontified t) 107 109 (fontified t) 109 113 (face tree-sitter-hl-face:variable fontified t) 113 114 (fontified t) 114 116 (face tree-sitter-hl-face:property fontified t) 116 117 (fontified t) 117 123 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 123 124 (face (rainbow-delimiters-depth-4-face) fontified t) 124 125 (face (rainbow-delimiters-depth-4-face) fontified t) 125 126 (face (rainbow-delimiters-depth-3-face) fontified t) 126 128 (fontified t) 128 132 (face tree-sitter-hl-face:variable fontified t) 132 133 (fontified t) 133 135 (face tree-sitter-hl-face:operator fontified t) 135 136 (fontified t) 136 139 (face tree-sitter-hl-face:constant\.builtin fontified t) 139 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-3-face) fontified t) 141 142 (fontified t) 142 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-3-face) fontified t) 149 150 (fontified t) 150 151 (fontified t) 151 152 (fontified t) 152 153 (face (rainbow-delimiters-depth-2-face) fontified t) 153 154 (fontified t)) . 4356) (undo-tree-id34 . -152) (undo-tree-id35 . -153) (undo-tree-id36 . -139) (undo-tree-id37 . -1) (undo-tree-id38 . -152) (undo-tree-id39 . -1) (undo-tree-id40 . -43) (undo-tree-id41 . 15) (undo-tree-id42 . -70) (undo-tree-id43 . -75) (undo-tree-id44 . -106) (undo-tree-id45 . -107) (undo-tree-id46 . -154) (undo-tree-id47 . -1) (undo-tree-id48 . -152) 4357) nil (25944 64869 126237 846000) 0 nil])
([nil nil ((#("}
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (fontified t)) . 4356) (undo-tree-id27 . -1) (undo-tree-id28 . 2) (undo-tree-id29 . 2) (undo-tree-id30 . 2) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -2)) nil (25944 64869 126227 733000) 0 nil])
([nil nil ((4355 . 4357)) nil (25944 64869 126222 202000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -4356) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (4357 . 4358) (#("}" 0 1 (fontified nil)) . -4357) (4357 . 4358)) nil (25944 64869 126218 849000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . 4356) (4356 . 4357) (4356 . 4357) (t 25944 64869 162726 383000)) nil (25944 64871 712815 369000) 0 nil])
([nil nil ((4745 . 4748) (t 25944 64871 748815 863000)) nil (25944 65008 43540 815000) 0 nil])
([nil nil ((4748 . 4754)) nil (25944 65008 43540 29000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4753) (undo-tree-id148 . -1) (undo-tree-id149 . -1) 4754) nil (25944 65008 43539 205000) 0 nil])
([nil nil ((4762 . 4764) (#("}" 0 1 (fontified nil)) . -4762) (4753 . 4763)) nil (25944 65008 43537 87000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -4762) (undo-tree-id146 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -4763) (undo-tree-id147 . -1) 4764) nil (25944 65008 43535 811000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4763) (4763 . 4764) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -4763) (4763 . 4764) (4762 . 4764)) nil (25944 65008 43532 862000) 0 nil])
([nil nil ((4764 . 4767) (4765 . 4767) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 4764) (4764 . 4767) (4763 . 4765)) nil (25944 65008 43531 791000) 0 nil])
([nil nil ((4767 . 4774)) nil (25944 65008 43530 831000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4773) (undo-tree-id145 . -1) 4774) nil (25944 65008 43529 986000) 0 nil])
([nil nil ((4763 . 4767)) nil (25944 65008 43522 801000) 0 nil])
([nil nil ((4767 . 4773)) nil (25944 65008 43522 274000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4789 4790 nil nil nil t #s(yas--field 2 4792 4795 nil nil nil t #s(yas--field 3 4797 4811 nil nil nil t nil))) #s(yas--field 2 4792 4795 nil nil nil t #s(yas--field 3 4797 4811 nil nil nil t nil)) #s(yas--field 3 4797 4811 nil nil nil t nil)) nil 4 nil #s(yas--field 3 4797 4811 nil nil nil t nil) nil nil)) (4773 . 4842) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4773) (4773 . 4858) (#("RespondWithJSON" 0 15 (fontified nil)) . -4773) (4773 . 4788)) nil (25944 65008 43521 361000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 4790) (4789 . 4790)) nil (25944 65008 43519 869000) 0 nil])
([nil nil ((4793 . 4795) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 4793) (4792 . 4793)) nil (25944 65008 43518 963000) 0 nil])
([nil nil ((4798 . 4804) (4797 . 4799) (#("\"" 0 1 (fontified nil)) . -4797) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-5-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 4798) (4797 . 4798)) nil (25944 65008 43517 142000) 0 nil])
([nil nil ((4804 . 4807)) nil (25944 65008 43516 97000) 0 nil])
([nil nil ((4807 . 4810)) nil (25944 65008 43515 267000) 0 nil])
([nil nil ((apply yas--snippet-revive 4773 4812 #s(yas--snippet nil (#s(yas--field 1 4789 4790 nil nil nil t #s(yas--field 2 4792 4795 nil nil nil t #s(yas--field 3 4797 4811 nil nil nil t nil))) #s(yas--field 2 4792 4795 nil nil nil t #s(yas--field 3 4797 4811 nil nil nil t nil)) #s(yas--field 3 4797 4811 nil nil nil t nil)) nil 4 nil #s(yas--field 3 4797 4811 nil nil nil t nil) nil nil))) nil (25944 65008 43514 521000) 0 nil])
([nil nil ((4745 . 4748)) nil (25944 65008 43513 646000) 0 nil])
([nil nil ((4748 . 4761)) nil (25944 65008 43512 704000) 0 nil])
([nil nil ((4761 . 4766)) nil (25944 65008 43508 902000) 0 nil])
([nil nil ((#("E" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4289) (undo-tree-id165 . -1) (#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4290) (undo-tree-id166 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4291) (undo-tree-id167 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4292) (undo-tree-id168 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4293) (undo-tree-id169 . -1) 4294 (t 25944 65008 79485 907000)) nil (25944 65084 671303 623000) 0 nil])
([nil nil ((4285 . 4287)) nil (25944 65084 671299 389000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4330) (undo-tree-id159 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4331) (undo-tree-id160 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4332) (undo-tree-id161 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4333) (undo-tree-id162 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4334) (undo-tree-id163 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4335) (undo-tree-id164 . -1) 4336) nil (25944 65084 671298 108000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4324) (undo-tree-id153 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4325) (undo-tree-id154 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4326) (undo-tree-id155 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4327) (undo-tree-id156 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4328) (undo-tree-id157 . -1) (#(" " 0 1 (fontified t)) . -4329) (undo-tree-id158 . -1) 4330) nil (25944 65084 671293 15000) 0 nil])
([nil nil ((4324 . 4340)) nil (25944 65084 671287 840000) 0 nil])
([nil nil ((4340 . 4342)) nil (25944 65084 671287 48000) 0 nil])
([nil nil ((4329 . 4330)) nil (25944 65084 671286 467000) 0 nil])
([nil nil ((4770 . 4778)) nil (25944 65084 671285 755000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4362 . 4363) (#("
" 0 1 (fontified nil)) . -4882) (4360 . 4883)) nil (25944 65084 671285 5000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4360)) nil (25944 65084 671284 155000) 0 nil])
([nil nil ((4308 . 4309)) nil (25944 65084 671283 362000) 0 nil])
([nil nil ((4346 . 4348)) nil (25944 65084 671282 560000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4347) (undo-tree-id150 . -1) (undo-tree-id151 . 1) (undo-tree-id152 . -1) 4348) nil (25944 65084 671281 464000) 0 nil])
([nil nil ((4366 . 4367) (#(")" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified nil)) . -4366) (4359 . 4367)) nil (25944 65084 671269 475000) 0 nil])
([nil nil ((4447 . 4449) (4429 . 4430) (#("		" 0 2 (fontified nil)) . -4429) (4447 . 4448) (t 25944 65084 707173 717000)) nil (25944 65250 316800 459000) 0 nil])
([nil nil ((#("	" 0 1 (rear-nonsticky t fontified t)) . -4371) (#("		" 0 2 (fontified t)) . -4447) (undo-tree-id180 . -2) (#("	" 0 1 (fontified t)) . 4452) (#("	" 0 1 (fontified t)) . 4511) (#("	" 0 1 (fontified t)) . 4520) (#("	" 0 1 (fontified t)) . 4524) (#("	" 0 1 (fontified t)) . 4591) (#("	" 0 1 (fontified t)) . 4609) (#("	" 0 1 (fontified t)) . 4668) (#("	" 0 1 (fontified t)) . 4672) (#("	" 0 1 (fontified t)) . 4700) (#("	" 0 1 (fontified t)) . 4730) (#("	" 0 1 (fontified t)) . 4767) (#("	" 0 1 (fontified t)) . 4804) (#("	" 0 1 (fontified t)) . 4833) (#("	" 0 1 (fontified t)) . 4856) 4449) nil (25944 65250 316797 578000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4445) (undo-tree-id179 . -1) 4446) nil (25944 65250 316794 107000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 500, \"Internal Server Error\")
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 24 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (face tree-sitter-hl-face:variable fontified t) 26 28 (fontified t) 28 31 (face tree-sitter-hl-face:number fontified t) 31 33 (fontified t) 33 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 58 (fontified t)) . 4446) (undo-tree-id176 . -57) (undo-tree-id177 . 42) (undo-tree-id178 . -15) 4461) nil (25944 65250 316792 573000) 0 nil])
([nil nil ((4454 . 4455)) nil (25944 65250 316790 159000) 0 nil])
([nil nil ((4455 . 4459)) nil (25944 65250 316789 551000) 0 nil])
([nil nil ((apply yas--snippet-revive 4455 4469 #s(yas--snippet nil nil #s(yas--exit 4468 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4468 nil) 5 nil nil nil nil)) (4455 . 4469) (#("LoginResUser{$0\\}" 0 17 (fontified nil)) . 4455) (4455 . 4472) (#("Logi" 0 4 (fontified nil)) . 4455) (4455 . 4459) (#("LoginResUser{}" 0 14 (fontified nil)) . -4455) (4455 . 4469) (#("Logi" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -4455) (undo-tree-id174 . -4) (undo-tree-id175 . -4) 4459) nil (25944 65250 316788 13000) 0 nil])
([nil nil ((4469 . 4474)) nil (25944 65250 316559 712000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 500, \"Internal Server Error\")
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 24 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (face tree-sitter-hl-face:variable fontified t) 26 28 (fontified t) 28 31 (face tree-sitter-hl-face:number fontified t) 31 33 (fontified t) 33 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 58 (fontified t)) . 4562) (undo-tree-id172 . -57) (undo-tree-id173 . 58)) nil (25944 65250 316559 1000) 0 nil])
([nil nil ((4561 . 4564)) nil (25944 65250 316556 891000) 0 nil])
([nil nil ((4564 . 4566)) nil (25944 65250 316556 16000) 0 nil])
([nil nil ((4566 . 4576)) nil (25944 65250 316555 189000) 0 nil])
([nil nil ((apply yas--snippet-revive 4571 4585 #s(yas--snippet nil nil #s(yas--exit 4584 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4584 nil) 6 nil nil nil nil)) (4571 . 4585) (#("LoginResUser{$0\\}" 0 17 (fontified nil)) . 4571) (4571 . 4588) (#("Login" 0 5 (fontified nil)) . 4571) (4571 . 4576) (#("LoginResUser{}" 0 14 (fontified nil)) . -4571) (4571 . 4585) (#("Login" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -4571) (undo-tree-id170 . -5) (undo-tree-id171 . -5) 4576) nil (25944 65250 316553 759000) 0 nil])
([nil nil ((4585 . 4590)) nil (25944 65250 316544 489000) 0 nil])
([nil nil ((4808 . 4810)) nil (25944 65250 316543 929000) 0 nil])
([nil nil ((4810 . 4824)) nil (25944 65250 316543 158000) 0 nil])
([nil nil ((4824 . 4829)) nil (25944 65250 316539 699000) 0 nil])
([nil nil ((#("		token, terr := auth.MintAccessToken(a, user.ID.String())
		if terr != nil {
			utils.RespondWithError(w, 500, \"Internal Server Error\")
			return
		}
		refreshToken, cerr := auth.MintRefreshToken(a, user.ID.String())
		if cerr != nil {
			utils.RespondWithError(w, 500, \"Internal Server Error\")
		}
		resUser := LoginResUser{}
		resUser.AccessToken = token
		resUser.CreatedAt = user.CreatedAt
		resUser.UpdatedAt = user.UpdatedAt
		resUser.Email = user.Email
		resUser.ID = user.ID
		resUser.RefreshToken = refreshToken
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 9 (fontified t) 9 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (fontified t) 14 16 (face tree-sitter-hl-face:operator fontified t) 16 17 (fontified t) 17 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (fontified t) 22 37 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face tree-sitter-hl-face:variable fontified t) 39 41 (fontified t) 41 45 (face tree-sitter-hl-face:variable fontified t) 45 46 (fontified t) 46 48 (face tree-sitter-hl-face:property fontified t) 48 49 (fontified t) 49 55 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 55 56 (face (rainbow-delimiters-depth-4-face) fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t) 59 61 (fontified t) 61 63 (face tree-sitter-hl-face:keyword fontified t) 63 64 (fontified t) 64 68 (face tree-sitter-hl-face:variable fontified t) 68 69 (fontified t) 69 71 (face tree-sitter-hl-face:operator fontified t) 71 72 (fontified t) 72 75 (face tree-sitter-hl-face:constant\.builtin fontified t) 75 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 81 (fontified t) 81 86 (face tree-sitter-hl-face:variable fontified t) 86 87 (fontified t) 87 103 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 103 104 (face (rainbow-delimiters-depth-4-face) fontified t) 104 105 (face tree-sitter-hl-face:variable fontified t) 105 107 (fontified t) 107 110 (face tree-sitter-hl-face:number fontified t) 110 112 (fontified t) 112 135 (face tree-sitter-hl-face:string fontified t) 135 136 (face (rainbow-delimiters-depth-4-face) fontified t) 136 140 (fontified t) 140 146 (face tree-sitter-hl-face:keyword fontified t) 146 149 (fontified t) 149 150 (face (rainbow-delimiters-depth-3-face) fontified t) 150 153 (fontified t) 153 165 (face tree-sitter-hl-face:variable fontified t) 165 167 (fontified t) 167 171 (face tree-sitter-hl-face:variable fontified t) 171 172 (fontified t) 172 174 (face tree-sitter-hl-face:operator fontified t) 174 175 (fontified t) 175 179 (face tree-sitter-hl-face:variable fontified t) 179 180 (fontified t) 180 196 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 196 197 (face (rainbow-delimiters-depth-3-face) fontified t) 197 198 (face tree-sitter-hl-face:variable fontified t) 198 200 (fontified t) 200 204 (face tree-sitter-hl-face:variable fontified t) 204 205 (fontified t) 205 207 (face tree-sitter-hl-face:property fontified t) 207 208 (fontified t) 208 214 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 214 215 (face (rainbow-delimiters-depth-4-face) fontified t) 215 216 (face (rainbow-delimiters-depth-4-face) fontified t) 216 217 (face (rainbow-delimiters-depth-3-face) fontified t) 217 220 (fontified t) 220 222 (face tree-sitter-hl-face:keyword fontified t) 222 223 (fontified t) 223 227 (face tree-sitter-hl-face:variable fontified t) 227 228 (fontified t) 228 230 (face tree-sitter-hl-face:operator fontified t) 230 231 (fontified t) 231 234 (face tree-sitter-hl-face:constant\.builtin fontified t) 234 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-3-face) fontified t) 236 240 (fontified t) 240 245 (face tree-sitter-hl-face:variable fontified t) 245 246 (fontified t) 246 262 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 262 263 (face (rainbow-delimiters-depth-4-face) fontified t) 263 264 (face tree-sitter-hl-face:variable fontified t) 264 266 (fontified t) 266 269 (face tree-sitter-hl-face:number fontified t) 269 271 (fontified t) 271 294 (face tree-sitter-hl-face:string fontified t) 294 295 (face (rainbow-delimiters-depth-4-face) fontified t) 295 296 (fontified t) 296 298 (fontified t) 298 299 (face (rainbow-delimiters-depth-3-face) fontified t) 299 300 (fontified t) 300 301 (fontified t) 301 302 (fontified t rear-nonsticky t) 302 309 (face tree-sitter-hl-face:variable fontified t) 309 310 (fontified t) 310 312 (face tree-sitter-hl-face:operator fontified t) 312 313 (fontified t) 313 325 (face tree-sitter-hl-face:type fontified t) 325 326 (face (rainbow-delimiters-depth-3-face) fontified t) 326 327 (face (rainbow-delimiters-depth-3-face) fontified t) 327 328 (fontified t) 328 330 (fontified t) 330 337 (face tree-sitter-hl-face:variable fontified t) 337 338 (fontified t) 338 349 (face tree-sitter-hl-face:property fontified t) 349 350 (fontified t) 350 351 (face tree-sitter-hl-face:operator fontified t) 351 352 (fontified t) 352 357 (face tree-sitter-hl-face:variable fontified t) 357 360 (fontified t) 360 367 (face tree-sitter-hl-face:variable fontified t) 367 368 (fontified t) 368 377 (face tree-sitter-hl-face:property fontified t) 377 378 (fontified t) 378 379 (face tree-sitter-hl-face:operator fontified t) 379 380 (fontified t) 380 384 (face tree-sitter-hl-face:variable fontified t) 384 385 (fontified t) 385 394 (face tree-sitter-hl-face:property fontified t) 394 397 (fontified t) 397 404 (face tree-sitter-hl-face:variable fontified t) 404 405 (fontified t) 405 414 (face tree-sitter-hl-face:property fontified t) 414 415 (fontified t) 415 416 (face tree-sitter-hl-face:operator fontified t) 416 417 (fontified t) 417 421 (face tree-sitter-hl-face:variable fontified t) 421 422 (fontified t) 422 430 (face tree-sitter-hl-face:property fontified t) 430 431 (face tree-sitter-hl-face:property fontified t) 431 434 (fontified t) 434 441 (face tree-sitter-hl-face:variable fontified t) 441 442 (fontified t) 442 447 (face tree-sitter-hl-face:property fontified t) 447 448 (fontified t) 448 449 (face tree-sitter-hl-face:operator fontified t) 449 450 (fontified t) 450 454 (face tree-sitter-hl-face:variable fontified t) 454 455 (fontified t) 455 460 (face tree-sitter-hl-face:property fontified t) 460 463 (fontified t) 463 470 (face tree-sitter-hl-face:variable fontified t) 470 471 (fontified t) 471 473 (face tree-sitter-hl-face:property fontified t) 473 474 (fontified t) 474 475 (face tree-sitter-hl-face:operator fontified t) 475 476 (fontified t) 476 480 (face tree-sitter-hl-face:variable fontified t) 480 481 (fontified t) 481 483 (face tree-sitter-hl-face:property fontified t) 483 486 (fontified t) 486 493 (face tree-sitter-hl-face:variable fontified t) 493 494 (fontified t) 494 495 (face tree-sitter-hl-face:property fontified t) 495 506 (face tree-sitter-hl-face:property fontified t) 506 507 (fontified t) 507 508 (face tree-sitter-hl-face:operator fontified t) 508 509 (fontified t) 509 521 (face tree-sitter-hl-face:variable fontified t) 521 522 (fontified t)) . 5329) (undo-tree-id229 . -520) (undo-tree-id230 . -521) (undo-tree-id231 . -520) (undo-tree-id232 . -36) (undo-tree-id233 . -36) (undo-tree-id234 . -36) (undo-tree-id235 . -520) 5365 (t 25944 65250 352088 564000)) nil (25944 65311 676479 362000) 0 nil])
([nil nil ((5328 . 5331)) nil (25944 65311 676474 267000) 0 nil])
([nil nil ((5331 . 5335)) nil (25944 65311 676473 704000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5331) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5332) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5333) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5334) (undo-tree-id227 . -1) (undo-tree-id228 . -1) 5335) nil (25944 65311 676472 608000) 0 nil])
([nil nil ((5331 . 5338)) nil (25944 65311 676467 21000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5334) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5335) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5336) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5337) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 5338) nil (25944 65311 676465 644000) 0 nil])
([nil nil ((5334 . 5340)) nil (25944 65311 676459 254000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5338) (undo-tree-id211 . -1) (#(":" 0 1 (fontified t)) . -5339) (undo-tree-id212 . -1) 5340) nil (25944 65311 676458 364000) 0 nil])
([nil nil ((5338 . 5347)) nil (25944 65311 676456 142000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4587) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4588) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -4589) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 4590) nil (25944 65311 676454 612000) 0 nil])
([nil nil ((4587 . 4590)) nil (25944 65311 676444 481000) 0 nil])
([nil nil ((4587 . 4588)) nil (25944 65311 676443 707000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4471) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4472) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -4473) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 4474) nil (25944 65311 676441 761000) 0 nil])
([nil nil ((4471 . 4475)) nil (25944 65311 676422 287000) 0 nil])
([nil nil ((#("f" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -4281) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 4282 (t 25944 65311 712055 643000)) nil (25944 65325 672774 927000) 0 nil])
([nil nil ((4281 . 4282)) nil (25944 65325 672761 959000) 0 nil])
([nil nil ((5349 . 5353) (t 25944 65325 708711 37000)) nil (25944 65340 497807 130000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5374 5375 nil nil nil t #s(yas--field 2 5377 5382 nil nil nil t nil)) #s(yas--field 2 5377 5382 nil nil nil t nil)) nil 7 nil #s(yas--field 2 5377 5382 nil nil nil t nil) nil nil)) (5349 . 5413) (#("FromDBUserToLoginResUser(${1:a *utils.DBConfig}, ${2:user *database.User})" 0 74 (fontified nil)) . 5349) (5349 . 5423) (#("From" 0 4 (fontified nil)) . 5349) (5349 . 5353) (#("FromDBUserToLoginResUser" 0 24 (fontified nil)) . -5349) (5349 . 5373) (#("From" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5349) (undo-tree-id255 . -4) (undo-tree-id256 . -4) 5353) nil (25944 65340 497805 498000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 3 (face tree-sitter-hl-face:operator fontified nil) 3 8 (face tree-sitter-hl-face:variable fontified nil) 8 9 (fontified nil) 9 17 (face tree-sitter-hl-face:property fontified nil)) . 5375) (undo-tree-id254 . -17) (5374 . 5375)) nil (25944 65340 497802 576000) 0 nil])
([nil nil ((5378 . 5381) (#("user *database.User" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 6 (face tree-sitter-hl-face:operator fontified nil) 6 14 (face tree-sitter-hl-face:variable fontified nil) 14 15 (fontified nil) 15 19 (face tree-sitter-hl-face:property fontified nil)) . 5378) (undo-tree-id251 . -19) (undo-tree-id252 . -6) (undo-tree-id253 . -19) (5377 . 5378)) nil (25944 65340 497800 780000) 0 nil])
([nil nil ((apply yas--snippet-revive 5377 5382 #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 2 5377 5382 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 2 5377 5382 nil nil nil t nil) nil)) (5377 . 5382) (#("&user" 0 5 (fontified nil)) . 5377) (undo-tree-id239 . -5) (5377 . 5382) (#("user" 0 4 (fontified nil)) . 5377) (undo-tree-id240 . -4) (5377 . 5381) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5377) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) 5381) nil (25944 65340 497796 741000) 0 nil])
([nil nil ((apply yas--snippet-revive 5349 5383 #s(yas--snippet nil (#s(yas--field 1 5374 5375 nil nil nil t #s(yas--field 2 5377 5382 nil nil nil t nil)) #s(yas--field 2 5377 5382 nil nil nil t nil)) nil 7 nil #s(yas--field 2 5377 5382 nil nil nil t nil) nil nil))) nil (25944 65340 497778 73000) 0 nil])
([nil nil ((#("		user, err := a.DB.GetUserByEmail(a.CTX, userReqParams.Email)
		// Handle Db Error as well
		if err != nil {
			utils.RespondWithJSON(w, 401, \"Unauthorized\")
			return
		}
" 0 2 (fontified t) 2 6 (face tree-sitter-hl-face:variable fontified t) 6 8 (fontified t) 8 11 (face tree-sitter-hl-face:variable fontified t) 11 12 (fontified t) 12 14 (face tree-sitter-hl-face:operator fontified t) 14 15 (fontified t) 15 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (fontified t) 17 19 (face tree-sitter-hl-face:property fontified t) 19 20 (fontified t) 20 34 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (face tree-sitter-hl-face:variable fontified t) 36 37 (fontified t) 37 40 (face tree-sitter-hl-face:property fontified t) 40 42 (fontified t) 42 55 (face tree-sitter-hl-face:variable fontified t) 55 56 (fontified t) 56 61 (face tree-sitter-hl-face:property fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 63 (fontified t) 63 65 (fontified t) 65 91 (face tree-sitter-hl-face:comment fontified t) 91 92 (fontified t) 92 94 (fontified t) 94 96 (face tree-sitter-hl-face:keyword fontified t) 96 97 (fontified t) 97 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 103 (face tree-sitter-hl-face:operator fontified t) 103 104 (fontified t) 104 107 (face tree-sitter-hl-face:constant\.builtin fontified t) 107 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-3-face) fontified t) 109 110 (fontified t) 110 113 (fontified t) 113 118 (face tree-sitter-hl-face:variable fontified t) 118 119 (fontified t) 119 134 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 134 135 (face (rainbow-delimiters-depth-4-face) fontified t) 135 136 (face tree-sitter-hl-face:variable fontified t) 136 138 (fontified t) 138 141 (face tree-sitter-hl-face:number fontified t) 141 143 (fontified t) 143 157 (face tree-sitter-hl-face:string fontified t) 157 158 (face (rainbow-delimiters-depth-4-face) fontified t) 158 159 (fontified t) 159 162 (fontified t) 162 168 (face tree-sitter-hl-face:keyword fontified t) 168 169 (fontified t) 169 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-3-face) fontified t) 172 173 (fontified t)) . 5158) (undo-tree-id326 . -171) (undo-tree-id327 . -172) (undo-tree-id328 . -171) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -171) 5160 (t 25944 65340 534182 897000)) nil (25944 65452 529877 920000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4371 . 4372) (#("
" 0 1 (fontified nil)) . -4542) (4369 . 4543) 4368) nil (25944 65452 529871 547000) 0 nil])
([nil nil ((#("	" 0 1 (rear-nonsticky t fontified t)) . -4371) (#("	" 0 1 (fontified t)) . 4434) (#("	" 0 1 (fontified t)) . 4462) (#("	" 0 1 (fontified t)) . 4480) (#("	" 0 1 (fontified t)) . 4529) (#("	" 0 1 (fontified t)) . 4539) 4373) nil (25944 65452 529869 886000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4325) (undo-tree-id307 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4326) (undo-tree-id308 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4327) (undo-tree-id309 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4328) (undo-tree-id310 . -1) (#(" " 0 1 (fontified t)) . -4329) (undo-tree-id311 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4330) (undo-tree-id312 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4331) (undo-tree-id313 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4332) (undo-tree-id314 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4333) (undo-tree-id315 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4334) (undo-tree-id316 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4335) (undo-tree-id317 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4336) (undo-tree-id318 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4337) (undo-tree-id319 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4338) (undo-tree-id320 . -1) (#("." 0 1 (fontified t)) . -4339) (undo-tree-id321 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4340) (undo-tree-id322 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4341) (undo-tree-id323 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4342) (undo-tree-id324 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4343) (undo-tree-id325 . -1) 4344) nil (25944 65452 529866 520000) 0 nil])
([nil nil ((4325 . 4337)) nil (25944 65452 529852 648000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4404) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4405) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4406) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4407) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4408) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4409) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("q" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4410) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("P" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4411) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4412) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4413) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4414) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4415) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4416) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("." 0 1 (fontified t)) . -4417) (undo-tree-id305 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4418) (undo-tree-id306 . -1) 4419) nil (25944 65452 529848 721000) 0 nil])
([nil nil ((4404 . 4405)) nil (25944 65452 529667 774000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5350) (undo-tree-id352 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5351) (undo-tree-id353 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5352) (undo-tree-id354 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5353) (undo-tree-id355 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5354) (undo-tree-id356 . -1) 5355 (t 25944 65452 567069 604000)) nil (25944 65470 768213 224000) 0 nil])
([nil nil ((5350 . 5353)) nil (25944 65470 768209 190000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5350) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5351) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5352) (undo-tree-id350 . -1) (undo-tree-id351 . -1) 5353) nil (25944 65470 768208 42000) 0 nil])
([nil nil ((5350 . 5354)) nil (25944 65470 768203 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 5350 5369 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (5350 . 5369) (#("userReqParams.Email" 0 19 (fontified nil)) . 5350) (5350 . 5369) (#("user" 0 4 (fontified nil)) . 5350) (5350 . 5354) (#("userReqParams.Email" 0 19 (fontified nil)) . -5350) (5350 . 5369) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5350) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -2) (undo-tree-id336 . -3) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) 5354) nil (25944 65470 768199 166000) 0 nil])
([nil nil ((#("		utils.RespondWithJSON(w, 401, \"Unauthorized\")
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 23 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (face tree-sitter-hl-face:variable fontified t) 25 27 (fontified t) 27 30 (face tree-sitter-hl-face:number fontified t) 30 32 (fontified t) 32 46 (face tree-sitter-hl-face:string fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t) 47 48 (fontified t)) . 4456) (undo-tree-id374 . -47) (undo-tree-id375 . -7) 4463 (t 25944 65470 803970 901000)) nil (25944 65518 819761 766000) 0 nil])
([nil nil ((4464 . 4471)) nil (25944 65518 819759 844000) 0 nil])
([nil nil ((#("É" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4465) (undo-tree-id368 . -1) (#("L" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4466) (undo-tree-id369 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4467) (undo-tree-id370 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4468) (undo-tree-id371 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4469) (undo-tree-id372 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4470) (undo-tree-id373 . -1) 4471) nil (25944 65518 819758 445000) 0 nil])
([nil nil ((4465 . 4470)) nil (25944 65518 819753 766000) 0 nil])
([nil nil ((apply yas--snippet-revive 4465 4479 #s(yas--snippet nil nil #s(yas--exit 4478 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4478 nil) 10 nil nil nil nil)) (4465 . 4479) (#("LoginResUser{$0\\}" 0 17 (fontified nil)) . 4465) (4465 . 4482) (#("Login" 0 5 (fontified nil)) . 4465) (4465 . 4470) (#("LoginResUser{}" 0 14 (fontified nil)) . -4465) (4465 . 4479) (#("Login" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -4465) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) 4470) nil (25944 65518 819752 590000) 0 nil])
([nil nil ((4479 . 4482)) nil (25944 65518 819746 354000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4481) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 4482) nil (25944 65518 819745 157000) 0 nil])
([nil nil ((4481 . 4484)) nil (25944 65518 819733 927000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4578 . 4579) (nil fontified nil 4487 . 4579) (4487 . 4579) 4486 (t 25944 65518 857755 481000)) nil (25945 115 724644 0) 0 nil])
([nil nil ((4487 . 4489)) nil (25945 115 724642 802000) 0 nil])
([nil nil ((4489 . 4492)) nil (25945 115 724642 144000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4585) (4585 . 4586) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -4585) (4585 . 4586) (4583 . 4586)) nil (25945 115 724640 745000) 0 nil])
([nil nil ((4586 . 4588) (4587 . 4588) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 4586) (4586 . 4588) (4585 . 4587)) nil (25945 115 724639 319000) 0 nil])
([nil nil ((4337 . 4339)) nil (25945 115 724638 332000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4338) (undo-tree-id438 . -1) 4339) nil (25945 115 724637 466000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4325) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4326) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4327) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4328) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4329) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#(" " 0 1 (fontified t)) . -4330) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4331) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4332) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4333) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4334) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4335) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4336) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("," 0 1 (fontified t)) . -4337) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 4338) nil (25945 115 724634 14000) 0 nil])
([nil nil ((4325 . 4329)) nil (25945 115 724567 205000) 0 nil])
([nil nil ((4329 . 4339)) nil (25945 115 724566 860000) 0 nil])
([nil nil ((4339 . 4343)) nil (25945 115 724566 455000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4342) (undo-tree-id410 . -1) (undo-tree-id411 . -1) 4343) nil (25945 115 724565 894000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4341) (undo-tree-id408 . -1) (undo-tree-id409 . -1) 4342) nil (25945 115 724563 841000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4339) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4340) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 4341) nil (25945 115 724561 543000) 0 nil])
([nil nil ((4339 . 4343)) nil (25945 115 724557 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 4339 4351 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (4339 . 4351) (#("LoginReqUser" 0 12 (fontified nil)) . 4339) (4339 . 4351) (#("User" 0 4 (fontified nil)) . 4339) (4339 . 4343) (#("LoginReqUser" 0 12 (fontified nil)) . -4339) (4339 . 4351) (#("User" 0 4 (face tree-sitter-hl-face:type fontified t)) . -4339) (undo-tree-id402 . -4) (undo-tree-id403 . -4) 4343) nil (25945 115 724556 366000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4418) (undo-tree-id397 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4419) (undo-tree-id398 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4420) (undo-tree-id399 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4421) (undo-tree-id400 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4422) (undo-tree-id401 . -1) 4423) nil (25945 115 724552 482000) 0 nil])
([nil nil ((4418 . 4422)) nil (25945 115 724548 156000) 0 nil])
([nil nil ((4422 . 4423)) nil (25945 115 724547 745000) 0 nil])
([nil nil ((4423 . 4424)) nil (25945 115 724547 327000) 0 nil])
([nil nil ((apply yas--snippet-revive 4418 4437 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (4418 . 4437) (#("userReqParams.Email" 0 19 (fontified nil)) . 4418) (4418 . 4437) (#("userRe" 0 6 (fontified nil)) . 4418) (4418 . 4424) (#("userReqParams.Email" 0 19 (fontified nil)) . -4418) (4418 . 4437) (#("userRe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -4418) (undo-tree-id395 . -6) (undo-tree-id396 . -6) 4424) nil (25945 115 724546 119000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4605) (undo-tree-id393 . -1) (undo-tree-id394 . -1) 4606) nil (25945 115 724543 416000) 0 nil])
([nil nil ((4605 . 4606)) nil (25945 115 724541 679000) 0 nil])
([nil nil ((4616 . 4628)) nil (25945 115 724541 85000) 0 nil])
([nil nil ((apply yas--snippet-revive 4623 4637 #s(yas--snippet nil nil #s(yas--exit 4636 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4636 nil) 13 nil nil nil nil)) (4623 . 4637) (#("LoginResUser{$0\\}" 0 17 (fontified nil)) . 4623) (4623 . 4640) (#("Login" 0 5 (fontified nil)) . 4623) (4623 . 4628) (#("LoginResUser{}" 0 14 (fontified nil)) . -4623) (4623 . 4637) (#("Login" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -4623) (undo-tree-id391 . -5) (undo-tree-id392 . -5) 4628) nil (25945 115 724539 614000) 0 nil])
([nil nil ((4637 . 4642)) nil (25945 115 724537 8000) 0 nil])
([nil nil ((4519 . 4524)) nil (25945 115 724536 465000) 0 nil])
([nil nil ((4524 . 4526)) nil (25945 115 724535 786000) 0 nil])
([nil nil ((4520 . 4521)) nil (25945 115 724535 113000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4612) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("!" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4613) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4614) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#(" " 0 1 (fontified t)) . -4615) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4616) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -4617) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -4618) (undo-tree-id389 . -1) (undo-tree-id390 . -1) 4619) nil (25945 115 724532 962000) 0 nil])
([nil nil ((4612 . 4625)) nil (25945 115 724515 51000) 0 nil])
([nil nil ((4653 . 4654)) nil (25945 115 724510 906000) 0 nil])
([nil nil ((#("	// Handle Db Error as well
" 0 1 (fontified t) 1 27 (face tree-sitter-hl-face:comment fontified t) 27 28 (fontified t)) . 4439) (undo-tree-id439 . -27) (undo-tree-id440 . -26) 4465 (t 25945 115 762518 23000)) nil (25945 154 989828 835000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5481) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5482) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5483) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5484) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5485) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5486) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) 5487 (t 25945 155 28799 896000)) nil (25945 181 607985 531000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4481) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4482) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4483) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 4484 (t 25945 181 644783 359000)) nil (25945 246 637867 173000) 0 nil])
([nil nil ((4481 . 4485)) nil (25945 246 637863 208000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4492 4505 nil nil nil nil #s(yas--field 2 4507 4515 nil nil nil nil nil)) #s(yas--field 2 4507 4515 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 4492 4505 nil nil nil nil #s(yas--field 2 4507 4515 nil nil nil nil nil)) nil nil)) (4485 . 4516) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 4485) (4485 . 4526) (#("Errorf" 0 6 (fontified nil)) . -4485) (4485 . 4491)) nil (25945 246 637862 446000) 0 nil])
([nil nil ((apply yas--snippet-revive 4485 4516 #s(yas--snippet nil (#s(yas--field 1 4492 4505 nil nil nil nil #s(yas--field 2 4507 4515 nil nil nil nil nil)) #s(yas--field 2 4507 4515 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 4492 4505 nil nil nil nil #s(yas--field 2 4507 4515 nil nil nil nil nil)) nil nil))) nil (25945 246 637861 375000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -4515) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . 1) (undo-tree-id624 . -1) 4516) nil (25945 246 637860 587000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4494) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4495) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4496) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4497) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#(" " 0 1 (fontified t)) . -4498) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4499) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4500) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4501) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4502) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4503) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4504) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (#("," 0 1 (fontified t)) . -4505) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#(" " 0 1 (fontified t)) . -4506) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4507) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#(" " 0 1 (fontified t)) . -4508) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("." 0 1 (fontified t)) . -4509) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#("." 0 1 (fontified t)) . -4510) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -4511) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4512) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -4513) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4514) (undo-tree-id619 . -1) (undo-tree-id620 . -1) 4515) nil (25945 246 637854 229000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4481) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4482) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4483) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("." 0 1 (fontified t)) . -4484) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4485) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4486) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4487) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4488) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4489) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("f" 0 1 (face tree-sitter-hl-face:property fontified t)) . -4490) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -4491) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4492) (undo-tree-id574 . 1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4493) (undo-tree-id577 . -1) (undo-tree-id578 . -1) 4494) nil (25945 246 637821 908000) 0 nil])
([nil nil ((4481 . 4484)) nil (25945 246 637790 825000) 0 nil])
([nil nil ((4438 . 4440)) nil (25945 246 637790 334000) 0 nil])
([nil nil ((4440 . 4443)) nil (25945 246 637789 435000) 0 nil])
([nil nil ((4443 . 4453)) nil (25945 246 637788 833000) 0 nil])
([nil nil ((4453 . 4459)) nil (25945 246 637788 193000) 0 nil])
([nil nil ((4453 . 4454)) nil (25945 246 637787 613000) 0 nil])
([nil nil ((4459 . 4478)) nil (25945 246 637786 963000) 0 nil])
([nil nil ((4478 . 4484)) nil (25945 246 637785 915000) 0 nil])
([nil nil ((4484 . 4486)) nil (25945 246 637781 723000) 0 nil])
([nil nil ((#("		if bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(userReqParams.Password)) == nil {
			utils.RespondWithJSON(w, 200, user)
		}
" 0 1 (fontified t) 1 2 (fontified t) 2 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 11 (face tree-sitter-hl-face:variable fontified t) 11 12 (fontified t) 12 34 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 41 (face tree-sitter-hl-face:type fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 46 (face tree-sitter-hl-face:variable fontified t) 46 47 (fontified t) 47 55 (face tree-sitter-hl-face:property fontified t) 55 56 (face (rainbow-delimiters-depth-4-face) fontified t) 56 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t) 59 60 (face (rainbow-delimiters-depth-4-face) fontified t) 60 64 (face tree-sitter-hl-face:type fontified t) 64 65 (face (rainbow-delimiters-depth-4-face) fontified t) 65 78 (face tree-sitter-hl-face:variable fontified t) 78 79 (fontified t) 79 87 (face tree-sitter-hl-face:property fontified t) 87 88 (face (rainbow-delimiters-depth-4-face) fontified t) 88 89 (face (rainbow-delimiters-depth-3-face) fontified t) 89 90 (fontified t) 90 92 (face tree-sitter-hl-face:operator fontified t) 92 93 (fontified t) 93 96 (face tree-sitter-hl-face:constant\.builtin fontified t) 96 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-3-face) fontified t) 98 102 (fontified t) 102 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (fontified t) 108 120 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 120 123 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 123 124 (face (rainbow-delimiters-depth-4-face) fontified t) 124 125 (face tree-sitter-hl-face:variable fontified t) 125 127 (fontified t) 127 130 (face tree-sitter-hl-face:number fontified t) 130 132 (fontified t) 132 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (face (rainbow-delimiters-depth-4-face) fontified t) 137 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-3-face) fontified t) 141 142 (fontified t)) . 5649) (undo-tree-id658 . -140) (undo-tree-id659 . -141) (undo-tree-id660 . -140) (undo-tree-id661 . -2) (undo-tree-id662 . -96) (undo-tree-id663 . -2) (undo-tree-id664 . -2) (undo-tree-id665 . -140) 5651 (t 25945 246 675434 151000)) nil (25945 496 483330 309000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5681) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5682) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5683) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5684) (undo-tree-id656 . -1) (undo-tree-id657 . -1) 5685) nil (25945 496 483323 935000) 0 nil])
([nil nil ((5681 . 5685)) nil (25945 496 483312 646000) 0 nil])
([nil nil ((5685 . 5686)) nil (25945 496 483311 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 5681 5688 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (5681 . 5688) (#("resUser" 0 7 (fontified nil)) . 5681) (5681 . 5688) (#("resUs" 0 5 (fontified nil)) . 5681) (5681 . 5686) (#("resUser" 0 7 (fontified nil)) . -5681) (5681 . 5688) (#("resUs" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -5681) (undo-tree-id631 . -5) (undo-tree-id632 . -5) (undo-tree-id633 . -1) (undo-tree-id634 . -2) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) 5686) nil (25945 496 483308 96000) 0 nil])
([nil nil ((#("type LoginReqUser struct {
	Email    string `json:\"email\"`
	Password string `json:\"password\"`
}

type LoginResUser struct {
	ID           uuid.UUID `json:\"id\"`
	CreatedAt    time.Time `json:\"created_at\"`
	UpdatedAt    time.Time `json:\"updated_at\"`
	Email        string    `json:\"email\"`
	AccessToken  string    `json:\"access_token\"`
	RefreshToken string    `json:\"refresh_token\"`
}

func FromDBUserToLoginResUser(a *utils.DBConfig, userReqParams LoginReqUser) (LoginResUser, error) {
	user, err := a.DB.GetUserByEmail(a.CTX, userReqParams.Email)
	// Handle Not found or other error differently 
	if err != nil {
		return LoginResUser{}, nil
	}
	if perr := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(userReqParams.Password)); perr != nil {
		return LoginResUser{}, perr
	} 
	token, terr := auth.MintAccessToken(a, user.ID.String())
	if terr != nil {
		return LoginResUser{}, terr
	}
	refreshToken, cerr := auth.MintRefreshToken(a, user.ID.String())
	if cerr != nil {
		return LoginResUser{}, cerr
	}
	resUser := LoginResUser{}
	resUser.AccessToken = token
	resUser.CreatedAt = user.CreatedAt
	resUser.UpdatedAt = user.UpdatedAt
	resUser.Email = user.Email
	resUser.ID = user.ID
	resUser.RefreshToken = refreshToken
	return resUser, nil
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 17 (face tree-sitter-hl-face:type fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:keyword fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 28 (fontified t) 28 33 (face tree-sitter-hl-face:property fontified t) 33 37 (fontified t) 37 43 (face tree-sitter-hl-face:type fontified t) 43 44 (fontified t) 44 58 (face tree-sitter-hl-face:string fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 68 (face tree-sitter-hl-face:property fontified t) 68 69 (fontified t) 69 75 (face tree-sitter-hl-face:type fontified t) 75 76 (fontified t) 76 93 (face tree-sitter-hl-face:string fontified t) 93 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t) 95 97 (fontified t) 97 101 (face tree-sitter-hl-face:keyword fontified t) 101 102 (fontified t) 102 114 (face tree-sitter-hl-face:type fontified t) 114 115 (fontified t) 115 121 (face tree-sitter-hl-face:keyword fontified t) 121 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t) 123 125 (fontified t) 125 127 (face tree-sitter-hl-face:property fontified t) 127 143 (fontified t) 143 147 (face tree-sitter-hl-face:type fontified t) 147 148 (fontified t) 148 159 (face tree-sitter-hl-face:string fontified t) 159 161 (fontified t) 161 170 (face tree-sitter-hl-face:property fontified t) 170 179 (fontified t) 179 183 (face tree-sitter-hl-face:type fontified t) 183 184 (fontified t) 184 203 (face tree-sitter-hl-face:string fontified t) 203 205 (fontified t) 205 214 (face tree-sitter-hl-face:property fontified t) 214 223 (fontified t) 223 227 (face tree-sitter-hl-face:type fontified t) 227 228 (fontified t) 228 247 (face tree-sitter-hl-face:string fontified t) 247 249 (fontified t) 249 254 (face tree-sitter-hl-face:property fontified t) 254 262 (fontified t) 262 268 (face tree-sitter-hl-face:type fontified t) 268 272 (fontified t) 272 286 (face tree-sitter-hl-face:string fontified t) 286 288 (fontified t) 288 299 (face tree-sitter-hl-face:property fontified t) 299 301 (fontified t) 301 307 (face tree-sitter-hl-face:type fontified t) 307 311 (fontified t) 311 332 (face tree-sitter-hl-face:string fontified t) 332 333 (fontified t) 333 334 (fontified t) 334 346 (face tree-sitter-hl-face:property fontified t) 346 347 (fontified t) 347 353 (face tree-sitter-hl-face:type fontified t) 353 357 (fontified t) 357 379 (face tree-sitter-hl-face:string fontified t) 379 380 (fontified t) 380 381 (face (rainbow-delimiters-depth-1-face) fontified t) 381 382 (fontified t) 382 383 (fontified t) 383 387 (face tree-sitter-hl-face:keyword fontified t) 387 388 (fontified t) 388 389 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 389 412 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 412 413 (face (rainbow-delimiters-depth-1-face) fontified t) 413 414 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 414 415 (fontified t) 415 416 (face tree-sitter-hl-face:operator fontified t) 416 422 (fontified t) 422 430 (face tree-sitter-hl-face:type fontified t) 430 432 (fontified t) 432 445 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 445 446 (fontified t) 446 458 (face tree-sitter-hl-face:type fontified t) 458 459 (face (rainbow-delimiters-depth-1-face) fontified t) 459 460 (fontified t) 460 461 (face (rainbow-delimiters-depth-1-face) fontified t) 461 473 (face tree-sitter-hl-face:type fontified t) 473 475 (fontified t) 475 480 (face tree-sitter-hl-face:type fontified t) 480 481 (face (rainbow-delimiters-depth-1-face) fontified t) 481 482 (fontified t) 482 483 (face (rainbow-delimiters-depth-1-face) fontified t) 483 484 (fontified t) 484 485 (fontified t) 485 489 (face tree-sitter-hl-face:variable fontified t) 489 491 (fontified t) 491 494 (face tree-sitter-hl-face:variable fontified t) 494 495 (fontified t) 495 497 (face tree-sitter-hl-face:operator fontified t) 497 498 (fontified t) 498 499 (face tree-sitter-hl-face:variable fontified t) 499 500 (fontified t) 500 502 (face tree-sitter-hl-face:property fontified t) 502 503 (fontified t) 503 517 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 517 518 (face (rainbow-delimiters-depth-2-face) fontified t) 518 519 (face tree-sitter-hl-face:variable fontified t) 519 520 (fontified t) 520 523 (face tree-sitter-hl-face:property fontified t) 523 525 (fontified t) 525 538 (face tree-sitter-hl-face:variable fontified t) 538 539 (fontified t) 539 544 (face tree-sitter-hl-face:property fontified t) 544 545 (face (rainbow-delimiters-depth-2-face) fontified t) 545 546 (fontified t) 546 547 (fontified t) 547 594 (face tree-sitter-hl-face:comment fontified t) 594 595 (fontified t) 595 596 (fontified t) 596 598 (face tree-sitter-hl-face:keyword fontified t) 598 599 (fontified t) 599 602 (face tree-sitter-hl-face:variable fontified t) 602 603 (fontified t) 603 605 (face tree-sitter-hl-face:operator fontified t) 605 606 (fontified t) 606 609 (face tree-sitter-hl-face:constant\.builtin fontified t) 609 610 (fontified t) 610 611 (face (rainbow-delimiters-depth-2-face) fontified t) 611 612 (fontified t) 612 614 (fontified t) 614 620 (face tree-sitter-hl-face:keyword fontified t) 620 621 (fontified t) 621 632 (face tree-sitter-hl-face:type fontified t) 632 633 (face tree-sitter-hl-face:type fontified t) 633 634 (face (rainbow-delimiters-depth-3-face) fontified t) 634 635 (face (rainbow-delimiters-depth-3-face) fontified t) 635 637 (fontified t) 637 640 (face tree-sitter-hl-face:constant\.builtin fontified t) 640 641 (fontified t) 641 642 (fontified t) 642 643 (face (rainbow-delimiters-depth-2-face) fontified t) 643 644 (fontified t) 644 645 (fontified t) 645 647 (face tree-sitter-hl-face:keyword fontified t) 647 648 (fontified t) 648 649 (face tree-sitter-hl-face:variable fontified t) 649 652 (face tree-sitter-hl-face:variable fontified t) 652 653 (fontified t) 653 655 (face tree-sitter-hl-face:operator fontified t) 655 656 (fontified t) 656 662 (face tree-sitter-hl-face:variable fontified t) 662 663 (fontified t) 663 685 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 685 686 (face (rainbow-delimiters-depth-2-face) fontified t) 686 687 (face (rainbow-delimiters-depth-3-face) fontified t) 687 688 (face (rainbow-delimiters-depth-3-face) fontified t) 688 692 (face tree-sitter-hl-face:type fontified t) 692 693 (face (rainbow-delimiters-depth-3-face) fontified t) 693 697 (face tree-sitter-hl-face:variable fontified t) 697 698 (fontified t) 698 706 (face tree-sitter-hl-face:property fontified t) 706 707 (face (rainbow-delimiters-depth-3-face) fontified t) 707 709 (fontified t) 709 710 (face (rainbow-delimiters-depth-3-face) fontified t) 710 711 (face (rainbow-delimiters-depth-3-face) fontified t) 711 715 (face tree-sitter-hl-face:type fontified t) 715 716 (face (rainbow-delimiters-depth-3-face) fontified t) 716 729 (face tree-sitter-hl-face:variable fontified t) 729 730 (fontified t) 730 738 (face tree-sitter-hl-face:property fontified t) 738 739 (face (rainbow-delimiters-depth-3-face) fontified t) 739 740 (face (rainbow-delimiters-depth-2-face) fontified t) 740 742 (fontified t) 742 746 (face tree-sitter-hl-face:variable fontified t) 746 747 (fontified t) 747 749 (face tree-sitter-hl-face:operator fontified t) 749 750 (fontified t) 750 753 (face tree-sitter-hl-face:constant\.builtin fontified t) 753 754 (fontified t) 754 755 (face (rainbow-delimiters-depth-2-face) fontified t) 755 756 (fontified t) 756 758 (fontified t) 758 764 (face tree-sitter-hl-face:keyword fontified t) 764 765 (fontified t) 765 776 (face tree-sitter-hl-face:type fontified t) 776 777 (face tree-sitter-hl-face:type fontified t) 777 778 (face (rainbow-delimiters-depth-3-face) fontified t) 778 779 (face (rainbow-delimiters-depth-3-face) fontified t) 779 781 (fontified t) 781 782 (face tree-sitter-hl-face:variable fontified t) 782 785 (face tree-sitter-hl-face:variable fontified t) 785 786 (fontified t) 786 787 (fontified t) 787 788 (face (rainbow-delimiters-depth-2-face) fontified t) 788 789 (fontified t rear-nonsticky t) 789 790 (fontified t) 790 791 (fontified t) 791 796 (face tree-sitter-hl-face:variable fontified t) 796 798 (fontified t) 798 802 (face tree-sitter-hl-face:variable fontified t) 802 803 (fontified t) 803 805 (face tree-sitter-hl-face:operator fontified t) 805 806 (fontified t) 806 810 (face tree-sitter-hl-face:variable fontified t) 810 811 (fontified t) 811 826 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 826 827 (face (rainbow-delimiters-depth-2-face) fontified t) 827 828 (face tree-sitter-hl-face:variable fontified t) 828 830 (fontified t) 830 834 (face tree-sitter-hl-face:variable fontified t) 834 835 (fontified t) 835 837 (face tree-sitter-hl-face:property fontified t) 837 838 (fontified t) 838 844 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 844 845 (face (rainbow-delimiters-depth-3-face) fontified t) 845 846 (face (rainbow-delimiters-depth-3-face) fontified t) 846 847 (face (rainbow-delimiters-depth-2-face) fontified t) 847 848 (fontified t) 848 849 (fontified t) 849 851 (face tree-sitter-hl-face:keyword fontified t) 851 852 (fontified t) 852 856 (face tree-sitter-hl-face:variable fontified t) 856 857 (fontified t) 857 859 (face tree-sitter-hl-face:operator fontified t) 859 860 (fontified t) 860 863 (face tree-sitter-hl-face:constant\.builtin fontified t) 863 864 (fontified t) 864 865 (face (rainbow-delimiters-depth-2-face) fontified t) 865 866 (fontified t) 866 868 (fontified t) 868 874 (face tree-sitter-hl-face:keyword fontified t) 874 875 (fontified t) 875 886 (face tree-sitter-hl-face:type fontified t) 886 887 (face tree-sitter-hl-face:type fontified t) 887 888 (face (rainbow-delimiters-depth-3-face) fontified t) 888 889 (face (rainbow-delimiters-depth-3-face) fontified t) 889 891 (fontified t) 891 895 (face tree-sitter-hl-face:variable fontified t) 895 896 (fontified t) 896 897 (fontified t) 897 898 (face (rainbow-delimiters-depth-2-face) fontified t) 898 900 (fontified t) 900 912 (face tree-sitter-hl-face:variable fontified t) 912 914 (fontified t) 914 918 (face tree-sitter-hl-face:variable fontified t) 918 919 (fontified t) 919 921 (face tree-sitter-hl-face:operator fontified t) 921 922 (fontified t) 922 926 (face tree-sitter-hl-face:variable fontified t) 926 927 (fontified t) 927 943 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 943 944 (face (rainbow-delimiters-depth-2-face) fontified t) 944 945 (face tree-sitter-hl-face:variable fontified t) 945 947 (fontified t) 947 951 (face tree-sitter-hl-face:variable fontified t) 951 952 (fontified t) 952 954 (face tree-sitter-hl-face:property fontified t) 954 955 (fontified t) 955 961 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 961 962 (face (rainbow-delimiters-depth-3-face) fontified t) 962 963 (face (rainbow-delimiters-depth-3-face) fontified t) 963 964 (face (rainbow-delimiters-depth-2-face) fontified t) 964 965 (fontified t) 965 966 (fontified t) 966 968 (face tree-sitter-hl-face:keyword fontified t) 968 969 (fontified t) 969 973 (face tree-sitter-hl-face:variable fontified t) 973 974 (fontified t) 974 976 (face tree-sitter-hl-face:operator fontified t) 976 977 (fontified t) 977 980 (face tree-sitter-hl-face:constant\.builtin fontified t) 980 981 (fontified t) 981 982 (face (rainbow-delimiters-depth-2-face) fontified t) 982 983 (fontified t) 983 985 (fontified t) 985 991 (face tree-sitter-hl-face:keyword fontified t) 991 992 (fontified t) 992 1003 (face tree-sitter-hl-face:type fontified t) 1003 1004 (face tree-sitter-hl-face:type fontified t) 1004 1005 (face (rainbow-delimiters-depth-3-face) fontified t) 1005 1006 (face (rainbow-delimiters-depth-3-face) fontified t) 1006 1008 (fontified t) 1008 1009 (face tree-sitter-hl-face:variable fontified t) 1009 1012 (face tree-sitter-hl-face:variable fontified t) 1012 1013 (fontified t) 1013 1014 (fontified t) 1014 1015 (face (rainbow-delimiters-depth-2-face) fontified t) 1015 1016 (fontified t) 1016 1017 (fontified t rear-nonsticky t) 1017 1024 (face tree-sitter-hl-face:variable fontified t) 1024 1025 (fontified t) 1025 1027 (face tree-sitter-hl-face:operator fontified t) 1027 1028 (fontified t) 1028 1040 (face tree-sitter-hl-face:type fontified t) 1040 1041 (face (rainbow-delimiters-depth-2-face) fontified t) 1041 1042 (face (rainbow-delimiters-depth-2-face) fontified t) 1042 1043 (fontified t) 1043 1044 (fontified t) 1044 1051 (face tree-sitter-hl-face:variable fontified t) 1051 1052 (fontified t) 1052 1063 (face tree-sitter-hl-face:property fontified t) 1063 1064 (fontified t) 1064 1065 (face tree-sitter-hl-face:operator fontified t) 1065 1066 (fontified t) 1066 1071 (face tree-sitter-hl-face:variable fontified t) 1071 1073 (fontified t) 1073 1080 (face tree-sitter-hl-face:variable fontified t) 1080 1081 (fontified t) 1081 1090 (face tree-sitter-hl-face:property fontified t) 1090 1091 (fontified t) 1091 1092 (face tree-sitter-hl-face:operator fontified t) 1092 1093 (fontified t) 1093 1097 (face tree-sitter-hl-face:variable fontified t) 1097 1098 (fontified t) 1098 1107 (face tree-sitter-hl-face:property fontified t) 1107 1109 (fontified t) 1109 1116 (face tree-sitter-hl-face:variable fontified t) 1116 1117 (fontified t) 1117 1126 (face tree-sitter-hl-face:property fontified t) 1126 1127 (fontified t) 1127 1128 (face tree-sitter-hl-face:operator fontified t) 1128 1129 (fontified t) 1129 1133 (face tree-sitter-hl-face:variable fontified t) 1133 1134 (fontified t) 1134 1142 (face tree-sitter-hl-face:property fontified t) 1142 1143 (face tree-sitter-hl-face:property fontified t) 1143 1145 (fontified t) 1145 1152 (face tree-sitter-hl-face:variable fontified t) 1152 1153 (fontified t) 1153 1158 (face tree-sitter-hl-face:property fontified t) 1158 1159 (fontified t) 1159 1160 (face tree-sitter-hl-face:operator fontified t) 1160 1161 (fontified t) 1161 1165 (face tree-sitter-hl-face:variable fontified t) 1165 1166 (fontified t) 1166 1171 (face tree-sitter-hl-face:property fontified t) 1171 1173 (fontified t) 1173 1180 (face tree-sitter-hl-face:variable fontified t) 1180 1181 (fontified t) 1181 1183 (face tree-sitter-hl-face:property fontified t) 1183 1184 (fontified t) 1184 1185 (face tree-sitter-hl-face:operator fontified t) 1185 1186 (fontified t) 1186 1190 (face tree-sitter-hl-face:variable fontified t) 1190 1191 (fontified t) 1191 1193 (face tree-sitter-hl-face:property fontified t) 1193 1194 (fontified t) 1194 1195 (fontified t) 1195 1202 (face tree-sitter-hl-face:variable fontified t) 1202 1203 (fontified t) 1203 1215 (face tree-sitter-hl-face:property fontified t) 1215 1216 (fontified t) 1216 1217 (face tree-sitter-hl-face:operator fontified t) 1217 1218 (fontified t) 1218 1230 (face tree-sitter-hl-face:variable fontified t) 1230 1231 (fontified t) 1231 1232 (fontified t) 1232 1238 (face tree-sitter-hl-face:keyword fontified t) 1238 1239 (fontified t) 1239 1246 (face tree-sitter-hl-face:variable fontified t) 1246 1248 (fontified t) 1248 1251 (face tree-sitter-hl-face:constant\.builtin fontified t) 1251 1252 (fontified t) 1252 1253 (face (rainbow-delimiters-depth-1-face) fontified t) 1253 1254 (fontified t)) . 3893) (undo-tree-id666 . -1252) (undo-tree-id667 . -1253) (undo-tree-id668 . -1252) (undo-tree-id669 . -1254) (undo-tree-id670 . -1254) (undo-tree-id671 . -413) (undo-tree-id672 . -1254) (undo-tree-id673 . -790) (undo-tree-id674 . -790) (undo-tree-id675 . -1230) (undo-tree-id676 . -1008) (undo-tree-id677 . -1008) (undo-tree-id678 . -1008) (undo-tree-id679 . -388) (undo-tree-id680 . -729) (undo-tree-id681 . -432) (undo-tree-id682 . -740) (undo-tree-id683 . -754) (undo-tree-id684 . -637) (undo-tree-id685 . -28) (undo-tree-id686 . -60) (undo-tree-id687 . -125) (undo-tree-id688 . -161) (undo-tree-id689 . -205) (undo-tree-id690 . -249) (undo-tree-id691 . -288) (undo-tree-id692 . -334) (undo-tree-id693 . -388) (undo-tree-id694 . -811) (undo-tree-id695 . -1254) (undo-tree-id696 . -1252) (undo-tree-id697 . -382) (undo-tree-id698 . -97) (undo-tree-id699 . -97) (undo-tree-id700 . -97) (undo-tree-id701 . -97) (undo-tree-id702 . -97) (undo-tree-id703 . -97) (undo-tree-id704 . -1254) (t 25945 496 515776 943000)) nil (25945 554 174979 348000) 0 nil])
([nil nil ((#("	\"golang.org/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (face tree-sitter-hl-face:string fontified t) 29 30 (fontified t)) . 388) (undo-tree-id710 . -29) (undo-tree-id711 . -24) 412 (t 25945 554 214252 775000)) nil (25945 709 94747 778000) 0 nil])
([nil nil ((388 . 418)) nil (25945 709 94744 973000) 0 nil])
([nil nil ((1908 . 1911) (t 25945 554 214252 775000)) nil (25945 709 94744 9000) 0 nil])
([nil nil ((1911 . 1916)) nil (25945 709 94742 851000) 0 nil])
([nil nil ((#("		user.
" 0 2 (fontified t) 2 7 (fontified t) 7 8 (fontified t)) . 1909) (undo-tree-id705 . -7) (undo-tree-id706 . 1) (undo-tree-id707 . -7) (undo-tree-id708 . -6) (undo-tree-id709 . 1) 1915) nil (25945 709 94739 741000) 0 nil])
([nil nil ((1173 . 1175) (t 25945 709 128052 245000)) nil (25945 878 70481 369000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1173) (undo-tree-id1261 . -1) (#("
" 0 1 (fontified t)) . -1174) (undo-tree-id1262 . -1) 1175) nil (25945 878 70480 487000) 0 nil])
([nil nil ((1908 . 1911)) nil (25945 878 70478 184000) 0 nil])
([nil nil ((1911 . 1912)) nil (25945 878 70477 764000) 0 nil])
([nil nil ((1912 . 1913)) nil (25945 878 70477 176000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1912) (undo-tree-id1260 . -1) 1913) nil (25945 878 70476 486000) 0 nil])
([nil nil ((1912 . 1919)) nil (25945 878 70475 285000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1915) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1916) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1917) (undo-tree-id1258 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1918) (undo-tree-id1259 . -1) 1919) nil (25945 878 70474 162000) 0 nil])
([nil nil ((1915 . 1924)) nil (25945 878 70468 617000) 0 nil])
([nil nil ((1924 . 1929)) nil (25945 878 70468 108000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1928) (undo-tree-id1253 . -1) 1929) nil (25945 878 70467 315000) 0 nil])
([nil nil ((1928 . 1929)) nil (25945 878 70465 862000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1928) (undo-tree-id1252 . -1) 1929) nil (25945 878 70465 124000) 0 nil])
([nil nil ((1928 . 1935)) nil (25945 878 70463 413000) 0 nil])
([nil nil ((apply yas--snippet-revive 1935 1947 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (1935 . 1947) (#("LoginResUser" 0 12 (fontified nil)) . 1935) (1935 . 1947) (#("LoginResUser" 0 12 (fontified nil)) . -1935) (1935 . 1947)) nil (25945 878 70462 392000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1948) (1948 . 1949) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1948) (1948 . 1949) (1947 . 1949)) nil (25945 878 70461 149000) 0 nil])
([nil nil ((1949 . 1952)) nil (25945 878 70460 169000) 0 nil])
([nil nil ((1952 . 1955)) nil (25945 878 70459 766000) 0 nil])
([nil nil ((apply yas--snippet-revive 1952 1967 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (1952 . 1967) (#("registerUserRes" 0 15 (fontified nil)) . 1952) (1952 . 1967) (#("reg" 0 3 (fontified nil)) . 1952) (1952 . 1955) (#("registerUserRes" 0 15 (fontified nil)) . -1952) (1952 . 1967) (#("reg" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1952) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) 1955) nil (25945 878 70458 593000) 0 nil])
([nil nil ((1967 . 1968)) nil (25945 878 70456 174000) 0 nil])
([nil nil ((#("		registerUserRes.
" 0 2 (fontified t) 2 18 (fontified t) 18 19 (fontified t)) . 1950) (undo-tree-id1217 . -18) (undo-tree-id1218 . 1) (undo-tree-id1219 . -18) (undo-tree-id1220 . -17) (undo-tree-id1221 . 1) (undo-tree-id1222 . -17) (undo-tree-id1223 . -17) (undo-tree-id1224 . -17) (undo-tree-id1225 . -17) (undo-tree-id1226 . -18) (undo-tree-id1227 . -18) (undo-tree-id1228 . -18) (undo-tree-id1229 . -18) (undo-tree-id1230 . -18) (undo-tree-id1231 . -18) (undo-tree-id1232 . -17) (undo-tree-id1233 . -17) (undo-tree-id1234 . -17) (undo-tree-id1235 . -17) (undo-tree-id1236 . -17) (undo-tree-id1237 . -17) (undo-tree-id1238 . -17) (undo-tree-id1239 . -17) (undo-tree-id1240 . -17) (undo-tree-id1241 . -17) (undo-tree-id1242 . -17) (undo-tree-id1243 . -17) (undo-tree-id1244 . -17) (undo-tree-id1245 . -2) (undo-tree-id1246 . -17) (undo-tree-id1247 . -17) (undo-tree-id1248 . -17) (undo-tree-id1249 . -19) 1967) nil (25945 878 70454 932000) 0 nil])
([nil nil ((1950 . 1969)) nil (25945 878 70433 847000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1967) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1)) nil (25945 878 70432 705000) 0 nil])
([nil nil ((1952 . 1955) (#("registerUserRes" 0 15 (fontified nil)) . 1952) (1952 . 1967) (#("reg" 0 3 (fontified nil)) . 1952) (1952 . 1955) (#("registerUserRes" 0 15 (fontified nil)) . 1952) (1952 . 1967) (#("registerUserRes" 0 15 (face tree-sitter-hl-face:variable fontified t)) . 1952) (undo-tree-id1178 . -15) (undo-tree-id1179 . -15) (undo-tree-id1180 . -14) (undo-tree-id1181 . -15) (undo-tree-id1182 . -15) (undo-tree-id1183 . -15) (undo-tree-id1184 . -15) (undo-tree-id1185 . -15) (undo-tree-id1186 . -15) (undo-tree-id1187 . -15) (undo-tree-id1188 . -15) (undo-tree-id1189 . -15) (undo-tree-id1190 . -15) (undo-tree-id1191 . -15) (undo-tree-id1192 . -15) (undo-tree-id1193 . -15) (undo-tree-id1194 . -15) (undo-tree-id1195 . -15) (undo-tree-id1196 . -15) (undo-tree-id1197 . -15) (undo-tree-id1198 . -15) (undo-tree-id1199 . -15) (undo-tree-id1200 . -15) (undo-tree-id1201 . -15) (undo-tree-id1202 . -15) (undo-tree-id1203 . -15) (undo-tree-id1204 . -15) (undo-tree-id1205 . -15) (undo-tree-id1206 . -15) (undo-tree-id1207 . -14) (undo-tree-id1208 . -14)) nil (25945 878 70426 403000) 0 nil])
([nil nil ((#("reg" 0 3 (face tree-sitter-hl-face:variable fontified t)) . 1952) (undo-tree-id1174 . -3) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2)) nil (25945 878 70406 594000) 0 nil])
([nil nil ((#("
		" 0 1 (fontified t) 1 3 (fontified t)) . 1949) (undo-tree-id1135 . -1) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -2) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -1) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -1) (undo-tree-id1167 . -3) (undo-tree-id1168 . -1) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -1) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2)) nil (25945 878 70401 259000) 0 nil])
([nil nil ((#("{}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1947) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -1) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -1) (undo-tree-id1130 . 1) (undo-tree-id1131 . -2) (undo-tree-id1132 . 2) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1948) (1948 . 1949) (#("}" 0 1 (fontified nil)) . 1948) (1948 . 1949)) nil (25945 878 70374 793000) 0 nil])
([nil nil ((#("LoginResUser" 0 12 (fontified nil)) . 1935) (undo-tree-id1046 . 12) (undo-tree-id1047 . 12) (1935 . 1947) (#("LoginResUser" 0 12 (fontified nil)) . 1935) (undo-tree-id1048 . 12) (undo-tree-id1049 . 12) (1935 . 1947) (#("LoginResUser" 0 12 (face tree-sitter-hl-face:property fontified t)) . 1935) (undo-tree-id1050 . -12) (undo-tree-id1051 . -12) (undo-tree-id1052 . -12) (undo-tree-id1053 . -11) (undo-tree-id1054 . -12) (undo-tree-id1055 . -12) (undo-tree-id1056 . -12) (undo-tree-id1057 . -12) (undo-tree-id1058 . -12) (undo-tree-id1059 . -12) (undo-tree-id1060 . -12) (undo-tree-id1061 . -12) (undo-tree-id1062 . -12) (undo-tree-id1063 . -12) (undo-tree-id1064 . -12) (undo-tree-id1065 . -12) (undo-tree-id1066 . -12) (undo-tree-id1067 . -12) (undo-tree-id1068 . -12) (undo-tree-id1069 . -12) (undo-tree-id1070 . -12) (undo-tree-id1071 . -12) (undo-tree-id1072 . -12) (undo-tree-id1073 . -12) (undo-tree-id1074 . -12) (undo-tree-id1075 . -12) (undo-tree-id1076 . -12) (undo-tree-id1077 . -12) (undo-tree-id1078 . -12) (undo-tree-id1079 . -12) (undo-tree-id1080 . -12) (undo-tree-id1081 . -12) (undo-tree-id1082 . -12) (undo-tree-id1083 . -12) (undo-tree-id1084 . -12) (undo-tree-id1085 . -12) (undo-tree-id1086 . -12) (undo-tree-id1087 . -12) (undo-tree-id1088 . -12) (undo-tree-id1089 . -12) (undo-tree-id1090 . -11) (undo-tree-id1091 . -11)) nil (25945 878 70345 718000) 0 nil])
([nil nil ((#("= auth." 0 1 (face tree-sitter-hl-face:operator fontified t) 1 2 (fontified t) 2 6 (fontified t) 6 7 (fontified t)) . 1928) (undo-tree-id1003 . -7) (undo-tree-id1004 . -7) (undo-tree-id1005 . -7) (undo-tree-id1006 . -6) (undo-tree-id1007 . -7) (undo-tree-id1008 . -7) (undo-tree-id1009 . -7) (undo-tree-id1010 . -7) (undo-tree-id1011 . -7) (undo-tree-id1012 . -7) (undo-tree-id1013 . -7) (undo-tree-id1014 . -7) (undo-tree-id1015 . -7) (undo-tree-id1016 . -7) (undo-tree-id1017 . -7) (undo-tree-id1018 . -7) (undo-tree-id1019 . -7) (undo-tree-id1020 . -7) (undo-tree-id1021 . -7) (undo-tree-id1022 . -7) (undo-tree-id1023 . -7) (undo-tree-id1024 . -7) (undo-tree-id1025 . -7) (undo-tree-id1026 . -7) (undo-tree-id1027 . -7) (undo-tree-id1028 . -7) (undo-tree-id1029 . -7) (undo-tree-id1030 . -7) (undo-tree-id1031 . -7) (undo-tree-id1032 . -7) (undo-tree-id1033 . -7) (undo-tree-id1034 . -7) (undo-tree-id1035 . -7) (undo-tree-id1036 . -7) (undo-tree-id1037 . -7) (undo-tree-id1038 . -7) (undo-tree-id1039 . -7) (undo-tree-id1040 . -7) (undo-tree-id1041 . -7) (undo-tree-id1042 . -7) (undo-tree-id1043 . -7) (undo-tree-id1044 . -6) (undo-tree-id1045 . -6)) nil (25945 878 70309 94000) 0 nil])
([nil nil ((1928 . 1929)) nil (25945 878 70282 435000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1928) (undo-tree-id1002 . -1)) nil (25945 878 70281 820000) 0 nil])
([nil nil ((1928 . 1929)) nil (25945 878 70280 470000) 0 nil])
([nil nil ((#("es : " 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1924) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -2) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) (undo-tree-id994 . -3) (undo-tree-id995 . -4) (undo-tree-id996 . -4) (undo-tree-id997 . -4) (undo-tree-id998 . -3) (undo-tree-id999 . -5) (undo-tree-id1000 . -4) (undo-tree-id1001 . -4)) nil (25945 878 70278 632000) 0 nil])
([nil nil ((#("sterUserR" 0 9 (face tree-sitter-hl-face:variable fontified t)) . 1915) (undo-tree-id902 . -9) (undo-tree-id903 . -9) (undo-tree-id904 . -9) (undo-tree-id905 . -8) (undo-tree-id906 . -9) (undo-tree-id907 . -9) (undo-tree-id908 . -9) (undo-tree-id909 . -9) (undo-tree-id910 . -9) (undo-tree-id911 . -9) (undo-tree-id912 . -9) (undo-tree-id913 . -9) (undo-tree-id914 . -9) (undo-tree-id915 . -9) (undo-tree-id916 . -9) (undo-tree-id917 . -9) (undo-tree-id918 . -9) (undo-tree-id919 . -9) (undo-tree-id920 . -9) (undo-tree-id921 . -9) (undo-tree-id922 . -9) (undo-tree-id923 . -9) (undo-tree-id924 . -9) (undo-tree-id925 . -9) (undo-tree-id926 . -9) (undo-tree-id927 . -9) (undo-tree-id928 . -9) (undo-tree-id929 . -9) (undo-tree-id930 . -9) (undo-tree-id931 . -9) (undo-tree-id932 . -9) (undo-tree-id933 . -9) (undo-tree-id934 . -9) (undo-tree-id935 . -9) (undo-tree-id936 . -9) (undo-tree-id937 . -9) (undo-tree-id938 . -9) (undo-tree-id939 . -9) (undo-tree-id940 . -9) (undo-tree-id941 . -9) (undo-tree-id942 . -9) (undo-tree-id943 . -9) (undo-tree-id944 . -9) (undo-tree-id945 . -9) (undo-tree-id946 . -9) (undo-tree-id947 . -9) (undo-tree-id948 . -9) (undo-tree-id949 . -9) (undo-tree-id950 . -9) (undo-tree-id951 . -8) (undo-tree-id952 . -8)) nil (25945 878 70229 751000) 0 nil])
([nil nil ((1915 . 1919)) nil (25945 878 70197 565000) 0 nil])
([nil nil ((#("egiestr" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (face tree-sitter-hl-face:variable fontified t) 6 7 (face tree-sitter-hl-face:variable fontified t)) . 1912) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -5) (undo-tree-id852 . -6) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -2) (undo-tree-id900 . -6) (undo-tree-id901 . -6)) nil (25945 878 70195 915000) 0 nil])
([nil nil ((1912 . 1913)) nil (25945 878 70161 903000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 1912)) nil (25945 878 70161 4000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 1911) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1)) nil (25945 878 70159 4000) 0 nil])
([nil nil ((#("
		" 0 1 (fontified t) 1 3 (fontified t)) . 1908) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -2) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) (undo-tree-id746 . -3) (undo-tree-id747 . -3) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -1) (undo-tree-id788 . -3) (undo-tree-id789 . -1) (undo-tree-id790 . -3) (undo-tree-id791 . -1) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -1) (undo-tree-id795 . -2) (undo-tree-id796 . -2)) nil (25945 878 69876 615000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2089) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2090) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2091) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2092) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) 2093) nil (25945 878 69835 694000) 0 nil])
([nil nil ((2089 . 2091) (#("\"" 0 1 (fontified nil)) . -2089) (2089 . 2090)) nil (25945 878 69813 830000) 0 nil])
([nil nil ((2090 . 2092)) nil (25945 878 69809 312000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -2089) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("O" 0 1 (fontified t)) . -2090) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (#("K" 0 1 (fontified t)) . -2091) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2092) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) 2093 (t 25945 878 108603 476000)) nil (25945 893 596409 315000) 0 nil])
([nil nil ((2090 . 2094) (2089 . 2091) (#("\"" 0 1 (fontified nil)) . -2089) (2089 . 2090)) nil (25945 893 596350 530000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2090) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2091) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2092) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2093) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 2094) nil (25945 893 596347 796000) 0 nil])
([nil nil ((2090 . 2092)) nil (25945 893 596313 263000) 0 nil])
([nil nil ((1908 . 1911) (t 25945 893 634596 342000)) nil (25945 1069 438266 898000) 0 nil])
([nil nil ((1911 . 1924)) nil (25945 1069 438266 306000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1919) (undo-tree-id1395 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1920) (undo-tree-id1396 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1921) (undo-tree-id1397 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1922) (undo-tree-id1398 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1923) (undo-tree-id1399 . -1) 1924) nil (25945 1069 438265 183000) 0 nil])
([nil nil ((1919 . 1928)) nil (25945 1069 438261 495000) 0 nil])
([nil nil ((1928 . 1930)) nil (25945 1069 438261 36000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1911) (undo-tree-id1394 . -1) 1912) nil (25945 1069 438260 434000) 0 nil])
([nil nil ((1911 . 1912)) nil (25945 1069 438259 331000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1931) (1931 . 1932) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1931) (1931 . 1932) (1930 . 1932)) nil (25945 1069 438258 707000) 0 nil])
([nil nil ((1932 . 1935) (1933 . 1935) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1932) (1932 . 1935) (1931 . 1933)) nil (25945 1069 438257 668000) 0 nil])
([nil nil ((1929 . 1931)) nil (25945 1069 438256 570000) 0 nil])
([nil nil ((1931 . 1936)) nil (25945 1069 438255 834000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1948) (1948 . 1949) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1948) (1948 . 1949) (1946 . 1949)) nil (25945 1069 438255 34000) 0 nil])
([nil nil ((1949 . 1952) (1950 . 1952) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1949) (1949 . 1952) (1948 . 1950)) nil (25945 1069 438254 3000) 0 nil])
([nil nil ((1942 . 1944)) nil (25945 1069 438253 222000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1943) (undo-tree-id1393 . -1) 1944) nil (25945 1069 438252 586000) 0 nil])
([nil nil ((1943 . 1944)) nil (25945 1069 438251 347000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1942) (undo-tree-id1391 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1943) (undo-tree-id1392 . -1) 1944) nil (25945 1069 438250 601000) 0 nil])
([nil nil ((1942 . 1951)) nil (25945 1069 438248 702000) 0 nil])
([nil nil ((1951 . 1955)) nil (25945 1069 438247 903000) 0 nil])
([nil nil ((1955 . 1967)) nil (25945 1069 438247 169000) 0 nil])
([nil nil ((apply yas--snippet-revive 1961 1967 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (1961 . 1967) (#("string" 0 6 (fontified nil)) . 1961) (1961 . 1967) (#("string" 0 6 (fontified nil)) . 1961) (1961 . 1967) (#("string" 0 6 (face tree-sitter-hl-face:type fontified t)) . -1961) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) 1967) nil (25945 1069 438246 102000) 0 nil])
([nil nil ((1967 . 1971)) nil (25945 1069 438243 101000) 0 nil])
([nil nil ((1971 . 1987)) nil (25945 1069 438242 478000) 0 nil])
([nil nil ((1987 . 1991)) nil (25945 1069 438241 594000) 0 nil])
([nil nil ((1991 . 2007)) nil (25945 1069 438241 13000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -1953) (1953 . 1954) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1953) (1953 . 1954) (1952 . 1954) (#("`" 0 1 (fontified nil)) . -1952) (1951 . 1953)) nil (25945 1069 438240 37000) 0 nil])
([nil nil ((1959 . 1961) (1958 . 1960) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1958) (1953 . 1959)) nil (25945 1069 438238 287000) 0 nil])
([nil nil ((1987 . 1992) (1986 . 1988) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1986) (1981 . 1987) (1980 . 1982) (#("`" 0 1 (fontified nil)) . -1980) (1979 . 1981)) nil (25945 1069 438237 70000) 0 nil])
([nil nil ((2014 . 2015)) nil (25945 1069 438235 768000) 0 nil])
([nil nil ((2022 . 2032) (2021 . 2023) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2021) (2016 . 2022) (2015 . 2017) (#("`" 0 1 (fontified nil)) . -2015) (2015 . 2016)) nil (25945 1069 438234 896000) 0 nil])
([nil nil ((2033 . 2034)) nil (25945 1069 438233 470000) 0 nil])
([nil nil ((#("
" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2033) (undo-tree-id1388 . -1) 2034) nil (25945 1069 438232 470000) 0 nil])
([nil nil ((2034 . 2038)) nil (25945 1069 438177 52000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2035) (undo-tree-id1385 . -1) (#("	" 0 1 (fontified t)) . -2036) (undo-tree-id1386 . -1) (#("	" 0 1 (fontified t)) . -2037) (undo-tree-id1387 . -1) 2038) nil (25945 1069 438176 149000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2034) (undo-tree-id1384 . -1) 2035) nil (25945 1069 438173 1000) 0 nil])
([nil nil ((2062 . 2069) (2061 . 2063) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2061) (2056 . 2062) (2055 . 2057) (#("`" 0 1 (fontified nil)) . -2055) (2054 . 2056)) nil (25945 1069 438170 941000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2062) (undo-tree-id1377 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2063) (undo-tree-id1378 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2064) (undo-tree-id1379 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2065) (undo-tree-id1380 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2066) (undo-tree-id1381 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2067) (undo-tree-id1382 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2068) (undo-tree-id1383 . -1) 2069) nil (25945 1069 438168 333000) 0 nil])
([nil nil ((2062 . 2071)) nil (25945 1069 438155 957000) 0 nil])
([nil nil ((2071 . 2072)) nil (25945 1069 438152 280000) 0 nil])
([nil nil ((2084 . 2092) (t 25945 1069 479819 676000)) nil (25945 1176 326212 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2086) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2087) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2088) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2089) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2090) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (#("." 0 1 (fontified t)) . -2091) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) 2092) nil (25945 1176 326211 61000) 0 nil])
([nil nil ((2086 . 2089)) nil (25945 1176 326201 376000) 0 nil])
([nil nil ((2089 . 2094)) nil (25945 1176 326200 963000) 0 nil])
([nil nil ((apply yas--snippet-revive 2101 2104 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (2089 . 2096) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (2094 . 2097) (#("ID)" 0 3 (fontified nil)) . 2094) (2094 . 2097) (#("ID" 0 2 (fontified nil)) . -2094) (2094 . 2096)) nil (25945 1176 326199 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2086) (undo-tree-id1431 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2087) (undo-tree-id1432 . -1) (#(" " 0 1 (fontified t)) . -2088) (undo-tree-id1433 . -1) (#("s" 0 1 (fontified t)) . -2089) (undo-tree-id1434 . -1) (#("t" 0 1 (fontified t)) . -2090) (undo-tree-id1435 . -1) (#("r" 0 1 (fontified t)) . -2091) (undo-tree-id1436 . -1) (#("i" 0 1 (fontified t)) . -2092) (undo-tree-id1437 . -1) (#("n" 0 1 (fontified t)) . -2093) (undo-tree-id1438 . -1) (#("g" 0 1 (fontified t)) . -2094) (undo-tree-id1439 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2095) (undo-tree-id1440 . -1) 2096) nil (25945 1176 326197 630000) 0 nil])
([nil nil ((2086 . 2088)) nil (25945 1176 326189 906000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2095) (undo-tree-id1428 . -1) (undo-tree-id1429 . 1) (undo-tree-id1430 . -1) 2096) nil (25945 1176 326189 293000) 0 nil])
([nil nil ((2095 . 2097)) nil (25945 1176 326186 624000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2096) (undo-tree-id1427 . -1) 2097) nil (25945 1176 326186 14000) 0 nil])
([nil nil ((2096 . 2099)) nil (25945 1176 326184 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 2096 2104 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (2096 . 2104) (#("String()" 0 8 (fontified nil)) . 2096) (2096 . 2104) (#("Str" 0 3 (fontified nil)) . 2096) (2096 . 2099) (#("String" 0 6 (fontified nil)) . -2096) (2096 . 2102) (#("Str" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2096) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) 2099) nil (25945 1176 326183 722000) 0 nil])
([nil nil ((2104 . 2105)) nil (25945 1176 326181 82000) 0 nil])
([nil nil ((2105 . 2110)) nil (25945 1176 326180 651000) 0 nil])
([nil nil ((2116 . 2117) (2106 . 2110) (#("			" 0 3 (fontified nil)) . -2106) (2109 . 2115)) nil (25945 1176 326179 997000) 0 nil])
([nil nil ((2117 . 2119) (#("\"" 0 1 (fontified nil)) . -2117) (2117 . 2118)) nil (25945 1176 326178 711000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2117) (undo-tree-id1424 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 2118)) nil (25945 1176 326177 320000) 0 nil])
([nil nil ((2117 . 2122)) nil (25945 1176 326175 887000) 0 nil])
([nil nil ((apply yas--snippet-revive 2122 2127 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (2122 . 2127) (#("Email" 0 5 (fontified nil)) . 2122) (2122 . 2127) (#("Email" 0 5 (fontified nil)) . -2122) (2122 . 2127)) nil (25945 1176 326175 147000) 0 nil])
([nil nil ((2127 . 2128)) nil (25945 1176 326174 91000) 0 nil])
([nil nil ((2129 . 2133) (#("	" 0 1 (fontified nil)) . -2129) (undo-tree-id1423 . 1) (2128 . 2129)) nil (25945 1176 326173 414000) 0 nil])
([nil nil ((2133 . 2139)) nil (25945 1176 326172 48000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2144 2158 nil nil nil t nil)) nil 22 nil #s(yas--field 1 2144 2158 nil nil nil t nil) nil nil)) (2133 . 2151) (#("CreatedAt: ${1:string}," 0 23 (fontified nil)) . 2133) (2133 . 2156) (#("Create" 0 6 (fontified nil)) . 2133) (2133 . 2139) (#("CreatedAt" 0 9 (fontified nil)) . -2133) (2133 . 2142) (#("Create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2133) (undo-tree-id1421 . -6) (undo-tree-id1422 . -6) 2139) nil (25945 1176 326170 739000) 0 nil])
([nil nil ((2145 . 2149) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified nil)) . 2145) (2144 . 2145)) nil (25945 1176 326095 19000) 0 nil])
([nil nil ((apply yas--snippet-revive 2149 2158 #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 1 2144 2158 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 1 2144 2158 nil nil nil t nil) nil)) (2149 . 2158) (#("CreatedAt" 0 9 (fontified nil)) . 2149) (2149 . 2158) (#("CreatedAt" 0 9 (fontified nil)) . -2149) (2149 . 2158)) nil (25945 1176 326094 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 2133 2159 #s(yas--snippet nil (#s(yas--field 1 2144 2158 nil nil nil t nil)) nil 22 nil #s(yas--field 1 2144 2158 nil nil nil t nil) nil nil))) nil (25945 1176 326093 364000) 0 nil])
([nil nil ((2159 . 2164)) nil (25945 1176 326092 646000) 0 nil])
([nil nil ((2164 . 2170)) nil (25945 1176 326092 15000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2175 2189 nil nil nil t nil)) nil 24 nil #s(yas--field 1 2175 2189 nil nil nil t nil) nil nil)) (2164 . 2182) (#("UpdatedAt: ${1:string}," 0 23 (fontified nil)) . 2164) (2164 . 2187) (#("Update" 0 6 (fontified nil)) . 2164) (2164 . 2170) (#("UpdatedAt" 0 9 (fontified nil)) . -2164) (2164 . 2173) (#("Update" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2164) (undo-tree-id1419 . -6) (undo-tree-id1420 . -6) 2170) nil (25945 1176 326091 148000) 0 nil])
([nil nil ((2176 . 2180) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified nil)) . 2176) (2175 . 2176)) nil (25945 1176 326088 714000) 0 nil])
([nil nil ((apply yas--snippet-revive 2180 2189 #s(yas--snippet nil nil nil 25 nil nil #s(yas--field 1 2175 2189 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil #s(yas--field 1 2175 2189 nil nil nil t nil) nil)) (2180 . 2189) (#("UpdatedAt" 0 9 (fontified nil)) . 2180) (2180 . 2189) (#("UpdatedAt" 0 9 (fontified nil)) . -2180) (2180 . 2189)) nil (25945 1176 326087 843000) 0 nil])
([nil nil ((apply yas--snippet-revive 2164 2190 #s(yas--snippet nil (#s(yas--field 1 2175 2189 nil nil nil t nil)) nil 24 nil #s(yas--field 1 2175 2189 nil nil nil t nil) nil nil))) nil (25945 1176 326086 853000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2048) (undo-tree-id1413 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2049) (undo-tree-id1414 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2050) (undo-tree-id1415 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2051) (undo-tree-id1416 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2052) (undo-tree-id1417 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2053) (undo-tree-id1418 . -1) 2054) nil (25945 1176 326085 406000) 0 nil])
([nil nil ((2048 . 2053)) nil (25945 1176 326080 316000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2048) (undo-tree-id1408 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2049) (undo-tree-id1409 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2050) (undo-tree-id1410 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2051) (undo-tree-id1411 . -1) (#("." 0 1 (fontified t)) . -2052) (undo-tree-id1412 . -1) 2053) nil (25945 1176 326078 933000) 0 nil])
([nil nil ((2048 . 2052)) nil (25945 1176 326074 990000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2050) (undo-tree-id1406 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2051) (undo-tree-id1407 . -1) 2052) nil (25945 1176 326074 294000) 0 nil])
([nil nil ((2050 . 2053)) nil (25945 1176 326072 144000) 0 nil])
([nil nil ((apply yas--snippet-revive 2053 2057 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (2053 . 2057) (#("Time" 0 4 (fontified nil)) . 2053) (2053 . 2057) (#("Time" 0 4 (fontified nil)) . -2053) (2053 . 2057)) nil (25945 1176 326071 17000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2008) (undo-tree-id1400 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2009) (undo-tree-id1401 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2010) (undo-tree-id1402 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2011) (undo-tree-id1403 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2012) (undo-tree-id1404 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2013) (undo-tree-id1405 . -1) 2014) nil (25945 1176 326068 671000) 0 nil])
([nil nil ((2008 . 2017)) nil (25945 1176 326054 755000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -2381) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (#("O" 0 1 (fontified t)) . -2382) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("K" 0 1 (fontified t)) . -2383) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2384) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) 2385 (t 25945 1176 366508 13000)) nil (25945 1189 405848 95000) 0 nil])
([nil nil ((2381 . 2386)) nil (25945 1189 405830 557000) 0 nil])
([nil nil ((apply yas--snippet-revive 2381 2396 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (2381 . 2396) (#("registerUserRes" 0 15 (fontified nil)) . 2381) (2381 . 2396) (#("regis" 0 5 (fontified nil)) . 2381) (2381 . 2386) (#("registerUserRes" 0 15 (fontified nil)) . -2381) (2381 . 2396) (#("regis" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -2381) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -1) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -3) (undo-tree-id1464 . -4) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) 2386) nil (25945 1189 405826 486000) 0 nil])
([nil nil ((4385 . 4390) (t 25945 1189 445485 264000)) nil (25945 1237 930632 108000) 0 nil])
([nil nil ((4543 . 4548)) nil (25945 1237 930631 150000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4547) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) 4548) nil (25945 1237 930629 695000) 0 nil])
([nil nil ((4547 . 4548)) nil (25945 1237 930609 951000) 0 nil])
([nil nil ((3040 . 3042) (t 25945 1237 971237 968000)) nil (25945 1394 484877 724000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3040) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) 3041) nil (25945 1394 484876 667000) 0 nil])
([nil nil ((3040 . 3041)) nil (25945 1394 484870 579000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -3040) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) 3041) nil (25945 1394 484867 603000) 0 nil])
([nil nil ((1173 . 1175) (t 25945 1394 524106 778000)) nil (25945 1487 175426 726000) 0 nil])
([nil nil ((1175 . 1186)) nil (25945 1487 175426 73000) 0 nil])
([nil nil ((1175 . 1180)) nil (25945 1487 175425 489000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1200) (1200 . 1201) (#("}" 0 1 (fontified nil)) . -1200) (1200 . 1201) (1191 . 1201)) nil (25945 1487 175424 422000) 0 nil])
([nil nil ((1201 . 1202) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1201) (1201 . 1202) (1200 . 1202)) nil (25945 1487 175422 773000) 0 nil])
([nil nil ((1202 . 1214)) nil (25945 1487 175421 524000) 0 nil])
([nil nil ((apply yas--snippet-revive 1208 1214 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1208 . 1214) (#("string" 0 6 (fontified nil)) . 1208) (1208 . 1214) (#("string" 0 6 (fontified nil)) . 1208) (1208 . 1214) (#("string" 0 6 (face tree-sitter-hl-face:type fontified t)) . -1208) (undo-tree-id1528 . -6) (undo-tree-id1529 . -6) 1214) nil (25945 1487 175420 281000) 0 nil])
([nil nil ((1214 . 1216)) nil (25945 1487 175411 306000) 0 nil])
([nil nil ((1216 . 1231)) nil (25945 1487 175406 893000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1416) (undo-tree-id1651 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1417) (undo-tree-id1652 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1418) (undo-tree-id1653 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1419) (undo-tree-id1654 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1420) (undo-tree-id1655 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1421) (undo-tree-id1656 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1422) (undo-tree-id1657 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1423) (undo-tree-id1658 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1424) (undo-tree-id1659 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1425) (undo-tree-id1660 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1426) (undo-tree-id1661 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1427) (undo-tree-id1662 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1428) (undo-tree-id1663 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1429) (undo-tree-id1664 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1430) (undo-tree-id1665 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1431) (undo-tree-id1666 . -1) 1432 (t 25945 1487 216190 219000)) nil (25945 1567 368802 497000) 0 nil])
([nil nil ((1416 . 1427)) nil (25945 1567 368789 561000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1440) (undo-tree-id1635 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1441) (undo-tree-id1636 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1442) (undo-tree-id1637 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1443) (undo-tree-id1638 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1444) (undo-tree-id1639 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1445) (undo-tree-id1640 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1446) (undo-tree-id1641 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1447) (undo-tree-id1642 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1448) (undo-tree-id1643 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1449) (undo-tree-id1644 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1450) (undo-tree-id1645 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1451) (undo-tree-id1646 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1452) (undo-tree-id1647 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1453) (undo-tree-id1648 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1454) (undo-tree-id1649 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1455) (undo-tree-id1650 . -1) 1456) nil (25945 1567 368787 71000) 0 nil])
([nil nil ((1440 . 1445)) nil (25945 1567 368775 353000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1443) (undo-tree-id1633 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1444) (undo-tree-id1634 . -1) 1445) nil (25945 1567 368774 479000) 0 nil])
([nil nil ((1443 . 1451)) nil (25945 1567 368771 406000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1482) (undo-tree-id1617 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1483) (undo-tree-id1618 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1484) (undo-tree-id1619 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1485) (undo-tree-id1620 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1486) (undo-tree-id1621 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1487) (undo-tree-id1622 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1488) (undo-tree-id1623 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1489) (undo-tree-id1624 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1490) (undo-tree-id1625 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1491) (undo-tree-id1626 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1492) (undo-tree-id1627 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1493) (undo-tree-id1628 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1494) (undo-tree-id1629 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1495) (undo-tree-id1630 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1496) (undo-tree-id1631 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1497) (undo-tree-id1632 . -1) 1498) nil (25945 1567 368768 182000) 0 nil])
([nil nil ((1482 . 1485)) nil (25945 1567 368757 216000) 0 nil])
([nil nil ((apply yas--snippet-revive 1482 1493 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (1482 . 1493) (#("registerReq" 0 11 (fontified nil)) . 1482) (1482 . 1493) (#("reg" 0 3 (fontified nil)) . 1482) (1482 . 1485) (#("registerReq" 0 11 (fontified nil)) . -1482) (1482 . 1493) (#("reg" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1482) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) 1485) nil (25945 1567 368755 952000) 0 nil])
([nil nil ((1571 . 1574)) nil (25945 1567 368753 611000) 0 nil])
([nil nil ((1574 . 1588)) nil (25945 1567 368753 274000) 0 nil])
([nil nil ((1588 . 1598)) nil (25945 1567 368752 949000) 0 nil])
([nil nil ((apply yas--snippet-revive 1594 1602 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (1594 . 1602) (#("database" 0 8 (fontified nil)) . 1594) (1594 . 1602) (#("data" 0 4 (fontified nil)) . 1594) (1594 . 1598) (#("database" 0 8 (fontified nil)) . -1594) (1594 . 1602) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1594) (undo-tree-id1613 . -4) (undo-tree-id1614 . -4) 1598) nil (25945 1567 368751 978000) 0 nil])
([nil nil ((1602 . 1605)) nil (25945 1567 368749 530000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1604) (undo-tree-id1612 . -1) 1605) nil (25945 1567 368749 1000) 0 nil])
([nil nil ((1604 . 1609)) nil (25945 1567 368746 324000) 0 nil])
([nil nil ((apply yas--snippet-revive 1603 1619 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (1603 . 1619) (#("CreateUserParams" 0 16 (fontified nil)) . 1603) (1603 . 1619) (#("Create" 0 6 (fontified nil)) . 1603) (1603 . 1609) (#("CreateUserParams" 0 16 (fontified nil)) . -1603) (1603 . 1619) (#("Create" 0 6 (face tree-sitter-hl-face:property fontified t)) . -1603) (undo-tree-id1610 . -6) (undo-tree-id1611 . -6) 1609) nil (25945 1567 368745 413000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1620) (1620 . 1621) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1620) (1620 . 1621) (1619 . 1621)) nil (25945 1567 368742 932000) 0 nil])
([nil nil ((1621 . 1624)) nil (25945 1567 368742 183000) 0 nil])
([nil nil ((1624 . 1630)) nil (25945 1567 368741 781000) 0 nil])
([nil nil ((apply yas--snippet-revive 1624 1640 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (1624 . 1640) (#("createUserObject" 0 16 (fontified nil)) . 1624) (1624 . 1640) (#("create" 0 6 (fontified nil)) . 1624) (1624 . 1630) (#("createUserObject" 0 16 (fontified nil)) . -1624) (1624 . 1640) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1624) (undo-tree-id1608 . -6) (undo-tree-id1609 . -6) 1630) nil (25945 1567 368740 743000) 0 nil])
([nil nil ((1640 . 1641)) nil (25945 1567 368738 343000) 0 nil])
([nil nil ((apply yas--snippet-revive 1641 1646 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (1641 . 1646) (#("Email" 0 5 (fontified nil)) . 1641) (1641 . 1646) (#("Email" 0 5 (fontified nil)) . -1641) (1641 . 1646)) nil (25945 1567 368737 688000) 0 nil])
([nil nil ((1646 . 1651)) nil (25945 1567 368736 846000) 0 nil])
([nil nil ((1651 . 1653)) nil (25945 1567 368736 439000) 0 nil])
([nil nil ((apply yas--snippet-revive 1649 1660 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (1649 . 1660) (#("registerReq" 0 11 (fontified nil)) . 1649) (1649 . 1660) (#("regi" 0 4 (fontified nil)) . 1649) (1649 . 1653) (#("registerReq" 0 11 (fontified nil)) . -1649) (1649 . 1660) (#("regi" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1649) (undo-tree-id1606 . -4) (undo-tree-id1607 . -4) 1653) nil (25945 1567 368735 374000) 0 nil])
([nil nil ((1660 . 1661)) nil (25945 1567 368732 765000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1660) (undo-tree-id1605 . -1) 1661) nil (25945 1567 368731 751000) 0 nil])
([nil nil ((1660 . 1664)) nil (25945 1567 368730 349000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1661) (undo-tree-id1602 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1662) (undo-tree-id1603 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1663) (undo-tree-id1604 . -1) 1664) nil (25945 1567 368729 133000) 0 nil])
([nil nil ((1661 . 1666)) nil (25945 1567 368726 283000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1431) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1432) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1433) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1434) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1435) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1436) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1437) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1438) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("." 0 1 (fontified t)) . -1439) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) 1440) nil (25945 1567 368720 656000) 0 nil])
([nil nil ((1657 . 1660) (t 25945 1567 409279 226000)) nil (25945 1599 661570 98000) 0 nil])
([nil nil ((1660 . 1664)) nil (25945 1599 661569 550000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1663) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) 1664) nil (25945 1599 661568 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 1660 1676 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1660 . 1676) (#("createUserObject" 0 16 (fontified nil)) . 1660) (1660 . 1676) (#("cre" 0 3 (fontified nil)) . 1660) (1660 . 1663) (#("createUserObject" 0 16 (fontified nil)) . -1660) (1660 . 1676) (#("cre" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1660) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) 1663) nil (25945 1599 661566 530000) 0 nil])
([nil nil ((1676 . 1680)) nil (25945 1599 661564 95000) 0 nil])
([nil nil ((apply yas--snippet-revive 1677 1685 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (1677 . 1685) (#("Password" 0 8 (fontified nil)) . 1677) (1677 . 1685) (#("Pas" 0 3 (fontified nil)) . 1677) (1677 . 1680) (#("Password" 0 8 (fontified nil)) . -1677) (1677 . 1685) (#("Pas" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1677) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) 1680) nil (25945 1599 661563 191000) 0 nil])
([nil nil ((1685 . 1693)) nil (25945 1599 661560 388000) 0 nil])
([nil nil ((apply yas--snippet-revive 1688 1705 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (1688 . 1705) (#("registerReq.Email" 0 17 (fontified nil)) . 1688) (1688 . 1705) (#("regis" 0 5 (fontified nil)) . 1688) (1688 . 1693) (#("registerReq.Email" 0 17 (fontified nil)) . -1688) (1688 . 1705) (#("regis" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -1688) (undo-tree-id1711 . -5) (undo-tree-id1712 . -5) (undo-tree-id1713 . -5) (undo-tree-id1714 . -5) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5) (undo-tree-id1717 . -5) (undo-tree-id1718 . -5) 1693) nil (25945 1599 661558 969000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1700) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1701) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1702) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1703) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1704) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) 1705) nil (25945 1599 661549 538000) 0 nil])
([nil nil ((1700 . 1704)) nil (25945 1599 661528 136000) 0 nil])
([nil nil ((apply yas--snippet-revive 1700 1708 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (1700 . 1708) (#("Password" 0 8 (fontified nil)) . 1700) (1700 . 1708) (#("Pass" 0 4 (fontified nil)) . 1700) (1700 . 1704) (#("Password" 0 8 (fontified nil)) . -1700) (1700 . 1708) (#("Pass" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1700) (undo-tree-id1667 . -4) (undo-tree-id1668 . -4) (undo-tree-id1669 . -1) (undo-tree-id1670 . -2) (undo-tree-id1671 . -3) (undo-tree-id1672 . -4) (undo-tree-id1673 . -4) (undo-tree-id1674 . -4) (undo-tree-id1675 . -4) (undo-tree-id1676 . -4) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) 1704) nil (25945 1599 661524 506000) 0 nil])
([nil nil ((1233 . 1235) (t 25945 1599 701459 278000)) nil (25945 1966 185098 826000) 0 nil])
([nil nil ((1235 . 1241)) nil (25945 1966 185097 681000) 0 nil])
([nil nil ((#("C" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1235) (undo-tree-id1750 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1236) (undo-tree-id1751 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1237) (undo-tree-id1752 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1238) (undo-tree-id1753 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1239) (undo-tree-id1754 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1240) (undo-tree-id1755 . -1) 1241) nil (25945 1966 185096 589000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1254) (1254 . 1255) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1254) (1254 . 1255) (1235 . 1255)) nil (25945 1966 185091 924000) 0 nil])
([nil nil ((1254 . 1257)) nil (25945 1966 185090 901000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1254) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1255) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("q" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1256) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 1257) nil (25945 1966 185089 652000) 0 nil])
([nil nil ((1254 . 1269)) nil (25945 1966 185085 31000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1268) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) 1269) nil (25945 1966 185084 183000) 0 nil])
([nil nil ((1268 . 1270)) nil (25945 1966 185081 965000) 0 nil])
([nil nil ((apply yas--snippet-revive 1266 1277 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (1266 . 1277) (#("RegisterReq" 0 11 (fontified nil)) . 1266) (1266 . 1277) (#("Regi" 0 4 (fontified nil)) . 1266) (1266 . 1270) (#("RegisterReq" 0 11 (fontified nil)) . -1266) (1266 . 1277) (#("Regi" 0 4 (face tree-sitter-hl-face:type fontified t)) . -1266) (undo-tree-id1740 . -4) (undo-tree-id1741 . -4) 1270) nil (25945 1966 185080 855000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1280) (1280 . 1281) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1280) (1280 . 1281) (1278 . 1281)) nil (25945 1966 185077 145000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1283) (1283 . 1284) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1283) (1283 . 1284) (1281 . 1284)) nil (25945 1966 185075 331000) 0 nil])
([nil nil ((1284 . 1285) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1284) (1284 . 1285) (1283 . 1285)) nil (25945 1966 185073 765000) 0 nil])
([nil nil ((#("struct {
			ID string `json:\"id\"`
			Email string `json:\"email\"`
			CreatedAt time.Time `json:\"created_at\"`
			UpdatedAt time.Time `json:\"updated_at\"`
		} " 0 6 (face tree-sitter-hl-face:keyword fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t) 9 12 (fontified t) 12 14 (face tree-sitter-hl-face:property fontified t) 14 15 (fontified t) 15 21 (face tree-sitter-hl-face:type fontified t) 21 22 (fontified t) 22 28 (face tree-sitter-hl-face:string fontified t) 28 32 (face tree-sitter-hl-face:string fontified t) 32 33 (face tree-sitter-hl-face:string fontified t) 33 34 (fontified t) 34 37 (fontified t) 37 42 (face tree-sitter-hl-face:property fontified t) 42 43 (fontified t) 43 49 (face tree-sitter-hl-face:type fontified t) 49 50 (fontified t) 50 56 (face tree-sitter-hl-face:string fontified t) 56 63 (face tree-sitter-hl-face:string fontified t) 63 64 (face tree-sitter-hl-face:string fontified t) 64 65 (fontified t) 65 68 (fontified t) 68 77 (face tree-sitter-hl-face:property fontified t) 77 78 (fontified t) 78 82 (fontified t) 82 83 (fontified t) 83 87 (face tree-sitter-hl-face:type fontified t) 87 88 (fontified t) 88 94 (face tree-sitter-hl-face:string fontified t) 94 106 (face tree-sitter-hl-face:string fontified t) 106 107 (face tree-sitter-hl-face:string fontified t) 107 108 (fontified t) 108 111 (fontified t) 111 120 (face tree-sitter-hl-face:property fontified t) 120 121 (fontified t) 121 125 (fontified t) 125 126 (fontified t) 126 130 (face tree-sitter-hl-face:type fontified t) 130 131 (fontified t) 131 137 (face tree-sitter-hl-face:string fontified t) 137 149 (face tree-sitter-hl-face:string fontified t) 149 150 (face tree-sitter-hl-face:string fontified t) 150 151 (fontified t) 151 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-3-face) fontified t) 154 155 (fontified t)) . 2166) (undo-tree-id1734 . -154) (undo-tree-id1735 . -154) (undo-tree-id1736 . -154) (undo-tree-id1737 . 1) (undo-tree-id1738 . -154) (undo-tree-id1739 . -154) 2320) nil (25945 1966 185072 336000) 0 nil])
([nil nil ((1233 . 1235)) nil (25945 1966 184780 298000) 0 nil])
([nil nil ((1235 . 1239)) nil (25945 1966 184779 549000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1238) (undo-tree-id1733 . -1) 1239) nil (25945 1966 184779 26000) 0 nil])
([nil nil ((1238 . 1239)) nil (25945 1966 184777 907000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1237) (undo-tree-id1731 . -1) (#(" " 0 1 (fontified t)) . -1238) (undo-tree-id1732 . -1) 1239) nil (25945 1966 184777 222000) 0 nil])
([nil nil ((1237 . 1242)) nil (25945 1966 184775 358000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1260) (1260 . 1261) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1260) (1260 . 1261) (1242 . 1261)) nil (25945 1966 184774 697000) 0 nil])
([nil nil ((1261 . 1262) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1261) (1261 . 1262) (1260 . 1262)) nil (25945 1966 184773 584000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1416 . 1417) (nil fontified nil 1262 . 1417) (1262 . 1417) 1261) nil (25945 1966 184772 783000) 0 nil])
([nil nil ((#("	struct {
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t)) . 1261) (undo-tree-id1728 . -1) (undo-tree-id1729 . -9) (undo-tree-id1730 . -4) 1265) nil (25945 1966 184771 435000) 0 nil])
([nil nil ((#("		} 
" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t)) . 1403) (undo-tree-id1725 . -4) (undo-tree-id1726 . 1) (undo-tree-id1727 . -3) 1406) nil (25945 1966 184768 428000) 0 nil])
([nil nil ((1222 . 1227) (1221 . 1223) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1221) (1216 . 1222) (1215 . 1217) (#("`" 0 1 (fontified nil)) . -1215) (1214 . 1216)) nil (25945 1966 184759 377000) 0 nil])
([nil nil ((1247 . 1249) (#("`" 0 1 (fontified nil)) . -1247) (1246 . 1248)) nil (25945 1966 184757 727000) 0 nil])
([nil nil ((1248 . 1261)) nil (25945 1966 184753 430000) 0 nil])
([nil nil ((2368 . 2379) (t 25945 1966 232271 900000)) nil (25945 2026 752767 263000) 0 nil])
([nil nil ((1208 . 1211) (#("		" 0 2 (fontified t)) . -1293) (1298 . 1305) (1305 . 1308) (#("		" 0 2 (fontified t)) . 1318) (1325 . 1329) (1333 . 1336) (#("		" 0 2 (fontified t)) . 1349) (#("	" 0 1 (fontified t)) . 1391) (#("	" 0 1 (fontified t)) . 1393) (#(") (" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1479) (#("	" 0 1 (fontified t)) . 1486) (2387 . 2394) 2378 (#("	" 0 1 (fontified t)) . 2406) (2416 . 2420) (#("	" 0 1 (fontified t)) . 2429) (#("	" 0 1 (fontified t)) . 2460) ("
" . 3334) ("
" . 4489) 2378) nil (25945 2026 752765 166000) 0 nil])
([nil nil ((#("		createUserObject := database.CreateUserParams{}
		createUserObject.Email = registerReq.Email
		createUserObject.Password = registerReq.Password
		timestamp := time.Now()
		createUserObject.CreatedAt = timestamp
		createUserObject.UpdatedAt = timestamp
		pass, perr := bcrypt.GenerateFromPassword([]byte(createUserObject.Password), 8)
		createUserObject.Password = fmt.Sprintf(\"%x\", pass)
		if perr != nil {
			utils.RespondWithError(w, 500, \"Internal Server Error\")
		}
		user, err := a.DB.CreateUser(a.CTX, createUserObject)
		registerUserRes := RegisterRes{
			ID:        user.ID.String(),
			Email:     user.Email,
			CreatedAt: user.CreatedAt,
			UpdatedAt: user.UpdatedAt,
		}
" 0 2 (fontified t) 2 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (fontified t) 19 21 (face tree-sitter-hl-face:operator fontified t) 21 22 (fontified t) 22 30 (fontified t) 30 31 (fontified t) 31 47 (face tree-sitter-hl-face:type fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t) 50 52 (fontified t) 52 68 (face tree-sitter-hl-face:variable fontified t) 68 69 (fontified t) 69 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 76 (face tree-sitter-hl-face:operator fontified t) 76 77 (fontified t) 77 88 (face tree-sitter-hl-face:variable fontified t) 88 89 (fontified t) 89 94 (face tree-sitter-hl-face:property fontified t) 94 95 (fontified t) 95 97 (fontified t) 97 113 (face tree-sitter-hl-face:variable fontified t) 113 114 (fontified t) 114 122 (face tree-sitter-hl-face:property fontified t) 122 123 (fontified t) 123 124 (face tree-sitter-hl-face:operator fontified t) 124 125 (fontified t) 125 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (fontified t) 137 145 (face tree-sitter-hl-face:property fontified t) 145 146 (fontified t) 146 148 (fontified t) 148 157 (face tree-sitter-hl-face:variable fontified t) 157 158 (fontified t) 158 160 (face tree-sitter-hl-face:operator fontified t) 160 161 (fontified t) 161 165 (face tree-sitter-hl-face:variable fontified t) 165 166 (fontified t) 166 169 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 169 170 (face (rainbow-delimiters-depth-3-face) fontified t) 170 171 (face (rainbow-delimiters-depth-3-face) fontified t) 171 174 (fontified t) 174 190 (face tree-sitter-hl-face:variable fontified t) 190 191 (fontified t) 191 200 (face tree-sitter-hl-face:property fontified t) 200 201 (fontified t) 201 202 (face tree-sitter-hl-face:operator fontified t) 202 203 (fontified t) 203 212 (face tree-sitter-hl-face:variable fontified t) 212 215 (fontified t) 215 231 (face tree-sitter-hl-face:variable fontified t) 231 232 (fontified t) 232 241 (face tree-sitter-hl-face:property fontified t) 241 242 (fontified t) 242 243 (face tree-sitter-hl-face:operator fontified t) 243 244 (fontified t) 244 253 (face tree-sitter-hl-face:variable fontified t) 253 256 (fontified t) 256 260 (face tree-sitter-hl-face:variable fontified t) 260 262 (fontified t) 262 266 (face tree-sitter-hl-face:variable fontified t) 266 267 (fontified t) 267 269 (face tree-sitter-hl-face:operator fontified t) 269 270 (fontified t) 270 276 (face tree-sitter-hl-face:variable fontified t) 276 277 (fontified t) 277 297 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 297 298 (face (rainbow-delimiters-depth-3-face) fontified t) 298 299 (face (rainbow-delimiters-depth-4-face) fontified t) 299 300 (face (rainbow-delimiters-depth-4-face) fontified t) 300 304 (face tree-sitter-hl-face:type fontified t) 304 305 (face (rainbow-delimiters-depth-4-face) fontified t) 305 321 (face tree-sitter-hl-face:variable fontified t) 321 322 (fontified t) 322 330 (face tree-sitter-hl-face:property fontified t) 330 331 (face (rainbow-delimiters-depth-4-face) fontified t) 331 333 (fontified t) 333 334 (face tree-sitter-hl-face:number fontified t) 334 335 (face (rainbow-delimiters-depth-3-face) fontified t) 335 338 (fontified t) 338 354 (face tree-sitter-hl-face:variable fontified t) 354 355 (fontified t) 355 363 (face tree-sitter-hl-face:property fontified t) 363 364 (fontified t) 364 365 (face tree-sitter-hl-face:operator fontified t) 365 366 (fontified t) 366 369 (face tree-sitter-hl-face:variable fontified t) 369 370 (fontified t) 370 377 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 377 378 (face (rainbow-delimiters-depth-3-face) fontified t) 378 382 (face tree-sitter-hl-face:string fontified t) 382 384 (fontified t) 384 388 (face tree-sitter-hl-face:variable fontified t) 388 389 (face (rainbow-delimiters-depth-3-face) fontified t) 389 392 (fontified t) 392 394 (face tree-sitter-hl-face:keyword fontified t) 394 395 (fontified t) 395 399 (face tree-sitter-hl-face:variable fontified t) 399 400 (fontified t) 400 402 (face tree-sitter-hl-face:operator fontified t) 402 403 (fontified t) 403 406 (face tree-sitter-hl-face:constant\.builtin fontified t) 406 407 (fontified t) 407 408 (face (rainbow-delimiters-depth-3-face) fontified t) 408 412 (fontified t) 412 417 (face tree-sitter-hl-face:variable fontified t) 417 418 (fontified t) 418 434 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 434 435 (face (rainbow-delimiters-depth-4-face) fontified t) 435 436 (face tree-sitter-hl-face:variable fontified t) 436 438 (fontified t) 438 441 (face tree-sitter-hl-face:number fontified t) 441 443 (fontified t) 443 466 (face tree-sitter-hl-face:string fontified t) 466 467 (face (rainbow-delimiters-depth-4-face) fontified t) 467 470 (fontified t) 470 471 (face (rainbow-delimiters-depth-3-face) fontified t) 471 472 (fontified t) 472 474 (fontified t) 474 478 (face tree-sitter-hl-face:variable fontified t) 478 480 (fontified t) 480 483 (face tree-sitter-hl-face:variable fontified t) 483 484 (fontified t) 484 486 (face tree-sitter-hl-face:operator fontified t) 486 487 (fontified t) 487 488 (face tree-sitter-hl-face:variable fontified t) 488 489 (fontified t) 489 491 (face tree-sitter-hl-face:property fontified t) 491 492 (fontified t) 492 502 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 502 503 (face (rainbow-delimiters-depth-3-face) fontified t) 503 504 (face tree-sitter-hl-face:variable fontified t) 504 505 (fontified t) 505 508 (face tree-sitter-hl-face:property fontified t) 508 510 (fontified t) 510 526 (face tree-sitter-hl-face:variable fontified t) 526 527 (face (rainbow-delimiters-depth-3-face) fontified t) 527 528 (fontified t) 528 530 (fontified t) 530 531 (face tree-sitter-hl-face:variable fontified t) 531 545 (face tree-sitter-hl-face:variable fontified t) 545 546 (fontified t) 546 548 (face tree-sitter-hl-face:operator fontified t) 548 549 (fontified t) 549 560 (face tree-sitter-hl-face:type fontified t) 560 561 (face (rainbow-delimiters-depth-3-face) fontified t) 561 562 (fontified t) 562 565 (fontified t) 565 567 (face tree-sitter-hl-face:variable fontified t) 567 568 (fontified t) 568 575 (fontified t) 575 576 (fontified t) 576 580 (face tree-sitter-hl-face:variable fontified t) 580 581 (fontified t) 581 583 (face tree-sitter-hl-face:property fontified t) 583 584 (fontified t) 584 590 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 590 591 (face (rainbow-delimiters-depth-4-face) fontified t) 591 592 (face (rainbow-delimiters-depth-4-face) fontified t) 592 594 (fontified t) 594 597 (fontified t) 597 602 (face tree-sitter-hl-face:variable fontified t) 602 603 (fontified t) 603 607 (fontified t) 607 608 (fontified t) 608 612 (face tree-sitter-hl-face:variable fontified t) 612 613 (fontified t) 613 618 (face tree-sitter-hl-face:property fontified t) 618 620 (fontified t) 620 623 (fontified t) 623 632 (face tree-sitter-hl-face:variable fontified t) 632 634 (fontified t) 634 638 (face tree-sitter-hl-face:variable fontified t) 638 639 (fontified t) 639 648 (face tree-sitter-hl-face:property fontified t) 648 650 (fontified t) 650 653 (fontified t) 653 662 (face tree-sitter-hl-face:variable fontified t) 662 664 (fontified t) 664 668 (face tree-sitter-hl-face:variable fontified t) 668 669 (fontified t) 669 678 (face tree-sitter-hl-face:property fontified t) 678 679 (fontified t) 679 680 (fontified t) 680 682 (fontified t) 682 683 (face (rainbow-delimiters-depth-3-face) fontified t) 683 684 (fontified t)) . 1827) (undo-tree-id1788 . -682) (undo-tree-id1789 . -683) (undo-tree-id1790 . -682) (undo-tree-id1791 . -2) (undo-tree-id1792 . 124) (undo-tree-id1793 . -549) (undo-tree-id1794 . -559) (undo-tree-id1795 . -2) (undo-tree-id1796 . -2) (undo-tree-id1797 . -682) 1829) nil (25945 2026 752762 330000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1496 . 1497) (#("
" 0 1 (fontified nil)) . -2178) (1494 . 2179) 1453) nil (25945 2026 752754 767000) 0 nil])
([nil nil ((#("	" 0 1 (rear-nonsticky t fontified t)) . -1496) (undo-tree-id1787 . -1) (#("	" 0 1 (fontified t)) . 1546) (#("	" 0 1 (fontified t)) . 1591) (#("	" 0 1 (fontified t)) . 1642) (#("	" 0 1 (fontified t)) . 1668) (#("	" 0 1 (fontified t)) . 1709) (#("	" 0 1 (fontified t)) . 1750) (#("	" 0 1 (fontified t)) . 1832) (#("	" 0 1 (fontified t)) . 1885) (#("	" 0 1 (fontified t)) . 1904) (#("	" 0 1 (fontified t)) . 1963) (#("	" 0 1 (fontified t)) . 1967) (#("	" 0 1 (fontified t)) . 2023) (#("	" 0 1 (fontified t)) . 2057) (#("	" 0 1 (fontified t)) . 2089) (#("	" 0 1 (fontified t)) . 2115) (#("	" 0 1 (fontified t)) . 2145) (#("	" 0 1 (fontified t)) . 2175) 1497) nil (25945 2026 752752 387000) 0 nil])
([nil nil ((1492 . 1500)) nil (25945 2026 752749 137000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1493) (undo-tree-id1780 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1494) (undo-tree-id1781 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1495) (undo-tree-id1782 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1496) (undo-tree-id1783 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1497) (undo-tree-id1784 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1498) (undo-tree-id1785 . -1) (#(" " 0 1 (fontified t)) . -1499) (undo-tree-id1786 . -1) 1500) nil (25945 2026 752747 642000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1494) (1494 . 1495) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1494) (1494 . 1495) (1493 . 1495)) nil (25945 2026 752742 116000) 0 nil])
([nil nil ((1494 . 1496)) nil (25945 2026 752741 318000) 0 nil])
([nil nil ((1496 . 1502)) nil (25945 2026 752740 861000) 0 nil])
([nil nil ((apply yas--snippet-revive 1494 1505 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (1494 . 1505) (#("RegisterRes" 0 11 (fontified nil)) . 1494) (1494 . 1505) (#("Register" 0 8 (fontified nil)) . 1494) (1494 . 1502) (#("RegisterRes" 0 11 (fontified nil)) . -1494) (1494 . 1505) (#("Register" 0 8 (face tree-sitter-hl-face:type fontified t)) . -1494) (undo-tree-id1778 . -8) (undo-tree-id1779 . -8) 1502) nil (25945 2026 752739 681000) 0 nil])
([nil nil ((2174 . 2176)) nil (25945 2026 752737 130000) 0 nil])
([nil nil ((2176 . 2185)) nil (25945 2026 752736 602000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2184) (undo-tree-id1777 . -1) 2185) nil (25945 2026 752736 74000) 0 nil])
([nil nil ((2184 . 2186)) nil (25945 2026 752734 866000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2182) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2183) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2184) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2185) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) 2186) nil (25945 2026 752733 527000) 0 nil])
([nil nil ((2182 . 2188)) nil (25945 2026 752725 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 2183 2198 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (2183 . 2198) (#("registerUserRes" 0 15 (fontified nil)) . 2183) (2183 . 2198) (#("regis" 0 5 (fontified nil)) . 2183) (2183 . 2188) (#("registerUserRes" 0 15 (fontified nil)) . -2183) (2183 . 2198) (#("regis" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -2183) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (undo-tree-id1758 . -3) (undo-tree-id1759 . -4) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) 2188) nil (25945 2026 752722 306000) 0 nil])
([nil nil ((1468 . 1475) (t 25945 2026 793694 534000)) nil (25945 2041 650854 414000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1470) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1471) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1472) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1473) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1474) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) 1475) nil (25945 2041 650852 994000) 0 nil])
([nil nil ((1470 . 1476)) nil (25945 2041 650843 946000) 0 nil])
([nil nil ((apply yas--snippet-revive 1476 1484 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (1476 . 1484) (#("DBConfig" 0 8 (fontified nil)) . 1476) (1476 . 1484) (#("DBConfig" 0 8 (fontified nil)) . -1476) (1476 . 1484)) nil (25945 2041 650842 777000) 0 nil])
([nil nil ((1484 . 1485)) nil (25945 2041 650841 529000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1484) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) 1485) nil (25945 2041 650840 393000) 0 nil])
([nil nil ((1484 . 1486)) nil (25945 2041 650829 23000) 0 nil])
([nil nil ((1523 . 1530) (t 25945 2041 693224 155000)) nil (25945 2110 819625 212000) 0 nil])
([nil nil ((2223 . 2227)) nil (25945 2110 819624 595000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2223) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2224) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2225) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2226) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 2227) nil (25945 2110 819622 908000) 0 nil])
([nil nil ((2049 . 2051)) nil (25945 2110 819615 264000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2063) (2063 . 2064) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2063) (2063 . 2064) (2051 . 2064)) nil (25945 2110 819614 439000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2061) (undo-tree-id1845 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2062) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . 1) (undo-tree-id1849 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2063) (undo-tree-id1850 . -1) (undo-tree-id1851 . 1) (undo-tree-id1852 . -1) 2064) nil (25945 2110 819612 686000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2051) (undo-tree-id1835 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2052) (undo-tree-id1836 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2053) (undo-tree-id1837 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2054) (undo-tree-id1838 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2055) (undo-tree-id1839 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2056) (undo-tree-id1840 . -1) (#(" " 0 1 (fontified t)) . -2057) (undo-tree-id1841 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2058) (undo-tree-id1842 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id1843 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2060) (undo-tree-id1844 . -1) 2061) nil (25945 2110 819604 453000) 0 nil])
([nil nil ((2066 . 2067) (2051 . 2067)) nil (25945 2110 819227 388000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2066) (undo-tree-id1834 . -1) 2067) nil (25945 2110 819226 329000) 0 nil])
([nil nil ((2067 . 2069) (2068 . 2069) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2067) (2067 . 2069) (2066 . 2068)) nil (25945 2110 819224 653000) 0 nil])
([nil nil ((2069 . 2081)) nil (25945 2110 819223 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 2076 2089 #s(yas--snippet nil nil #s(yas--exit 2088 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2088 nil) 43 nil nil nil nil)) (2076 . 2089) (#("RegisterRes{$0\\}" 0 16 (fontified nil)) . 2076) (2076 . 2092) (#("Regis" 0 5 (fontified nil)) . 2076) (2076 . 2081) (#("RegisterRes{}" 0 13 (fontified nil)) . -2076) (2076 . 2089) (#("Regis" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -2076) (undo-tree-id1821 . -5) (undo-tree-id1822 . -5) (undo-tree-id1823 . -1) (undo-tree-id1824 . -2) (undo-tree-id1825 . -3) (undo-tree-id1826 . -4) (undo-tree-id1827 . -5) (undo-tree-id1828 . -5) (undo-tree-id1829 . -5) (undo-tree-id1830 . -5) (undo-tree-id1831 . -5) (undo-tree-id1832 . -5) (undo-tree-id1833 . -5) 2081) nil (25945 2110 819221 816000) 0 nil])
([nil nil ((2088 . 2090)) nil (25945 2110 819211 105000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2088) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#(" " 0 1 (fontified t)) . -2089) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) 2090) nil (25945 2110 819209 444000) 0 nil])
([nil nil ((2089 . 2094)) nil (25945 2110 819192 256000) 0 nil])
([nil nil ((2271 . 2276) (t 25945 2110 862370 323000)) nil (25945 2117 285343 120000) 0 nil])
([nil nil ((#("		utils.RespondWithError(w, 500, \"Internal Server Error\")
" 0 2 (fontified t) 2 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 24 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (face tree-sitter-hl-face:variable fontified t) 26 28 (fontified t) 28 31 (face tree-sitter-hl-face:number fontified t) 31 33 (fontified t) 33 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 58 (fontified t)) . 1934) (undo-tree-id1929 . -57) (undo-tree-id1930 . -26) 1960 (t 25945 2117 325546 84000)) nil (25945 2142 871831 42000) 0 nil])
([nil nil ((1933 . 1936)) nil (25945 2142 871829 275000) 0 nil])
([nil nil ((1936 . 1942)) nil (25945 2142 871828 815000) 0 nil])
([nil nil ((apply yas--snippet-revive 1936 1947 #s(yas--snippet nil nil nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil nil nil)) (1936 . 1947) (#("registerReq" 0 11 (fontified nil)) . 1936) (1936 . 1947) (#("regist" 0 6 (fontified nil)) . 1936) (1936 . 1942) (#("registerReq" 0 11 (fontified nil)) . -1936) (1936 . 1947) (#("regist" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1936) (undo-tree-id1927 . -6) (undo-tree-id1928 . -6) 1942) nil (25945 2142 871827 779000) 0 nil])
([nil nil ((#("q" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1946) (undo-tree-id1926 . -1) 1947) nil (25945 2142 871824 796000) 0 nil])
([nil nil ((1946 . 1947)) nil (25945 2142 871823 612000) 0 nil])
([nil nil ((1936 . 1943)) nil (25945 2142 871823 60000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1953) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) 1954) nil (25945 2142 871822 456000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1943) (undo-tree-id1903 . -1) (undo-tree-id1904 . 1) (undo-tree-id1905 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1944) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1945) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1946) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1947) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1948) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1949) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1950) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1951) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1952) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) 1953) nil (25945 2142 871819 67000) 0 nil])
([nil nil ((1943 . 1947)) nil (25945 2142 871804 162000) 0 nil])
([nil nil ((apply yas--snippet-revive 1943 1956 #s(yas--snippet nil nil #s(yas--exit 1955 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1955 nil) 45 nil nil nil nil)) (1943 . 1956) (#("RegisterRes{$0\\}" 0 16 (fontified nil)) . 1943) (1943 . 1959) (#("Regi" 0 4 (fontified nil)) . 1943) (1943 . 1947) (#("RegisterRes{}" 0 13 (fontified nil)) . -1943) (1943 . 1956) (#("Regi" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1943) (undo-tree-id1883 . -4) (undo-tree-id1884 . -4) (undo-tree-id1885 . -1) (undo-tree-id1886 . -2) (undo-tree-id1887 . -2) (undo-tree-id1888 . -2) (undo-tree-id1889 . -2) (undo-tree-id1890 . -2) (undo-tree-id1891 . -2) (undo-tree-id1892 . -2) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) (undo-tree-id1895 . -3) (undo-tree-id1896 . -4) (undo-tree-id1897 . -4) (undo-tree-id1898 . -4) (undo-tree-id1899 . -4) (undo-tree-id1900 . -4) (undo-tree-id1901 . -4) (undo-tree-id1902 . -4) 1947) nil (25945 2142 871802 697000) 0 nil])
([nil nil ((1955 . 1957)) nil (25945 2142 871789 455000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1955) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (#(" " 0 1 (fontified t)) . -1956) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) 1957) nil (25945 2142 871787 834000) 0 nil])
([nil nil ((1956 . 1961)) nil (25945 2142 871764 948000) 0 nil])
([nil nil ((2578 . 2581) (t 25945 2142 915203 125000)) nil (25945 2275 20864 147000) 0 nil])
([nil nil ((2581 . 2585)) nil (25945 2275 20863 427000) 0 nil])
([nil nil ((2585 . 2593)) nil (25945 2275 20862 967000) 0 nil])
([nil nil ((2593 . 2600)) nil (25945 2275 20862 521000) 0 nil])
([nil nil ((2596 . 2598)) nil (25945 2275 20862 10000) 0 nil])
([nil nil ((2598 . 2601)) nil (25945 2275 20861 475000) 0 nil])
([nil nil ((2605 . 2611)) nil (25945 2275 20860 797000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2619 2620 nil nil nil t #s(yas--field 2 2622 2633 nil nil nil t nil)) #s(yas--field 2 2622 2633 nil nil nil t nil)) nil 46 nil #s(yas--field 2 2622 2633 nil nil nil t nil) nil nil)) (2605 . 2661) (#("CreateNewUser(${1:a utils.DBConfig}, ${2:registerReq RegisterReq})" 0 66 (fontified nil)) . 2605) (2605 . 2671) (#("Create" 0 6 (fontified nil)) . 2605) (2605 . 2611) (#("CreateNewUser" 0 13 (fontified nil)) . -2605) (2605 . 2618) (#("Create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2605) (undo-tree-id1950 . -6) (undo-tree-id1951 . -6) 2611) nil (25945 2275 20859 320000) 0 nil])
([nil nil ((#("a utils.DBConfig" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:property fontified nil)) . 2620) (undo-tree-id1949 . -16) (2619 . 2620)) nil (25945 2275 20856 593000) 0 nil])
([nil nil ((2623 . 2625) (#("registerReq RegisterReq" 0 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 23 (face tree-sitter-hl-face:variable fontified nil)) . 2623) (undo-tree-id1946 . -23) (undo-tree-id1947 . -12) (undo-tree-id1948 . -13) (2622 . 2623)) nil (25945 2275 20854 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 2622 2633 #s(yas--snippet nil nil nil 47 nil nil #s(yas--field 2 2622 2633 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil #s(yas--field 2 2622 2633 nil nil nil t nil) nil)) (2622 . 2633) (#("registerReq" 0 11 (fontified nil)) . 2622) (undo-tree-id1931 . -11) (2622 . 2633) (#("reg" 0 3 (fontified nil)) . 2622) (undo-tree-id1932 . -3) (2622 . 2625) (#("registerReq" 0 11 (fontified nil)) . -2622) (undo-tree-id1933 . -11) (2622 . 2633) (#("reg" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2622) (undo-tree-id1934 . -3) (undo-tree-id1935 . -3) (undo-tree-id1936 . -3) (undo-tree-id1937 . -1) (undo-tree-id1938 . -2) (undo-tree-id1939 . -3) (undo-tree-id1940 . -3) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) (undo-tree-id1943 . -3) (undo-tree-id1944 . -3) (undo-tree-id1945 . -3) 2625) nil (25945 2275 20850 642000) 0 nil])
([nil nil ((apply yas--snippet-revive 2605 2634 #s(yas--snippet nil (#s(yas--field 1 2619 2620 nil nil nil t #s(yas--field 2 2622 2633 nil nil nil t nil)) #s(yas--field 2 2622 2633 nil nil nil t nil)) nil 46 nil #s(yas--field 2 2622 2633 nil nil nil t nil) nil nil))) nil (25945 2275 20830 609000) 0 nil])
([nil nil ((1470 . 1471) (t 25945 2275 60706 272000)) nil (25945 2284 351954 489000) 0 nil])
([nil nil ((1499 . 1500) (t 25945 2284 394832 520000)) nil (25945 2294 369581 365000) 0 nil])
([nil nil ((2624 . 2625)) nil (25945 2294 369577 553000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2591) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2592) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2593) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2594) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2595) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2596) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2597) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) 2598 (t 25945 2294 410961 281000)) nil (25945 2303 325000 270000) 0 nil])
([nil nil ((2591 . 2598)) nil (25945 2303 324969 761000) 0 nil])
([nil nil ((#("type RegisterReq struct {
	Email    string `json:\"email\"`
	Password string `json:password`
}

type RegisterRes struct {
	ID        string    `json:\"id\"`
	Email     string    `json:\"email\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
}

func CreateNewUser(a *utils.DBConfig, registerReq *RegisterReq) (RegisterRes, error) {
	createUserObject := database.CreateUserParams{}
	createUserObject.Email = registerReq.Email
	createUserObject.Password = registerReq.Password
	timestamp := time.Now()
	createUserObject.CreatedAt = timestamp
	createUserObject.UpdatedAt = timestamp
	pass, perr := bcrypt.GenerateFromPassword([]byte(createUserObject.Password), 8)
	createUserObject.Password = fmt.Sprintf(\"%x\", pass)
	if perr != nil {
		return RegisterRes{}, nil
	}
	user, err := a.DB.CreateUser(a.CTX, createUserObject)
	if err != nil {
		return RegisterRes{}, err
	}
	registerUserRes := RegisterRes{
		ID:        user.ID.String(),
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}
	return registerUserRes, nil

}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 16 (face tree-sitter-hl-face:type fontified t) 16 17 (fontified t) 17 23 (face tree-sitter-hl-face:keyword fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 32 (face tree-sitter-hl-face:property fontified t) 32 33 (fontified t) 33 36 (fontified t) 36 42 (face tree-sitter-hl-face:type fontified t) 42 43 (fontified t) 43 49 (face tree-sitter-hl-face:string fontified t) 49 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face tree-sitter-hl-face:string fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 67 (face tree-sitter-hl-face:property fontified t) 67 68 (fontified t) 68 74 (face tree-sitter-hl-face:type fontified t) 74 75 (fontified t) 75 90 (face tree-sitter-hl-face:string fontified t) 90 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 98 (face tree-sitter-hl-face:keyword fontified t) 98 99 (fontified t) 99 110 (face tree-sitter-hl-face:type fontified t) 110 111 (fontified t) 111 117 (face tree-sitter-hl-face:keyword fontified t) 117 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-1-face) fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 123 (face tree-sitter-hl-face:property fontified t) 123 124 (fontified t) 124 131 (fontified t) 131 137 (face tree-sitter-hl-face:type fontified t) 137 138 (fontified t) 138 141 (fontified t) 141 152 (face tree-sitter-hl-face:string fontified t) 152 153 (fontified t) 153 154 (fontified t) 154 159 (face tree-sitter-hl-face:property fontified t) 159 163 (fontified t) 163 164 (fontified t) 164 170 (face tree-sitter-hl-face:type fontified t) 170 171 (fontified t) 171 174 (fontified t) 174 188 (face tree-sitter-hl-face:string fontified t) 188 190 (fontified t) 190 199 (face tree-sitter-hl-face:property fontified t) 199 205 (fontified t) 205 209 (face tree-sitter-hl-face:type fontified t) 209 210 (fontified t) 210 229 (face tree-sitter-hl-face:string fontified t) 229 231 (fontified t) 231 240 (face tree-sitter-hl-face:property fontified t) 240 246 (fontified t) 246 250 (face tree-sitter-hl-face:type fontified t) 250 251 (fontified t) 251 270 (face tree-sitter-hl-face:string fontified t) 270 271 (fontified t) 271 272 (face (rainbow-delimiters-depth-1-face) fontified t) 272 273 (fontified t) 273 274 (fontified t) 274 278 (face tree-sitter-hl-face:keyword fontified t) 278 279 (fontified t) 279 292 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 292 293 (face (rainbow-delimiters-depth-1-face) fontified t) 293 294 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 294 295 (fontified t) 295 296 (face tree-sitter-hl-face:operator fontified t) 296 302 (fontified t) 302 310 (face tree-sitter-hl-face:type fontified t) 310 312 (fontified t) 312 323 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 323 324 (fontified t) 324 325 (face tree-sitter-hl-face:operator fontified t) 325 336 (face tree-sitter-hl-face:type fontified t) 336 337 (face (rainbow-delimiters-depth-1-face) fontified t) 337 338 (fontified t) 338 339 (face (rainbow-delimiters-depth-1-face) fontified t) 339 350 (face tree-sitter-hl-face:type fontified t) 350 352 (fontified t) 352 357 (face tree-sitter-hl-face:type fontified t) 357 358 (face (rainbow-delimiters-depth-1-face) fontified t) 358 359 (fontified t) 359 360 (face (rainbow-delimiters-depth-1-face) fontified t) 360 361 (fontified t) 361 362 (fontified t) 362 378 (face tree-sitter-hl-face:variable fontified t) 378 379 (fontified t) 379 381 (face tree-sitter-hl-face:operator fontified t) 381 382 (fontified t) 382 390 (fontified t) 390 391 (fontified t) 391 407 (face tree-sitter-hl-face:type fontified t) 407 408 (face (rainbow-delimiters-depth-2-face) fontified t) 408 409 (face (rainbow-delimiters-depth-2-face) fontified t) 409 410 (fontified t) 410 411 (fontified t) 411 427 (face tree-sitter-hl-face:variable fontified t) 427 428 (fontified t) 428 433 (face tree-sitter-hl-face:property fontified t) 433 434 (fontified t) 434 435 (face tree-sitter-hl-face:operator fontified t) 435 436 (fontified t) 436 447 (face tree-sitter-hl-face:variable fontified t) 447 448 (fontified t) 448 453 (face tree-sitter-hl-face:property fontified t) 453 454 (fontified t) 454 455 (fontified t) 455 471 (face tree-sitter-hl-face:variable fontified t) 471 472 (fontified t) 472 480 (face tree-sitter-hl-face:property fontified t) 480 481 (fontified t) 481 482 (face tree-sitter-hl-face:operator fontified t) 482 483 (fontified t) 483 494 (face tree-sitter-hl-face:variable fontified t) 494 495 (fontified t) 495 503 (face tree-sitter-hl-face:property fontified t) 503 504 (fontified t) 504 505 (fontified t) 505 514 (face tree-sitter-hl-face:variable fontified t) 514 515 (fontified t) 515 517 (face tree-sitter-hl-face:operator fontified t) 517 518 (fontified t) 518 522 (face tree-sitter-hl-face:variable fontified t) 522 523 (fontified t) 523 526 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 526 527 (face (rainbow-delimiters-depth-2-face) fontified t) 527 528 (face (rainbow-delimiters-depth-2-face) fontified t) 528 530 (fontified t) 530 546 (face tree-sitter-hl-face:variable fontified t) 546 547 (fontified t) 547 556 (face tree-sitter-hl-face:property fontified t) 556 557 (fontified t) 557 558 (face tree-sitter-hl-face:operator fontified t) 558 559 (fontified t) 559 568 (face tree-sitter-hl-face:variable fontified t) 568 570 (fontified t) 570 586 (face tree-sitter-hl-face:variable fontified t) 586 587 (fontified t) 587 596 (face tree-sitter-hl-face:property fontified t) 596 597 (fontified t) 597 598 (face tree-sitter-hl-face:operator fontified t) 598 599 (fontified t) 599 608 (face tree-sitter-hl-face:variable fontified t) 608 610 (fontified t) 610 614 (face tree-sitter-hl-face:variable fontified t) 614 616 (fontified t) 616 620 (face tree-sitter-hl-face:variable fontified t) 620 621 (fontified t) 621 623 (face tree-sitter-hl-face:operator fontified t) 623 624 (fontified t) 624 630 (face tree-sitter-hl-face:variable fontified t) 630 631 (fontified t) 631 651 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 651 652 (face (rainbow-delimiters-depth-2-face) fontified t) 652 653 (face (rainbow-delimiters-depth-3-face) fontified t) 653 654 (face (rainbow-delimiters-depth-3-face) fontified t) 654 658 (face tree-sitter-hl-face:type fontified t) 658 659 (face (rainbow-delimiters-depth-3-face) fontified t) 659 675 (face tree-sitter-hl-face:variable fontified t) 675 676 (fontified t) 676 684 (face tree-sitter-hl-face:property fontified t) 684 685 (face (rainbow-delimiters-depth-3-face) fontified t) 685 687 (fontified t) 687 688 (face tree-sitter-hl-face:number fontified t) 688 689 (face (rainbow-delimiters-depth-2-face) fontified t) 689 691 (fontified t) 691 707 (face tree-sitter-hl-face:variable fontified t) 707 708 (fontified t) 708 716 (face tree-sitter-hl-face:property fontified t) 716 717 (fontified t) 717 718 (face tree-sitter-hl-face:operator fontified t) 718 719 (fontified t) 719 722 (face tree-sitter-hl-face:variable fontified t) 722 723 (fontified t) 723 730 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 730 731 (face (rainbow-delimiters-depth-2-face) fontified t) 731 735 (face tree-sitter-hl-face:string fontified t) 735 737 (fontified t) 737 741 (face tree-sitter-hl-face:variable fontified t) 741 742 (face (rainbow-delimiters-depth-2-face) fontified t) 742 743 (fontified t) 743 744 (fontified t) 744 746 (face tree-sitter-hl-face:keyword fontified t) 746 747 (fontified t) 747 751 (face tree-sitter-hl-face:variable fontified t) 751 752 (fontified t) 752 754 (face tree-sitter-hl-face:operator fontified t) 754 755 (fontified t) 755 758 (face tree-sitter-hl-face:constant\.builtin fontified t) 758 759 (fontified t) 759 760 (face (rainbow-delimiters-depth-2-face) fontified t) 760 761 (fontified t) 761 763 (fontified t) 763 769 (face tree-sitter-hl-face:keyword fontified t) 769 770 (fontified t) 770 780 (face tree-sitter-hl-face:type fontified t) 780 781 (face tree-sitter-hl-face:type fontified t) 781 782 (face (rainbow-delimiters-depth-3-face) fontified t) 782 783 (face (rainbow-delimiters-depth-3-face) fontified t) 783 785 (fontified t) 785 788 (face tree-sitter-hl-face:constant\.builtin fontified t) 788 789 (fontified t) 789 790 (fontified t) 790 791 (face (rainbow-delimiters-depth-2-face) fontified t) 791 792 (fontified t) 792 793 (fontified t) 793 797 (face tree-sitter-hl-face:variable fontified t) 797 799 (fontified t) 799 802 (face tree-sitter-hl-face:variable fontified t) 802 803 (fontified t) 803 805 (face tree-sitter-hl-face:operator fontified t) 805 806 (fontified t) 806 807 (face tree-sitter-hl-face:variable fontified t) 807 808 (fontified t) 808 810 (face tree-sitter-hl-face:property fontified t) 810 811 (fontified t) 811 821 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 821 822 (face (rainbow-delimiters-depth-2-face) fontified t) 822 823 (face tree-sitter-hl-face:variable fontified t) 823 824 (fontified t) 824 827 (face tree-sitter-hl-face:property fontified t) 827 829 (fontified t) 829 845 (face tree-sitter-hl-face:variable fontified t) 845 846 (face (rainbow-delimiters-depth-2-face) fontified t) 846 847 (fontified t) 847 848 (fontified t) 848 850 (face tree-sitter-hl-face:keyword fontified t) 850 851 (fontified t) 851 854 (face tree-sitter-hl-face:variable fontified t) 854 855 (fontified t) 855 857 (face tree-sitter-hl-face:operator fontified t) 857 858 (fontified t) 858 861 (face tree-sitter-hl-face:constant\.builtin fontified t) 861 862 (fontified t) 862 863 (face (rainbow-delimiters-depth-2-face) fontified t) 863 864 (fontified t) 864 866 (fontified t) 866 872 (face tree-sitter-hl-face:keyword fontified t) 872 873 (fontified t) 873 883 (face tree-sitter-hl-face:type fontified t) 883 884 (face tree-sitter-hl-face:type fontified t) 884 885 (face (rainbow-delimiters-depth-3-face) fontified t) 885 886 (face (rainbow-delimiters-depth-3-face) fontified t) 886 888 (fontified t) 888 891 (face tree-sitter-hl-face:variable fontified t) 891 892 (fontified t) 892 893 (fontified t) 893 894 (face (rainbow-delimiters-depth-2-face) fontified t) 894 895 (fontified t) 895 896 (fontified t) 896 897 (face tree-sitter-hl-face:variable fontified t) 897 911 (face tree-sitter-hl-face:variable fontified t) 911 912 (fontified t) 912 914 (face tree-sitter-hl-face:operator fontified t) 914 915 (fontified t) 915 926 (face tree-sitter-hl-face:type fontified t) 926 927 (face (rainbow-delimiters-depth-2-face) fontified t) 927 928 (fontified t) 928 930 (fontified t) 930 932 (face tree-sitter-hl-face:variable fontified t) 932 933 (fontified t) 933 940 (fontified t) 940 941 (fontified t) 941 945 (face tree-sitter-hl-face:variable fontified t) 945 946 (fontified t) 946 948 (face tree-sitter-hl-face:property fontified t) 948 949 (fontified t) 949 955 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 955 956 (face (rainbow-delimiters-depth-3-face) fontified t) 956 957 (face (rainbow-delimiters-depth-3-face) fontified t) 957 959 (fontified t) 959 961 (fontified t) 961 966 (face tree-sitter-hl-face:variable fontified t) 966 967 (fontified t) 967 971 (fontified t) 971 972 (fontified t) 972 976 (face tree-sitter-hl-face:variable fontified t) 976 977 (fontified t) 977 982 (face tree-sitter-hl-face:property fontified t) 982 984 (fontified t) 984 986 (fontified t) 986 995 (face tree-sitter-hl-face:variable fontified t) 995 997 (fontified t) 997 1001 (face tree-sitter-hl-face:variable fontified t) 1001 1002 (fontified t) 1002 1011 (face tree-sitter-hl-face:property fontified t) 1011 1013 (fontified t) 1013 1015 (fontified t) 1015 1024 (face tree-sitter-hl-face:variable fontified t) 1024 1026 (fontified t) 1026 1030 (face tree-sitter-hl-face:variable fontified t) 1030 1031 (fontified t) 1031 1040 (face tree-sitter-hl-face:property fontified t) 1040 1041 (fontified t) 1041 1042 (fontified t) 1042 1043 (fontified t) 1043 1044 (face (rainbow-delimiters-depth-2-face) fontified t) 1044 1045 (fontified t) 1045 1046 (fontified t) 1046 1052 (face tree-sitter-hl-face:keyword fontified t) 1052 1053 (fontified t) 1053 1068 (face tree-sitter-hl-face:variable fontified t) 1068 1070 (fontified t) 1070 1073 (face tree-sitter-hl-face:constant\.builtin fontified t) 1073 1074 (fontified t) 1074 1075 (fontified t) 1075 1076 (face (rainbow-delimiters-depth-1-face) fontified t) 1076 1077 (fontified t)) . 1175) (undo-tree-id1986 . -1075) (undo-tree-id1987 . -1076) (undo-tree-id1988 . -1075) (undo-tree-id1989 . -94) (undo-tree-id1990 . -27) (undo-tree-id1991 . -59) (undo-tree-id1992 . -121) (undo-tree-id1993 . -154) (undo-tree-id1994 . -190) (undo-tree-id1995 . -231) (undo-tree-id1996 . -279) (undo-tree-id1997 . -1075) (t 25945 2303 370070 675000)) nil (25945 2771 402235 869000) 0 nil])
([nil nil ((1372 . 1377) (t 25945 2771 444135 527000)) nil (25945 2826 84011 571000) 0 nil])
([nil nil ((1535 . 1540)) nil (25945 2826 84007 942000) 0 nil])
([nil nil ((#("	\"github.com/google/uuid\"
" 0 1 (fontified t) 1 25 (face tree-sitter-hl-face:string fontified t) 25 26 (fontified t)) . 334) (undo-tree-id2020 . -25) (undo-tree-id2021 . -25) (undo-tree-id2022 . -25) (undo-tree-id2023 . -1) (undo-tree-id2024 . -25) (undo-tree-id2025 . -24) (undo-tree-id2026 . 24) (undo-tree-id2027 . -24) (undo-tree-id2028 . -1) (undo-tree-id2029 . -25) (undo-tree-id2030 . -24) (undo-tree-id2031 . -24) (undo-tree-id2032 . -24) (undo-tree-id2033 . -24) (undo-tree-id2034 . -24) (undo-tree-id2035 . -26) 358 (t 25945 2826 125629 146000)) nil (25945 4398 810298 298000) 0 nil])
([nil nil ((#("	\"golang.org/x/crypto/bcrypt\"
" 0 1 (fontified t) 1 29 (face tree-sitter-hl-face:string fontified t) 29 30 (fontified t)) . 362) (undo-tree-id2004 . -29) (undo-tree-id2005 . -24) (undo-tree-id2006 . -24) (undo-tree-id2007 . -24) (undo-tree-id2008 . 28) (undo-tree-id2009 . -28) (undo-tree-id2010 . -24) (undo-tree-id2011 . -1) (undo-tree-id2012 . -29) (undo-tree-id2013 . -24) (undo-tree-id2014 . -24) (undo-tree-id2015 . -24) (undo-tree-id2016 . -24) (undo-tree-id2017 . -24) (undo-tree-id2018 . -24) (undo-tree-id2019 . -30) 386) nil (25945 4398 810285 762000) 0 nil])
([nil nil ((#("	\"time\"
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:string fontified t) 7 8 (fontified t)) . 200) (undo-tree-id1998 . -7) (undo-tree-id1999 . 6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -1) (undo-tree-id2002 . -7) (undo-tree-id2003 . -8)) nil (25945 4398 810271 11000) 0 nil])
([nil nil ((4959 . 4960) (#("	" 0 1 (fontified nil)) . 4958) (undo-tree-id500 . -1) (4957 . 4960) (t 25945 4398 854038 870000)) nil (25946 3387 185819 909000) 0 nil])
([nil nil ((4960 . 4961)) nil (25946 3387 185818 163000) 0 nil])
([nil nil ((4961 . 4965)) nil (25946 3387 185817 239000) 0 nil])
([nil nil ((apply yas--snippet-revive 4960 4968 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (4960 . 4968) (#("v1Router" 0 8 (fontified nil)) . 4960) (4960 . 4968) (#("v1Rou" 0 5 (fontified nil)) . 4960) (4960 . 4965) (#("v1Router" 0 8 (fontified nil)) . -4960) (4960 . 4968) (#("v1Rou" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -4960) (undo-tree-id498 . -5) (undo-tree-id499 . -5) 4965) nil (25946 3387 185815 537000) 0 nil])
([nil nil ((4968 . 4972)) nil (25946 3387 185812 283000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4969) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4970) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4971) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 4972) nil (25946 3387 185811 99000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4973) (4973 . 4974) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4973) (4973 . 4974) (4969 . 4974)) nil (25946 3387 185805 608000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4957) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("
" 0 1 (fontified t)) . -4958) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("	" 0 1 (fontified t)) . -4959) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4960) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4961) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4962) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4963) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4964) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4965) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4966) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4967) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("." 0 1 (fontified t)) . -4968) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4969) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4970) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4971) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -4972) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -4973) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . 1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 4974) nil (25946 3387 185789 484000) 0 nil])
([nil nil ((4058 . 4060) (t 25946 3387 230591 744000)) nil (25946 4104 802264 232000) 0 nil])
([nil nil ((4060 . 4068)) nil (25946 4104 802263 656000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4067) (undo-tree-id799 . -1) 4068) nil (25946 4104 802262 777000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4065) (undo-tree-id797 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4066) (undo-tree-id798 . -1) 4067) nil (25946 4104 802260 743000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4073) (4073 . 4074) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4073) (4073 . 4074) (4065 . 4074)) nil (25946 4104 802257 473000) 0 nil])
([nil nil ((4073 . 4078)) nil (25946 4104 802256 318000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4077) (undo-tree-id796 . -1) 4078) nil (25946 4104 802255 658000) 0 nil])
([nil nil ((4077 . 4082)) nil (25946 4104 802253 713000) 0 nil])
([nil nil ((apply yas--snippet-revive 4082 4090 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (4082 . 4090) (#("DBConfig" 0 8 (fontified nil)) . 4082) (4082 . 4090) (#("DBConfig" 0 8 (fontified nil)) . -4082) (4082 . 4090)) nil (25946 4104 802252 602000) 0 nil])
([nil nil ((4091 . 4096)) nil (25946 4104 802251 346000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4097) (4097 . 4098) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4097) (4097 . 4098) (4096 . 4098)) nil (25946 4104 802250 274000) 0 nil])
([nil nil ((4097 . 4107)) nil (25946 4104 802249 134000) 0 nil])
([nil nil ((apply yas--snippet-revive 4104 4118 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (4104 . 4118) (#("ResponseWriter" 0 14 (fontified nil)) . 4104) (4104 . 4118) (#("Res" 0 3 (fontified nil)) . 4104) (4104 . 4107) (#("ResponseWriter" 0 14 (fontified nil)) . -4104) (4104 . 4118) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4104) (undo-tree-id794 . -3) (undo-tree-id795 . -3) 4107) nil (25946 4104 802247 899000) 0 nil])
([nil nil ((4118 . 4128)) nil (25946 4104 802244 859000) 0 nil])
([nil nil ((4128 . 4131)) nil (25946 4104 802244 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 4128 4135 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (4128 . 4135) (#("Request" 0 7 (fontified nil)) . 4128) (4128 . 4135) (#("Req" 0 3 (fontified nil)) . 4128) (4128 . 4131) (#("Request" 0 7 (fontified nil)) . -4128) (4128 . 4135) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4128) (undo-tree-id792 . -3) (undo-tree-id793 . -3) 4131) nil (25946 4104 802242 811000) 0 nil])
([nil nil ((4136 . 4139)) nil (25946 4104 802239 578000) 0 nil])
([nil nil ((4139 . 4140) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4139) (4139 . 4140) (4138 . 4140)) nil (25946 4104 802238 551000) 0 nil])
([nil nil ((4140 . 4147)) nil (25946 4104 802237 380000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4152) (4152 . 4153) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4152) (4152 . 4153) (4147 . 4153)) nil (25946 4104 802236 458000) 0 nil])
([nil nil ((4152 . 4162)) nil (25946 4104 802235 501000) 0 nil])
([nil nil ((apply yas--snippet-revive 4159 4173 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (4159 . 4173) (#("ResponseWriter" 0 14 (fontified nil)) . 4159) (4159 . 4173) (#("Res" 0 3 (fontified nil)) . 4159) (4159 . 4162) (#("ResponseWriter" 0 14 (fontified nil)) . -4159) (4159 . 4173) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4159) (undo-tree-id790 . -3) (undo-tree-id791 . -3) 4162) nil (25946 4104 802234 409000) 0 nil])
([nil nil ((4173 . 4177)) nil (25946 4104 802231 287000) 0 nil])
([nil nil ((4177 . 4186)) nil (25946 4104 802230 729000) 0 nil])
([nil nil ((apply yas--snippet-revive 4183 4190 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (4183 . 4190) (#("Request" 0 7 (fontified nil)) . 4183) (4183 . 4190) (#("Req" 0 3 (fontified nil)) . 4183) (4183 . 4186) (#("Request" 0 7 (fontified nil)) . -4183) (4183 . 4190) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4183) (undo-tree-id788 . -3) (undo-tree-id789 . -3) 4186) nil (25946 4104 802229 522000) 0 nil])
([nil nil ((4191 . 4194)) nil (25946 4104 802226 881000) 0 nil])
([nil nil ((4194 . 4196) (4195 . 4196) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4194) (4194 . 4196) (4193 . 4195)) nil (25946 4104 802226 238000) 0 nil])
([nil nil ((4196 . 4199)) nil (25946 4104 802225 374000) 0 nil])
([nil nil ((apply yas--snippet-revive 4196 4208 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (4196 . 4208) (#("json.Decoder" 0 12 (fontified nil)) . 4196) (4196 . 4208) (#("dec" 0 3 (fontified nil)) . 4196) (4196 . 4199) (#("json.Decoder" 0 12 (fontified nil)) . -4196) (4196 . 4208) (#("dec" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4196) (undo-tree-id786 . -3) (undo-tree-id787 . -3) 4199) nil (25946 4104 802224 321000) 0 nil])
([nil nil ((4208 . 4210)) nil (25946 4104 802221 387000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4208) (undo-tree-id785 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 4209)) nil (25946 4104 802220 585000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4201) (undo-tree-id778 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4202) (undo-tree-id779 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4203) (undo-tree-id780 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4204) (undo-tree-id781 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4205) (undo-tree-id782 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4206) (undo-tree-id783 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4207) (undo-tree-id784 . -1) 4208) nil (25946 4104 802218 604000) 0 nil])
([nil nil ((4201 . 4204)) nil (25946 4104 802213 176000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4212 4218 nil nil nil t nil)) nil 7 nil #s(yas--field 1 4212 4218 nil nil nil t nil) nil nil)) (4201 . 4224) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 4201) (4201 . 4229) (#("New" 0 3 (fontified nil)) . 4201) (4201 . 4204) (#("NewDecoder" 0 10 (fontified nil)) . -4201) (4201 . 4211) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4201) (undo-tree-id776 . -3) (undo-tree-id777 . -3) 4204) nil (25946 4104 802212 221000) 0 nil])
([nil nil ((4213 . 4216) (#("r io.Reader" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:property)) . 4213) (4212 . 4213)) nil (25946 4104 802208 691000) 0 nil])
([nil nil ((#("V" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4215) (undo-tree-id774 . -1) (undo-tree-id775 . -1) 4216) nil (25946 4104 802207 779000) 0 nil])
([nil nil ((4215 . 4216)) nil (25946 4104 802205 857000) 0 nil])
([nil nil ((4216 . 4217)) nil (25946 4104 802205 369000) 0 nil])
([nil nil ((apply yas--snippet-revive 4214 4218 #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 4212 4218 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil #s(yas--field 1 4212 4218 nil nil nil t nil) nil)) (4214 . 4218) (#("Body" 0 4 (fontified nil)) . 4214) (4214 . 4218) (#("Bod" 0 3 (fontified nil)) . 4214) (4214 . 4217) (#("Body" 0 4 (fontified nil)) . -4214) (4214 . 4218) (#("Bod" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4214) (undo-tree-id772 . -3) (undo-tree-id773 . -3) 4217) nil (25946 4104 802204 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 4201 4219 #s(yas--snippet nil (#s(yas--field 1 4212 4218 nil nil nil t nil)) nil 7 nil #s(yas--field 1 4212 4218 nil nil nil t nil) nil nil))) nil (25946 4104 802201 404000) 0 nil])
([nil nil ((4196 . 4207)) nil (25946 4104 802200 503000) 0 nil])
([nil nil ((4230 . 4233)) nil (25946 4104 802200 34000) 0 nil])
([nil nil ((4233 . 4234)) nil (25946 4104 802199 410000) 0 nil])
([nil nil ((4234 . 4249)) nil (25946 4104 802198 959000) 0 nil])
([nil nil ((4249 . 4253)) nil (25946 4104 802198 455000) 0 nil])
([nil nil ((apply yas--snippet-revive 4249 4257 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (4249 . 4257) (#("database" 0 8 (fontified nil)) . 4249) (4249 . 4257) (#("data" 0 4 (fontified nil)) . 4249) (4249 . 4253) (#("database" 0 8 (fontified nil)) . -4249) (4249 . 4257) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4249) (undo-tree-id770 . -4) (undo-tree-id771 . -4) 4253) nil (25946 4104 802197 358000) 0 nil])
([nil nil ((4257 . 4262)) nil (25946 4104 802194 729000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4257) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4258) (undo-tree-id766 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4259) (undo-tree-id767 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4260) (undo-tree-id768 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4261) (undo-tree-id769 . -1) 4262) nil (25946 4104 802193 437000) 0 nil])
([nil nil ((4257 . 4258)) nil (25946 4104 802188 876000) 0 nil])
([nil nil ((4258 . 4260)) nil (25946 4104 802188 408000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4258) (undo-tree-id762 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4259) (undo-tree-id763 . -1) 4260) nil (25946 4104 802187 489000) 0 nil])
([nil nil ((4258 . 4261)) nil (25946 4104 802185 298000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4258) (undo-tree-id759 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4259) (undo-tree-id760 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4260) (undo-tree-id761 . -1) 4261) nil (25946 4104 802184 374000) 0 nil])
([nil nil ((4258 . 4264)) nil (25946 4104 802181 612000) 0 nil])
([nil nil ((4264 . 4265)) nil (25946 4104 802181 130000) 0 nil])
([nil nil ((4265 . 4272)) nil (25946 4104 802180 719000) 0 nil])
([nil nil ((4058 . 4060)) nil (25946 4104 802180 234000) 0 nil])
([nil nil ((4060 . 4064)) nil (25946 4104 802179 717000) 0 nil])
([nil nil ((4064 . 4065)) nil (25946 4104 802179 286000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4058) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("
" 0 1 (fontified t)) . -4059) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4060) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4061) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4062) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4063) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#(" " 0 1 (fontified t)) . -4064) (undo-tree-id758 . -1) 4065) nil (25946 4104 802177 490000) 0 nil])
([nil nil ((4059 . 4061)) nil (25946 4104 802166 517000) 0 nil])
([nil nil ((4060 . 4064)) nil (25946 4104 802166 12000) 0 nil])
([nil nil ((4064 . 4065)) nil (25946 4104 802165 478000) 0 nil])
([nil nil ((4065 . 4069)) nil (25946 4104 802164 896000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4067) (undo-tree-id744 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4068) (undo-tree-id745 . -1) 4069) nil (25946 4104 802164 119000) 0 nil])
([nil nil ((4067 . 4071)) nil (25946 4104 802162 63000) 0 nil])
([nil nil ((4067 . 4068)) nil (25946 4104 802161 648000) 0 nil])
([nil nil ((4072 . 4082)) nil (25946 4104 802161 149000) 0 nil])
([nil nil ((4082 . 4086)) nil (25946 4104 802160 486000) 0 nil])
([nil nil ((4086 . 4088)) nil (25946 4104 802159 971000) 0 nil])
([nil nil ((4088 . 4089) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4088) (4088 . 4089) (4087 . 4089)) nil (25946 4104 802159 338000) 0 nil])
([nil nil ((4089 . 4102)) nil (25946 4104 802158 578000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4101) (undo-tree-id743 . -1) 4102) nil (25946 4104 802157 936000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4100) (undo-tree-id742 . -1) 4101) nil (25946 4104 802156 619000) 0 nil])
([nil nil ((4100 . 4101)) nil (25946 4104 802155 123000) 0 nil])
([nil nil ((apply yas--snippet-revive 4123 4127 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (324 . 350) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (4097 . 4101) (#("uuid" 0 4 (fontified nil)) . 4097) (4097 . 4101) (#("uuid" 0 4 (fontified nil)) . 4097) (4097 . 4101) (#("uuid" 0 4 (fontified t face tree-sitter-hl-face:type)) . -4097) (undo-tree-id740 . -4) (undo-tree-id741 . -4) 4101) nil (25946 4104 802154 36000) 0 nil])
([nil nil ((4127 . 4128)) nil (25946 4104 802151 347000) 0 nil])
([nil nil ((apply yas--snippet-revive 4128 4132 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (4128 . 4132) (#("UUID" 0 4 (fontified nil)) . 4128) (4128 . 4132) (#("UUID" 0 4 (fontified nil)) . -4128) (4128 . 4132)) nil (25946 4104 802150 541000) 0 nil])
([nil nil ((4340 . 4341)) nil (25946 4104 802149 525000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4325) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4326) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4327) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4328) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4329) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4330) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4331) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4332) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#("." 0 1 (fontified t)) . -4333) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 4334) nil (25946 4104 802147 557000) 0 nil])
([nil nil ((4132 . 4133)) nil (25946 4104 802134 711000) 0 nil])
([nil nil ((4140 . 4147) (4139 . 4141) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4139) (4134 . 4140) (4133 . 4135) (#("`" 0 1 (fontified nil)) . -4133) (4133 . 4134)) nil (25946 4104 802133 936000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4115) (undo-tree-id721 . -1) 4116) nil (25946 4104 802132 351000) 0 nil])
([nil nil ((4115 . 4116)) nil (25946 4104 802131 254000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4119) (undo-tree-id719 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4120) (undo-tree-id720 . -1) 4121) nil (25946 4104 802130 521000) 0 nil])
([nil nil ((4119 . 4120)) nil (25946 4104 802128 612000) 0 nil])
([nil nil ((4356 . 4359)) nil (25946 4104 802127 928000) 0 nil])
([nil nil ((4359 . 4365)) nil (25946 4104 802127 154000) 0 nil])
([nil nil ((4365 . 4366)) nil (25946 4104 802126 403000) 0 nil])
([nil nil ((4366 . 4373)) nil (25946 4104 802125 898000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4372) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 4373) nil (25946 4104 802124 820000) 0 nil])
([nil nil ((4372 . 4373)) nil (25946 4104 802122 860000) 0 nil])
([nil nil ((apply yas--snippet-revive 4369 4376 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (4369 . 4376) (#("decoder" 0 7 (fontified nil)) . 4369) (4369 . 4376) (#("deco" 0 4 (fontified nil)) . 4369) (4369 . 4373) (#("decoder" 0 7 (fontified nil)) . -4369) (4369 . 4376) (#("deco" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4369) (undo-tree-id715 . -4) (undo-tree-id716 . -4) 4373) nil (25946 4104 802121 471000) 0 nil])
([nil nil ((4376 . 4377)) nil (25946 4104 802118 473000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4384 4397 nil nil nil t nil)) nil 13 nil #s(yas--field 1 4384 4397 nil nil nil t nil) nil nil)) (4377 . 4390) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 4377) (4377 . 4395) (#("Decode" 0 6 (fontified nil)) . -4377) (4377 . 4383)) nil (25946 4104 802117 50000) 0 nil])
([nil nil ((4384 . 4386) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4384) (#("v any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:variable)) . 4385) (4384 . 4385)) nil (25946 4104 802115 626000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4384) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 4385)) nil (25946 4104 802114 508000) 0 nil])
([nil nil ((4384 . 4388)) nil (25946 4104 802111 644000) 0 nil])
([nil nil ((4388 . 4389)) nil (25946 4104 802110 908000) 0 nil])
([nil nil ((apply yas--snippet-revive 4385 4397 #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 4384 4397 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 4384 4397 nil nil nil t nil) nil)) (4385 . 4397) (#("tagReqParams" 0 12 (fontified nil)) . 4385) (4385 . 4397) (#("tagR" 0 4 (fontified nil)) . 4385) (4385 . 4389) (#("tagReqParams" 0 12 (fontified nil)) . -4385) (4385 . 4397) (#("tagR" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4385) (undo-tree-id711 . -4) (undo-tree-id712 . -4) 4389) nil (25946 4104 802109 943000) 0 nil])
([nil nil ((apply yas--snippet-revive 4377 4398 #s(yas--snippet nil (#s(yas--field 1 4384 4397 nil nil nil t nil)) nil 13 nil #s(yas--field 1 4384 4397 nil nil nil t nil) nil nil))) nil (25946 4104 802106 924000) 0 nil])
([nil nil ((4398 . 4403)) nil (25946 4104 802106 502000) 0 nil])
([nil nil ((4403 . 4404)) nil (25946 4104 802106 2000) 0 nil])
([nil nil ((4404 . 4413)) nil (25946 4104 802105 488000) 0 nil])
([nil nil ((4413 . 4416) (4414 . 4416) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 4413) (4413 . 4416) (4412 . 4414)) nil (25946 4104 802104 848000) 0 nil])
([nil nil ((4416 . 4425)) nil (25946 4104 802104 134000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4438 4439 nil nil nil t #s(yas--field 2 4441 4444 nil nil nil t #s(yas--field 3 4446 4459 nil nil nil t nil))) #s(yas--field 2 4441 4444 nil nil nil t #s(yas--field 3 4446 4459 nil nil nil t nil)) #s(yas--field 3 4446 4459 nil nil nil t nil)) nil 15 nil #s(yas--field 3 4446 4459 nil nil nil t nil) nil nil)) (4422 . 4491) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4422) (4422 . 4507) (#("Res" 0 3 (fontified nil)) . 4422) (4422 . 4425) (#("RespondWithJSON" 0 15 (fontified nil)) . -4422) (4422 . 4437) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4422) (undo-tree-id709 . -3) (undo-tree-id710 . -3) 4425) nil (25946 4104 802103 173000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4439) (4438 . 4439)) nil (25946 4104 802100 735000) 0 nil])
([nil nil ((4442 . 4444) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4442) (4441 . 4442)) nil (25946 4104 802100 66000) 0 nil])
([nil nil ((4447 . 4450) (4446 . 4448) (#("\"" 0 1 (fontified nil)) . -4446) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-5-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-5-face))) . 4447) (4446 . 4447)) nil (25946 4104 802099 261000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4449) (undo-tree-id708 . -1) 4450) nil (25946 4104 802098 240000) 0 nil])
([nil nil ((4449 . 4458)) nil (25946 4104 802097 185000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4449) (undo-tree-id707 . -1) 4450) nil (25946 4104 802096 682000) 0 nil])
([nil nil ((4449 . 4450)) nil (25946 4104 802095 606000) 0 nil])
([nil nil ((apply yas--snippet-revive 4422 4460 #s(yas--snippet nil (#s(yas--field 1 4438 4439 nil nil nil t #s(yas--field 2 4441 4444 nil nil nil t #s(yas--field 3 4446 4459 nil nil nil t nil))) #s(yas--field 2 4441 4444 nil nil nil t #s(yas--field 3 4446 4459 nil nil nil t nil)) #s(yas--field 3 4446 4459 nil nil nil t nil)) nil 15 nil #s(yas--field 3 4446 4459 nil nil nil t nil) nil nil))) nil (25946 4104 802095 203000) 0 nil])
([nil nil ((4460 . 4464)) nil (25946 4104 802094 423000) 0 nil])
([nil nil ((4464 . 4466)) nil (25946 4104 802093 956000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4464) (undo-tree-id705 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4465) (undo-tree-id706 . -1) 4466) nil (25946 4104 802093 9000) 0 nil])
([nil nil ((4464 . 4467)) nil (25946 4104 802091 302000) 0 nil])
([nil nil ((4467 . 4468)) nil (25946 4104 802090 897000) 0 nil])
([nil nil ((4468 . 4470)) nil (25946 4104 802090 314000) 0 nil])
([nil nil ((4474 . 4477)) nil (25946 4104 802089 860000) 0 nil])
([nil nil ((4477 . 4480)) nil (25946 4104 802089 367000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4479) (undo-tree-id703 . -1) (undo-tree-id704 . -1) 4480) nil (25946 4104 802088 792000) 0 nil])
([nil nil ((4479 . 4490)) nil (25946 4104 802087 124000) 0 nil])
([nil nil ((4490 . 4494)) nil (25946 4104 802086 443000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4490) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4491) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4492) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4493) (undo-tree-id701 . -1) (undo-tree-id702 . -1) 4494) nil (25946 4104 802085 410000) 0 nil])
([nil nil ((4490 . 4493)) nil (25946 4104 802080 114000) 0 nil])
([nil nil ((4493 . 4494)) nil (25946 4104 802079 244000) 0 nil])
([nil nil ((4494 . 4498)) nil (25946 4104 802078 759000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4511 4516 nil nil nil t #s(yas--field 2 4518 4537 nil nil nil t nil)) #s(yas--field 2 4518 4537 nil nil nil t nil)) nil 16 nil #s(yas--field 2 4518 4537 nil nil nil t nil) nil nil)) (4495 . 4549) (#("GetTagsByUserId(${1:ctx context.Context}, ${2:userID uuid.UUID})" 0 64 (fontified nil)) . 4495) (4495 . 4559) (#("Get" 0 3 (fontified nil)) . 4495) (4495 . 4498) (#("GetTagsByUserId" 0 15 (fontified nil)) . -4495) (4495 . 4510) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4495) (undo-tree-id693 . -3) (undo-tree-id694 . -3) 4498) nil (25946 4104 802077 781000) 0 nil])
([nil nil ((4512 . 4513) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 4512) (4511 . 4512)) nil (25946 4104 802075 264000) 0 nil])
([nil nil ((apply yas--snippet-revive 4513 4516 #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 1 4511 4516 nil nil nil t #s(yas--field 2 4518 4537 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 1 4511 4516 nil nil nil t #s(yas--field 2 4518 4537 nil nil nil t nil)) nil)) (4513 . 4516) (#("CTX" 0 3 (fontified nil)) . 4513) (4513 . 4516) (#("CTX" 0 3 (fontified nil)) . -4513) (4513 . 4516)) nil (25946 4104 802074 373000) 0 nil])
([nil nil ((#("userID uuid.UUID" 0 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 16 (fontified t face tree-sitter-hl-face:property)) . 4518)) nil (25946 4104 802073 246000) 0 nil])
([nil nil ((4518 . 4521)) nil (25946 4104 802072 699000) 0 nil])
([nil nil ((apply yas--snippet-revive 4518 4537 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 4518 4537 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 4518 4537 nil nil nil t nil) nil)) (4518 . 4537) (#("tagReqParams.UserId" 0 19 (fontified nil)) . 4518) (4518 . 4537) (#("tag" 0 3 (fontified nil)) . 4518) (4518 . 4521) (#("tagReqParams.UserId" 0 19 (fontified nil)) . -4518) (4518 . 4537) (#("tag" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4518) (undo-tree-id691 . -3) (undo-tree-id692 . -3) 4521) nil (25946 4104 802071 154000) 0 nil])
([nil nil ((apply yas--snippet-revive 4495 4538 #s(yas--snippet nil (#s(yas--field 1 4511 4516 nil nil nil t #s(yas--field 2 4518 4537 nil nil nil t nil)) #s(yas--field 2 4518 4537 nil nil nil t nil)) nil 16 nil #s(yas--field 2 4518 4537 nil nil nil t nil) nil nil))) nil (25946 4104 802068 254000) 0 nil])
([nil nil ((4538 . 4541)) nil (25946 4104 802067 733000) 0 nil])
([nil nil ((4541 . 4555)) nil (25946 4104 802067 321000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4554) (undo-tree-id689 . -1) (undo-tree-id690 . -1) 4555) nil (25946 4104 802066 647000) 0 nil])
([nil nil ((4554 . 4557)) nil (25946 4104 802064 733000) 0 nil])
([nil nil ((4557 . 4560) (4558 . 4560) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 4557) (4557 . 4560) (4556 . 4558)) nil (25946 4104 802063 738000) 0 nil])
([nil nil ((#("
type GetTagsParams struct {
	UserId uuid.UUID `json:\"user_id\"`
}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:keyword) 5 6 (fontified t) 6 19 (fontified t face tree-sitter-hl-face:type) 19 20 (fontified t) 20 26 (fontified t face tree-sitter-hl-face:keyword) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t face tree-sitter-hl-face:property) 31 36 (fontified t face tree-sitter-hl-face:property) 36 37 (fontified t) 37 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t face tree-sitter-hl-face:type) 46 47 (fontified t) 47 53 (fontified t face tree-sitter-hl-face:string) 53 62 (fontified t face tree-sitter-hl-face:string) 62 63 (fontified t face tree-sitter-hl-face:string) 63 64 (fontified t) 64 65 (fontified t face (rainbow-delimiters-depth-1-face)) 65 66 (fontified t)) . 4085) (undo-tree-id684 . -64) (undo-tree-id685 . 1) (undo-tree-id686 . -64) (undo-tree-id687 . -64) (undo-tree-id688 . -65)) nil (25946 4104 802062 742000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4116) (undo-tree-id680 . -1) (undo-tree-id681 . 1) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -4117) (undo-tree-id683 . -1) 4118) nil (25946 4104 802059 44000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4098) (undo-tree-id646 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -4099) (undo-tree-id647 . -1) (#(" " 0 1 (fontified t)) . -4100) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -4101) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4102) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4103) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("i" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4104) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4105) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4106) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("." 0 1 (fontified t)) . -4107) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4108) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4109) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4110) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4111) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4112) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4113) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4114) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4115) (undo-tree-id678 . -1) (undo-tree-id679 . -1) 4116) nil (25946 4104 802053 747000) 0 nil])
([nil nil ((4098 . 4116)) nil (25946 4104 802027 266000) 0 nil])
([nil nil ((4116 . 4118)) nil (25946 4104 802026 360000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1 2 (fontified t) 2 3 (fontified t face tree-sitter-hl-face:operator) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t face tree-sitter-hl-face:type) 10 11 (fontified t face tree-sitter-hl-face:type) 11 12 (fontified t face tree-sitter-hl-face:type) 12 13 (fontified t face tree-sitter-hl-face:type) 13 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t face tree-sitter-hl-face:type) 15 16 (fontified t face tree-sitter-hl-face:type) 16 17 (fontified t face tree-sitter-hl-face:type)) . 4099) (undo-tree-id642 . -16) (undo-tree-id643 . -16) (undo-tree-id644 . -16) (undo-tree-id645 . -16)) nil (25946 4104 802024 891000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4122 . 4123) (nil fontified nil 4106 . 4123) (4106 . 4123) 4105) nil (25946 4104 802021 346000) 0 nil])
([nil nil ((4123 . 4125)) nil (25946 4104 802020 236000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4091) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4092) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4093) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("T" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4094) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4095) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4096) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4097) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4098) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . 1) (undo-tree-id635 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4099) (undo-tree-id636 . 1) (undo-tree-id637 . -1) (undo-tree-id638 . 1) (undo-tree-id639 . 1) (undo-tree-id640 . -1) (#(" " 0 1 (fontified t)) . -4100) (undo-tree-id641 . -1) 4101) nil (25946 4104 802016 657000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -4086) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -4087) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -4088) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -4089) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#(" " 0 1 (fontified t)) . -4090) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) 4091) nil (25946 4104 801976 678000) 0 nil])
([nil nil ((4090 . 4092)) nil (25946 4104 801959 156000) 0 nil])
([nil nil ((#("	return func(w http.ResponseWriter, r *http.Request) {
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 12 (fontified t face tree-sitter-hl-face:keyword) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 14 15 (fontified t) 15 20 (fontified t) 20 34 (fontified t face tree-sitter-hl-face:type) 34 36 (fontified t) 36 37 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 37 38 (fontified t) 38 39 (fontified t face tree-sitter-hl-face:operator) 39 44 (fontified t) 44 51 (fontified t face tree-sitter-hl-face:type) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t)) . 4154) (undo-tree-id557 . 50) (undo-tree-id558 . -4) (undo-tree-id559 . -54) 4158) nil (25946 4104 801958 206000) 0 nil])
([nil nil ((#("	}
" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t)) . 4433) (undo-tree-id553 . -1) (undo-tree-id554 . -2) (undo-tree-id555 . 2) (undo-tree-id556 . -2) 4434) nil (25946 4104 801955 456000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1137) (#("	" 0 1 (fontified t)) . -4155) (#("	" 0 1 (fontified t)) . -4192) (#("	" 0 1 (fontified t)) . -4226) (#("	" 0 1 (fontified t)) . -4283) (#("	" 0 1 (fontified t)) . -4331) (#("	" 0 1 (fontified t)) . -4339) (#("	" 0 1 (fontified t)) . -4343) (#("	" 0 1 (fontified t)) . -4407) (#("			" 0 3 (fontified t)) . -4425) (#("	" 0 1 (fontified t)) . -4429) 4433) nil (25946 4104 801951 160000) 0 nil])
([nil nil ((4091 . 4098)) nil (25946 4104 801949 279000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4096) (undo-tree-id551 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -4097) (undo-tree-id552 . -1) 4098) nil (25946 4104 801948 431000) 0 nil])
([nil nil ((4096 . 4097)) nil (25946 4104 801946 28000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . 4096)) nil (25946 4104 801945 254000) 0 nil])
([nil nil ((4096 . 4098)) nil (25946 4104 801944 492000) 0 nil])
([nil nil ((#("etTagds" 0 5 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 5 6 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 6 7 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . 4091) (undo-tree-id550 . -7)) nil (25946 4104 801943 781000) 0 nil])
([nil nil ((4429 . 4430) (4425 . 4428) (4407 . 4408) (4343 . 4344) (4339 . 4340) (4331 . 4332) (4283 . 4284) (4226 . 4227) (4192 . 4193) (4155 . 4156) (1137 . 1138)) nil (25946 4104 801942 110000) 0 nil])
([nil nil ((4433 . 4436)) nil (25946 4104 801940 320000) 0 nil])
([nil nil ((4154 . 4209)) nil (25946 4104 801939 761000) 0 nil])
([nil nil ((#(" G" 0 1 (fontified t) 1 2 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . 4090)) nil (25946 4104 801939 274000) 0 nil])
([nil nil ((4086 . 4091)) nil (25946 4104 801938 893000) 0 nil])
([nil nil ((4091 . 4101)) nil (25946 4104 801938 321000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t)) . 4123)) nil (25946 4104 801937 654000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (fontified nil face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil) 8 9 (fontified nil) 9 16 (fontified nil face tree-sitter-hl-face:type) 16 17 (rear-nonsticky nil fontified nil face tree-sitter-hl-face:type)) . 4106) (undo-tree-id549 . -17) (nil rear-nonsticky t 4122 . 4123)) nil (25946 4104 801937 76000) 0 nil])
([nil nil ((4099 . 4116)) nil (25946 4104 801935 688000) 0 nil])
([nil nil ((#(") " 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t)) . 4116) (undo-tree-id548 . 2)) nil (25946 4104 801934 802000) 0 nil])
([nil nil ((#("(a *utils.DBConfig" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 2 3 (fontified t) 3 4 (fontified t face tree-sitter-hl-face:operator) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t face tree-sitter-hl-face:type) 11 12 (fontified t face tree-sitter-hl-face:type) 12 13 (fontified t face tree-sitter-hl-face:type) 13 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t face tree-sitter-hl-face:type) 15 16 (fontified t face tree-sitter-hl-face:type) 16 17 (fontified t face tree-sitter-hl-face:type) 17 18 (fontified t face tree-sitter-hl-face:type)) . 4098) (undo-tree-id543 . -1) (undo-tree-id544 . -17) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -18)) nil (25946 4104 801933 379000) 0 nil])
([nil nil ((4098 . 4116)) nil (25946 4104 801929 813000) 0 nil])
([nil nil ((4116 . 4118)) nil (25946 4104 801929 186000) 0 nil])
([nil nil ((4085 . 4151)) nil (25946 4104 801928 597000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified nil)) . 4556) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 4557) (4557 . 4560) (#("		" 0 1 (fontified t) 1 2 (fontified t)) . 4558) (#("			" 0 3 (fontified t)) . 4557)) nil (25946 4104 801927 523000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4184) (undo-tree-id525 . -1) (undo-tree-id526 . 1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4185) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4186) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4187) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4188) (undo-tree-id542 . -1) 4189) nil (25946 4104 801925 174000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -4182) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (#(" " 0 1 (fontified t)) . -4183) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 4184) nil (25946 4104 801911 620000) 0 nil])
([nil nil ((4182 . 4184)) nil (25946 4104 801677 216000) 0 nil])
([nil nil ((#("	return func(w http.ResponseWriter, r *http.Request) {
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 12 (fontified t face tree-sitter-hl-face:keyword) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 14 15 (fontified t) 15 20 (fontified t) 20 34 (fontified t face tree-sitter-hl-face:type) 34 36 (fontified t) 36 37 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 37 38 (fontified t) 38 39 (fontified t face tree-sitter-hl-face:operator) 39 44 (fontified t) 44 51 (fontified t face tree-sitter-hl-face:type) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t)) . 4226) (undo-tree-id514 . 24) (undo-tree-id515 . -54) (undo-tree-id516 . -30) 4256) nil (25946 4104 801676 57000) 0 nil])
([nil nil ((#("	}
" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t)) . 4498) (undo-tree-id510 . -2) (undo-tree-id511 . -1) (undo-tree-id512 . 2) (undo-tree-id513 . -2) 4499) nil (25946 4104 801672 610000) 0 nil])
([nil nil (("
" . -1137) (#("	" 0 1 (fontified t)) . -4227) (#("	" 0 1 (fontified t)) . -4264) (#("	" 0 1 (fontified t)) . -4298) (#("	" 0 1 (fontified t)) . 4355) (#("	" 0 1 (fontified t)) . 4401) (#("	" 0 1 (fontified t)) . 4411) (#("	" 0 1 (fontified t)) . 4415) (#("	" 0 1 (fontified t)) . 4479) (4496 . 4498) 4353) nil (25946 4104 801667 321000) 0 nil])
([nil nil ((4221 . 4224)) nil (25946 4104 801665 630000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4223) (undo-tree-id509 . -1) 4224) nil (25946 4104 801664 815000) 0 nil])
([nil nil ((4223 . 4227)) nil (25946 4104 801663 207000) 0 nil])
([nil nil ((4227 . 4228)) nil (25946 4104 801662 568000) 0 nil])
([nil nil ((4228 . 4232)) nil (25946 4104 801661 854000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4228) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4229) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4230) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4231) (undo-tree-id507 . -1) (undo-tree-id508 . -1) 4232) nil (25946 4104 801659 877000) 0 nil])
([nil nil ((4228 . 4238)) nil (25946 4104 801603 676000) 0 nil])
([nil nil ((4238 . 4242)) nil (25946 4104 801602 742000) 0 nil])
([nil nil ((737 . 738)) nil (25946 4104 801598 840000) 0 nil])
([nil nil ((#("	decoder := json.NewDecoder(r.Body)
	tagReqParams := GetTagsParams{}
	if err := decoder.Decode(&tagReqParams); err != nil {
		utils.RespondWithJSON(w, 400, \"Bad Request\")
		return
	}
" 0 1 (fontified t) 1 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 34 (fontified t face tree-sitter-hl-face:property) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t) 36 37 (fontified t) 37 49 (fontified t face tree-sitter-hl-face:variable) 49 50 (fontified t) 50 52 (fontified t face tree-sitter-hl-face:operator) 52 53 (fontified t) 53 66 (fontified t face tree-sitter-hl-face:type) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 68 (fontified t face (rainbow-delimiters-depth-2-face)) 68 69 (fontified t) 69 70 (fontified t) 70 72 (fontified t face tree-sitter-hl-face:keyword) 72 73 (fontified t) 73 76 (fontified t face tree-sitter-hl-face:variable) 76 77 (fontified t) 77 79 (fontified t face tree-sitter-hl-face:operator) 79 80 (fontified t) 80 87 (fontified t face tree-sitter-hl-face:variable) 87 88 (fontified t) 88 94 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 94 95 (fontified t face (rainbow-delimiters-depth-2-face)) 95 96 (fontified t face tree-sitter-hl-face:operator) 96 108 (fontified t face tree-sitter-hl-face:variable) 108 109 (fontified t face (rainbow-delimiters-depth-2-face)) 109 111 (fontified t) 111 114 (fontified t face tree-sitter-hl-face:variable) 114 115 (fontified t) 115 117 (fontified t face tree-sitter-hl-face:operator) 117 118 (fontified t) 118 121 (fontified t face tree-sitter-hl-face:constant\.builtin) 121 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-2-face)) 123 124 (fontified t) 124 126 (fontified t) 126 131 (fontified t face tree-sitter-hl-face:variable) 131 132 (fontified t) 132 147 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 147 148 (fontified t face (rainbow-delimiters-depth-3-face)) 148 149 (fontified t face tree-sitter-hl-face:variable) 149 151 (fontified t) 151 154 (fontified t face tree-sitter-hl-face:number) 154 156 (fontified t) 156 169 (fontified t face tree-sitter-hl-face:string) 169 170 (fontified t face (rainbow-delimiters-depth-3-face)) 170 171 (fontified t) 171 172 (fontified t) 172 173 (fontified t) 173 179 (fontified t face tree-sitter-hl-face:keyword) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t face (rainbow-delimiters-depth-2-face)) 182 183 (fontified t)) . 4247) (undo-tree-id827 . -182) (undo-tree-id828 . -68) (undo-tree-id829 . -68) (undo-tree-id830 . -23) (undo-tree-id831 . -182) (undo-tree-id832 . -182) (undo-tree-id833 . -68) (undo-tree-id834 . -68) (undo-tree-id835 . -181) (undo-tree-id836 . -182) (undo-tree-id837 . -23) (undo-tree-id838 . -182) 4429 (t 25946 4104 847007 955000)) nil (25946 4185 466666 557000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4289) (undo-tree-id808 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4290) (undo-tree-id809 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4291) (undo-tree-id810 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4292) (undo-tree-id811 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4293) (undo-tree-id812 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4294) (undo-tree-id813 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4295) (undo-tree-id814 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4296) (undo-tree-id815 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4297) (undo-tree-id816 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4298) (undo-tree-id817 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4299) (undo-tree-id818 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4300) (undo-tree-id819 . -1) (#("." 0 1 (fontified t)) . -4301) (undo-tree-id820 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4302) (undo-tree-id821 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4303) (undo-tree-id822 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4304) (undo-tree-id823 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -4305) (undo-tree-id824 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4306) (undo-tree-id825 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4307) (undo-tree-id826 . -1) 4308) nil (25946 4185 466654 829000) 0 nil])
([nil nil ((4289 . 4294)) nil (25946 4185 466639 666000) 0 nil])
([nil nil ((apply yas--snippet-revive 4294 4296 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (4294 . 4296) (#("ID" 0 2 (fontified nil)) . 4294) (4294 . 4296) (#("ID" 0 2 (fontified nil)) . -4294) (4294 . 4296)) nil (25946 4185 466638 837000) 0 nil])
([nil nil ((4314 . 4317)) nil (25946 4185 466637 663000) 0 nil])
([nil nil ((4317 . 4320)) nil (25946 4185 466637 115000) 0 nil])
([nil nil ((4320 . 4321)) nil (25946 4185 466636 396000) 0 nil])
([nil nil ((4321 . 4324)) nil (25946 4185 466635 686000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4323) (undo-tree-id807 . -1) 4324) nil (25946 4185 466634 690000) 0 nil])
([nil nil ((4314 . 4317) 4306) nil (25946 4185 466633 371000) 0 nil])
([nil nil ((4317 . 4320)) nil (25946 4185 466632 495000) 0 nil])
([nil nil ((apply yas--snippet-revive 4317 4322 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (4317 . 4322) (#("utils" 0 5 (fontified nil)) . 4317) (4317 . 4322) (#("uti" 0 3 (fontified nil)) . 4317) (4317 . 4320) (#("utils" 0 5 (fontified nil)) . -4317) (4317 . 4322) (#("uti" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -4317) (undo-tree-id805 . -3) (undo-tree-id806 . -3) 4320) nil (25946 4185 466631 193000) 0 nil])
([nil nil ((4322 . 4323)) nil (25946 4185 466626 864000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4340 4341 nil nil nil t #s(yas--field 2 4343 4346 nil nil nil t #s(yas--field 3 4348 4371 nil nil nil t nil))) #s(yas--field 2 4343 4346 nil nil nil t #s(yas--field 3 4348 4371 nil nil nil t nil)) #s(yas--field 3 4348 4371 nil nil nil t nil)) nil 21 nil #s(yas--field 3 4348 4371 nil nil nil t nil) nil nil)) (4323 . 4384) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4323) (4323 . 4399) (#("RespondWithError" 0 16 (fontified nil)) . -4323) (4323 . 4339)) nil (25946 4185 466625 860000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4341) (undo-tree-id804 . -21) (4340 . 4341)) nil (25946 4185 466624 26000) 0 nil])
([nil nil ((4344 . 4346) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4344) (undo-tree-id803 . -8) (4343 . 4344)) nil (25946 4185 466622 129000) 0 nil])
([nil nil ((4349 . 4369) (4348 . 4350) (#("\"" 0 1 (fontified nil)) . -4348) (undo-tree-id801 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4349) (undo-tree-id802 . -10) (4348 . 4349)) nil (25946 4185 466620 278000) 0 nil])
([nil nil ((4369 . 4370)) nil (25946 4185 466617 260000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -4369) (undo-tree-id800 . -1) 4370) nil (25946 4185 466616 90000) 0 nil])
([nil nil ((4369 . 4370)) nil (25946 4185 466608 47000) 0 nil])
([nil nil ((apply yas--snippet-revive 4323 4372 #s(yas--snippet nil (#s(yas--field 1 4340 4341 nil nil nil t #s(yas--field 2 4343 4346 nil nil nil t #s(yas--field 3 4348 4371 nil nil nil t nil))) #s(yas--field 2 4343 4346 nil nil nil t #s(yas--field 3 4348 4371 nil nil nil t nil)) #s(yas--field 3 4348 4371 nil nil nil t nil)) nil 21 nil #s(yas--field 3 4348 4371 nil nil nil t nil) nil nil))) nil (25946 4185 466604 14000) 0 nil])
([nil nil ((4384 . 4392) (t 25946 4185 510379 248000)) nil (25946 5060 996243 808000) 0 nil])
([nil nil ((4392 . 4394) (4393 . 4394) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4392) (4392 . 4394) (4391 . 4393)) nil (25946 5060 996243 80000) 0 nil])
([nil nil ((4394 . 4398)) nil (25946 5060 996242 135000) 0 nil])
([nil nil ((4398 . 4403)) nil (25946 5060 996241 466000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4416 4417 nil nil nil t #s(yas--field 2 4419 4422 nil nil nil t #s(yas--field 3 4424 4428 nil nil nil t nil))) #s(yas--field 2 4419 4422 nil nil nil t #s(yas--field 3 4424 4428 nil nil nil t nil)) #s(yas--field 3 4424 4428 nil nil nil t nil)) nil 22 nil #s(yas--field 3 4424 4428 nil nil nil t nil) nil nil)) (4400 . 4469) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4400) (4400 . 4485) (#("Res" 0 3 (fontified nil)) . 4400) (4400 . 4403) (#("RespondWithJSON" 0 15 (fontified nil)) . -4400) (4400 . 4415) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4400) (undo-tree-id883 . -3) (undo-tree-id884 . -3) 4403) nil (25946 5060 996240 85000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4417) (4416 . 4417)) nil (25946 5060 996236 411000) 0 nil])
([nil nil ((4420 . 4422) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4420) (4419 . 4420)) nil (25946 5060 996235 340000) 0 nil])
([nil nil ((4425 . 4428) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-4-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face))) . 4425) (4424 . 4425)) nil (25946 5060 996234 339000) 0 nil])
([nil nil ((apply yas--snippet-revive 4424 4428 #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 3 4424 4428 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 3 4424 4428 nil nil nil t nil) nil)) (4424 . 4428) (#("tags" 0 4 (fontified nil)) . 4424) (4424 . 4428) (#("tags" 0 4 (fontified nil)) . 4424) (4424 . 4428) (#("tags" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4424) (undo-tree-id881 . -4) (undo-tree-id882 . -4) 4428) nil (25946 5060 996232 745000) 0 nil])
([nil nil ((apply yas--snippet-revive 4400 4429 #s(yas--snippet nil (#s(yas--field 1 4416 4417 nil nil nil t #s(yas--field 2 4419 4422 nil nil nil t #s(yas--field 3 4424 4428 nil nil nil t nil))) #s(yas--field 2 4419 4422 nil nil nil t #s(yas--field 3 4424 4428 nil nil nil t nil)) #s(yas--field 3 4424 4428 nil nil nil t nil)) nil 22 nil #s(yas--field 3 4424 4428 nil nil nil t nil) nil nil))) nil (25946 5060 996229 205000) 0 nil])
([nil nil ((4434 . 4436)) nil (25946 5060 996228 446000) 0 nil])
([nil nil ((5315 . 5319)) nil (25946 5060 996227 717000) 0 nil])
([nil nil ((5319 . 5320)) nil (25946 5060 996227 70000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5328 5328 nil nil nil t #s(yas--field 2 5347 5368 nil nil nil nil nil)) #s(yas--field 2 5347 5368 nil nil nil nil nil)) nil 24 nil #s(yas--field 2 5347 5368 nil nil nil nil nil) nil nil)) (5315 . 5369) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 5315) (5315 . 5379) (#("autherefreshAccessToken" 0 5 (fontified nil) 5 23 (fontified nil face tree-sitter-hl-face:variable)) . 5315) (undo-tree-id878 . 18) (5315 . 5320) (#("authenticate" 0 12 (fontified nil)) . -5315) (5315 . 5327) (#("authe" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -5315) (undo-tree-id879 . -5) (undo-tree-id880 . -5) 5320) nil (25946 5060 996225 819000) 0 nil])
([nil nil ((#("a *utils.DBConfig" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 8 (fontified nil face tree-sitter-hl-face:variable) 8 9 (fontified nil) 9 17 (fontified nil face tree-sitter-hl-face:property)) . 5329) (5328 . 5329)) nil (25946 5060 996222 181000) 0 nil])
([nil nil ((apply yas--snippet-revive 5315 5353 #s(yas--snippet nil (#s(yas--field 1 5328 5328 nil nil nil t #s(yas--field 2 5347 5368 nil nil nil nil nil)) #s(yas--field 2 5347 5368 nil nil nil nil nil)) nil 24 nil #s(yas--field 2 5347 5368 nil nil nil nil nil) nil nil))) nil (25946 5060 996221 185000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5328 5328 nil nil nil t #s(yas--field 2 5347 5368 nil nil nil nil nil)) #s(yas--field 2 5347 5368 nil nil nil nil nil)) nil 24 nil #s(yas--field 2 5347 5368 nil nil nil nil nil) nil nil))) nil (25946 5060 996220 402000) 0 nil])
([nil nil ((#("a" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . 5328) (5329 . 5346)) nil (25946 5060 996219 510000) 0 nil])
([nil nil ((5315 . 5320) (#("authenticate" 0 12 (fontified nil)) . 5315) (5315 . 5327) (#("authe" 0 5 (fontified nil)) . 5315) (5315 . 5338) (#("authenticate(${1:a *utils.DBConfig}, ${2:handler authedHandler})" 0 64 (fontified nil)) . 5315) (5315 . 5379) (#("authenticate(a *utils.DBConfig, handler authedHandler)" 0 12 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable)) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 16 (fontified t face tree-sitter-hl-face:operator) 16 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 30 (fontified t face tree-sitter-hl-face:property) 30 32 (fontified t) 32 39 (fontified t face tree-sitter-hl-face:variable) 39 40 (fontified t) 40 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t face (rainbow-delimiters-depth-4-face))) . 5315) (undo-tree-id875 . -32) (undo-tree-id876 . -32) (undo-tree-id877 . -13) (apply yas--snippet-revive 5315 5369 #s(yas--snippet nil (#s(yas--field 1 5328 5328 nil nil nil t #s(yas--field 2 5347 5368 nil nil nil nil nil)) #s(yas--field 2 5347 5368 nil nil nil nil nil)) nil 24 nil #s(yas--field 2 5347 5368 nil nil nil nil nil) nil nil))) nil (25946 5060 996218 57000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 5319) (undo-tree-id873 . -1) (undo-tree-id874 . -1)) nil (25946 5060 996214 162000) 0 nil])
([nil nil ((#("auth" 0 4 (fontified t face tree-sitter-hl-face:variable)) . 5315) (undo-tree-id871 . -4) (undo-tree-id872 . -4)) nil (25946 5060 996211 973000) 0 nil])
([nil nil ((#("func(w http.ResponseWriter, r *http.Request)" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t face (rainbow-delimiters-depth-1-face)) 5 6 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 6 12 (fontified t) 12 26 (fontified t face tree-sitter-hl-face:type) 26 28 (fontified t) 28 29 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 29 30 (fontified t) 30 31 (fontified t face tree-sitter-hl-face:operator) 31 36 (fontified t) 36 43 (fontified t face tree-sitter-hl-face:type) 43 44 (fontified t face (rainbow-delimiters-depth-1-face))) . 1178) (undo-tree-id862 . -43) (undo-tree-id863 . -43) (undo-tree-id864 . -43) (undo-tree-id865 . -43) (undo-tree-id866 . -43) (undo-tree-id867 . 1) (undo-tree-id868 . -44) (undo-tree-id869 . 40) (undo-tree-id870 . -5) 1221) nil (25946 5060 996209 403000) 0 nil])
([nil nil ((1178 . 1222)) nil (25946 5060 996202 590000) 0 nil])
([nil nil ((nil rear-nonsticky nil 857 . 858) (nil fontified nil 814 . 858) (814 . 858) 813) nil (25946 5060 996201 683000) 0 nil])
([nil nil ((#("http.HandlerFunc" 0 5 (fontified t) 5 16 (fontified t face tree-sitter-hl-face:type)) . 858) (undo-tree-id839 . -15) (undo-tree-id840 . -15) (undo-tree-id841 . -15) (undo-tree-id842 . -15) (undo-tree-id843 . -16) (undo-tree-id844 . -15) (undo-tree-id845 . -4) (undo-tree-id846 . -5) (undo-tree-id847 . -16) (undo-tree-id848 . -16) (undo-tree-id849 . -16) (undo-tree-id850 . -16) (undo-tree-id851 . -16) (undo-tree-id852 . -15) (undo-tree-id853 . -15) (undo-tree-id854 . -15) (undo-tree-id855 . -15) (undo-tree-id856 . -15) (undo-tree-id857 . -5) (undo-tree-id858 . -16) (undo-tree-id859 . -16) (undo-tree-id860 . -15) (undo-tree-id861 . -16) 873) nil (25946 5060 996197 748000) 0 nil])
([nil nil ((1150 . 1151) (t 25946 5061 41416 28000)) nil (25946 5084 14542 774000) 0 nil])
([nil nil ((2486 . 2487) (t 25946 5084 62675 492000)) nil (25946 5109 951780 367000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . 2486) (t 25946 5109 995972 808000)) nil (25946 5124 450013 706000) 0 nil])
([nil current ((2491 . 2492)) nil (25946 5124 450010 71000) 0 nil])
nil
