(undo-tree-save-format-version . 1)
"fd108d935102533f9e41ca4c597217f70526536a"
[nil nil nil nil (25935 41792 253793 796000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2 . 3) (#("
" 0 1 (fontified nil)) . -559) (1 . 560) (t 25935 40308 587901 767000)) nil (25935 41792 253791 953000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253790 89000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1) (undo-tree-id16 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2) (undo-tree-id17 . -1) 3) nil (25935 41792 253788 537000) 0 nil])
([nil nil ((1 . 10)) nil (25935 41792 253785 731000) 0 nil])
([nil nil ((12 . 15) (#(")" 0 1 (fontified nil)) . -11) (11 . 12) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -11) (11 . 12) (10 . 12)) nil (25935 41792 253784 269000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -14) (undo-tree-id13 . -1) (undo-tree-id14 . 1) (undo-tree-id15 . -1) 15) nil (25935 41792 253782 325000) 0 nil])
([nil nil ((572 . 574)) nil (25935 41792 253779 79000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -573) (undo-tree-id12 . -1) (574 . 575) (#("}" 0 1 (fontified nil)) . -574) (574 . 575)) nil (25935 41792 253777 686000) 0 nil])
([nil nil ((1 . 3)) nil (25935 41792 253774 911000) 0 nil])
([nil nil ((1 . 8)) nil (25935 41792 253773 649000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1 . 13) (#("package main" 0 12 (fontified nil)) . 1) (1 . 13) (#("package
" 0 7 (fontified nil) 7 8 (fontified nil)) . 1) (undo-tree-id9 . 1) (1 . 8) (#("package main" 0 12 (fontified nil)) . -1) (1 . 13) (#("package" 0 7 (fontified t face tree-sitter-hl-face:keyword)) . -1) (undo-tree-id10 . -7) (undo-tree-id11 . -7) 8) nil (25935 41792 253771 865000) 0 nil])
([nil nil ((13 . 14)) nil (25935 41792 253767 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14 . 15) (#("
" 0 1 (fontified nil)) . -84) (14 . 85)) nil (25935 41792 253766 395000) 0 nil])
([nil nil ((16 . 17)) nil (25935 41792 253765 233000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -16) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 17) nil (25935 41792 253763 780000) 0 nil])
([nil nil ((84 . 85)) nil (25935 41792 253706 3000) 0 nil])
([nil nil ((659 . 660)) nil (25935 41792 253699 661000) 0 nil])
([nil nil ((14 . 16) (t 25935 41792 261610 602000)) nil (25935 41910 236570 416000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -23) (23 . 24) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -23) (23 . 24) (15 . 24)) nil (25935 41910 236568 683000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 24) (24 . 25) (23 . 25)) nil (25935 41910 236567 90000) 0 nil])
([nil nil ((25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25935 41910 236565 286000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -18) (undo-tree-id35 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -19) (undo-tree-id36 . -1) 20) nil (25935 41910 236563 803000) 0 nil])
([nil nil ((18 . 20)) nil (25935 41910 236561 229000) 0 nil])
([nil nil ((26 . 29)) nil (25935 41910 236560 608000) 0 nil])
([nil nil ((30 . 32)) nil (25935 41910 236559 776000) 0 nil])
([nil nil ((33 . 41) (32 . 34) (#("\"" 0 1 (fontified nil)) . -32) (32 . 33)) nil (25935 41910 236558 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 33 42 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (33 . 42) (#("database/" 0 9 (fontified nil)) . 33) (33 . 42) (#("database" 0 8 (fontified nil)) . 33) (33 . 41) (#("database/" 0 9 (fontified nil)) . -33) (33 . 42) (#("database" 0 8 (fontified t face tree-sitter-hl-face:string)) . -33) (undo-tree-id33 . -8) (undo-tree-id34 . -8) 41) nil (25935 41910 236556 99000) 0 nil])
([nil nil ((42 . 45)) nil (25935 41910 236551 841000) 0 nil])
([nil nil ((46 . 48)) nil (25935 41910 236551 30000) 0 nil])
([nil nil ((48 . 50) (#("\"" 0 1 (fontified nil)) . -48) (48 . 49)) nil (25935 41910 236550 148000) 0 nil])
([nil nil ((49 . 51)) nil (25935 41910 236548 866000) 0 nil])
([nil nil ((52 . 54)) nil (25935 41910 236547 724000) 0 nil])
([nil nil ((55 . 62) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 41910 236546 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 55 66 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (55 . 66) (#("github.com/" 0 11 (fontified nil)) . 55) (55 . 66) (#("github." 0 7 (fontified nil face tree-sitter-hl-face:string)) . 55) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (#("github.com/" 0 11 (fontified nil)) . -62) (62 . 73)) nil (25935 41910 236544 568000) 0 nil])
([nil nil ((66 . 78)) nil (25935 41910 236541 372000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -77) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 78) nil (25935 41910 236540 159000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236535 621000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -77) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -78) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 79) nil (25935 41910 236533 627000) 0 nil])
([nil nil ((77 . 79)) nil (25935 41910 236511 205000) 0 nil])
([nil nil ((80 . 82) (t 25935 41910 239945 613000)) nil (25935 42324 259808 993000) 0 nil])
([nil nil ((82 . 84) (#("\"" 0 1 (fontified nil)) . -82) (82 . 83)) nil (25935 42324 259807 931000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -82) (undo-tree-id88 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 83)) nil (25935 42324 259806 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -80) (undo-tree-id86 . -1) (#("	" 0 1 (fontified t)) . -81) (undo-tree-id87 . -1) 82) nil (25935 42324 259805 126000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -77) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("v" 0 1 (fontified t)) . -78) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -79) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 80) nil (25935 42324 259802 731000) 0 nil])
([nil nil ((77 . 79)) nil (25935 42324 259798 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 71 80 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (71 . 80) (#("godotenv\"" 0 9 (fontified nil)) . 71) (71 . 80) (#("godotenv" 0 8 (fontified nil)) . 71) (71 . 79) (#("godotenv\"" 0 9 (fontified nil)) . -71) (71 . 80) (#("godotenv" 0 8 (fontified t)) . -71) (undo-tree-id77 . -8) (undo-tree-id78 . -8) (undo-tree-id79 . -6) 79) nil (25935 42324 259797 361000) 0 nil])
([nil nil ((80 . 82)) nil (25935 42324 259793 915000) 0 nil])
([nil nil ((82 . 83)) nil (25935 42324 259792 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 84 . 85) (#("
" 0 1 (fontified nil)) . -230) (83 . 231) 82) nil (25935 42324 259791 320000) 0 nil])
([nil nil ((#("	p
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 81) (undo-tree-id64 . -2) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -2) (undo-tree-id70 . -3) (undo-tree-id71 . -2) (undo-tree-id72 . -3) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -3) 82) nil (25935 42324 259789 206000) 0 nil])
([nil nil ((#("	\"github.com/joho/godotenv\"
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:string) 2 18 (fontified t face tree-sitter-hl-face:string) 18 27 (fontified t face tree-sitter-hl-face:string) 27 28 (fontified t)) . 53) (undo-tree-id37 . -27) (undo-tree-id38 . -28) (undo-tree-id39 . -1) (undo-tree-id40 . -18) (undo-tree-id41 . -28) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -27) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 26) (undo-tree-id55 . -26) (undo-tree-id56 . -1) (undo-tree-id57 . -27) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -28) 54) nil (25935 42324 259777 515000) 0 nil])
([nil nil ((52 . 54) (t 25935 42324 359603 65000)) nil (25935 42365 609807 672000) 0 nil])
([nil nil ((55 . 63) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25935 42365 609799 797000) 0 nil])
([nil nil ((859 . 860) (#("	" 0 1 (fontified nil)) . 858) (undo-tree-id95 . -1) (857 . 860) (t 25935 42365 613811 525000)) nil (25935 42440 264073 273000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -859) (undo-tree-id94 . -1) 860) nil (25935 42440 263998 274000) 0 nil])
([nil nil ((nil rear-nonsticky nil 860 . 861) (#("
" 0 1 (fontified nil)) . -958) (859 . 959)) nil (25935 42440 263996 250000) 0 nil])
([nil nil ((#("	go apiCfg.Worker(60);
" 0 1 (fontified t rear-nonsticky t) 1 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t) 4 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 17 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 20 (fontified t face tree-sitter-hl-face:number) 20 21 (fontified t face (rainbow-delimiters-depth-2-face)) 21 23 (fontified t)) . 860) (undo-tree-id89 . -22) (undo-tree-id90 . -23) (undo-tree-id91 . -1) (undo-tree-id92 . -11) (undo-tree-id93 . -17)) nil (25935 42440 263991 391000) 0 nil])
([nil nil ((64 . 66) (t 25935 42440 272366 292000)) nil (25935 42460 990438 156000) 0 nil])
([nil nil ((67 . 74) (66 . 68) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67)) nil (25935 42460 990431 744000) 0 nil])
([nil nil ((295 . 297) (t 25935 42460 998962 626000)) nil (25935 43014 524356 985000) 0 nil])
([nil nil ((nil rear-nonsticky nil 297 . 298) (#("
" 0 1 (fontified nil)) . -683) (297 . 684)) nil (25935 43014 524355 202000) 0 nil])
([nil nil ((nil rear-nonsticky nil 296 . 297) (#("
" 0 1 (fontified nil)) . -371) (296 . 372)) nil (25935 43014 524347 958000) 0 nil])
([nil nil ((75 . 77) (t 25935 43014 624357 441000)) nil (25935 43175 977548 802000) 0 nil])
([nil nil ((78 . 85) (77 . 79) (#("\"" 0 1 (fontified nil)) . -77) (77 . 78)) nil (25935 43175 977542 100000) 0 nil])
([nil nil ((306 . 308) (t 25935 43175 985006 525000)) nil (25935 43225 419279 251000) 0 nil])
([nil nil ((236 . 238)) nil (25935 43225 419278 169000) 0 nil])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -513) (237 . 514)) nil (25935 43225 419276 877000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 237) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) nil (25935 43225 419275 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id99 . -1)) nil (25935 43225 419269 643000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 584) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1)) nil (25935 43225 419264 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1622 . 1623) (#("
" 0 1 (fontified nil)) . -1703) (1621 . 1704) (t 25935 43225 426780 453000)) nil (25935 43379 58674 184000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1621) (undo-tree-id107 . -1)) nil (25935 43379 58669 806000) 0 nil])
([nil nil ((86 . 88) (t 25935 43379 66798 188000)) nil (25935 43602 299526 293000) 0 nil])
([nil nil ((89 . 94) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (88 . 89)) nil (25935 43602 299525 31000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -90) (undo-tree-id118 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -91) (undo-tree-id119 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -92) (undo-tree-id120 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -93) (undo-tree-id121 . -1) 94) nil (25935 43602 299522 636000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -89) (undo-tree-id117 . -1) 90) nil (25935 43602 299518 378000) 0 nil])
([nil nil ((89 . 97)) nil (25935 43602 299516 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 89 98 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (89 . 98) (#("thisweek/" 0 9 (fontified nil)) . 89) (89 . 98) (#("thisweek" 0 8 (fontified nil)) . 89) (89 . 97) (#("thisweek/" 0 9 (fontified nil)) . -89) (89 . 98) (#("thisweek" 0 8 (fontified t face tree-sitter-hl-face:string)) . -89) (undo-tree-id115 . -8) (undo-tree-id116 . -8) 97) nil (25935 43602 299514 892000) 0 nil])
([nil nil ((98 . 112)) nil (25935 43602 299510 604000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -110) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -111) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 112) nil (25935 43602 299508 951000) 0 nil])
([nil nil ((110 . 112)) nil (25935 43602 299484 605000) 0 nil])
([nil nil ((112 . 118) (t 25935 43602 400794 139000)) nil (25935 43698 619833 60000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -111) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -112) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:string)) . -113) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -114) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -115) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -116) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -117) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 118) nil (25935 43698 619830 595000) 0 nil])
([nil nil ((111 . 112)) nil (25935 43698 619803 414000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -91) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -92) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -93) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -94) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -95) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -96) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -97) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -98) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -99) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -100) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -101) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -102) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -103) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -104) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -105) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -106) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:string)) . -107) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -108) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -109) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -110) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -111) (undo-tree-id315 . -1) 112 (t 25935 43698 628776 444000)) nil (25935 43757 468120 683000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -89) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -90) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 91) nil (25935 43757 467873 802000) 0 nil])
([nil nil ((89 . 90)) nil (25935 43757 467868 221000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -89) (undo-tree-id143 . -1) 90) nil (25935 43757 467867 650000) 0 nil])
([nil nil ((89 . 95)) nil (25935 43757 467866 57000) 0 nil])
([nil nil ((95 . 101)) nil (25935 43757 467865 717000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 106 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (98 . 106) (#("backend/" 0 8 (fontified nil)) . 98) (98 . 106) (#("bac" 0 3 (fontified nil)) . 98) (98 . 101) (#("backend/" 0 8 (fontified nil)) . -98) (98 . 106) (#("bac" 0 3 (fontified t face tree-sitter-hl-face:string)) . -98) (undo-tree-id141 . -3) (undo-tree-id142 . -3) 101) nil (25935 43757 467864 615000) 0 nil])
([nil nil ((106 . 110)) nil (25935 43757 467862 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 115 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (106 . 115) (#("internal/" 0 9 (fontified nil)) . 106) (106 . 115) (#("inte" 0 4 (fontified nil)) . 106) (106 . 110) (#("internal/" 0 9 (fontified nil)) . -106) (106 . 115) (#("inte" 0 4 (fontified t face tree-sitter-hl-face:string)) . -106) (undo-tree-id139 . -4) (undo-tree-id140 . -4) 110) nil (25935 43757 467860 497000) 0 nil])
([nil nil ((115 . 120)) nil (25935 43757 467843 14000) 0 nil])
([nil nil ((1598 . 1599) (t 25938 25783 595275 947000)) nil (25938 31423 911374 250000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1598) (undo-tree-id1 . -1) 1599) nil (25938 31423 911373 46000) 0 nil])
([nil nil ((1600 . 1601) (#("	" 0 1 (fontified nil)) . 1599) (undo-tree-id0 . -1) (1598 . 1601)) nil (25938 31423 911368 555000) 0 nil])
([nil nil ((1742 . 1743) (#("	" 0 1 (fontified nil)) . 1741) (undo-tree-id39 . -1) (1740 . 1743) (t 25938 31423 927909 495000)) nil (25938 31850 791671 172000) 0 nil])
([nil nil ((1743 . 1745)) nil (25938 31850 791668 961000) 0 nil])
([nil nil ((1745 . 1751)) nil (25938 31850 791668 260000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil nil)) (1743 . 1799) (#("v1Router.Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 66 (fontified nil)) . 1743) (1743 . 1809) (#("v1Router" 0 8 (fontified nil)) . 1743) (1743 . 1751) (#("v1Router.Get" 0 12 (fontified nil)) . -1743) (1743 . 1755) (#("v1Router" 0 8 (face tree-sitter-hl-face:variable fontified t)) . -1743) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -2) (undo-tree-id38 . -2) 1751) nil (25938 31850 791667 6000) 0 nil])
([nil nil ((1756 . 1758) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1756) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 1757) (1756 . 1757)) nil (25938 31850 791662 514000) 0 nil])
([nil nil ((apply yas--snippet-revive 1743 1787 #s(yas--snippet nil (#s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1756 1758 nil nil nil t #s(yas--field 2 1760 1786 nil nil nil nil nil)) nil nil))) nil (25938 31850 791661 287000) 0 nil])
([nil nil ((#("G" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1752) (undo-tree-id32 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1753) (undo-tree-id33 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1754) (undo-tree-id34 . -1) 1755) nil (25938 31850 791660 311000) 0 nil])
([nil nil ((1752 . 1756)) nil (25938 31850 791657 654000) 0 nil])
([nil nil ((1758 . 1762)) nil (25938 31850 791656 907000) 0 nil])
([nil nil ((1762 . 1767)) nil (25938 31850 791656 146000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1775) (undo-tree-id11 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1776) (undo-tree-id12 . -1) (#("F" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1777) (undo-tree-id13 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1778) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -1779) (undo-tree-id15 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1780) (undo-tree-id16 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1781) (undo-tree-id17 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1782) (undo-tree-id18 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1783) (undo-tree-id19 . -1) (#("." 0 1 (fontified t)) . -1784) (undo-tree-id20 . -1) (#("H" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1785) (undo-tree-id21 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1786) (undo-tree-id22 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1787) (undo-tree-id23 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1788) (undo-tree-id24 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1789) (undo-tree-id25 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1790) (undo-tree-id26 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1791) (undo-tree-id27 . -1) (#("F" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1792) (undo-tree-id28 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1793) (undo-tree-id29 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1794) (undo-tree-id30 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1795) (undo-tree-id31 . -1) 1796) nil (25938 31850 791652 952000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1770) (undo-tree-id6 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1771) (undo-tree-id7 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1772) (undo-tree-id8 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1773) (undo-tree-id9 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1774) (undo-tree-id10 . -1) 1775) nil (25938 31850 791638 445000) 0 nil])
([nil nil ((1770 . 1774)) nil (25938 31850 791634 140000) 0 nil])
([nil nil ((1774 . 1778)) nil (25938 31850 791633 556000) 0 nil])
([nil nil ((1778 . 1779)) nil (25938 31850 791632 823000) 0 nil])
([nil nil ((1779 . 1785)) nil (25938 31850 791631 920000) 0 nil])
([nil nil ((1081 . 1083)) nil (25938 31850 791631 267000) 0 nil])
([nil nil ((1083 . 1096)) nil (25938 31850 791630 598000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1104) (1104 . 1105) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1104) (1104 . 1105) (1096 . 1105)) nil (25938 31850 791629 738000) 0 nil])
([nil nil ((1104 . 1110)) nil (25938 31850 791628 806000) 0 nil])
([nil nil ((1110 . 1111)) nil (25938 31850 791628 30000) 0 nil])
([nil nil ((1111 . 1116)) nil (25938 31850 791627 558000) 0 nil])
([nil nil ((1116 . 1117)) nil (25938 31850 791627 153000) 0 nil])
([nil nil ((1117 . 1119)) nil (25938 31850 791626 399000) 0 nil])
([nil nil ((apply yas--snippet-revive 1111 1125 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1111 . 1125) (#("ResponseWriter" 0 14 (fontified nil)) . 1111) (1111 . 1125) (#("Response" 0 8 (fontified nil)) . 1111) (1111 . 1119) (#("ResponseWriter" 0 14 (fontified nil)) . -1111) (1111 . 1125) (#("Response" 0 8 (face tree-sitter-hl-face:type fontified t)) . -1111) (undo-tree-id4 . -8) (undo-tree-id5 . -8) 1119) nil (25938 31850 791625 11000) 0 nil])
([nil nil ((1125 . 1130)) nil (25938 31850 791621 903000) 0 nil])
([nil nil ((1130 . 1133)) nil (25938 31850 791621 281000) 0 nil])
([nil nil ((1133 . 1135)) nil (25938 31850 791620 633000) 0 nil])
([nil nil ((1135 . 1138)) nil (25938 31850 791620 149000) 0 nil])
([nil nil ((apply yas--snippet-revive 1135 1142 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1135 . 1142) (#("Request" 0 7 (fontified nil)) . 1135) (1135 . 1142) (#("Req" 0 3 (fontified nil)) . 1135) (1135 . 1138) (#("Request" 0 7 (fontified nil)) . -1135) (1135 . 1142) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1135) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 1138) nil (25938 31850 791618 759000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1145) (1145 . 1146) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1145) (1145 . 1146) (1143 . 1146)) nil (25938 31850 791605 665000) 0 nil])
([nil nil ((1146 . 1147) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1146) (1146 . 1147) (1145 . 1147)) nil (25938 31850 791600 860000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1145 . 1146) (1145 . 1146) 1472 (t 25938 31850 806872 780000)) nil (25938 32270 736993 70000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1146) (undo-tree-id1675 . -1) 1147) nil (25938 32270 736991 843000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1414 . 1415) (1414 . 1415) 1146) nil (25938 32270 736990 451000) 0 nil])
([nil nil ((268 . 270)) nil (25938 32270 736989 375000) 0 nil])
([nil nil ((271 . 275) (270 . 272) (#("\"" 0 1 (fontified nil)) . -270) (270 . 271)) nil (25938 32270 736988 671000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -271) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -272) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -273) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -274) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) 275) nil (25938 32270 736987 284000) 0 nil])
([nil nil ((271 . 274)) nil (25938 32270 736981 136000) 0 nil])
([nil nil ((274 . 280)) nil (25938 32270 736980 612000) 0 nil])
([nil nil ((#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . -279) (undo-tree-id1666 . -1) 280) nil (25938 32270 736979 931000) 0 nil])
([nil nil ((279 . 283)) nil (25938 32270 736978 639000) 0 nil])
([nil nil ((283 . 287)) nil (25938 32270 736978 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 280 288 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (280 . 288) (#("backend/" 0 8 (fontified nil)) . 280) (280 . 288) (#("backend" 0 7 (fontified nil)) . 280) (280 . 287) (#("backend/" 0 8 (fontified nil)) . -280) (280 . 288) (#("backend" 0 7 (face tree-sitter-hl-face:string fontified t)) . -280) (undo-tree-id1664 . -7) (undo-tree-id1665 . -7) 287) nil (25938 32270 736977 208000) 0 nil])
([nil nil ((288 . 293)) nil (25938 32270 736974 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 288 297 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (288 . 297) (#("internal/" 0 9 (fontified nil)) . 288) (288 . 297) (#("inter" 0 5 (fontified nil)) . 288) (288 . 293) (#("internal/" 0 9 (fontified nil)) . -288) (288 . 297) (#("inter" 0 5 (face tree-sitter-hl-face:string fontified t)) . -288) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) 293) nil (25938 32270 736973 682000) 0 nil])
([nil nil ((297 . 301)) nil (25938 32270 736971 427000) 0 nil])
([nil nil ((apply yas--snippet-revive 297 305 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (297 . 305) (#("database" 0 8 (fontified nil)) . 297) (297 . 305) (#("data" 0 4 (fontified nil)) . 297) (297 . 301) (#("database" 0 8 (fontified nil)) . -297) (297 . 305) (#("data" 0 4 (face tree-sitter-hl-face:string fontified t)) . -297) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) 301) nil (25938 32270 736970 273000) 0 nil])
([nil nil ((863 . 866)) nil (25938 32270 736967 848000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -863) (undo-tree-id1657 . -1) (#("	" 0 1 (fontified t)) . -864) (undo-tree-id1658 . -1) (#("	" 0 1 (fontified t)) . -865) (undo-tree-id1659 . -1) 866) nil (25938 32270 736966 934000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -913) (undo-tree-id1651 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -914) (undo-tree-id1652 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -915) (undo-tree-id1653 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -916) (undo-tree-id1654 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -917) (undo-tree-id1655 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -918) (undo-tree-id1656 . -1) 919) nil (25938 32270 736963 828000) 0 nil])
([nil nil ((913 . 921)) nil (25938 32270 736958 546000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1095) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1096) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1097) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1098) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1099) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1100) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1101) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("," 0 1 (fontified t)) . -1102) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#(" " 0 1 (fontified t)) . -1103) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1104) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("," 0 1 (fontified t)) . -1105) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#(" " 0 1 (fontified t)) . -1106) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1107) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1108) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1109) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1110) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1111) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (#("
" 0 1 (fontified t)) . -1112) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (#("	" 0 1 (fontified t)) . -1113) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("	" 0 1 (fontified t)) . -1114) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1115) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . 1) (undo-tree-id1650 . -1) 1116) nil (25938 32270 736953 225000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1074) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("d" 0 1 (fontified t)) . -1075) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1076) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1077) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (#("
" 0 1 (fontified t)) . -1078) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("	" 0 1 (fontified t)) . -1079) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("	" 0 1 (fontified t)) . -1080) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1081) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (#(" " 0 1 (fontified nil)) . -1082) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1083) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1084) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1085) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1086) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (#(" " 0 1 (fontified t)) . -1087) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1088) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("
" 0 1 (fontified t)) . -1089) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (#("	" 0 1 (fontified t)) . -1090) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("	" 0 1 (fontified t)) . -1091) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (#("	" 0 1 (fontified t)) . -1092) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1093) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1094) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) 1095) nil (25938 32270 736837 817000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1053) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1054) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1055) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("," 0 1 (fontified t)) . -1056) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (#(" " 0 1 (fontified t)) . -1057) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("4" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1058) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1059) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1060) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (#("," 0 1 (fontified t)) . -1061) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#(" " 0 1 (fontified t)) . -1062) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("\"" 0 1 (fontified t)) . -1063) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (#("U" 0 1 (fontified t)) . -1064) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (#("n" 0 1 (fontified t)) . -1065) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("a" 0 1 (fontified t)) . -1066) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("u" 0 1 (fontified t)) . -1067) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("t" 0 1 (fontified t)) . -1068) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("h" 0 1 (fontified t)) . -1069) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("o" 0 1 (fontified t)) . -1070) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (#("r" 0 1 (fontified t)) . -1071) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (#("i" 0 1 (fontified t)) . -1072) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#("z" 0 1 (fontified t)) . -1073) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) 1074) nil (25938 32270 736733 696000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1032) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1033) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1034) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1035) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1036) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("." 0 1 (fontified t)) . -1037) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1038) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1039) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1040) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1041) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1042) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1043) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1044) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("W" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1045) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1046) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1047) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("h" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1048) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1049) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1050) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1051) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1052) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 1053) nil (25938 32270 736626 422000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1011) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("	" 0 1 (fontified t)) . -1012) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1013) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("f" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1014) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t)) . -1015) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1016) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1017) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1018) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#(" " 0 1 (fontified t)) . -1019) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("!" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1020) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1021) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#(" " 0 1 (fontified t)) . -1022) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1023) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1024) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -1025) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#(" " 0 1 (fontified t)) . -1026) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1027) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("
" 0 1 (fontified t)) . -1028) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (#("	" 0 1 (fontified t)) . -1029) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("	" 0 1 (fontified t)) . -1030) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (#("	" 0 1 (fontified t)) . -1031) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) 1032) nil (25938 32270 736489 235000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -990) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -991) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("K" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -992) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -993) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -994) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -995) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -996) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("." 0 1 (fontified t)) . -997) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -998) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -999) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("x" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1000) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("," 0 1 (fontified t)) . -1001) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#(" " 0 1 (fontified t)) . -1002) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1003) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1004) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1005) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1006) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1007) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1008) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1009) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("
" 0 1 (fontified t)) . -1010) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) 1011) nil (25938 32270 736300 7000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -969) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -970) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#(" " 0 1 (fontified t)) . -971) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#(":" 0 1 (fontified t)) . -972) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -973) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -974) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -975) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("." 0 1 (fontified t)) . -976) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -977) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -978) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("." 0 1 (fontified t)) . -979) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -980) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -981) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -982) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -983) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -984) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -985) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -986) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -987) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -988) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("A" 0 1 (face tree-sitter-hl-face:property fontified t)) . -989) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) 990) nil (25938 32270 736085 235000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -962) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -963) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -964) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -965) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("," 0 1 (fontified t)) . -966) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#(" " 0 1 (fontified t)) . -967) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -968) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 969) nil (25938 32270 735880 316000) 0 nil])
([nil nil ((nil rear-nonsticky nil 963 . 964) (#("
" 0 1 (fontified nil)) . -1130) (962 . 1131) 961) nil (25938 32270 735660 566000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 960) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -1) (undo-tree-id67 . -2) 961) nil (25938 32270 735659 137000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -961) (undo-tree-id46 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -962) (undo-tree-id47 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -963) (undo-tree-id48 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -964) (undo-tree-id49 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -965) (undo-tree-id50 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -966) (undo-tree-id51 . -1) (#(" " 0 1 (fontified t)) . -967) (undo-tree-id52 . -1) 968) nil (25938 32270 735645 759000) 0 nil])
([nil nil ((961 . 963)) nil (25938 32270 735639 870000) 0 nil])
([nil nil ((306 . 308)) nil (25938 32270 735639 140000) 0 nil])
([nil nil ((309 . 312) (308 . 310) (#("\"" 0 1 (fontified nil)) . -308) (308 . 309)) nil (25938 32270 735638 328000) 0 nil])
([nil nil ((312 . 314)) nil (25938 32270 735637 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 309 320 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (309 . 320) (#("github.com/" 0 11 (fontified nil)) . 309) (309 . 320) (#("githu" 0 5 (fontified nil)) . 309) (309 . 314) (#("github.com/" 0 11 (fontified nil)) . -309) (309 . 320) (#("githu" 0 5 (face tree-sitter-hl-face:string fontified t)) . -309) (undo-tree-id44 . -5) (undo-tree-id45 . -5) 314) nil (25938 32270 735635 421000) 0 nil])
([nil nil ((320 . 326)) nil (25938 32270 735632 213000) 0 nil])
([nil nil ((apply yas--snippet-revive 320 331 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (320 . 331) (#("golang-jwt/" 0 11 (fontified nil)) . 320) (320 . 331) (#("golang" 0 6 (fontified nil)) . 320) (320 . 326) (#("golang-jwt/" 0 11 (fontified nil)) . -320) (320 . 331) (#("golang" 0 6 (face tree-sitter-hl-face:string fontified t)) . -320) (undo-tree-id42 . -6) (undo-tree-id43 . -6) 326) nil (25938 32270 735630 812000) 0 nil])
([nil nil ((331 . 334)) nil (25938 32270 735626 974000) 0 nil])
([nil nil ((apply yas--snippet-revive 331 335 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (331 . 335) (#("jwt/" 0 4 (fontified nil)) . 331) (331 . 335) (#("jwt" 0 3 (fontified nil)) . 331) (331 . 334) (#("jwt/" 0 4 (fontified nil)) . -331) (331 . 335) (#("jwt" 0 3 (face tree-sitter-hl-face:string fontified t)) . -331) (undo-tree-id40 . -3) (undo-tree-id41 . -3) 334) nil (25938 32270 735625 175000) 0 nil])
([nil nil ((335 . 337)) nil (25938 32270 735607 182000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:string fontified t)) . -336) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) 337 (t 25938 32270 749898 224000)) nil (25938 32319 340684 421000) 0 nil])
([nil nil ((336 . 337)) nil (25938 32319 340663 192000) 0 nil])
([nil nil ((991 . 994) (t 25938 32319 356019 601000)) nil (25938 32355 550552 867000) 0 nil])
([nil nil ((nil rear-nonsticky nil 995 . 996) (#("
" 0 1 (fontified nil)) . -1028) (994 . 1029) 993) nil (25938 32355 550551 741000) 0 nil])
([nil nil ((996 . 998)) nil (25938 32355 550550 432000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -991) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (#("	" 0 1 (fontified t)) . -992) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (#("	" 0 1 (fontified t)) . -993) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 994) nil (25938 32355 550546 704000) 0 nil])
([nil nil ((1031 . 1045) (t 25938 32355 564110 288000)) nil (25938 33158 393279 720000) 0 nil])
([nil nil ((1202 . 1203)) nil (25938 33158 393278 789000) 0 nil])
([nil nil ((1203 . 1204)) nil (25938 33158 393277 444000) 0 nil])
([nil nil ((1132 . 1134)) nil (25938 33158 393276 720000) 0 nil])
([nil nil ((1173 . 1175)) nil (25938 33158 393276 66000) 0 nil])
([nil nil ((1210 . 1213)) nil (25938 33158 393275 354000) 0 nil])
([nil nil ((1213 . 1220)) nil (25938 33158 393274 487000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1210) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("	" 0 1 (fontified t)) . -1211) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (#("	" 0 1 (fontified t)) . -1212) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1213) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1214) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1215) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1216) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1217) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1218) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("." 0 1 (fontified t)) . -1219) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) 1220) nil (25938 33158 393272 319000) 0 nil])
([nil nil ((1210 . 1213)) nil (25938 33158 393257 266000) 0 nil])
([nil nil ((1213 . 1216)) nil (25938 33158 393256 403000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1213) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1214) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1215) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) 1216) nil (25938 33158 393254 998000) 0 nil])
([nil nil ((1284 . 1295)) nil (25938 33158 393249 234000) 0 nil])
([nil nil ((1295 . 1303)) nil (25938 33158 393248 213000) 0 nil])
([nil nil ((26 . 29) (#("fm" 0 2 (face tree-sitter-hl-face:string fontified t)) . -26) 28 (29 . 32) (49 . 52) (50 . 56) (51 . 53) (55 . 62) (#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . 67) (69 . 70) (#("ntext" 0 5 (face tree-sitter-hl-face:string fontified t)) . 69) (84 . 121) (85 . 86) (122 . 123) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . 229) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . 231) (233 . 240) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . 233) (235 . 241) (#("uuid" 0 4 (face tree-sitter-hl-face:string fontified t)) . 235) (undo-tree-id1764 . -2) (#("/joho" 0 5 (face tree-sitter-hl-face:string fontified t)) . 253) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . 261) (263 . 265) (#("tenv\"
	\"thisweek/back" 0 5 (face tree-sitter-hl-face:string fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 17 (face tree-sitter-hl-face:string fontified t) 17 21 (face tree-sitter-hl-face:string fontified t)) . 263) (#("nd" 0 2 (face tree-sitter-hl-face:string fontified t)) . 285) (288 . 290) (#("nternal/" 0 8 (face tree-sitter-hl-face:string fontified t)) . 289) (#("atabase" 0 7 (face tree-sitter-hl-face:string fontified t)) . 298) (#("golang-" 0 7 (face tree-sitter-hl-face:string fontified t)) . -320) 327 (328 . 331) (#("wt" 0 2 (face tree-sitter-hl-face:string fontified t)) . -328) 330 (331 . 335) (#("jw" 0 2 (face tree-sitter-hl-face:string fontified t)) . -331) 333 (334 . 336) (#("/" 0 1 (face tree-sitter-hl-face:string fontified t)) . -334) 335 (#("5" 0 1 (face tree-sitter-hl-face:string fontified t)) . -336) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1329 1335 nil nil nil t nil)) nil 9 nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil nil)) (1300 . 1323) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1300) (1300 . 1328) (#("New" 0 3 (fontified nil)) . 1300) (1300 . 1303) (#("NewDecoder" 0 10 (fontified nil)) . -1300) (1300 . 1310) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1300) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) 1303) nil (25938 33158 393244 302000) 0 nil])
([nil nil ((1330 . 1331) (#("r io.Reader" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 11 (face tree-sitter-hl-face:property fontified nil)) . 1330) (1329 . 1330)) nil (25938 33158 393234 349000) 0 nil])
([nil nil ((apply yas--snippet-revive 1331 1335 #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil)) (1331 . 1335) (#("Body" 0 4 (fontified nil)) . 1331) (1331 . 1335) (#("Body" 0 4 (fontified nil)) . -1331) (1331 . 1335)) nil (25938 33158 393233 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 1318 1336 #s(yas--snippet nil (#s(yas--field 1 1329 1335 nil nil nil t nil)) nil 9 nil #s(yas--field 1 1329 1335 nil nil nil t nil) nil nil))) nil (25938 33158 393231 433000) 0 nil])
([nil nil ((1336 . 1337)) nil (25938 33158 393230 766000) 0 nil])
([nil nil ((1337 . 1339)) nil (25938 33158 393230 33000) 0 nil])
([nil nil ((1339 . 1352)) nil (25938 33158 393229 389000) 0 nil])
([nil nil ((apply yas--snippet-revive 1348 1356 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1348 . 1356) (#("database" 0 8 (fontified nil)) . 1348) (1348 . 1356) (#("data" 0 4 (fontified nil)) . 1348) (1348 . 1352) (#("database" 0 8 (fontified nil)) . -1348) (1348 . 1356) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1348) (undo-tree-id1762 . -4) (undo-tree-id1763 . -4) 1352) nil (25938 33158 393227 853000) 0 nil])
([nil nil ((1356 . 1357)) nil (25938 33158 393224 238000) 0 nil])
([nil nil ((apply yas--snippet-revive 1357 1373 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (1357 . 1373) (#("CreateUserParams" 0 16 (fontified nil)) . 1357) (1357 . 1373) (#("CreateUserParams" 0 16 (fontified nil)) . -1357) (1357 . 1373)) nil (25938 33158 393223 325000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1374) (1374 . 1375) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1374) (1374 . 1375) (1373 . 1375)) nil (25938 33158 393221 554000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1339) (undo-tree-id1757 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1340) (undo-tree-id1758 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1341) (undo-tree-id1759 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1342) (undo-tree-id1760 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1343) (undo-tree-id1761 . -1) 1344) nil (25938 33158 393219 734000) 0 nil])
([nil nil ((1339 . 1355)) nil (25938 33158 393215 428000) 0 nil])
([nil nil ((1386 . 1388)) nil (25938 33158 393214 899000) 0 nil])
([nil nil ((1388 . 1395)) nil (25938 33158 393214 57000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1388) (undo-tree-id1750 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1389) (undo-tree-id1751 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1390) (undo-tree-id1752 . -1) (#(" " 0 1 (fontified t)) . -1391) (undo-tree-id1753 . -1) (#(":" 0 1 (fontified t)) . -1392) (undo-tree-id1754 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1393) (undo-tree-id1755 . -1) (#(" " 0 1 (fontified t)) . -1394) (undo-tree-id1756 . -1) 1395) nil (25938 33158 393212 470000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1392) (1392 . 1393) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1392) (1392 . 1393) (1388 . 1393)) nil (25938 33158 393205 879000) 0 nil])
([nil nil ((1392 . 1395)) nil (25938 33158 393204 461000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1392) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1393) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1394) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 1395) nil (25938 33158 393203 67000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1391) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1392)) nil (25938 33158 393197 144000) 0 nil])
([nil nil ((1391 . 1398)) nil (25938 33158 393194 711000) 0 nil])
([nil nil ((1398 . 1403)) nil (25938 33158 393193 722000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1398) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1399) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1400) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1401) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (#("." 0 1 (fontified t)) . -1402) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) 1403) nil (25938 33158 393192 97000) 0 nil])
([nil nil ((1398 . 1410)) nil (25938 33158 393183 811000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1413 1430 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil nil)) (1406 . 1419) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 1406) (1406 . 1424) (#("deco" 0 4 (fontified nil)) . 1406) (1406 . 1410) (#("Decode" 0 6 (fontified nil)) . -1406) (1406 . 1412) (#("deco" 0 4 (face tree-sitter-hl-face:type fontified t)) . -1406) (undo-tree-id1730 . -4) (undo-tree-id1731 . -4) 1410) nil (25938 33158 393182 572000) 0 nil])
([nil nil ((1414 . 1420) (#("v any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:variable fontified nil)) . 1414) (1413 . 1414)) nil (25938 33158 393179 126000) 0 nil])
([nil nil ((apply yas--snippet-revive 1414 1430 #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil)) (1414 . 1430) (#("createUserObject" 0 16 (fontified nil)) . 1414) (1414 . 1430) (#("create" 0 6 (fontified nil)) . 1414) (1414 . 1420) (#("createUserObject" 0 16 (fontified nil)) . -1414) (1414 . 1430) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1414) (undo-tree-id1728 . -6) (undo-tree-id1729 . -6) 1420) nil (25938 33158 393177 233000) 0 nil])
([nil nil ((apply yas--snippet-revive 1406 1431 #s(yas--snippet nil (#s(yas--field 1 1413 1430 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1413 1430 nil nil nil t nil) nil nil))) nil (25938 33158 393173 984000) 0 nil])
([nil nil ((1431 . 1438)) nil (25938 33158 393173 242000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1445) (1445 . 1446) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1445) (1445 . 1446) (1438 . 1446)) nil (25938 33158 393172 77000) 0 nil])
([nil nil ((1446 . 1448) (1447 . 1448) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1446) (1446 . 1448) (1445 . 1447)) nil (25938 33158 393170 202000) 0 nil])
([nil nil ((1448 . 1454)) nil (25938 33158 393169 38000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1471 1472 nil nil nil t #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil))) #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil)) #s(yas--field 3 1479 1481 nil nil nil t nil)) nil 15 nil #s(yas--field 3 1479 1481 nil nil nil t nil) nil nil)) (1454 . 1515) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1454) (1454 . 1530) (#("RespondWithError" 0 16 (fontified nil)) . -1454) (1454 . 1470)) nil (25938 33158 393168 23000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1472) (1471 . 1472)) nil (25938 33158 393166 526000) 0 nil])
([nil nil ((1475 . 1477) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1475) (1474 . 1475)) nil (25938 33158 393165 694000) 0 nil])
([nil nil ((1479 . 1481) (#("\"" 0 1 (fontified nil)) . -1479) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 1480) (1479 . 1480)) nil (25938 33158 393164 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 1454 1482 #s(yas--snippet nil (#s(yas--field 1 1471 1472 nil nil nil t #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil))) #s(yas--field 2 1474 1477 nil nil nil t #s(yas--field 3 1479 1481 nil nil nil t nil)) #s(yas--field 3 1479 1481 nil nil nil t nil)) nil 15 nil #s(yas--field 3 1479 1481 nil nil nil t nil) nil nil))) nil (25938 33158 393163 201000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1476) (undo-tree-id1727 . -1) 1477) nil (25938 33158 393162 487000) 0 nil])
([nil nil ((1476 . 1477)) nil (25938 33158 393161 139000) 0 nil])
([nil nil ((1480 . 1488)) nil (25938 33158 393160 686000) 0 nil])
([nil nil ((#("I" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1480) (undo-tree-id1719 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1481) (undo-tree-id1720 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1482) (undo-tree-id1721 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1483) (undo-tree-id1722 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1484) (undo-tree-id1723 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1485) (undo-tree-id1724 . -1) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1486) (undo-tree-id1725 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1487) (undo-tree-id1726 . -1) 1488) nil (25938 33158 393158 905000) 0 nil])
([nil nil ((1480 . 1491)) nil (25938 33158 393152 342000) 0 nil])
([nil nil ((1496 . 1498)) nil (25938 33158 393151 933000) 0 nil])
([nil nil ((1498 . 1504)) nil (25938 33158 393151 366000) 0 nil])
([nil nil ((1504 . 1507)) nil (25938 33158 393150 735000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1243) (1243 . 1244) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1243) (1243 . 1244) (1242 . 1244)) nil (25938 33158 393149 975000) 0 nil])
([nil nil ((1243 . 1244)) nil (25938 33158 393148 422000) 0 nil])
([nil nil ((1242 . 1243)) nil (25938 33158 393147 702000) 0 nil])
([nil nil ((1245 . 1249)) nil (25938 33158 393146 835000) 0 nil])
([nil nil ((apply yas--snippet-revive 1246 1255 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (1246 . 1255) (#("apiConfig" 0 9 (fontified nil)) . 1246) (1246 . 1255) (#("api" 0 3 (fontified nil)) . 1246) (1246 . 1249) (#("apiConfig" 0 9 (fontified nil)) . -1246) (1246 . 1255) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1246) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) 1249) nil (25938 33158 393143 103000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1512) (undo-tree-id1840 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1513) (undo-tree-id1841 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1514) (undo-tree-id1842 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1515) (undo-tree-id1843 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1516) (undo-tree-id1844 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1517) (undo-tree-id1845 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1518) (undo-tree-id1846 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1519) (undo-tree-id1847 . -1) (#("." 0 1 (fontified t)) . -1520) (undo-tree-id1848 . -1) 1521 (t 25938 33158 406753 554000)) nil (25938 33287 200551 143000) 0 nil])
([nil nil ((1512 . 1518)) nil (25938 33287 200543 521000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1514) (undo-tree-id1836 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1515) (undo-tree-id1837 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1516) (undo-tree-id1838 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1517) (undo-tree-id1839 . -1) 1518) nil (25938 33287 200542 243000) 0 nil])
([nil nil ((1514 . 1516)) nil (25938 33287 200538 161000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1514) (undo-tree-id1834 . -1) (#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1515) (undo-tree-id1835 . -1) 1516) nil (25938 33287 200537 83000) 0 nil])
([nil nil ((1514 . 1517)) nil (25938 33287 200534 939000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) #s(yas--field 2 1535 1551 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil nil)) (1517 . 1579) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 1517) (1517 . 1589) (#("CreateUser" 0 10 (fontified nil)) . -1517) (1517 . 1527)) nil (25938 33287 200533 761000) 0 nil])
([nil nil ((1529 . 1530) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 1529) (1528 . 1529)) nil (25938 33287 200532 318000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1528) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1529) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 1530) nil (25938 33287 200530 835000) 0 nil])
([nil nil ((1528 . 1533)) nil (25938 33287 200527 45000) 0 nil])
([nil nil ((apply yas--snippet-revive 1530 1533 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) nil)) (1530 . 1533) (#("ctx" 0 3 (fontified nil)) . 1530) (1530 . 1533) (#("ctx" 0 3 (fontified nil)) . 1530) (1530 . 1533) (#("ctx" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1530) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) 1533) nil (25938 33287 200525 712000) 0 nil])
([nil nil ((1536 . 1541) (#("arg database.CreateUserParams" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 29 (face tree-sitter-hl-face:property fontified nil)) . 1536) (1535 . 1536)) nil (25938 33287 200522 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1535 1551 #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil)) (1535 . 1551) (#("createUserObject" 0 16 (fontified nil)) . 1535) (1535 . 1551) (#("create" 0 6 (fontified nil)) . 1535) (1535 . 1541) (#("createUserObject" 0 16 (fontified nil)) . -1535) (1535 . 1551) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1535) (undo-tree-id1826 . -6) (undo-tree-id1827 . -6) 1541) nil (25938 33287 200520 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 1517 1552 #s(yas--snippet nil (#s(yas--field 1 1528 1533 nil nil nil t #s(yas--field 2 1535 1551 nil nil nil t nil)) #s(yas--field 2 1535 1551 nil nil nil t nil)) nil 17 nil #s(yas--field 2 1535 1551 nil nil nil t nil) nil nil))) nil (25938 33287 200517 298000) 0 nil])
([nil nil ((1552 . 1553)) nil (25938 33287 200516 533000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1552) (undo-tree-id1825 . -1) 1553) nil (25938 33287 200515 525000) 0 nil])
([nil nil ((1512 . 1515)) nil (25938 33287 200514 38000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1512) (undo-tree-id1822 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1513) (undo-tree-id1823 . -1) (#(" " 0 1 (fontified t)) . -1514) (undo-tree-id1824 . -1) 1515) nil (25938 33287 200512 923000) 0 nil])
([nil nil ((1512 . 1513)) nil (25938 33287 200509 919000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1512) (undo-tree-id1821 . -1) 1513) nil (25938 33287 200509 70000) 0 nil])
([nil nil ((1512 . 1516)) nil (25938 33287 200507 556000) 0 nil])
([nil nil ((1516 . 1517)) nil (25938 33287 200506 835000) 0 nil])
([nil nil ((1517 . 1525)) nil (25938 33287 200506 96000) 0 nil])
([nil nil ((1565 . 1566)) nil (25938 33287 200505 744000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1565) (undo-tree-id1820 . -1) 1566) nil (25938 33287 200504 993000) 0 nil])
([nil nil ((1565 . 1567)) nil (25938 33287 200503 745000) 0 nil])
([nil nil ((1567 . 1571)) nil (25938 33287 200503 199000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1570) (undo-tree-id1819 . -1) 1571) nil (25938 33287 200502 577000) 0 nil])
([nil nil ((1570 . 1577)) nil (25938 33287 200500 676000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1574) (undo-tree-id1816 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1575) (undo-tree-id1817 . -1) (#(" " 0 1 (fontified t)) . -1576) (undo-tree-id1818 . -1) 1577) nil (25938 33287 200499 665000) 0 nil])
([nil nil ((1574 . 1580)) nil (25938 33287 200496 633000) 0 nil])
([nil nil ((1580 . 1581)) nil (25938 33287 200495 864000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1582) (1582 . 1583) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1582) (1582 . 1583) (1581 . 1583)) nil (25938 33287 200494 801000) 0 nil])
([nil nil ((1583 . 1585) (1584 . 1585) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1583) (1583 . 1585) (1582 . 1584)) nil (25938 33287 200493 133000) 0 nil])
([nil nil ((1585 . 1590)) nil (25938 33287 200491 911000) 0 nil])
([nil nil ((#("-" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1589) (undo-tree-id1815 . -1) 1590) nil (25938 33287 200490 952000) 0 nil])
([nil nil ((1589 . 1590)) nil (25938 33287 200489 396000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1584) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1585) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("." 0 1 (fontified t)) . -1586) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1587) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1588) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#("." 0 1 (fontified t)) . -1589) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) 1590) nil (25938 33287 200487 643000) 0 nil])
([nil nil ((1584 . 1592)) nil (25938 33287 200477 751000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1609 1610 nil nil nil t #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil))) #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil)) #s(yas--field 3 1617 1630 nil nil nil t nil)) nil 20 nil #s(yas--field 3 1617 1630 nil nil nil t nil) nil nil)) (1592 . 1653) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1592) (1592 . 1668) (#("RespondWithError" 0 16 (fontified nil)) . -1592) (1592 . 1608)) nil (25938 33287 200476 634000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1610) (undo-tree-id1802 . -21) (1609 . 1610)) nil (25938 33287 200474 950000) 0 nil])
([nil nil ((1613 . 1615) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1613) (undo-tree-id1801 . -8) (1612 . 1613)) nil (25938 33287 200473 141000) 0 nil])
([nil nil ((1618 . 1625) (1617 . 1619) (#("\"" 0 1 (fontified nil)) . -1617) (undo-tree-id1799 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 1618) (undo-tree-id1800 . -10) (1617 . 1618)) nil (25938 33287 200471 78000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1622) (undo-tree-id1796 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1623) (undo-tree-id1797 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1624) (undo-tree-id1798 . -1) 1625) nil (25938 33287 200467 694000) 0 nil])
([nil nil ((1622 . 1629)) nil (25938 33287 200464 158000) 0 nil])
([nil nil ((apply yas--snippet-revive 1592 1631 #s(yas--snippet nil (#s(yas--field 1 1609 1610 nil nil nil t #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil))) #s(yas--field 2 1612 1615 nil nil nil t #s(yas--field 3 1617 1630 nil nil nil t nil)) #s(yas--field 3 1617 1630 nil nil nil t nil)) nil 20 nil #s(yas--field 3 1617 1630 nil nil nil t nil) nil nil))) nil (25938 33287 200463 352000) 0 nil])
([nil nil ((1631 . 1632)) nil (25938 33287 200462 269000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 1631) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1)) nil (25938 33287 200459 254000) 0 nil])
([nil nil ((1634 . 1636) (t 25938 33287 214523 114000)) nil (25938 33330 461808 793000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1634) (undo-tree-id1895 . -1) (#("	" 0 1 (fontified t)) . -1635) (undo-tree-id1896 . -1) 1636) nil (25938 33330 461807 715000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . 1640) (1640 . 1641) (#("}" 0 1 (fontified nil)) . -1640) (1634 . 1641)) nil (25938 33330 461805 468000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1641) (1641 . 1642) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1641) (1641 . 1642) (1640 . 1642)) nil (25938 33330 461804 20000) 0 nil])
([nil nil ((1642 . 1644) (1643 . 1644) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1642) (1642 . 1644) (1641 . 1643)) nil (25938 33330 461802 693000) 0 nil])
([nil nil ((1644 . 1646)) nil (25938 33330 461801 484000) 0 nil])
([nil nil ((1646 . 1650)) nil (25938 33330 461800 676000) 0 nil])
([nil nil ((1507 . 1510)) nil (25938 33330 461800 104000) 0 nil])
([nil nil ((1510 . 1517)) nil (25938 33330 461799 542000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1516) (undo-tree-id1894 . -1) 1517) nil (25938 33330 461798 588000) 0 nil])
([nil nil ((1659 . 1662)) nil (25938 33330 461797 81000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1675 1676 nil nil nil t #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil))) #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil)) #s(yas--field 3 1683 1687 nil nil nil t nil)) nil 21 nil #s(yas--field 3 1683 1687 nil nil nil t nil) nil nil)) (1659 . 1728) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 1659) (1659 . 1744) (#("Res" 0 3 (fontified nil)) . 1659) (1659 . 1662) (#("RespondWithJSON" 0 15 (fontified nil)) . -1659) (1659 . 1674) (#("Res" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1659) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) 1662) nil (25938 33330 461795 737000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1676) (undo-tree-id1891 . -21) (1675 . 1676)) nil (25938 33330 461791 30000) 0 nil])
([nil nil ((1679 . 1681) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1679) (undo-tree-id1890 . -8) (1678 . 1679)) nil (25938 33330 461789 326000) 0 nil])
([nil nil ((1684 . 1686) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1684) (undo-tree-id1887 . -19) (undo-tree-id1888 . -8) (undo-tree-id1889 . -9) (1683 . 1684)) nil (25938 33330 461787 477000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1685) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 1686) nil (25938 33330 461784 82000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1683) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1684) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) 1685) nil (25938 33330 461775 608000) 0 nil])
([nil nil ((1683 . 1687)) nil (25938 33330 461748 973000) 0 nil])
([nil nil ((apply yas--snippet-revive 1659 1688 #s(yas--snippet nil (#s(yas--field 1 1675 1676 nil nil nil t #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil))) #s(yas--field 2 1678 1681 nil nil nil t #s(yas--field 3 1683 1687 nil nil nil t nil)) #s(yas--field 3 1683 1687 nil nil nil t nil)) nil 21 nil #s(yas--field 3 1683 1687 nil nil nil t nil) nil nil))) nil (25938 33330 461744 962000) 0 nil])
([nil nil ((1519 . 1521) (t 25938 33330 476744 885000)) nil (25938 33403 839454 58000) 0 nil])
([nil nil ((1521 . 1528)) nil (25938 33403 839453 397000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1521) (undo-tree-id1915 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1522) (undo-tree-id1916 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1523) (undo-tree-id1917 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1524) (undo-tree-id1918 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1525) (undo-tree-id1919 . -1) (#(" " 0 1 (fontified t)) . -1526) (undo-tree-id1920 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1527) (undo-tree-id1921 . -1) 1528) nil (25938 33403 839451 936000) 0 nil])
([nil nil ((1521 . 1534)) nil (25938 33403 839446 625000) 0 nil])
([nil nil ((1534 . 1543)) nil (25938 33403 839446 155000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1539) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1540) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1541) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1542) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) 1543) nil (25938 33403 839445 80000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1543) (1543 . 1544) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1543) (1543 . 1544) (1539 . 1544)) nil (25938 33403 839439 163000) 0 nil])
([nil nil ((103 . 105)) nil (25938 33403 839438 395000) 0 nil])
([nil nil ((106 . 110) (105 . 107) (#("\"" 0 1 (fontified nil)) . -105) (105 . 106)) nil (25938 33403 839437 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 110 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (106 . 110) (#("time" 0 4 (fontified nil)) . 106) (106 . 110) (#("time" 0 4 (fontified nil)) . 106) (106 . 110) (#("time" 0 4 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id1905 . -4) (undo-tree-id1906 . -4) 110) nil (25938 33403 839436 424000) 0 nil])
([nil nil ((1552 . 1554)) nil (25938 33403 839433 777000) 0 nil])
([nil nil ((1554 . 1560)) nil (25938 33403 839433 355000) 0 nil])
([nil nil ((apply yas--snippet-revive 1554 1570 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (1554 . 1570) (#("createUserObject" 0 16 (fontified nil)) . 1554) (1554 . 1570) (#("create" 0 6 (fontified nil)) . 1554) (1554 . 1560) (#("createUserObject" 0 16 (fontified nil)) . -1554) (1554 . 1570) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1554) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) 1560) nil (25938 33403 839431 761000) 0 nil])
([nil nil ((1570 . 1571)) nil (25938 33403 839429 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 1571 1580 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (1571 . 1580) (#("CreatedAt" 0 9 (fontified nil)) . 1571) (1571 . 1580) (#("CreatedAt" 0 9 (fontified nil)) . -1571) (1571 . 1580)) nil (25938 33403 839428 92000) 0 nil])
([nil nil ((1580 . 1587)) nil (25938 33403 839427 127000) 0 nil])
([nil nil ((apply yas--snippet-revive 1583 1592 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1583 . 1592) (#("timestamp" 0 9 (fontified nil)) . 1583) (1583 . 1592) (#("time" 0 4 (fontified nil)) . 1583) (1583 . 1587) (#("timestamp" 0 9 (fontified nil)) . -1583) (1583 . 1592) (#("time" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1583) (undo-tree-id1901 . -4) (undo-tree-id1902 . -4) 1587) nil (25938 33403 839425 963000) 0 nil])
([nil nil ((1592 . 1594)) nil (25938 33403 839423 193000) 0 nil])
([nil nil ((1594 . 1600)) nil (25938 33403 839422 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 1594 1610 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (1594 . 1610) (#("createUserObject" 0 16 (fontified nil)) . 1594) (1594 . 1610) (#("create" 0 6 (fontified nil)) . 1594) (1594 . 1600) (#("createUserObject" 0 16 (fontified nil)) . -1594) (1594 . 1610) (#("create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1594) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) 1600) nil (25938 33403 839421 413000) 0 nil])
([nil nil ((1610 . 1615)) nil (25938 33403 839418 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 1611 1620 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (1611 . 1620) (#("UpdatedAt" 0 9 (fontified nil)) . 1611) (1611 . 1620) (#("Upda" 0 4 (fontified nil)) . 1611) (1611 . 1615) (#("UpdatedAt" 0 9 (fontified nil)) . -1611) (1611 . 1620) (#("Upda" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1611) (undo-tree-id1897 . -4) (undo-tree-id1898 . -4) 1615) nil (25938 33403 839416 649000) 0 nil])
([nil nil ((1620 . 1632)) nil (25938 33403 839404 272000) 0 nil])
([nil nil ((1687 . 1689) (t 25938 33403 855681 347000)) nil (25938 33455 726765 48000) 0 nil])
([nil nil ((1689 . 1692)) nil (25938 33455 726764 66000) 0 nil])
([nil nil ((#("/" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1689) (undo-tree-id1923 . -1) (#("/" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1690) (undo-tree-id1924 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1691) (undo-tree-id1925 . -1) 1692) nil (25938 33455 726762 494000) 0 nil])
([nil nil ((1689 . 1707)) nil (25938 33455 726759 90000) 0 nil])
([nil nil ((1707 . 1719)) nil (25938 33455 726758 182000) 0 nil])
([nil nil ((1719 . 1733)) nil (25938 33455 726757 429000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1732) (undo-tree-id1922 . -1) 1733) nil (25938 33455 726756 307000) 0 nil])
([nil nil ((1732 . 1741)) nil (25938 33455 726745 102000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1731) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#("s" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1732) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("e" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1733) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (#("r" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -1734) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) 1735 (t 25938 33455 742908 136000)) nil (25938 33460 200982 382000) 0 nil])
([nil nil ((1731 . 1737)) nil (25938 33460 200954 294000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1729) (1729 . 1730) (#(")" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -1729) (1729 . 1730) (1727 . 1730) (t 25938 33460 218122 700000)) nil (25938 33473 612312 386000) 0 nil])
([nil nil ((1729 . 1732)) nil (25938 33473 612311 310000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1751) (1751 . 1752) (#(")" 0 1 (face tree-sitter-hl-face:comment fontified nil)) . -1751) (1751 . 1752) (1749 . 1752)) nil (25938 33473 612310 112000) 0 nil])
([nil nil ((1751 . 1754)) nil (25938 33473 612306 214000) 0 nil])
([nil nil ((1874 . 1876) (t 25938 33473 628058 499000)) nil (25938 33501 651830 155000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1887) (1887 . 1888) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1887) (1887 . 1888) (1876 . 1888)) nil (25938 33501 651829 199000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1882) (1882 . 1883) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1882) (1882 . 1883) (1880 . 1883)) nil (25938 33501 651827 397000) 0 nil])
([nil nil ((1882 . 1885)) nil (25938 33501 651826 335000) 0 nil])
([nil nil ((1885 . 1888)) nil (25938 33501 651825 653000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1884) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1885) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1886) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1887) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) 1888) nil (25938 33501 651824 120000) 0 nil])
([nil nil ((1884 . 1887)) nil (25938 33501 651817 763000) 0 nil])
([nil nil ((apply yas--snippet-revive 1884 1893 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1884 . 1893) (#("apiConfig" 0 9 (fontified nil)) . 1884) (1884 . 1893) (#("api" 0 3 (fontified nil)) . 1884) (1884 . 1887) (#("apiConfig" 0 9 (fontified nil)) . -1884) (1884 . 1893) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1884) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) 1887) nil (25938 33501 651814 410000) 0 nil])
([nil nil ((1901 . 1916) (t 25938 33501 659987 703000)) nil (25938 33792 169358 367000) 0 nil])
([nil nil ((apply yas--snippet-revive 1908 1922 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (1908 . 1922) (#("ResponseWriter" 0 14 (fontified nil)) . 1908) (1908 . 1922) (#("Response" 0 8 (fontified nil)) . 1908) (1908 . 1916) (#("ResponseWriter" 0 14 (fontified nil)) . -1908) (1908 . 1922) (#("Response" 0 8 (face tree-sitter-hl-face:type fontified t)) . -1908) (undo-tree-id2037 . -8) (undo-tree-id2038 . -8) 1916) nil (25938 33792 169356 814000) 0 nil])
([nil nil ((1922 . 1926)) nil (25938 33792 169349 512000) 0 nil])
([nil nil ((1926 . 1939)) nil (25938 33792 169348 13000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1942) (1942 . 1943) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1942) (1942 . 1943) (1940 . 1943)) nil (25938 33792 169345 715000) 0 nil])
([nil nil ((1943 . 1944) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1943) (1943 . 1944) (1942 . 1944)) nil (25938 33792 169336 186000) 0 nil])
([nil nil ((1874 . 1876)) nil (25938 33792 169335 240000) 0 nil])
([nil nil ((1876 . 1881)) nil (25938 33792 169334 449000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1880) (undo-tree-id2036 . -1) 1881) nil (25938 33792 169333 849000) 0 nil])
([nil nil ((1880 . 1885)) nil (25938 33792 169332 434000) 0 nil])
([nil nil ((1876 . 1881)) nil (25938 33792 169332 4000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1891) (1891 . 1892) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1891) (1891 . 1892) (1890 . 1892)) nil (25938 33792 169331 140000) 0 nil])
([nil nil ((1962 . 1967)) nil (25938 33792 169330 205000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1966) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) 1967) nil (25938 33792 169329 525000) 0 nil])
([nil nil ((1966 . 1968)) nil (25938 33792 169327 806000) 0 nil])
([nil nil ((1968 . 1981)) nil (25938 33792 169327 330000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1986) (1986 . 1987) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1986) (1986 . 1987) (1981 . 1987)) nil (25938 33792 169326 313000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1978) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1979) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1980) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1981) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1982) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1983) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1984) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1985) (undo-tree-id2030 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1986) (undo-tree-id2031 . -1) (undo-tree-id2032 . 1) (undo-tree-id2033 . -1) 1987) nil (25938 33792 169323 973000) 0 nil])
([nil nil ((1978 . 1981)) nil (25938 33792 169310 738000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1989 1990 nil nil nil t nil)) nil 30 nil #s(yas--field 1 1989 1990 nil nil nil t nil) nil nil)) (1978 . 2001) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1978) (1978 . 2006) (#("New" 0 3 (fontified nil)) . 1978) (1978 . 1981) (#("NewDecoder" 0 10 (fontified nil)) . -1978) (1978 . 1988) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1978) (undo-tree-id2014 . -3) (undo-tree-id2015 . -3) 1981) nil (25938 33792 169309 651000) 0 nil])
([nil nil ((#("r io.Reader" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 11 (face tree-sitter-hl-face:property fontified nil)) . 1990) (1989 . 1990)) nil (25938 33792 169307 220000) 0 nil])
([nil nil ((apply yas--snippet-revive 1978 1991 #s(yas--snippet nil (#s(yas--field 1 1989 1990 nil nil nil t nil)) nil 30 nil #s(yas--field 1 1989 1990 nil nil nil t nil) nil nil))) nil (25938 33792 169306 699000) 0 nil])
([nil nil ((1991 . 1992)) nil (25938 33792 169306 234000) 0 nil])
([nil nil ((1992 . 1994)) nil (25938 33792 169305 890000) 0 nil])
([nil nil ((1990 . 1995)) nil (25938 33792 169305 456000) 0 nil])
([nil nil ((1997 . 1999)) nil (25938 33792 169305 28000) 0 nil])
([nil nil ((1999 . 2009)) nil (25938 33792 169304 437000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2006) (undo-tree-id2011 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2007) (undo-tree-id2012 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2008) (undo-tree-id2013 . -1) 2009) nil (25938 33792 169303 353000) 0 nil])
([nil nil ((2006 . 2007)) nil (25938 33792 169300 924000) 0 nil])
([nil nil ((2007 . 2010)) nil (25938 33792 169300 469000) 0 nil])
([nil nil ((apply yas--snippet-revive 2007 2047 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2007 . 2047) (#("database.GetUserByEmailAndPasswordParams" 0 40 (fontified nil)) . 2007) (2007 . 2047) (#("Get" 0 3 (fontified nil)) . 2007) (2007 . 2010) (#("database.GetUserByEmailAndPasswordParams" 0 40 (fontified nil)) . -2007) (2007 . 2047) (#("Get" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2007) (undo-tree-id2009 . -3) (undo-tree-id2010 . -3) 2010) nil (25938 33792 169299 398000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2048) (2048 . 2049) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2048) (2048 . 2049) (2047 . 2049)) nil (25938 33792 169296 692000) 0 nil])
([nil nil ((2049 . 2051)) nil (25938 33792 169295 774000) 0 nil])
([nil nil ((2051 . 2060)) nil (25938 33792 169295 254000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2051) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2052) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2053) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#(" " 0 1 (fontified t)) . -2054) (undo-tree-id2003 . -1) (#(":" 0 1 (fontified t)) . -2055) (undo-tree-id2004 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2056) (undo-tree-id2005 . -1) (#(" " 0 1 (fontified t)) . -2057) (undo-tree-id2006 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2058) (undo-tree-id2007 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2059) (undo-tree-id2008 . -1) 2060) nil (25938 33792 169293 369000) 0 nil])
([nil nil ((2051 . 2059)) nil (25938 33792 169285 595000) 0 nil])
([nil nil ((2059 . 2066)) nil (25938 33792 169285 52000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2061) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2062) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2063) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2064) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (#("." 0 1 (fontified t)) . -2065) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) 2066) nil (25938 33792 169283 599000) 0 nil])
([nil nil ((2061 . 2069)) nil (25938 33792 169276 534000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2068) (undo-tree-id1986 . -1) 2069) nil (25938 33792 169275 845000) 0 nil])
([nil nil ((2068 . 2069)) nil (25938 33792 169274 561000) 0 nil])
([nil nil ((2069 . 2072)) nil (25938 33792 169274 55000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil nil nil)) nil 32 nil #s(yas--field 1 2076 2081 nil nil nil nil nil) nil nil)) (2069 . 2082) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 2069) (2069 . 2087) (#("Dec" 0 3 (fontified nil)) . 2069) (2069 . 2072) (#("Decode" 0 6 (fontified nil)) . -2069) (2069 . 2075) (#("Dec" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2069) (undo-tree-id1984 . -3) (undo-tree-id1985 . -3) 2072) nil (25938 33792 169272 588000) 0 nil])
([nil nil ((apply yas--snippet-revive 2069 2082 #s(yas--snippet nil (#s(yas--field 1 2076 2081 nil nil nil nil nil)) nil 32 nil #s(yas--field 1 2076 2081 nil nil nil nil nil) nil nil))) nil (25938 33792 169269 884000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2076) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (#(" " 0 1 (fontified t)) . -2077) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2078) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2079) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2080) (undo-tree-id1983 . -1) 2081) nil (25938 33792 169268 636000) 0 nil])
([nil nil ((2076 . 2080)) nil (25938 33792 169262 118000) 0 nil])
([nil nil ((2081 . 2092)) nil (25938 33792 169261 754000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2095) (2095 . 2096) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2095) (2095 . 2096) (2092 . 2096)) nil (25938 33792 169260 986000) 0 nil])
([nil nil ((2096 . 2098) (2097 . 2098) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2096) (2096 . 2098) (2095 . 2097)) nil (25938 33792 169259 971000) 0 nil])
([nil nil ((2098 . 2104)) nil (25938 33792 169258 859000) 0 nil])
([nil nil ((2097 . 2099) (#("		" 0 2 (fontified nil)) . 2096) (undo-tree-id1974 . -2) (2098 . 2099)) nil (25938 33792 169257 764000) 0 nil])
([nil nil ((2096 . 2098)) nil (25938 33792 169256 321000) 0 nil])
([nil nil ((2098 . 2104)) nil (25938 33792 169255 873000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2121 2122 nil nil nil t #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil))) #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil)) #s(yas--field 3 2129 2142 nil nil nil t nil)) nil 33 nil #s(yas--field 3 2129 2142 nil nil nil t nil) nil nil)) (2104 . 2165) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2104) (2104 . 2180) (#("RespondWithError" 0 16 (fontified nil)) . -2104) (2104 . 2120)) nil (25938 33792 169255 69000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2122) (undo-tree-id1971 . -21) (undo-tree-id1972 . -2) (undo-tree-id1973 . -3) (2121 . 2122)) nil (25938 33792 169253 881000) 0 nil])
([nil nil ((2125 . 2127) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2125) (undo-tree-id1968 . -8) (undo-tree-id1969 . -5) (undo-tree-id1970 . -6) (2124 . 2125)) nil (25938 33792 169250 569000) 0 nil])
([nil nil ((2130 . 2141) (2129 . 2131) (#("\"" 0 1 (fontified nil)) . -2129) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 2130) (undo-tree-id1965 . -10) (undo-tree-id1966 . -4) (undo-tree-id1967 . -5) (2129 . 2130)) nil (25938 33792 169246 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 2104 2143 #s(yas--snippet nil (#s(yas--field 1 2121 2122 nil nil nil t #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil))) #s(yas--field 2 2124 2127 nil nil nil t #s(yas--field 3 2129 2142 nil nil nil t nil)) #s(yas--field 3 2129 2142 nil nil nil t nil)) nil 33 nil #s(yas--field 3 2129 2142 nil nil nil t nil) nil nil))) nil (25938 33792 169232 4000) 0 nil])
([nil nil ((1874 . 1876) (t 25938 33792 185992 988000)) nil (25938 33923 233044 4000) 0 nil])
([nil nil ((1876 . 1887)) nil (25938 33923 233043 309000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1881) (undo-tree-id2125 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1882) (undo-tree-id2126 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1883) (undo-tree-id2127 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1884) (undo-tree-id2128 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1885) (undo-tree-id2129 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1886) (undo-tree-id2130 . -1) 1887) nil (25938 33923 233042 191000) 0 nil])
([nil nil ((1881 . 1890)) nil (25938 33923 233037 419000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1891) (1891 . 1892) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1891) (1891 . 1892) (1890 . 1892)) nil (25938 33923 233036 692000) 0 nil])
([nil nil ((1891 . 1894)) nil (25938 33923 233035 817000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1893) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) 1894) nil (25938 33923 233035 87000) 0 nil])
([nil nil ((1893 . 1906)) nil (25938 33923 233033 28000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1910) (1910 . 1911) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1910) (1910 . 1911) (1906 . 1911)) nil (25938 33923 233031 861000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1899) (undo-tree-id2122 . -1) 1900) nil (25938 33923 233030 535000) 0 nil])
([nil nil ((1899 . 1900)) nil (25938 33923 233029 305000) 0 nil])
([nil nil ((1911 . 1913)) nil (25938 33923 233028 716000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1911) (undo-tree-id2120 . -1) (#(" " 0 1 (fontified t)) . -1912) (undo-tree-id2121 . -1) 1913) nil (25938 33923 233027 912000) 0 nil])
([nil nil ((1911 . 1915)) nil (25938 33923 233024 425000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1913) (undo-tree-id2118 . -1) (#(" " 0 1 (fontified t)) . -1914) (undo-tree-id2119 . -1) 1915) nil (25938 33923 233023 746000) 0 nil])
([nil nil ((1913 . 1915)) nil (25938 33923 233021 957000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1913) (undo-tree-id2116 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1914) (undo-tree-id2117 . -1) 1915) nil (25938 33923 233021 267000) 0 nil])
([nil nil ((1913 . 1916)) nil (25938 33923 233019 418000) 0 nil])
([nil nil ((1916 . 1917)) nil (25938 33923 233018 844000) 0 nil])
([nil nil ((1917 . 1919)) nil (25938 33923 233018 442000) 0 nil])
([nil nil ((1919 . 1922)) nil (25938 33923 233017 908000) 0 nil])
([nil nil ((1912 . 1914)) nil (25938 33923 233017 304000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1927) (1927 . 1928) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1927) (1927 . 1928) (1925 . 1928)) nil (25938 33923 233016 339000) 0 nil])
([nil nil ((1928 . 1929) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1928) (1928 . 1929) (1927 . 1929)) nil (25938 33923 233015 268000) 0 nil])
([nil nil ((1929 . 1936)) nil (25938 33923 233014 435000) 0 nil])
([nil nil ((1936 . 1937)) nil (25938 33923 233014 104000) 0 nil])
([nil nil ((1937 . 1945)) nil (25938 33923 233013 764000) 0 nil])
([nil nil ((1945 . 1948)) nil (25938 33923 233013 115000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1956 1957 nil nil nil t nil)) nil 34 nil #s(yas--field 1 1956 1957 nil nil nil t nil) nil nil)) (1945 . 1968) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 1945) (1945 . 1973) (#("New" 0 3 (fontified nil)) . 1945) (1945 . 1948) (#("NewDecoder" 0 10 (fontified nil)) . -1945) (1945 . 1955) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1945) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) 1948) nil (25938 33923 233011 832000) 0 nil])
([nil nil ((#("r io.Reader" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 11 (face tree-sitter-hl-face:property fontified nil)) . 1957) (1956 . 1957)) nil (25938 33923 233008 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 1945 1958 #s(yas--snippet nil (#s(yas--field 1 1956 1957 nil nil nil t nil)) nil 34 nil #s(yas--field 1 1956 1957 nil nil nil t nil) nil nil))) nil (25938 33923 233008 240000) 0 nil])
([nil nil ((1958 . 1959)) nil (25938 33923 233007 701000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1958) (undo-tree-id2113 . -1) 1959) nil (25938 33923 233007 78000) 0 nil])
([nil nil ((1958 . 1960)) nil (25938 33923 233005 859000) 0 nil])
([nil nil ((1960 . 1967)) nil (25938 33923 233005 355000) 0 nil])
([nil nil ((1967 . 1969) (#(" " 0 1 (fontified nil)) . 1966) (undo-tree-id2112 . -1) (1967 . 1968)) nil (25938 33923 233004 619000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1960) (undo-tree-id2103 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1961) (undo-tree-id2104 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1962) (undo-tree-id2105 . -1) (#(" " 0 1 (fontified t)) . -1963) (undo-tree-id2106 . -1) (#(":" 0 1 (fontified t)) . -1964) (undo-tree-id2107 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1965) (undo-tree-id2108 . -1) (#("
" 0 1 (fontified t)) . -1966) (undo-tree-id2109 . -1) (#("	" 0 1 (fontified t)) . -1967) (undo-tree-id2110 . -1) (#("	" 0 1 (fontified t)) . -1968) (undo-tree-id2111 . -1) 1969) nil (25938 33923 233001 742000) 0 nil])
([nil nil ((1960 . 1976)) nil (25938 33923 232995 283000) 0 nil])
([nil nil ((apply yas--snippet-revive 1972 1979 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1972 . 1979) (#("Decoder" 0 7 (fontified nil)) . 1972) (1972 . 1979) (#("Deco" 0 4 (fontified nil)) . 1972) (1972 . 1976) (#("Decoder" 0 7 (fontified nil)) . -1972) (1972 . 1979) (#("Deco" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1972) (undo-tree-id2101 . -4) (undo-tree-id2102 . -4) 1976) nil (25938 33923 232993 823000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1967) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1968) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1969) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1970) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("." 0 1 (fontified t)) . -1971) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1972) (undo-tree-id2094 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1973) (undo-tree-id2095 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1974) (undo-tree-id2096 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1975) (undo-tree-id2097 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1976) (undo-tree-id2098 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1977) (undo-tree-id2099 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1978) (undo-tree-id2100 . -1) 1979) nil (25938 33923 232989 540000) 0 nil])
([nil nil ((1967 . 1975)) nil (25938 33923 232976 912000) 0 nil])
([nil nil ((#("
func parseJSON(payload *interface{}, r io.Reader) {
	decoder := json.NewDecoder(r)
	return decoder.
}
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 15 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 23 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 23 24 (fontified t) 24 25 (face tree-sitter-hl-face:operator fontified t) 25 34 (face tree-sitter-hl-face:keyword fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 38 (fontified t) 38 39 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 39 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 49 (face tree-sitter-hl-face:type fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 61 (face tree-sitter-hl-face:variable fontified t) 61 62 (fontified t) 62 64 (face tree-sitter-hl-face:operator fontified t) 64 65 (fontified t) 65 69 (face tree-sitter-hl-face:variable fontified t) 69 70 (fontified t) 70 80 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (face tree-sitter-hl-face:variable fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 91 (face tree-sitter-hl-face:keyword fontified t) 91 92 (fontified t) 92 99 (face tree-sitter-hl-face:variable fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-1-face) fontified t) 102 103 (fontified t)) . 1875) (undo-tree-id2039 . -101) (undo-tree-id2040 . 3) (undo-tree-id2041 . -102) (undo-tree-id2042 . -100) (undo-tree-id2043 . -54) (undo-tree-id2044 . -81) (undo-tree-id2045 . -51) (undo-tree-id2046 . -84) (undo-tree-id2047 . -51) (undo-tree-id2048 . -84) (undo-tree-id2049 . -98) (undo-tree-id2050 . -51) (undo-tree-id2051 . -84) (undo-tree-id2052 . -99) (undo-tree-id2053 . -99) (undo-tree-id2054 . -99) (undo-tree-id2055 . -99) (undo-tree-id2056 . -99) (undo-tree-id2057 . -102) (undo-tree-id2058 . -100) (undo-tree-id2059 . -51) (undo-tree-id2060 . -84) (undo-tree-id2061 . -100) (undo-tree-id2062 . 3) (undo-tree-id2063 . -100) (undo-tree-id2064 . -100) (undo-tree-id2065 . -100) (undo-tree-id2066 . -101) (undo-tree-id2067 . -100) (undo-tree-id2068 . -100) (undo-tree-id2069 . -102) (undo-tree-id2070 . -99) (undo-tree-id2071 . -99) (undo-tree-id2072 . -99) (undo-tree-id2073 . -99) (undo-tree-id2074 . -6) (undo-tree-id2075 . -99) (undo-tree-id2076 . -99) (undo-tree-id2077 . -101) (undo-tree-id2078 . -101) (undo-tree-id2079 . -103) (undo-tree-id2080 . -101) (undo-tree-id2081 . -101) (undo-tree-id2082 . -101) (undo-tree-id2083 . -103)) nil (25938 33923 232973 257000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2257 . 2258) (nil fontified nil 2155 . 2258) (2155 . 2258) 2096 (t 25938 33923 250036 727000)) nil (25938 34057 4093 982000) 0 nil])
([nil nil ((#("
func parseJSON(payload *interface{}, r io.Reader) {
	decoder := json.NewDecoder(r)
	return decoder.
}
" 0 1 (fontified nil) 1 5 (face tree-sitter-hl-face:keyword fontified nil) 5 6 (fontified nil) 6 15 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 23 (face tree-sitter-hl-face:variable fontified nil) 23 24 (fontified nil) 24 25 (face tree-sitter-hl-face:operator fontified nil) 25 34 (face tree-sitter-hl-face:keyword fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 36 (face (rainbow-delimiters-depth-3-face) fontified nil) 36 38 (fontified nil) 38 39 (face tree-sitter-hl-face:variable fontified nil) 39 40 (fontified nil) 40 42 (face tree-sitter-hl-face:variable fontified nil) 42 43 (fontified nil) 43 49 (face tree-sitter-hl-face:property fontified nil) 49 50 (face (rainbow-delimiters-depth-2-face) fontified nil) 50 51 (fontified nil) 51 52 (face (rainbow-delimiters-depth-2-face) fontified nil) 52 54 (fontified nil) 54 61 (face tree-sitter-hl-face:variable fontified nil) 61 62 (fontified nil) 62 64 (face tree-sitter-hl-face:operator fontified nil) 64 65 (fontified nil) 65 69 (face tree-sitter-hl-face:variable fontified nil) 69 70 (fontified nil) 70 80 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified nil) 80 81 (face (rainbow-delimiters-depth-3-face) fontified nil) 81 82 (face tree-sitter-hl-face:variable fontified nil) 82 83 (face (rainbow-delimiters-depth-3-face) fontified nil) 83 85 (fontified nil) 85 91 (face tree-sitter-hl-face:keyword fontified nil) 91 92 (fontified nil) 92 99 (face tree-sitter-hl-face:variable fontified nil) 99 101 (fontified nil) 101 102 (face (rainbow-delimiters-depth-2-face) fontified nil) 102 103 (rear-nonsticky nil fontified nil)) . 2155) (undo-tree-id3388 . -103) (nil fontified t 2254 . 2256) (nil fontified t 2247 . 2254) (nil fontified t 2246 . 2247) (nil fontified t 2240 . 2246) (nil fontified t 2238 . 2240) (nil fontified t 2237 . 2238) (nil fontified t 2236 . 2237) (nil fontified t 2235 . 2236) (nil fontified t 2225 . 2235) (nil fontified t 2224 . 2225) (nil fontified t 2220 . 2224) (nil fontified t 2219 . 2220) (nil fontified t 2217 . 2219) (nil fontified t 2216 . 2217) (nil fontified t 2209 . 2216) (nil fontified t 2207 . 2209) (nil fontified t 2206 . 2207) (nil fontified t 2205 . 2206) (nil fontified t 2204 . 2205) (nil fontified t 2198 . 2204) (nil fontified t 2197 . 2198) (nil fontified t 2195 . 2197) (nil fontified t 2194 . 2195) (nil fontified t 2193 . 2194) (nil fontified t 2191 . 2193) (nil fontified t 2190 . 2191) (nil fontified t 2189 . 2190) (nil fontified t 2180 . 2189) (nil fontified t 2179 . 2180) (nil fontified t 2178 . 2179) (nil fontified t 2171 . 2178) (nil fontified t 2170 . 2171) (nil fontified t 2161 . 2170) (nil fontified t 2160 . 2161) (nil fontified t 2156 . 2160) (nil fontified t 2155 . 2156) (nil rear-nonsticky t 2257 . 2258)) nil (25938 34057 4092 85000) 0 nil])
([nil nil ((2076 . 2077) (t 25938 33923 250036 727000)) nil (25938 34057 4086 756000) 0 nil])
([nil nil ((2158 . 2160)) nil (25938 34057 4086 212000) 0 nil])
([nil nil ((2160 . 2175)) nil (25938 34057 4085 648000) 0 nil])
([nil nil ((apply yas--snippet-revive 2171 2179 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2171 . 2179) (#("database" 0 8 (fontified nil)) . 2171) (2171 . 2179) (#("data" 0 4 (fontified nil)) . 2171) (2171 . 2175) (#("database" 0 8 (fontified nil)) . -2171) (2171 . 2179) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2171) (undo-tree-id3386 . -4) (undo-tree-id3387 . -4) 2175) nil (25938 34057 4084 730000) 0 nil])
([nil nil ((2179 . 2183)) nil (25938 34057 4082 483000) 0 nil])
([nil nil ((apply yas--snippet-revive 2180 2211 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (2180 . 2211) (#("GetUserByEmailAndPasswordParams" 0 31 (fontified nil)) . 2180) (2180 . 2211) (#("get" 0 3 (fontified nil)) . 2180) (2180 . 2183) (#("GetUserByEmailAndPasswordParams" 0 31 (fontified nil)) . -2180) (2180 . 2211) (#("get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -2180) (undo-tree-id3384 . -3) (undo-tree-id3385 . -3) 2183) nil (25938 34057 4081 396000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2212) (2212 . 2213) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2212) (2212 . 2213) (2211 . 2213)) nil (25938 34057 4078 443000) 0 nil])
([nil nil ((2212 . 2216)) nil (25938 34057 4077 731000) 0 nil])
([nil nil ((2217 . 2218)) nil (25938 34057 4077 259000) 0 nil])
([nil nil ((2003 . 2009)) nil (25938 34057 4076 893000) 0 nil])
([nil nil ((2222 . 2228)) nil (25938 34057 4076 225000) 0 nil])
([nil nil ((2087 . 2090)) nil (25938 34057 4075 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 2083 2093 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (2083 . 2093) (#("userParams" 0 10 (fontified nil)) . 2083) (2083 . 2093) (#("userPar" 0 7 (fontified nil)) . 2083) (2083 . 2090) (#("userParams" 0 10 (fontified nil)) . -2083) (2083 . 2093) (#("userPar" 0 7 (face tree-sitter-hl-face:variable fontified t)) . -2083) (undo-tree-id3382 . -7) (undo-tree-id3383 . -7) 2090) nil (25938 34057 4074 532000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2216) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2217) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2218) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2219) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2220) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2221) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2222) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2223) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . 1) (undo-tree-id3333 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2224) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -2225) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -2226) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -2227) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (#("P" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2228) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2229) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2230) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2231) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2232) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2233) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2234) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . 1) (undo-tree-id3378 . -1) (#(";" 0 1 (fontified t)) . -2235) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) 2236) nil (25938 34057 4067 839000) 0 nil])
([nil nil ((2216 . 2217)) nil (25938 34057 4011 749000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2196) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2197) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2198) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2199) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2200) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2201) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2202) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2203) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2204) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2205) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (#("A" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2206) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2207) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2208) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2209) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2210) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2211) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2212) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2213) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2214) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2215) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2216) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) 2217) nil (25938 34057 4007 441000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2190) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (#("." 0 1 (fontified t)) . -2191) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2192) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2193) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2194) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2195) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) 2196) nil (25938 34057 3969 12000) 0 nil])
([nil nil ((2190 . 2192)) nil (25938 34057 3957 393000) 0 nil])
([nil nil ((apply yas--snippet-revive 2192 2199 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (2192 . 2199) (#("Queries" 0 7 (fontified nil)) . 2192) (2192 . 2199) (#("Queries" 0 7 (fontified nil)) . -2192) (2192 . 2199)) nil (25938 34057 3956 484000) 0 nil])
([nil nil ((2199 . 2200)) nil (25938 34057 3955 213000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2199) (undo-tree-id3212 . -1) 2200) nil (25938 34057 3954 597000) 0 nil])
([nil nil ((2199 . 2202)) nil (25938 34057 3953 526000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2200) (undo-tree-id3210 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2201) (undo-tree-id3211 . -1) 2202) nil (25938 34057 3952 843000) 0 nil])
([nil nil ((2200 . 2203)) nil (25938 34057 3951 40000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2200) (undo-tree-id3207 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2201) (undo-tree-id3208 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2202) (undo-tree-id3209 . -1) 2203) nil (25938 34057 3950 76000) 0 nil])
([nil nil ((2200 . 2201)) nil (25938 34057 3946 350000) 0 nil])
([nil nil ((2201 . 2203)) nil (25938 34057 3945 906000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2191) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (#("Q" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2192) (undo-tree-id3196 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2193) (undo-tree-id3197 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2194) (undo-tree-id3198 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2195) (undo-tree-id3199 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2196) (undo-tree-id3200 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2197) (undo-tree-id3201 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2198) (undo-tree-id3202 . -1) (#("." 0 1 (fontified t)) . -2199) (undo-tree-id3203 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2200) (undo-tree-id3204 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2201) (undo-tree-id3205 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2202) (undo-tree-id3206 . -1) 2203) nil (25938 34057 3943 791000) 0 nil])
([nil nil ((2191 . 2192)) nil (25938 34057 3934 420000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2196 2212 nil nil nil nil nil)) nil 40 nil #s(yas--field 1 2196 2212 nil nil nil nil nil) nil nil)) (2192 . 2213) (#("New(${1:db database.DBTX})" 0 26 (fontified nil)) . 2192) (2192 . 2218) (#("New" 0 3 (fontified nil)) . -2192) (2192 . 2195)) nil (25938 34057 3933 689000) 0 nil])
([nil nil ((apply yas--snippet-revive 2192 2213 #s(yas--snippet nil (#s(yas--field 1 2196 2212 nil nil nil nil nil)) nil 40 nil #s(yas--field 1 2196 2212 nil nil nil nil nil) nil nil))) nil (25938 34057 3932 309000) 0 nil])
([nil nil ((#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2192) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2193) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2194) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2195) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2196) (undo-tree-id2844 . 1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2197) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (#(" " 0 1 (fontified t)) . -2198) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2199) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2200) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2201) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2202) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2203) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2204) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2205) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2206) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (#("." 0 1 (fontified t)) . -2207) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2208) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (#("B" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2209) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2210) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (#("X" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2211) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2212) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . 1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) 2213) nil (25938 34057 3918 508000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2182) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2183) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2184) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2185) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2186) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2187) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2188) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2189) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2190) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (#("." 0 1 (fontified t)) . -2191) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) 2192) nil (25938 34057 3548 406000) 0 nil])
([nil nil ((2182 . 2183)) nil (25938 34057 2848 989000) 0 nil])
([nil nil ((2183 . 2185) (t 25938 34057 22072 323000)) nil (25938 34154 148651 821000) 0 nil])
([nil nil ((apply yas--snippet-revive 2185 2187 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (2185 . 2187) (#("DB" 0 2 (fontified nil)) . 2185) (2185 . 2187) (#("DB" 0 2 (fontified nil)) . -2185) (2185 . 2187)) nil (25938 34154 148650 762000) 0 nil])
([nil nil ((2187 . 2189)) nil (25938 34154 148649 624000) 0 nil])
([nil nil ((#("-" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2187) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (#("." 0 1 (fontified t)) . -2188) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) 2189) nil (25938 34154 148648 794000) 0 nil])
([nil nil ((2187 . 2188)) nil (25938 34154 148645 688000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2214 2217 nil nil nil t #s(yas--field 2 2219 2229 nil nil nil t nil)) #s(yas--field 2 2219 2229 nil nil nil t nil)) nil 42 nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil nil)) (2188 . 2280) (#("GetUserByEmailAndPassword(${1:ctx context.Context}, ${2:arg database.GetUserByEmailAndPasswordParams})" 0 102 (fontified nil)) . 2188) (2188 . 2290) (#("GetUserByEmailAndPassword" 0 25 (fontified nil)) . -2188) (2188 . 2213)) nil (25938 34154 148644 741000) 0 nil])
([nil nil ((2215 . 2217) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 2215) (2214 . 2215)) nil (25938 34154 148643 602000) 0 nil])
([nil nil ((2220 . 2223) (#("arg database.GetUserByEmailAndPasswordParams" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 44 (face tree-sitter-hl-face:property fontified nil)) . 2220) (2219 . 2220)) nil (25938 34154 148642 762000) 0 nil])
([nil nil ((apply yas--snippet-revive 2219 2229 #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil)) (2219 . 2229) (#("userParams" 0 10 (fontified nil)) . 2219) (2219 . 2229) (#("user" 0 4 (fontified nil)) . 2219) (2219 . 2223) (#("userParams" 0 10 (fontified nil)) . -2219) (2219 . 2229) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2219) (undo-tree-id3409 . -4) (undo-tree-id3410 . -4) 2223) nil (25938 34154 148641 277000) 0 nil])
([nil nil ((apply yas--snippet-revive 2188 2230 #s(yas--snippet nil (#s(yas--field 1 2214 2217 nil nil nil t #s(yas--field 2 2219 2229 nil nil nil t nil)) #s(yas--field 2 2219 2229 nil nil nil t nil)) nil 42 nil #s(yas--field 2 2219 2229 nil nil nil t nil) nil nil))) nil (25938 34154 148638 760000) 0 nil])
([nil nil ((2214 . 2216)) nil (25938 34154 148638 211000) 0 nil])
([nil nil ((2232 . 2234)) nil (25938 34154 148637 657000) 0 nil])
([nil nil ((2234 . 2237)) nil (25938 34154 148637 118000) 0 nil])
([nil nil ((2237 . 2244)) nil (25938 34154 148636 464000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2241) (undo-tree-id3406 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2242) (undo-tree-id3407 . -1) (#(" " 0 1 (fontified t)) . -2243) (undo-tree-id3408 . -1) 2244) nil (25938 34154 148635 428000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2249) (2249 . 2250) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2249) (2249 . 2250) (2241 . 2250)) nil (25938 34154 148632 62000) 0 nil])
([nil nil ((2250 . 2252) (2251 . 2252) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2250) (2250 . 2252) (2249 . 2251)) nil (25938 34154 148631 3000) 0 nil])
([nil nil ((2252 . 2258)) nil (25938 34154 148630 165000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2275 2276 nil nil nil t #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil))) #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil)) #s(yas--field 3 2283 2296 nil nil nil t nil)) nil 44 nil #s(yas--field 3 2283 2296 nil nil nil t nil) nil nil)) (2258 . 2319) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2258) (2258 . 2334) (#("RespondWithError" 0 16 (fontified nil)) . -2258) (2258 . 2274)) nil (25938 34154 148628 886000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2276) (2275 . 2276)) nil (25938 34154 148627 562000) 0 nil])
([nil nil ((2279 . 2281) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2279) (2278 . 2279)) nil (25938 34154 148626 477000) 0 nil])
([nil nil ((2284 . 2293) (2283 . 2285) (#("\"" 0 1 (fontified nil)) . -2283) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 2284) (2283 . 2284)) nil (25938 34154 148625 173000) 0 nil])
([nil nil ((2293 . 2295)) nil (25938 34154 148624 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 2258 2297 #s(yas--snippet nil (#s(yas--field 1 2275 2276 nil nil nil t #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil))) #s(yas--field 2 2278 2281 nil nil nil t #s(yas--field 3 2283 2296 nil nil nil t nil)) #s(yas--field 3 2283 2296 nil nil nil t nil)) nil 44 nil #s(yas--field 3 2283 2296 nil nil nil t nil) nil nil))) nil (25938 34154 148623 712000) 0 nil])
([nil nil ((2232 . 2234)) nil (25938 34154 148622 879000) 0 nil])
([nil nil ((2234 . 2244)) nil (25938 34154 148622 6000) 0 nil])
([nil nil ((2244 . 2252)) nil (25938 34154 148621 163000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2249) (undo-tree-id3403 . -1) (#("n" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2250) (undo-tree-id3404 . -1) (#("d" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2251) (undo-tree-id3405 . -1) 2252) nil (25938 34154 148620 50000) 0 nil])
([nil nil ((2249 . 2253)) nil (25938 34154 148617 14000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2249) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (#("n" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2250) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (#("d" 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2251) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (#(" " 0 1 (face tree-sitter-hl-face:comment fontified t)) . -2252) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) 2253) nil (25938 34154 148615 62000) 0 nil])
([nil nil ((2249 . 2266)) nil (25938 34154 148594 785000) 0 nil])
([nil nil ((2334 . 2340) (t 25938 34154 166752 357000)) nil (25938 34173 216455 207000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2341) (2341 . 2342) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2341) (2341 . 2342) (2340 . 2342)) nil (25938 34173 216454 443000) 0 nil])
([nil nil ((2342 . 2344) (2343 . 2344) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2342) (2342 . 2344) (2341 . 2343)) nil (25938 34173 216453 444000) 0 nil])
([nil nil ((2344 . 2350)) nil (25938 34173 216452 102000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2366 2367 nil nil nil t #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil))) #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil)) #s(yas--field 3 2374 2378 nil nil nil t nil)) nil 45 nil #s(yas--field 3 2374 2378 nil nil nil t nil) nil nil)) (2350 . 2419) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2350) (2350 . 2435) (#("RespondWithJSON" 0 15 (fontified nil)) . -2350) (2350 . 2365)) nil (25938 34173 216450 906000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2367) (undo-tree-id3421 . -21) (undo-tree-id3422 . -2) (undo-tree-id3423 . -3) (2366 . 2367)) nil (25938 34173 216449 84000) 0 nil])
([nil nil ((2370 . 2372) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2370) (undo-tree-id3418 . -8) (undo-tree-id3419 . -5) (undo-tree-id3420 . -6) (2369 . 2370)) nil (25938 34173 216445 602000) 0 nil])
([nil nil ((2375 . 2378) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2375) (undo-tree-id3415 . -19) (undo-tree-id3416 . -8) (undo-tree-id3417 . -9) (2374 . 2375)) nil (25938 34173 216441 837000) 0 nil])
([nil nil ((apply yas--snippet-revive 2350 2379 #s(yas--snippet nil (#s(yas--field 1 2366 2367 nil nil nil t #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil))) #s(yas--field 2 2369 2372 nil nil nil t #s(yas--field 3 2374 2378 nil nil nil t nil)) #s(yas--field 3 2374 2378 nil nil nil t nil)) nil 45 nil #s(yas--field 3 2374 2378 nil nil nil t nil) nil nil))) nil (25938 34173 216429 670000) 0 nil])
([nil nil ((1892 . 1894) (t 25938 34173 236150 771000)) nil (25938 34232 953808 512000) 0 nil])
([nil nil ((1894 . 1912)) nil (25938 34232 953807 462000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1899) (undo-tree-id3478 . -1) 1900) nil (25938 34232 953806 728000) 0 nil])
([nil nil ((1899 . 1900)) nil (25938 34232 953804 50000) 0 nil])
([nil nil ((1912 . 1916)) nil (25938 34232 953803 494000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1925) (1925 . 1926) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1925) (1925 . 1926) (1916 . 1926)) nil (25938 34232 953802 689000) 0 nil])
([nil nil ((1926 . 1927) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1926) (1926 . 1927) (1925 . 1927)) nil (25938 34232 953800 983000) 0 nil])
([nil nil ((1927 . 1929)) nil (25938 34232 953800 169000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1927) (undo-tree-id3476 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1928) (undo-tree-id3477 . -1) 1929) nil (25938 34232 953799 328000) 0 nil])
([nil nil ((1927 . 1938)) nil (25938 34232 953797 122000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1936) (undo-tree-id3474 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1937) (undo-tree-id3475 . -1) 1938) nil (25938 34232 953796 206000) 0 nil])
([nil nil ((1936 . 1937)) nil (25938 34232 953794 130000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1936) (undo-tree-id3473 . -1) 1937) nil (25938 34232 953793 372000) 0 nil])
([nil nil ((1936 . 1939)) nil (25938 34232 953792 4000) 0 nil])
([nil nil ((apply yas--snippet-revive 1936 1940 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (1936 . 1940) (#("User" 0 4 (fontified nil)) . 1936) (1936 . 1940) (#("Use" 0 3 (fontified nil)) . 1936) (1936 . 1939) (#("User" 0 4 (fontified nil)) . -1936) (1936 . 1940) (#("Use" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1936) (undo-tree-id3453 . -3) (undo-tree-id3454 . -3) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) (undo-tree-id3465 . -2) (undo-tree-id3466 . -3) (undo-tree-id3467 . -3) (undo-tree-id3468 . -3) (undo-tree-id3469 . -3) (undo-tree-id3470 . -3) (undo-tree-id3471 . -3) (undo-tree-id3472 . -3) 1939) nil (25938 34232 953790 414000) 0 nil])
([nil nil ((1940 . 1942)) nil (25938 34232 953776 197000) 0 nil])
([nil nil ((1942 . 1947)) nil (25938 34232 953775 595000) 0 nil])
([nil nil ((1947 . 1948) (#("	" 0 1 (fontified nil)) . -1941) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (1947 . 1948)) nil (25938 34232 953774 794000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1946) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (#(" " 0 1 (fontified t)) . -1947) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) 1948) nil (25938 34232 953768 962000) 0 nil])
([nil nil ((1941 . 1942)) nil (25938 34232 953746 707000) 0 nil])
([nil nil ((1942 . 1943)) nil (25938 34232 953746 93000) 0 nil])
([nil nil ((1948 . 1955)) nil (25938 34232 953742 488000) 0 nil])
([nil nil ((1891 . 1893) (t 25938 34232 971892 653000)) nil (25938 34319 45783 491000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1892) (undo-tree-id3635 . -1) 1893) nil (25938 34319 45782 632000) 0 nil])
([nil nil ((1892 . 1901)) nil (25938 34319 45781 394000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1900) (undo-tree-id3634 . -1) 1901) nil (25938 34319 45780 524000) 0 nil])
([nil nil ((1900 . 1902)) nil (25938 34319 45779 1000) 0 nil])
([nil nil ((1902 . 1907)) nil (25938 34319 45778 319000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1904) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1905) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1906) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) 1907) nil (25938 34319 45776 231000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1900) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (#(" " 0 1 (fontified t)) . -1901) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1902) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1903) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) 1904) nil (25938 34319 45741 537000) 0 nil])
([nil nil ((1632 . 1634) (t 25938 34319 64392 736000)) nil (25939 48980 735375 630000) 0 nil])
([nil nil ((1634 . 1637)) nil (25939 48980 735374 740000) 0 nil])
([nil nil ((apply yas--snippet-revive 1634 1650 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1634 . 1650) (#("createUserObject" 0 16 (fontified nil)) . 1634) (1634 . 1650) (#("cre" 0 3 (fontified nil)) . 1634) (1634 . 1637) (#("createUserObject" 0 16 (fontified nil)) . -1634) (1634 . 1650) (#("cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1634) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 1637) nil (25939 48980 735373 740000) 0 nil])
([nil nil ((1650 . 1651)) nil (25939 48980 735370 271000) 0 nil])
([nil nil ((apply yas--snippet-revive 1651 1659 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1651 . 1659) (#("Password" 0 8 (fontified nil)) . 1651) (1651 . 1659) (#("Password" 0 8 (fontified nil)) . -1651) (1651 . 1659)) nil (25939 48980 735369 373000) 0 nil])
([nil nil ((1659 . 1664)) nil (25939 48980 735368 389000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1663) (undo-tree-id18 . -1) 1664) nil (25939 48980 735367 663000) 0 nil])
([nil nil ((1663 . 1667)) nil (25939 48980 735366 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1662 1684 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1662 . 1684) (#("createUserObject.Email" 0 22 (fontified nil)) . 1662) (1662 . 1684) (#("creat" 0 5 (fontified nil)) . 1662) (1662 . 1667) (#("createUserObject.Email" 0 22 (fontified nil)) . -1662) (1662 . 1684) (#("creat" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1662) (undo-tree-id16 . -5) (undo-tree-id17 . -5) 1667) nil (25939 48980 735365 188000) 0 nil])
([nil nil ((1684 . 1685)) nil (25939 48980 735361 570000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1679) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1680) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1681) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1682) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1683) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("." 0 1 (fontified t)) . -1684) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1685) nil (25939 48980 735360 198000) 0 nil])
([nil nil ((1679 . 1683)) nil (25939 48980 735351 868000) 0 nil])
([nil nil ((apply yas--snippet-revive 1679 1687 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1679 . 1687) (#("Password" 0 8 (fontified nil)) . 1679) (1679 . 1687) (#("Pass" 0 4 (fontified nil)) . 1679) (1679 . 1683) (#("Password" 0 8 (fontified nil)) . -1679) (1679 . 1687) (#("Pass" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1679) (undo-tree-id2 . -4) (undo-tree-id3 . -4) 1683) nil (25939 48980 735350 931000) 0 nil])
([nil nil ((184 . 186)) nil (25939 48980 735348 209000) 0 nil])
([nil nil ((186 . 188) (#("\"" 0 1 (fontified nil)) . -186) (186 . 187)) nil (25939 48980 735347 437000) 0 nil])
([nil nil ((368 . 370)) nil (25939 48980 735346 656000) 0 nil])
([nil nil ((370 . 372) (#("\"" 0 1 (fontified nil)) . -370) (370 . 371)) nil (25939 48980 735345 921000) 0 nil])
([nil nil ((371 . 376)) nil (25939 48980 735344 886000) 0 nil])
([nil nil ((apply yas--snippet-revive 371 382 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (371 . 382) (#("github.com/" 0 11 (fontified nil)) . 371) (371 . 382) (#("githu" 0 5 (fontified nil)) . 371) (371 . 376) (#("github.com/" 0 11 (fontified nil)) . -371) (371 . 382) (#("githu" 0 5 (fontified t face tree-sitter-hl-face:string)) . -371) (undo-tree-id0 . -5) (undo-tree-id1 . -5) 376) nil (25939 48980 735343 581000) 0 nil])
([nil nil ((382 . 391)) nil (25939 48980 735315 980000) 0 nil])
([nil nil ((391 . 397)) nil (25939 48980 735312 725000) 0 nil])
([nil nil ((#("	\"\"
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t)) . 185) (undo-tree-id136 . -4) (undo-tree-id137 . 4) (undo-tree-id138 . -3) (t 25939 48980 752868 636000)) nil (25939 49003 561090 331000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -185) (undo-tree-id95 . -1) (undo-tree-id96 . 1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("	" 0 1 (fontified t)) . -186) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 187) nil (25939 49003 561086 194000) 0 nil])
([nil nil ((185 . 187)) nil (25939 49003 560998 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -184) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t)) . -185) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -186) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 187) nil (25939 49003 560995 69000) 0 nil])
([nil nil ((184 . 186)) nil (25939 49003 560936 929000) 0 nil])
([nil nil ((1691 . 1702) (t 25939 49003 578821 236000)) nil (25939 49035 999833 884000) 0 nil])
([nil nil ((apply yas--snippet-revive 1729 1749 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (#("ime\"
	\"t" 0 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t) 6 8 (fontified t face tree-sitter-hl-face:string)) . -107) (187 . 188) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -187) 188 (189 . 198) (362 . 392) (366 . 371) (#("ithub" 0 5 (fontified t face tree-sitter-hl-face:string)) . -367) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -373) (375 . 377) (#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -375) 376 (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1698 . 1718) (#("GenerateFromPassword" 0 20 (fontified nil)) . 1698) (1698 . 1718) (#("GenecreateUserObject" 0 4 (fontified nil) 4 20 (fontified nil face tree-sitter-hl-face:property)) . 1698) (1698 . 1702) (#("GenerateFromPassword" 0 20 (fontified nil)) . -1698) (1698 . 1718) (#("Gene" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1698) (undo-tree-id144 . -4) (undo-tree-id145 . -4) 1702) nil (25939 49035 999832 47000) 0 nil])
([nil nil ((1749 . 1751)) nil (25939 49035 999826 612000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1750) (undo-tree-id141 . -1) (undo-tree-id142 . 1) (undo-tree-id143 . -1) 1751) nil (25939 49035 999825 523000) 0 nil])
([nil nil ((1750 . 1753)) nil (25939 49035 999822 428000) 0 nil])
([nil nil ((apply yas--snippet-revive 1750 1766 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1750 . 1766) (#("createUserObject" 0 16 (fontified nil)) . 1750) (1750 . 1766) (#("cre" 0 3 (fontified nil)) . 1750) (1750 . 1753) (#("createUserObject" 0 16 (fontified nil)) . -1750) (1750 . 1766) (#("cre" 0 3 (fontified t)) . -1750) (undo-tree-id139 . -3) (undo-tree-id140 . -3) 1753) nil (25939 49035 999820 835000) 0 nil])
([nil nil ((1775 . 1776) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1775) (1775 . 1776)) nil (25939 49035 999808 125000) 0 nil])
([nil nil ((1719 . 1724) (t 25939 49036 17753 900000)) nil (25939 49088 349875 205000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1723) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 1724) nil (25939 49088 349874 139000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1721) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1722) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 1723) nil (25939 49088 349871 939000) 0 nil])
([nil nil ((1721 . 1725)) nil (25939 49088 349868 453000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1719) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#(" " 0 1 (fontified t)) . -1720) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1721) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1722) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1723) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1724) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 1725) nil (25939 49088 349866 767000) 0 nil])
([nil nil ((1752 . 1758) (#("]" 0 1 (fontified nil)) . -1751) (1751 . 1752) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1751) (1751 . 1752) (1750 . 1752)) nil (25939 49088 349857 300000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -1757) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . 1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 1758) nil (25939 49088 349855 162000) 0 nil])
([nil nil ((1782 . 1786) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1782) (1782 . 1783)) nil (25939 49088 349841 365000) 0 nil])
([nil nil (1786) nil (25939 49134 564318 212000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1701) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1702) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1703) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1704) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1705) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1706) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1707) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1708) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1709) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("." 0 1 (fontified nil)) . -1710) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("P" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1711) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1712) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1713) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1714) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1715) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1716) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1717) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1718) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -1719) (undo-tree-id224 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1720) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t)) . -1721) (undo-tree-id226 . -1) 1722 (t 25939 49088 368172 371000)) nil (25939 49134 564314 595000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1694) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1695) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1696) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1697) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1698) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1699) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1700) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 1701) nil (25939 49134 564288 59000) 0 nil])
([nil nil ((1694 . 1696)) nil (25939 49134 564278 714000) 0 nil])
([nil nil ((1696 . 1708)) nil (25939 49134 564278 316000) 0 nil])
([nil nil ((1773 . 1775)) nil (25939 49134 564277 884000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1791) (1791 . 1792) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1791) (1791 . 1792) (1775 . 1792)) nil (25939 49134 564277 173000) 0 nil])
([nil nil ((1792 . 1794) (1793 . 1794) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1792) (1792 . 1794) (1791 . 1793)) nil (25939 49134 564276 257000) 0 nil])
([nil nil ((1794 . 1799)) nil (25939 49134 564275 537000) 0 nil])
([nil nil ((1799 . 1800)) nil (25939 49134 564274 969000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1817 1818 nil nil nil t #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil))) #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil)) #s(yas--field 3 1825 1848 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1825 1848 nil nil nil t nil) nil nil)) (1800 . 1861) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1800) (1800 . 1876) (#("RespondWithError" 0 16 (fontified nil)) . -1800) (1800 . 1816)) nil (25939 49134 564274 191000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1818) (undo-tree-id173 . -21) (1817 . 1818)) nil (25939 49134 564273 137000) 0 nil])
([nil nil ((1821 . 1823) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1821) (undo-tree-id172 . -8) (1820 . 1821)) nil (25939 49134 564271 486000) 0 nil])
([nil nil ((1826 . 1838) (1825 . 1827) (#("\"" 0 1 (fontified nil)) . -1825) (undo-tree-id170 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1826) (undo-tree-id171 . -10) (1825 . 1826)) nil (25939 49134 564269 485000) 0 nil])
([nil nil ((1838 . 1847)) nil (25939 49134 564260 768000) 0 nil])
([nil nil ((apply yas--snippet-revive 1800 1849 #s(yas--snippet nil (#s(yas--field 1 1817 1818 nil nil nil t #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil))) #s(yas--field 2 1820 1823 nil nil nil t #s(yas--field 3 1825 1848 nil nil nil t nil)) #s(yas--field 3 1825 1848 nil nil nil t nil)) nil 7 nil #s(yas--field 3 1825 1848 nil nil nil t nil) nil nil))) nil (25939 49134 564256 642000) 0 nil])
([nil nil ((1773 . 1775) (t 25939 49134 581984 905000)) nil (25939 49146 905885 394000) 0 nil])
([nil nil ((1775 . 1781)) nil (25939 49146 905884 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 1775 1791 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (1775 . 1791) (#("createUserObject" 0 16 (fontified nil)) . 1775) (1775 . 1791) (#("create" 0 6 (fontified nil)) . 1775) (1775 . 1781) (#("createUserObject" 0 16 (fontified nil)) . -1775) (1775 . 1791) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1775) (undo-tree-id233 . -6) (undo-tree-id234 . -6) 1781) nil (25939 49146 905883 185000) 0 nil])
([nil nil ((1791 . 1796)) nil (25939 49146 905879 825000) 0 nil])
([nil nil ((apply yas--snippet-revive 1792 1800 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (1792 . 1800) (#("Password" 0 8 (fontified nil)) . 1792) (1792 . 1800) (#("Pass" 0 4 (fontified nil)) . 1792) (1792 . 1796) (#("Password" 0 8 (fontified nil)) . -1792) (1792 . 1800) (#("Pass" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1792) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) 1796) nil (25939 49146 905877 820000) 0 nil])
([nil nil ((1800 . 1807)) nil (25939 49146 905862 794000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2530) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2531) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2532) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (#("P" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2533) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2534) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2535) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2536) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("w" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2537) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2538) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2539) (undo-tree-id583 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2540) (undo-tree-id584 . -1) 2541 (t 25939 49146 925158 751000)) nil (25939 49857 178003 962000) 0 nil])
([nil nil ((2530 . 2541)) nil (25939 49857 177989 840000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2530) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2531) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2532) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("P" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2533) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("a" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2534) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (#("s" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2535) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("s" 0 1 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2536) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("w" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2537) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2538) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2539) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2540) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) 2541 (t 25939 49146 925158 751000)) nil (25939 49857 177986 482000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2364) (undo-tree-id490 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2365) (undo-tree-id491 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2366) (undo-tree-id492 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2367) (undo-tree-id493 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2368) (undo-tree-id494 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2369) (undo-tree-id495 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2370) (undo-tree-id496 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2371) (undo-tree-id497 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2372) (undo-tree-id498 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2373) (undo-tree-id499 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2374) (undo-tree-id500 . -1) 2375) nil (25939 49857 177946 99000) 0 nil])
([nil nil ((2220 . 2222)) nil (25939 49857 177938 775000) 0 nil])
([nil nil ((2222 . 2227)) nil (25939 49857 177938 281000) 0 nil])
([nil nil ((2227 . 2243)) nil (25939 49857 177937 836000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2241) (undo-tree-id488 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2242) (undo-tree-id489 . -1) 2243) nil (25939 49857 177937 134000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2245) (2245 . 2246) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2245) (2245 . 2246) (2241 . 2246)) nil (25939 49857 177934 762000) 0 nil])
([nil nil ((2246 . 2247) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2246) (2246 . 2247) (2245 . 2247)) nil (25939 49857 177933 673000) 0 nil])
([nil nil ((2247 . 2259)) nil (25939 49857 177932 545000) 0 nil])
([nil nil ((apply yas--snippet-revive 2253 2259 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (2253 . 2259) (#("string" 0 6 (fontified nil)) . 2253) (2253 . 2259) (#("string" 0 6 (fontified nil)) . 2253) (2253 . 2259) (#("string" 0 6 (fontified t face tree-sitter-hl-face:type)) . -2253) (undo-tree-id486 . -6) (undo-tree-id487 . -6) 2259) nil (25939 49857 177931 603000) 0 nil])
([nil nil ((2259 . 2261)) nil (25939 49857 177929 368000) 0 nil])
([nil nil ((2261 . 2276)) nil (25939 49857 177928 769000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2247) (undo-tree-id485 . -1) 2248) nil (25939 49857 177928 31000) 0 nil])
([nil nil ((2247 . 2248)) nil (25939 49857 177926 570000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2261) (undo-tree-id484 . -1) 2262) nil (25939 49857 177925 901000) 0 nil])
([nil nil ((2261 . 2262)) nil (25939 49857 177924 636000) 0 nil])
([nil nil ((2261 . 2267) (2260 . 2262) (#("`" 0 1 (fontified nil)) . -2260) (2259 . 2261)) nil (25939 49857 177923 972000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -2266) (undo-tree-id483 . -1) 2267) nil (25939 49857 177923 38000) 0 nil])
([nil nil ((2267 . 2270) (2266 . 2268) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2266) (2266 . 2267)) nil (25939 49857 177920 164000) 0 nil])
([nil nil ((2270 . 2272)) nil (25939 49857 177919 267000) 0 nil])
([nil nil ((2299 . 2307) (2298 . 2300) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2298) (2293 . 2299) (2292 . 2294) (#("`" 0 1 (fontified nil)) . -2292) (2291 . 2293)) nil (25939 49857 177918 452000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2441) (undo-tree-id463 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2442) (undo-tree-id464 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2443) (undo-tree-id465 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2444) (undo-tree-id466 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2445) (undo-tree-id467 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2446) (undo-tree-id468 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2447) (undo-tree-id469 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2448) (undo-tree-id470 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2449) (undo-tree-id471 . -1) (#("E" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2450) (undo-tree-id472 . -1) (#("m" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2451) (undo-tree-id473 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2452) (undo-tree-id474 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2453) (undo-tree-id475 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2454) (undo-tree-id476 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2455) (undo-tree-id477 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2456) (undo-tree-id478 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2457) (undo-tree-id479 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2458) (undo-tree-id480 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2459) (undo-tree-id481 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2460) (undo-tree-id482 . -1) 2461) nil (25939 49857 177915 402000) 0 nil])
([nil nil ((2441 . 2450)) nil (25939 49857 177902 133000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2432) (undo-tree-id454 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2433) (undo-tree-id455 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2434) (undo-tree-id456 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2435) (undo-tree-id457 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2436) (undo-tree-id458 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2437) (undo-tree-id459 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2438) (undo-tree-id460 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2439) (undo-tree-id461 . -1) (#("." 0 1 (fontified t)) . -2440) (undo-tree-id462 . -1) 2441) nil (25939 49857 177900 553000) 0 nil])
([nil nil ((2556 . 2558)) nil (25939 49857 177892 235000) 0 nil])
([nil nil ((2422 . 2425)) nil (25939 49857 177891 784000) 0 nil])
([nil nil ((2561 . 2569)) nil (25939 49857 177891 237000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2568) (undo-tree-id453 . -1) 2569) nil (25939 49857 177890 690000) 0 nil])
([nil nil ((2568 . 2574)) nil (25939 49857 177889 378000) 0 nil])
([nil nil ((apply yas--snippet-revive 2570 2578 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (2570 . 2578) (#("database" 0 8 (fontified nil)) . 2570) (2570 . 2578) (#("data" 0 4 (fontified nil)) . 2570) (2570 . 2574) (#("database" 0 8 (fontified nil)) . -2570) (2570 . 2578) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2570) (undo-tree-id451 . -4) (undo-tree-id452 . -4) 2574) nil (25939 49857 177888 420000) 0 nil])
([nil nil ((2578 . 2579)) nil (25939 49857 177885 940000) 0 nil])
([nil nil ((2579 . 2587)) nil (25939 49857 177885 493000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2586) (undo-tree-id450 . -1) 2587) nil (25939 49857 177884 981000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2578) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2579) (undo-tree-id443 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2580) (undo-tree-id444 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2581) (undo-tree-id445 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2582) (undo-tree-id446 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2583) (undo-tree-id447 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2584) (undo-tree-id448 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2585) (undo-tree-id449 . -1) 2586) nil (25939 49857 177882 851000) 0 nil])
([nil nil ((2578 . 2582)) nil (25939 49857 177865 367000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2581) (undo-tree-id440 . -1) 2582) nil (25939 49857 177864 794000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2568) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#(" " 0 1 (fontified t)) . -2569) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2570) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2571) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2572) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2573) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2574) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2575) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2576) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2577) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("." 0 1 (fontified t)) . -2578) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2579) (undo-tree-id438 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2580) (undo-tree-id439 . -1) 2581) nil (25939 49857 177861 843000) 0 nil])
([nil nil ((2568 . 2575)) nil (25939 49857 177846 474000) 0 nil])
([nil nil ((apply yas--snippet-revive 2571 2579 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (2571 . 2579) (#("database" 0 8 (fontified nil)) . 2571) (2571 . 2579) (#("data" 0 4 (fontified nil)) . 2571) (2571 . 2575) (#("database" 0 8 (fontified nil)) . -2571) (2571 . 2579) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2571) (undo-tree-id414 . -4) (undo-tree-id415 . -4) 2575) nil (25939 49857 177845 431000) 0 nil])
([nil nil ((2579 . 2584)) nil (25939 49857 177842 964000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2563) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2564) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2565) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2566) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#(" " 0 1 (fontified t)) . -2567) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#(":" 0 1 (fontified t)) . -2568) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2569) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#(" " 0 1 (fontified t)) . -2570) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2571) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2572) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2573) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2574) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2575) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2576) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("s" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -2577) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2578) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("." 0 1 (fontified t)) . -2579) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2580) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2581) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2582) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2583) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) 2584) nil (25939 49857 177838 269000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2559) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("	" 0 1 (fontified t)) . -2560) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2561) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2562) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) 2563) nil (25939 49857 177760 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2600) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2601) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2602) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2603) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2604) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2605) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2606) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2607) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2608) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2609) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2610) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 2611) nil (25939 49857 177746 842000) 0 nil])
([nil nil ((2600 . 2607)) nil (25939 49857 177552 471000) 0 nil])
([nil nil ((apply yas--snippet-revive 2601 2620 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (2601 . 2620) (#("userReqParams.Email" 0 19 (fontified nil)) . 2601) (2601 . 2620) (#("userRe" 0 6 (fontified nil)) . 2601) (2601 . 2607) (#("userReqParams.Email" 0 19 (fontified nil)) . -2601) (2601 . 2620) (#("userRe" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -2601) (undo-tree-id254 . -6) (undo-tree-id255 . -6) 2607) nil (25939 49857 177551 258000) 0 nil])
([nil nil ((2621 . 2623)) nil (25939 49857 177548 539000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2621) (undo-tree-id252 . -1) (#("	" 0 1 (fontified t)) . -2622) (undo-tree-id253 . -1) 2623) nil (25939 49857 177547 889000) 0 nil])
([nil nil ((2768 . 2771)) nil (25939 49857 177546 255000) 0 nil])
([nil nil ((2720 . 2723)) nil (25939 49857 177545 823000) 0 nil])
([nil nil ((2723 . 2729)) nil (25939 49857 177545 344000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2732) (undo-tree-id245 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2733) (undo-tree-id246 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2734) (undo-tree-id247 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2735) (undo-tree-id248 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2736) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t)) . -2737) (undo-tree-id250 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2738) (undo-tree-id251 . -1) 2739) nil (25939 49857 177543 910000) 0 nil])
([nil nil ((2732 . 2734)) nil (25939 49857 177538 338000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2732) (undo-tree-id243 . -1) (#("	" 0 1 (fontified t)) . -2733) (undo-tree-id244 . -1) 2734) nil (25939 49857 177537 657000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2734) (undo-tree-id242 . -1) 2735) nil (25939 49857 177535 833000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2770) (undo-tree-id235 . -1) (#("	" 0 1 (fontified t)) . -2771) (undo-tree-id236 . -1) (#("
" 0 1 (fontified t)) . -2772) (undo-tree-id237 . -1) (#("	" 0 1 (fontified t)) . -2773) (undo-tree-id238 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2774) (undo-tree-id239 . -1) (undo-tree-id240 . 1) (undo-tree-id241 . -1) 2775) nil (25939 49857 177533 660000) 0 nil])
([nil nil ((2770 . 2772)) nil (25939 49857 177520 423000) 0 nil])
([nil nil ((2478 . 2481)) nil (25939 49857 177516 721000) 0 nil])
([nil nil ((2735 . 2737) (t 25939 49857 198316 703000)) nil (25939 50194 222429 555000) 0 nil])
([nil nil ((2737 . 2751)) nil (25939 50194 222428 916000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2737) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2738) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2739) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2740) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("," 0 1 (fontified t)) . -2741) (undo-tree-id635 . -1) (#(" " 0 1 (fontified t)) . -2742) (undo-tree-id636 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2743) (undo-tree-id637 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2744) (undo-tree-id638 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2745) (undo-tree-id639 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2746) (undo-tree-id640 . -1) (#(" " 0 1 (fontified t)) . -2747) (undo-tree-id641 . -1) (#(":" 0 1 (fontified t)) . -2748) (undo-tree-id642 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2749) (undo-tree-id643 . -1) (#(" " 0 1 (fontified t)) . -2750) (undo-tree-id644 . -1) 2751) nil (25939 50194 222426 281000) 0 nil])
([nil nil ((2737 . 2744)) nil (25939 50194 222413 890000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2740) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2741) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2742) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2743) (undo-tree-id625 . -1) (undo-tree-id626 . -1) 2744) nil (25939 50194 222412 368000) 0 nil])
([nil nil ((2740 . 2744)) nil (25939 50194 222407 260000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2740) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2741) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2742) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2743) (undo-tree-id617 . -1) (undo-tree-id618 . -1) 2744) nil (25939 50194 222406 101000) 0 nil])
([nil nil ((2740 . 2743)) nil (25939 50194 222401 178000) 0 nil])
([nil nil ((apply yas--snippet-revive 2740 2746 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (2740 . 2746) (#("bcrypt" 0 6 (fontified nil)) . 2740) (2740 . 2746) (#("bcr" 0 3 (fontified nil)) . 2740) (2740 . 2743) (#("bcrypt" 0 6 (fontified nil)) . -2740) (2740 . 2746) (#("bcr" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2740) (undo-tree-id609 . -3) (undo-tree-id610 . -3) 2743) nil (25939 50194 222400 210000) 0 nil])
([nil nil ((2746 . 2747)) nil (25939 50194 222397 877000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) #s(yas--field 2 2785 2807 nil nil nil t nil)) nil 15 nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil nil)) (2747 . 2809) (#("CompareHashAndPassword(${1:hashedPassword []byte}, ${2:password []byte})" 0 72 (fontified nil)) . 2747) (2747 . 2819) (#("CompareHashAndPassword" 0 22 (fontified nil)) . -2747) (2747 . 2769)) nil (25939 50194 222396 741000) 0 nil])
([nil nil ((2771 . 2772) (#("hashedPassword []byte" 0 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 16 (fontified nil face (rainbow-delimiters-depth-3-face)) 16 17 (fontified nil face (rainbow-delimiters-depth-3-face)) 17 21 (fontified nil face tree-sitter-hl-face:type)) . 2771) (2770 . 2771)) nil (25939 50194 222395 680000) 0 nil])
([nil nil ((2772 . 2775)) nil (25939 50194 222395 41000) 0 nil])
([nil nil ((apply yas--snippet-revive 2775 2783 #s(yas--snippet nil nil nil 16 nil nil #s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil #s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) nil)) (2775 . 2783) (#("Password" 0 8 (fontified nil)) . 2775) (2775 . 2783) (#("Password" 0 8 (fontified nil)) . -2775) (2775 . 2783)) nil (25939 50194 222394 239000) 0 nil])
([nil nil ((#("password []byte" 0 8 (fontified t face tree-sitter-hl-face:type) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 15 (fontified t face tree-sitter-hl-face:type)) . 2785)) nil (25939 50194 222393 73000) 0 nil])
([nil nil ((2785 . 2789)) nil (25939 50194 222392 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 2785 2798 #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (2785 . 2798) (#("userReqParams" 0 13 (fontified nil)) . 2785) (2785 . 2798) (#("user" 0 4 (fontified nil)) . 2785) (2785 . 2789) (#("userReqParams" 0 13 (fontified nil)) . -2785) (2785 . 2798) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2785) (undo-tree-id607 . -4) (undo-tree-id608 . -4) 2789) nil (25939 50194 222391 705000) 0 nil])
([nil nil ((2798 . 2799)) nil (25939 50194 222389 103000) 0 nil])
([nil nil ((apply yas--snippet-revive 2799 2807 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil)) (2799 . 2807) (#("Password" 0 8 (fontified nil)) . 2799) (2799 . 2807) (#("Password" 0 8 (fontified nil)) . -2799) (2799 . 2807)) nil (25939 50194 222388 466000) 0 nil])
([nil nil ((apply yas--snippet-revive 2747 2808 #s(yas--snippet nil (#s(yas--field 1 2770 2783 nil nil nil t #s(yas--field 2 2785 2807 nil nil nil t nil)) #s(yas--field 2 2785 2807 nil nil nil t nil)) nil 15 nil #s(yas--field 2 2785 2807 nil nil nil t nil) nil nil))) nil (25939 50194 222387 520000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -2772) (2772 . 2773) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2772) (2772 . 2773) (2770 . 2773)) nil (25939 50194 222386 980000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2770) (undo-tree-id606 . -1) 2771) nil (25939 50194 222386 54000) 0 nil])
([nil nil ((2772 . 2778)) nil (25939 50194 222384 983000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2777) (undo-tree-id603 . -1) (undo-tree-id604 . 1) (undo-tree-id605 . -1) 2778) nil (25939 50194 222384 352000) 0 nil])
([nil nil ((2790 . 2791) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -2790) (2790 . 2791)) nil (25939 50194 222328 664000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -2794) (2794 . 2795) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2794) (2794 . 2795) (2793 . 2795)) nil (25939 50194 222327 880000) 0 nil])
([nil nil ((2795 . 2801)) nil (25939 50194 222327 124000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -2800) (undo-tree-id600 . -1) (undo-tree-id601 . 1) (undo-tree-id602 . -1) 2801) nil (25939 50194 222326 386000) 0 nil])
([nil nil ((2823 . 2824) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2823) (2823 . 2824)) nil (25939 50194 222323 953000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2833) (2833 . 2834) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2833) (2833 . 2834) (2824 . 2834)) nil (25939 50194 222323 57000) 0 nil])
([nil nil ((2834 . 2836) (2835 . 2836) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2834) (2834 . 2836) (2833 . 2835)) nil (25939 50194 222321 999000) 0 nil])
([nil nil ((2836 . 2842)) nil (25939 50194 222321 273000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2858 2859 nil nil nil t #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil))) #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil)) #s(yas--field 3 2866 2870 nil nil nil t nil)) nil 19 nil #s(yas--field 3 2866 2870 nil nil nil t nil) nil nil)) (2842 . 2911) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2842) (2842 . 2927) (#("RespondWithJSON" 0 15 (fontified nil)) . -2842) (2842 . 2857)) nil (25939 50194 222320 386000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2859) (2858 . 2859)) nil (25939 50194 222319 432000) 0 nil])
([nil nil ((2862 . 2864) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2862) (2861 . 2862)) nil (25939 50194 222318 821000) 0 nil])
([nil nil ((2867 . 2870) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-4-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2867) (2866 . 2867)) nil (25939 50194 222318 126000) 0 nil])
([nil nil ((apply yas--snippet-revive 2842 2871 #s(yas--snippet nil (#s(yas--field 1 2858 2859 nil nil nil t #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil))) #s(yas--field 2 2861 2864 nil nil nil t #s(yas--field 3 2866 2870 nil nil nil t nil)) #s(yas--field 3 2866 2870 nil nil nil t nil)) nil 19 nil #s(yas--field 3 2866 2870 nil nil nil t nil) nil nil))) nil (25939 50194 222317 401000) 0 nil])
([nil nil ((2311 . 2313)) nil (25939 50194 222316 858000) 0 nil])
([nil nil ((2313 . 2318)) nil (25939 50194 222316 395000) 0 nil])
([nil nil ((2232 . 2235) 2230) nil (25939 50194 222315 934000) 0 nil])
([nil nil ((2314 . 2316)) nil (25939 50194 222315 365000) 0 nil])
([nil nil ((2316 . 2335)) nil (25939 50194 222314 938000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2342) (2342 . 2343) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2342) (2342 . 2343) (2335 . 2343)) nil (25939 50194 222314 211000) 0 nil])
([nil nil ((2343 . 2344) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2343) (2343 . 2344) (2342 . 2344)) nil (25939 50194 222313 97000) 0 nil])
([nil nil ((2344 . 2358)) nil (25939 50194 222312 411000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2357) (undo-tree-id599 . -1) 2358) nil (25939 50194 222311 645000) 0 nil])
([nil nil ((2364 . 2369) (2363 . 2365) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2363) (2358 . 2364) (2357 . 2359) (#("`" 0 1 (fontified nil)) . -2357) (2357 . 2358)) nil (25939 50194 222310 159000) 0 nil])
([nil nil ((2371 . 2373)) nil (25939 50194 222309 54000) 0 nil])
([nil nil ((2373 . 2374)) nil (25939 50194 222308 448000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2373) (undo-tree-id598 . -1) 2374) nil (25939 50194 222307 654000) 0 nil])
([nil nil ((2342 . 2344)) nil (25939 50194 222306 165000) 0 nil])
([nil nil ((2344 . 2346)) nil (25939 50194 222305 770000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2345) (undo-tree-id597 . -1) 2346) nil (25939 50194 222305 213000) 0 nil])
([nil nil ((2345 . 2348)) nil (25939 50194 222304 65000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2347) (undo-tree-id596 . -1) 2348) nil (25939 50194 222303 424000) 0 nil])
([nil nil ((2347 . 2351)) nil (25939 50194 222302 106000) 0 nil])
([nil nil ((apply yas--snippet-revive 2347 2356 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (2347 . 2356) (#("uuid.UUID" 0 9 (fontified nil)) . 2347) (2347 . 2356) (#("UUID" 0 4 (fontified nil)) . 2347) (2347 . 2351) (#("uuid.UUID" 0 9 (fontified nil)) . -2347) (2347 . 2356) (#("UUID" 0 4 (fontified t face tree-sitter-hl-face:type)) . -2347) (undo-tree-id594 . -4) (undo-tree-id595 . -4) 2351) nil (25939 50194 222301 27000) 0 nil])
([nil nil ((2356 . 2357)) nil (25939 50194 222298 265000) 0 nil])
([nil nil ((2364 . 2366) (2363 . 2365) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2363) (2358 . 2364) (2357 . 2359) (#("`" 0 1 (fontified nil)) . -2357) (2357 . 2358)) nil (25939 50194 222297 408000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2347) (undo-tree-id585 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2348) (undo-tree-id586 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2349) (undo-tree-id587 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2350) (undo-tree-id588 . -1) (#("." 0 1 (fontified t)) . -2351) (undo-tree-id589 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2352) (undo-tree-id590 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2353) (undo-tree-id591 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2354) (undo-tree-id592 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2355) (undo-tree-id593 . -1) 2356) nil (25939 50194 222294 878000) 0 nil])
([nil nil ((2347 . 2353)) nil (25939 50194 222276 962000) 0 nil])
([nil nil ((2394 . 2396) (t 25939 50194 244637 155000)) nil (25939 50230 402776 253000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2396) (undo-tree-id654 . -1) (#("	" 0 1 (fontified t)) . -2397) (undo-tree-id655 . -1) 2398) nil (25939 50230 402774 986000) 0 nil])
([nil nil ((#("	Id string `json:\"id\"`
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t) 4 10 (fontified t face tree-sitter-hl-face:type) 10 11 (fontified t) 11 17 (fontified t face tree-sitter-hl-face:string) 17 21 (fontified t face tree-sitter-hl-face:string) 21 22 (fontified t face tree-sitter-hl-face:string) 22 23 (fontified t)) . 2343) (undo-tree-id649 . 22) (undo-tree-id650 . -22) (undo-tree-id651 . 13) (undo-tree-id652 . -10) (undo-tree-id653 . -1)) nil (25939 50230 402772 530000) 0 nil])
([nil nil ((2373 . 2385)) nil (25939 50230 402767 505000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2373) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 2374) nil (25939 50230 402766 314000) 0 nil])
([nil nil ((2373 . 2374)) nil (25939 50230 402755 263000) 0 nil])
([nil nil ((2393 . 2398) (2392 . 2394) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2392) (2387 . 2393) (2386 . 2388) (#("`" 0 1 (fontified nil)) . -2386) (2385 . 2387)) nil (25939 50230 402751 28000) 0 nil])
([nil nil ((2400 . 2402) (t 25939 50230 415742 254000)) nil (25939 50252 226153 365000) 0 nil])
([nil nil ((2402 . 2416)) nil (25939 50252 226152 440000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2412) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2413) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2414) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2415) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) 2416) nil (25939 50252 226150 420000) 0 nil])
([nil nil ((#("	CreatedAt 
" 0 1 (fontified t) 1 10 (fontified t face tree-sitter-hl-face:type) 10 11 (fontified t) 11 12 (fontified t)) . 2401) (undo-tree-id656 . 1) (undo-tree-id657 . -11) (undo-tree-id658 . -11) (undo-tree-id659 . -10) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . 1) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -1) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -10) (undo-tree-id677 . -10) (undo-tree-id678 . -10) (undo-tree-id679 . -10) (undo-tree-id680 . -10) (undo-tree-id681 . -12) 2411) nil (25939 50252 226125 936000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2343 . 2344) (#("
" 0 1 (fontified nil)) . -2493) (2342 . 2494) 2341 (t 25939 50252 245803 743000)) nil (25939 50289 465485 222000) 0 nil])
([nil nil ((#("	Email string `json:\"email\"`
	Token string `json:\"token\"`
" 0 1 (fontified t) 1 6 (fontified t face tree-sitter-hl-face:property) 6 7 (fontified t) 7 13 (fontified t face tree-sitter-hl-face:type) 13 14 (fontified t) 14 20 (fontified t face tree-sitter-hl-face:string) 20 27 (fontified t face tree-sitter-hl-face:string) 27 28 (fontified t face tree-sitter-hl-face:string) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t face tree-sitter-hl-face:property) 31 35 (fontified t face tree-sitter-hl-face:property) 35 36 (fontified t) 36 42 (fontified t face tree-sitter-hl-face:type) 42 43 (fontified t) 43 49 (fontified t face tree-sitter-hl-face:string) 49 56 (fontified t face tree-sitter-hl-face:string) 56 57 (fontified t face tree-sitter-hl-face:string) 57 58 (fontified t)) . 2494) (undo-tree-id713 . -30) (undo-tree-id714 . -57) (undo-tree-id715 . -30) (undo-tree-id716 . -1) (undo-tree-id717 . -30) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -30) (undo-tree-id724 . -58) (undo-tree-id725 . -1) (undo-tree-id726 . -30) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -29) (undo-tree-id730 . -30) (undo-tree-id731 . -30) (undo-tree-id732 . -30) (undo-tree-id733 . -35) (undo-tree-id734 . -30) (undo-tree-id735 . -30) (undo-tree-id736 . -30) (undo-tree-id737 . -58) 2524) nil (25939 50289 465481 338000) 0 nil])
([nil nil ((#("type 
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 6 (fontified t)) . 2497) (undo-tree-id738 . -5) (t 25939 50289 484905 655000)) nil (25939 50307 84601 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2497)) nil (25939 50307 84561 145000) 0 nil])
([nil nil ((2624 . 2627)) nil (25939 50307 84557 549000) 0 nil])
([nil nil ((2811 . 2813) (t 25939 50307 105952 688000)) nil (25939 50668 149919 923000) 0 nil])
([nil nil ((2813 . 2816)) nil (25939 50668 149919 362000) 0 nil])
([nil nil ((2816 . 2828)) nil (25939 50668 149919 15000) 0 nil])
([nil nil ((apply yas--snippet-revive 2823 2835 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (2823 . 2835) (#("LoginResUser" 0 12 (fontified nil)) . 2823) (2823 . 2835) (#("Login" 0 5 (fontified nil)) . 2823) (2823 . 2828) (#("LoginResUser" 0 12 (fontified nil)) . -2823) (2823 . 2835) (#("Login" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2823) (undo-tree-id745 . -5) (undo-tree-id746 . -5) 2828) nil (25939 50668 149917 943000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2836) (2836 . 2837) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2836) (2836 . 2837) (2835 . 2837)) nil (25939 50668 149914 628000) 0 nil])
([nil nil ((2837 . 2839)) nil (25939 50668 149913 717000) 0 nil])
([nil nil ((2839 . 2842)) nil (25939 50668 149913 222000) 0 nil])
([nil nil ((2842 . 2843)) nil (25939 50668 149912 651000) 0 nil])
([nil nil ((2821 . 2822)) nil (25939 50668 149912 236000) 0 nil])
([nil nil ((2844 . 2845)) nil (25939 50668 149911 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 2840 2847 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (2840 . 2847) (#("resUser" 0 7 (fontified nil)) . 2840) (2840 . 2847) (#("resUs" 0 5 (fontified nil)) . 2840) (2840 . 2845) (#("resUser" 0 7 (fontified nil)) . -2840) (2840 . 2847) (#("resUs" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -2840) (undo-tree-id743 . -5) (undo-tree-id744 . -5) 2845) nil (25939 50668 149910 762000) 0 nil])
([nil nil ((2847 . 2848)) nil (25939 50668 149908 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 2848 2857 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (2848 . 2857) (#("CreatedAt" 0 9 (fontified nil)) . 2848) (2848 . 2857) (#("CreatedAt" 0 9 (fontified nil)) . -2848) (2848 . 2857)) nil (25939 50668 149907 625000) 0 nil])
([nil nil ((2857 . 2865)) nil (25939 50668 149906 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 2865 2874 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (2865 . 2874) (#("CreatedAt" 0 9 (fontified nil)) . 2865) (2865 . 2874) (#("CreatedAt" 0 9 (fontified nil)) . -2865) (2865 . 2874)) nil (25939 50668 149906 30000) 0 nil])
([nil nil ((2874 . 2876)) nil (25939 50668 149905 0) 0 nil])
([nil nil ((2876 . 2879)) nil (25939 50668 149904 601000) 0 nil])
([nil nil ((2879 . 2884)) nil (25939 50668 149904 96000) 0 nil])
([nil nil ((2884 . 2886)) nil (25939 50668 149903 625000) 0 nil])
([nil nil ((2886 . 2888)) nil (25939 50668 149903 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 2884 2893 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (2884 . 2893) (#("UpdatedAt" 0 9 (fontified nil)) . 2884) (2884 . 2893) (#("Upda" 0 4 (fontified nil)) . 2884) (2884 . 2888) (#("UpdatedAt" 0 9 (fontified nil)) . -2884) (2884 . 2893) (#("Upda" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2884) (undo-tree-id741 . -4) (undo-tree-id742 . -4) 2888) nil (25939 50668 149901 727000) 0 nil])
([nil nil ((2893 . 2901)) nil (25939 50668 149898 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 2901 2910 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (2901 . 2910) (#("UpdatedAt" 0 9 (fontified nil)) . 2901) (2901 . 2910) (#("UpdatedAt" 0 9 (fontified nil)) . -2901) (2901 . 2910)) nil (25939 50668 149898 46000) 0 nil])
([nil nil ((2910 . 2912)) nil (25939 50668 149897 174000) 0 nil])
([nil nil ((2912 . 2915)) nil (25939 50668 149896 781000) 0 nil])
([nil nil ((2915 . 2920)) nil (25939 50668 149896 258000) 0 nil])
([nil nil ((2920 . 2923)) nil (25939 50668 149895 668000) 0 nil])
([nil nil ((apply yas--snippet-revive 2920 2925 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (2920 . 2925) (#("Email" 0 5 (fontified nil)) . 2920) (2920 . 2925) (#("Ema" 0 3 (fontified nil)) . 2920) (2920 . 2923) (#("Email" 0 5 (fontified nil)) . -2920) (2920 . 2925) (#("Ema" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2920) (undo-tree-id739 . -3) (undo-tree-id740 . -3) 2923) nil (25939 50668 149893 909000) 0 nil])
([nil nil ((2925 . 2932)) nil (25939 50668 149884 249000) 0 nil])
([nil nil ((2932 . 2933)) nil (25939 50668 149883 796000) 0 nil])
([nil nil ((2933 . 2938)) nil (25939 50668 149883 316000) 0 nil])
([nil nil ((2938 . 2940)) nil (25939 50668 149882 804000) 0 nil])
([nil nil ((2940 . 2948)) nil (25939 50668 149882 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 2948 2950 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (2948 . 2950) (#("ID" 0 2 (fontified nil)) . 2948) (2948 . 2950) (#("ID" 0 2 (fontified nil)) . -2948) (2948 . 2950)) nil (25939 50668 149881 410000) 0 nil])
([nil nil ((2950 . 2958)) nil (25939 50668 149880 225000) 0 nil])
([nil nil ((apply yas--snippet-revive 2958 2960 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (2958 . 2960) (#("ID" 0 2 (fontified nil)) . 2958) (2958 . 2960) (#("ID" 0 2 (fontified nil)) . -2958) (2958 . 2960)) nil (25939 50668 149876 146000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3042) (undo-tree-id763 . -1) 3043 (t 25939 50668 170875 970000)) nil (25939 52421 594935 584000) 0 nil])
([nil nil ((3042 . 3043)) nil (25939 52421 594934 2000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3046) (undo-tree-id752 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3047) (undo-tree-id753 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3048) (undo-tree-id754 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -3049) (undo-tree-id755 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3050) (undo-tree-id756 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3051) (undo-tree-id757 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3052) (undo-tree-id758 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3053) (undo-tree-id759 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3054) (undo-tree-id760 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3055) (undo-tree-id761 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3056) (undo-tree-id762 . -1) 3057) nil (25939 52421 594932 86000) 0 nil])
([nil nil ((3046 . 3054)) nil (25939 52421 594923 25000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3052) (undo-tree-id750 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3053) (undo-tree-id751 . -1) 3054) nil (25939 52421 594922 159000) 0 nil])
([nil nil ((3052 . 3058)) nil (25939 52421 594919 806000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3042) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 3043) nil (25939 52421 594918 382000) 0 nil])
([nil nil ((3042 . 3043)) nil (25939 52510 389490 244000) 0 nil])
([nil nil ((2493 . 2495) (t 25939 52513 805369 586000)) nil (25939 52551 955128 296000) 0 nil] [nil nil ((#("type AuthenticatedUser struct {
	database.User
  token string
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 22 (fontified t face tree-sitter-hl-face:type) 22 23 (fontified t) 23 29 (fontified t face tree-sitter-hl-face:keyword) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-1-face)) 31 42 (fontified t) 42 46 (fontified t face tree-sitter-hl-face:type) 46 49 (fontified t) 49 54 (fontified t face tree-sitter-hl-face:property) 54 55 (fontified t) 55 61 (fontified t face tree-sitter-hl-face:type) 61 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-1-face)) 63 64 (fontified t)) . 2157) (undo-tree-id767 . -62) (undo-tree-id768 . -63) (undo-tree-id769 . -62) (undo-tree-id771 . -49) (undo-tree-id773 . -45) (undo-tree-id775 . -62) (undo-tree-id777 . -62) (undo-tree-id779 . -62) (undo-tree-id781 . -62) (undo-tree-id783 . -62) (undo-tree-id785 . -62) (undo-tree-id787 . -62) (t 25939 52421 612154 425000)) ((2157 . 2221)) (25939 52509 650126 15000) 0 nil])
([nil nil ((2495 . 2508)) nil (25939 52551 955127 913000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2157) (undo-tree-id764 . -1) (undo-tree-id765 . 1)) ((2157 . 2158)) (25939 52508 861933 934000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2495) (undo-tree-id822 . -1) 2496) nil (25939 52551 955127 391000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 3184) (undo-tree-id789 . -2) (t 25939 52450 104221 129000)) ((3184 . 3187) (t 25939 52464 482254 717000)) (25939 52508 663100 126000) 0 nil])
([nil nil ((2495 . 2496)) nil (25939 52551 955126 437000) 0 nil])
([nil nil ((2170 . 2171) (#("Us" 0 2 (fontified t face tree-sitter-hl-face:type)) . 2170) (2173 . 2175) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2173) (2562 . 2563) (#("Us" 0 2 (fontified t face tree-sitter-hl-face:type)) . 2562) (2565 . 2567) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2565) 2554 (t 25939 52464 482254 717000)) ((2565 . 2566) (#("st" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2565) (2562 . 2564) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2562) (2173 . 2174) (#("st" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2173) (2170 . 2172) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2170)) (25939 52508 460699 357000) 0 nil])
([nil nil ((2501 . 2505)) nil (25939 52551 955126 27000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2267) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) 2268) ((2267 . 2268)) (25939 52508 276801 959000) 0 nil])
([nil nil ((2516 . 2518) (#("`" 0 1 (fontified nil)) . -2516) (2511 . 2517)) nil (25939 52551 955125 478000) 0 nil])
([nil nil ((2267 . 2268)) ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2267) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1)) (25939 52507 958050 37000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2515) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) 2516) nil (25939 52551 955124 622000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2267) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1)) ((2267 . 2268)) (25939 52507 575867 195000) 0 nil])
([nil nil ((2516 . 2522)) nil (25939 52551 955120 556000) 0 nil])
([nil nil ((2267 . 2268)) ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2267) (undo-tree-id804 . -1)) (25939 52507 137625 542000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -2521) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) 2522) nil (25939 52551 955119 616000) 0 nil])
([nil nil ((2565 . 2566) (#("st" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2565) (2562 . 2564) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2562) (2173 . 2174) (#("st" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2173) (2170 . 2172) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2170)) ((2170 . 2171) (#("Us" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2170) (2173 . 2175) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2173) (2562 . 2563) (#("Us" 0 2 (fontified nil face tree-sitter-hl-face:type)) . 2562) (2565 . 2567) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . 2565) (undo-tree-id803 . -1) (t 25939 52464 482254 717000)) (25939 52506 39266 375000) 0 nil])
([nil nil ((2521 . 2523) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2521) (2521 . 2522)) nil (25939 52551 955110 511000) 0 nil])
nil
([nil nil ((2522 . 2527)) nil (25939 52551 955106 929000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2145) (undo-tree-id849 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2146) (undo-tree-id850 . -1) (#(" " 0 1 (fontified t)) . -2147) (undo-tree-id851 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2148) (undo-tree-id852 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2149) (undo-tree-id853 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2150) (undo-tree-id854 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2151) (undo-tree-id855 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2152) (undo-tree-id856 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2153) (undo-tree-id857 . -1) 2154 (t 25939 52551 973458 115000)) nil (25939 53069 847536 162000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2144) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . 1) (undo-tree-id845 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2145) (undo-tree-id846 . -1) (undo-tree-id847 . 1) (undo-tree-id848 . -1) 2146) nil (25939 53069 847528 424000) 0 nil])
([nil nil ((2145 . 2146) (2144 . 2146)) nil (25939 53069 847523 477000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2145) (undo-tree-id841 . -1) 2146) nil (25939 53069 847522 853000) 0 nil])
([nil nil ((2145 . 2148)) nil (25939 53069 847521 432000) 0 nil])
([nil nil ((2148 . 2156)) nil (25939 53069 847520 856000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2144) (undo-tree-id826 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2145) (undo-tree-id827 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2146) (undo-tree-id828 . -1) (#(" " 0 1 (fontified t)) . -2147) (undo-tree-id829 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2148) (undo-tree-id830 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2149) (undo-tree-id831 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2150) (undo-tree-id832 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2151) (undo-tree-id833 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2152) (undo-tree-id834 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2153) (undo-tree-id835 . -1) (#("," 0 1 (fontified t)) . -2154) (undo-tree-id836 . -1) (#(" " 0 1 (fontified t)) . -2155) (undo-tree-id837 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2156) (undo-tree-id838 . -1) (undo-tree-id839 . 1) (undo-tree-id840 . -1) 2157) nil (25939 53069 847518 283000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2145) (2145 . 2146) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2145) (2145 . 2146) (2144 . 2146)) nil (25939 53069 847505 488000) 0 nil])
([nil nil ((2145 . 2158)) nil (25939 53069 847504 787000) 0 nil])
([nil nil ((2165 . 2166) (2159 . 2166)) nil (25939 53069 847504 322000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2165) (undo-tree-id825 . -1) 2166) nil (25939 53069 847503 640000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2136) (2136 . 2137) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2136) (2136 . 2137) (2134 . 2137)) nil (25939 53069 847501 713000) 0 nil])
([nil nil ((2136 . 2141)) nil (25939 53069 847500 603000) 0 nil])
([nil nil ((apply yas--snippet-revive 2138 2147 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (2138 . 2147) (#("apiConfig" 0 9 (fontified nil)) . 2138) (2138 . 2147) (#("api" 0 3 (fontified nil)) . 2138) (2138 . 2141) (#("apiConfig" 0 9 (fontified nil)) . -2138) (2138 . 2147) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2138) (undo-tree-id823 . -3) (undo-tree-id824 . -3) 2141) nil (25939 53069 847499 376000) 0 nil])
([nil nil ((2172 . 2181)) nil (25939 53069 847487 807000) 0 nil])
([nil nil ((2181 . 2185)) nil (25939 53069 847487 223000) 0 nil])
([nil nil ((2185 . 2191)) nil (25939 53069 847486 684000) 0 nil])
([nil nil ((2191 . 2194)) nil (25939 53069 847486 284000) 0 nil])
([nil nil ((2201 . 2214)) nil (25939 53069 847485 859000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2217) (2217 . 2218) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2217) (2217 . 2218) (2215 . 2218)) nil (25939 53069 847485 271000) 0 nil])
([nil nil ((2218 . 2219) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2218) (2218 . 2219) (2217 . 2219)) nil (25939 53069 847484 446000) 0 nil])
([nil nil ((2219 . 2230)) nil (25939 53069 847483 527000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2231) (2231 . 2232) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2231) (2231 . 2232) (2230 . 2232)) nil (25939 53069 847482 733000) 0 nil])
([nil nil ((2231 . 2235)) nil (25939 53069 847481 560000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2201) (2201 . 2202) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2201) (2201 . 2202) (2200 . 2202)) nil (25939 53069 847480 228000) 0 nil])
([nil nil ((2201 . 2203)) nil (25939 53069 847479 117000) 0 nil])
([nil nil ((2204 . 2205)) nil (25939 53069 847478 399000) 0 nil])
([nil nil ((2203 . 2210)) nil (25939 53069 847474 632000) 0 nil])
([nil nil ((2247 . 2252) (t 25939 53069 868637 399000)) nil (25939 53216 138394 134000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2255) (2255 . 2256) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2255) (2255 . 2256) (2253 . 2256)) nil (25939 53216 138393 265000) 0 nil])
([nil nil ((2256 . 2258) (2257 . 2258) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2256) (2256 . 2258) (2255 . 2257)) nil (25939 53216 138392 292000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2255) (2255 . 2256) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2255) (2255 . 2256) (2253 . 2256)) nil (25939 53216 138391 28000) 0 nil])
([nil nil ((2255 . 2261)) nil (25939 53216 138389 980000) 0 nil])
([nil nil ((2261 . 2262)) nil (25939 53216 138389 344000) 0 nil])
([nil nil ((2262 . 2268)) nil (25939 53216 138388 862000) 0 nil])
([nil nil ((2274 . 2278)) nil (25939 53216 138388 466000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2277) (undo-tree-id897 . -1) (undo-tree-id898 . -1) 2278) nil (25939 53216 138387 834000) 0 nil])
([nil nil ((apply yas--snippet-revive 2274 2282 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2274 . 2282) (#("godotenv" 0 8 (fontified nil)) . 2274) (2274 . 2282) (#("god" 0 3 (fontified nil)) . 2274) (2274 . 2277) (#("godotenv" 0 8 (fontified nil)) . -2274) (2274 . 2282) (#("god" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2274) (undo-tree-id895 . -3) (undo-tree-id896 . -3) 2277) nil (25939 53216 138385 47000) 0 nil])
([nil nil ((2282 . 2283)) nil (25939 53216 138382 747000) 0 nil])
([nil nil ((2283 . 2284)) nil (25939 53216 138382 203000) 0 nil])
([nil nil ((2284 . 2286)) nil (25939 53216 138381 685000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2288 2288 nil nil nil t nil)) nil 32 nil #s(yas--field 1 2288 2288 nil nil nil t nil) nil nil)) (2283 . 2308) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 2283) (2283 . 2313) (#("Loa" 0 3 (fontified nil)) . 2283) (2283 . 2286) (#("Load" 0 4 (fontified nil)) . -2283) (2283 . 2287) (#("Loa" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2283) (undo-tree-id893 . -3) (undo-tree-id894 . -3) 2286) nil (25939 53216 138380 238000) 0 nil])
([nil nil ((#("filenames ...string" 0 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 13 (fontified t face tree-sitter-hl-face:operator) 13 19 (fontified t face tree-sitter-hl-face:variable)) . 2288)) nil (25939 53216 138377 754000) 0 nil])
([nil nil ((apply yas--snippet-revive 2283 2289 #s(yas--snippet nil (#s(yas--field 1 2288 2288 nil nil nil t nil)) nil 32 nil #s(yas--field 1 2288 2288 nil nil nil t nil) nil nil))) nil (25939 53216 138377 407000) 0 nil])
([nil nil ((2289 . 2292)) nil (25939 53216 138376 983000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2293 . 2294) (#("
" 0 1 (fontified nil)) . -2444) (2292 . 2445) 2291) nil (25939 53216 138376 428000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2290) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -1) (undo-tree-id892 . -2) 2291) nil (25939 53216 138375 164000) 0 nil])
([nil nil ((1079 . 1080) (#("  " 0 2 (fontified t)) . -1079) 1081 (1115 . 1116) (#("  " 0 2 (fontified t)) . -1115) 1117 (1218 . 1219) (#("  " 0 2 (fontified t)) . -1218) 1220 (1259 . 1260) (#("  " 0 2 (fontified t)) . -1259) 1261 (1292 . 1293) (#("  " 0 2 (fontified t)) . -1292) 1294 (#("		" 0 2 (fontified t)) . 1297) (#(";" 0 1 (fontified t)) . 1418) (2028 . 2029) (#("  " 0 2 (fontified t)) . 2028) (2291 . 2292) (2328 . 2329) 2291 (2362 . 2363) (2386 . 2387) (2495 . 2496) (#("  " 0 2 (fontified t)) . 2495) (2546 . 2549) (#(" " 0 1 (fontified t)) . 2820) (#(";" 0 1 (fontified t)) . 2927) (#("  " 0 2 (fontified t)) . 3577) ("

	" . 4099)) nil (25939 53216 138370 507000) 0 nil])
([nil nil ((2436 . 2439)) nil (25939 53216 138367 697000) 0 nil])
([nil nil ((2439 . 2450)) nil (25939 53216 138367 335000) 0 nil])
([nil nil ((apply yas--snippet-revive 2446 2455 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (2446 . 2455) (#("ExpiresAt" 0 9 (fontified nil)) . 2446) (2446 . 2455) (#("Expi" 0 4 (fontified nil)) . 2446) (2446 . 2450) (#("ExpiresAt" 0 9 (fontified nil)) . -2446) (2446 . 2455) (#("Expi" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2446) (undo-tree-id887 . -4) (undo-tree-id888 . -4) 2450) nil (25939 53216 138366 162000) 0 nil])
([nil nil ((2455 . 2458)) nil (25939 53216 138362 560000) 0 nil])
([nil nil ((2458 . 2462)) nil (25939 53216 138361 961000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2477 2541 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil nil)) (2462 . 2489) (#("NewNumericDate(${1:t time.Time})" 0 32 (fontified nil)) . 2462) (2462 . 2494) (#("NewNumericDate" 0 14 (fontified nil)) . -2462) (2462 . 2476)) nil (25939 53216 138361 58000) 0 nil])
([nil nil ((2478 . 2484) (#("t time.Time" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:property)) . 2478) (undo-tree-id886 . -11) (2477 . 2478)) nil (25939 53216 138359 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 2484 2492 #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2484 . 2492) (#("IssuedAt" 0 8 (fontified nil)) . 2484) (undo-tree-id884 . -8) (2484 . 2492) (#("IssuedAt" 0 8 (fontified nil)) . -2484) (undo-tree-id885 . -8) (2484 . 2492)) nil (25939 53216 138357 938000) 0 nil])
([nil nil ((2492 . 2493)) nil (25939 53216 138355 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 2493 2497 #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2493 . 2497) (#("Time" 0 4 (fontified nil)) . 2493) (undo-tree-id882 . -4) (2493 . 2497) (#("Time" 0 4 (fontified nil)) . -2493) (undo-tree-id883 . -4) (2493 . 2497)) nil (25939 53216 138355 34000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2493) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2494) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2495) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2496) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) 2497) nil (25939 53216 138352 28000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2497) (2497 . 2498) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2497) (2497 . 2498) (2493 . 2498)) nil (25939 53216 138343 548000) 0 nil])
([nil nil ((2497 . 2502)) nil (25939 53216 138342 725000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2501) (undo-tree-id868 . -1) (undo-tree-id869 . -1) 2502) nil (25939 53216 138342 223000) 0 nil])
([nil nil ((2501 . 2503)) nil (25939 53216 138339 701000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2502) (undo-tree-id866 . -1) (undo-tree-id867 . -1) 2503) nil (25939 53216 138339 151000) 0 nil])
([nil nil ((2502 . 2503)) nil (25939 53216 138337 447000) 0 nil])
([nil nil ((2503 . 2505)) nil (25939 53216 138336 753000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2504) (undo-tree-id864 . -1) (undo-tree-id865 . -1) 2505) nil (25939 53216 138336 108000) 0 nil])
([nil nil ((2504 . 2505)) nil (25939 53216 138334 370000) 0 nil])
([nil nil ((apply yas--snippet-revive 2502 2508 #s(yas--snippet nil nil nil 37 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2502 . 2508) (#("Second" 0 6 (fontified nil)) . 2502) (2502 . 2508) (#("Sec" 0 3 (fontified nil)) . 2502) (2502 . 2505) (#("Second" 0 6 (fontified nil)) . -2502) (2502 . 2508) (#("Sec" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2502) (undo-tree-id862 . -3) (undo-tree-id863 . -3) 2505) nil (25939 53216 138333 14000) 0 nil])
([nil nil ((2508 . 2516)) nil (25939 53216 138330 412000) 0 nil])
([nil nil ((2516 . 2518)) nil (25939 53216 138329 976000) 0 nil])
([nil nil ((apply yas--snippet-revive 2514 2524 #s(yas--snippet nil nil #s(yas--exit 2523 nil) 38 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2523 nil) 38 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2514 . 2524) (#("Duration($0)" 0 12 (fontified nil)) . 2514) (2514 . 2526) (#("Dura" 0 4 (fontified nil)) . 2514) (2514 . 2518) (#("Duration()" 0 10 (fontified nil)) . -2514) (2514 . 2524) (#("Dura" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2514) (undo-tree-id860 . -4) (undo-tree-id861 . -4) 2518) nil (25939 53216 138328 887000) 0 nil])
([nil nil ((2523 . 2530)) nil (25939 53216 138325 580000) 0 nil])
([nil nil ((apply yas--snippet-revive 2523 2539 #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil)) (2523 . 2539) (#("expiresInSeconds" 0 16 (fontified nil)) . 2523) (2523 . 2539) (#("expires" 0 7 (fontified nil)) . 2523) (2523 . 2530) (#("expiresInSeconds" 0 16 (fontified nil)) . -2523) (2523 . 2539) (#("expires" 0 7 (fontified t face tree-sitter-hl-face:variable)) . -2523) (undo-tree-id858 . -7) (undo-tree-id859 . -7) 2530) nil (25939 53216 138323 862000) 0 nil])
([nil nil ((apply yas--snippet-revive 2462 2542 #s(yas--snippet nil (#s(yas--field 1 2477 2541 nil nil nil t nil)) nil 34 nil #s(yas--field 1 2477 2541 nil nil nil t nil) nil nil))) nil (25939 53216 138311 52000) 0 nil])
([nil nil ((2542 . 2545) (t 25939 53216 165965 842000)) nil (25939 53363 561067 884000) 0 nil])
([nil nil ((2545 . 2552)) nil (25939 53363 561067 273000) 0 nil])
([nil nil ((2552 . 2555)) nil (25939 53363 561066 872000) 0 nil])
([nil nil ((apply yas--snippet-revive 2552 2559 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (2552 . 2559) (#("Subject" 0 7 (fontified nil)) . 2552) (2552 . 2559) (#("Sub" 0 3 (fontified nil)) . 2552) (2552 . 2555) (#("Subject" 0 7 (fontified nil)) . -2552) (2552 . 2559) (#("Sub" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2552) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) 2555) nil (25939 53363 561065 706000) 0 nil])
([nil nil ((2559 . 2564)) nil (25939 53363 561063 304000) 0 nil])
([nil nil ((2564 . 2567)) nil (25939 53363 561062 913000) 0 nil])
([nil nil ((2567 . 2583)) nil (25939 53363 561062 398000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) #s(yas--field 3 2624 2624 nil nil nil t nil)) nil 41 nil #s(yas--field 3 2624 2624 nil nil nil t nil) nil nil)) (2580 . 2663) (#("NewWithClaims(${1:method jwt.SigningMethod}, ${2:claims jwt.Claims}, ${3:opts ...jwt.TokenOption})" 0 98 (fontified nil)) . 2580) (2580 . 2678) (#("New" 0 3 (fontified nil)) . 2580) (2580 . 2583) (#("NewWithClaims" 0 13 (fontified nil)) . -2580) (2580 . 2593) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -2580) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) 2583) nil (25939 53363 561061 351000) 0 nil])
([nil nil ((2595 . 2602) (#("method jwt.SigningMethod" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 10 (fontified nil face tree-sitter-hl-face:variable) 10 11 (fontified nil) 11 24 (fontified nil face tree-sitter-hl-face:property)) . 2595) (2594 . 2595)) nil (25939 53363 561058 505000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2600) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2601) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) 2602) nil (25939 53363 561057 458000) 0 nil])
([nil nil ((2600 . 2602)) nil (25939 53363 561054 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 2598 2616 #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) nil)) (2598 . 2616) (#("SigningMethodHS256" 0 18 (fontified nil)) . 2598) (2598 . 2616) (#("Sign" 0 4 (fontified nil)) . 2598) (2598 . 2602) (#("SigningMethodHS256" 0 18 (fontified nil)) . -2598) (2598 . 2616) (#("Sign" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2598) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) 2602) nil (25939 53363 561053 298000) 0 nil])
([nil nil ((2619 . 2624) (#("claims jwt.Claims" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 10 (fontified nil face tree-sitter-hl-face:variable) 10 11 (fontified nil) 11 17 (fontified nil face tree-sitter-hl-face:property)) . 2619) (2618 . 2619)) nil (25939 53363 561050 528000) 0 nil])
([nil nil ((apply yas--snippet-revive 2618 2624 #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) nil)) (2618 . 2624) (#("claims" 0 6 (fontified nil)) . 2618) (2618 . 2624) (#("claims" 0 6 (fontified nil)) . 2618) (2618 . 2624) (#("claims" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -2618) (undo-tree-id1006 . -6) (undo-tree-id1007 . -6) 2624) nil (25939 53363 561049 56000) 0 nil])
([nil nil ((#("opts ...jwt.TokenOption" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 8 (fontified t face tree-sitter-hl-face:operator) 8 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 23 (fontified t face tree-sitter-hl-face:variable)) . 2626)) nil (25939 53363 561046 517000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2624) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (#(" " 0 1 (fontified t)) . -2625) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) 2626) nil (25939 53363 561045 599000) 0 nil])
([nil nil ((apply yas--snippet-revive 2580 2625 #s(yas--snippet nil (#s(yas--field 1 2594 2616 nil nil nil t #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil))) #s(yas--field 2 2618 2624 nil nil nil t #s(yas--field 3 2624 2624 nil nil nil t nil)) #s(yas--field 3 2624 2624 nil nil nil t nil)) nil 41 nil #s(yas--field 3 2624 2624 nil nil nil t nil) nil nil))) nil (25939 53363 561040 929000) 0 nil])
([nil nil ((2625 . 2628)) nil (25939 53363 561040 357000) 0 nil])
([nil nil ((2628 . 2640)) nil (25939 53363 561039 576000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2639) (undo-tree-id1001 . -1) 2640) nil (25939 53363 561038 668000) 0 nil])
([nil nil ((2639 . 2654)) nil (25939 53363 561037 239000) 0 nil])
([nil nil ((2654 . 2658)) nil (25939 53363 561036 495000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2667 2684 nil nil nil t nil)) nil 44 nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil nil)) (2654 . 2683) (#("SignedString(${1:key interface{\\}})" 0 35 (fontified nil)) . 2654) (2654 . 2689) (#("Sign" 0 4 (fontified nil)) . 2654) (2654 . 2658) (#("SignedString" 0 12 (fontified nil)) . -2654) (2654 . 2666) (#("Sign" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2654) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) 2658) nil (25939 53363 561035 144000) 0 nil])
([nil nil ((2669 . 2673) (#("]" 0 1 (fontified nil)) . -2668) (2668 . 2669) (#("]" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2668) (2668 . 2669) (2668 . 2669) (#("key interface{}" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 12 (fontified nil face tree-sitter-hl-face:keyword) 12 13 (fontified nil face tree-sitter-hl-face:keyword) 13 14 (fontified nil face (rainbow-delimiters-depth-4-face)) 14 15 (fontified nil face (rainbow-delimiters-depth-4-face))) . 2668) (2667 . 2668)) nil (25939 53363 561031 804000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2674) (2674 . 2675) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -2674) (2674 . 2675) (2673 . 2675)) nil (25939 53363 561030 308000) 0 nil])
([nil nil ((2674 . 2677)) nil (25939 53363 561029 201000) 0 nil])
([nil nil ((apply yas--snippet-revive 2674 2683 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil)) (2674 . 2683) (#("jwtSecret" 0 9 (fontified nil)) . 2674) (2674 . 2683) (#("jwt" 0 3 (fontified nil)) . 2674) (2674 . 2677) (#("jwtSecret" 0 9 (fontified nil)) . -2674) (2674 . 2683) (#("jwt" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2674) (undo-tree-id997 . -3) (undo-tree-id998 . -3) 2677) nil (25939 53363 561028 8000) 0 nil])
([nil nil ((apply yas--snippet-revive 2654 2685 #s(yas--snippet nil (#s(yas--field 1 2667 2684 nil nil nil t nil)) nil 44 nil #s(yas--field 1 2667 2684 nil nil nil t nil) nil nil))) nil (25939 53363 561024 943000) 0 nil])
([nil nil ((2685 . 2688)) nil (25939 53363 561024 465000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2685) (undo-tree-id994 . -1) (#("	" 0 1 (fontified t)) . -2686) (undo-tree-id995 . -1) (#("	" 0 1 (fontified t)) . -2687) (undo-tree-id996 . -1) 2688) nil (25939 53363 561023 404000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2627) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2628) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2629) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2630) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2631) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2632) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2633) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2634) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2635) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2636) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2637) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2638) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("," 0 1 (fontified t)) . -2639) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#(" " 0 1 (fontified t)) . -2640) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("e" 0 1 (fontified t)) . -2641) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (#("r" 0 1 (fontified t)) . -2642) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (#("r" 0 1 (fontified t)) . -2643) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#(" " 0 1 (fontified t)) . -2644) (undo-tree-id990 . -1) (#(":" 0 1 (fontified t)) . -2645) (undo-tree-id991 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2646) (undo-tree-id992 . -1) (#(" " 0 1 (fontified t)) . -2647) (undo-tree-id993 . -1) 2648) nil (25939 53363 561014 953000) 0 nil])
([nil nil ((2627 . 2630)) nil (25939 53363 560592 338000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2628) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2629) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) 2630) nil (25939 53363 560590 657000) 0 nil])
([nil nil ((2628 . 2629)) nil (25939 53363 560570 483000) 0 nil])
([nil nil ((2629 . 2636)) nil (25939 53363 560566 836000) 0 nil])
([nil nil ((2678 . 2680) (t 25939 53363 583295 624000)) nil (25939 53593 757166 556000) 0 nil])
([nil nil ((2680 . 2692)) nil (25939 53593 757165 818000) 0 nil])
([nil nil ((2692 . 2700)) nil (25939 53593 757165 216000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2701) (2701 . 2702) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2701) (2701 . 2702) (2700 . 2702)) nil (25939 53593 757164 432000) 0 nil])
([nil nil ((2702 . 2717) (2701 . 2703) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2701) (2701 . 2702)) nil (25939 53593 757163 323000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2711) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2712) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2713) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2714) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2715) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2716) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) 2717) nil (25939 53593 757161 565000) 0 nil])
([nil nil ((2711 . 2718)) nil (25939 53593 756970 750000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2680) (undo-tree-id1060 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2681) (undo-tree-id1061 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2682) (undo-tree-id1062 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2683) (undo-tree-id1063 . -1) 2684) nil (25939 53593 756969 930000) 0 nil])
([nil nil ((2680 . 2685)) nil (25939 53593 756967 61000) 0 nil])
([nil nil ((2701 . 2704)) nil (25939 53593 756966 726000) 0 nil])
([nil nil ((2704 . 2713)) nil (25939 53593 756966 296000) 0 nil])
([nil nil ((2732 . 2734)) nil (25939 53593 756965 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2740 . 2741) (nil fontified nil 2734 . 2741) (2734 . 2741) 2733) nil (25939 53593 756965 357000) 0 nil])
([nil nil ((2742 . 2743)) nil (25939 53593 756964 705000) 0 nil])
([nil nil ((2704 . 2706)) nil (25939 53593 756964 155000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2680) (undo-tree-id1055 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2681) (undo-tree-id1056 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2682) (undo-tree-id1057 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2683) (undo-tree-id1058 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2684) (undo-tree-id1059 . -1) 2685) nil (25939 53593 756963 53000) 0 nil])
([nil nil ((2680 . 2684)) nil (25939 53593 756959 257000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2681) (undo-tree-id1052 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2682) (undo-tree-id1053 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2683) (undo-tree-id1054 . -1) 2684) nil (25939 53593 756958 526000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2686) (2686 . 2687) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2686) (2686 . 2687) (2681 . 2687)) nil (25939 53593 756956 0) 0 nil])
([nil nil ((2686 . 2691)) nil (25939 53593 756955 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 2688 2697 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (2688 . 2697) (#("apiConfig" 0 9 (fontified nil)) . 2688) (2688 . 2697) (#("api" 0 3 (fontified nil)) . 2688) (2688 . 2691) (#("apiConfig" 0 9 (fontified nil)) . -2688) (2688 . 2697) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2688) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) 2691) nil (25939 53593 756953 894000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2714) (undo-tree-id1048 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2715) (undo-tree-id1049 . -1) 2716) nil (25939 53593 756951 143000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2716) (2716 . 2717) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2716) (2716 . 2717) (2714 . 2717)) nil (25939 53593 756948 880000) 0 nil])
([nil nil ((2716 . 2729)) nil (25939 53593 756948 111000) 0 nil])
([nil nil ((2731 . 2733)) nil (25939 53593 756947 475000) 0 nil])
([nil nil ((2733 . 2734) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2733) (2733 . 2734) (2732 . 2734)) nil (25939 53593 756946 591000) 0 nil])
([nil nil ((#("a.mintToken(\"thisweek-refresh\", 5184000);" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 11 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t face tree-sitter-hl-face:string) 13 21 (fontified t face tree-sitter-hl-face:string) 21 22 (fontified t face tree-sitter-hl-face:string) 22 29 (fontified t face tree-sitter-hl-face:string) 29 30 (fontified t face tree-sitter-hl-face:string) 30 32 (fontified t) 32 38 (fontified t face tree-sitter-hl-face:number) 38 39 (fontified t rear-nonsticky t face tree-sitter-hl-face:number) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 41 (fontified t)) . 2736) (undo-tree-id1042 . -40) (undo-tree-id1043 . 40) (undo-tree-id1044 . -40) (undo-tree-id1045 . -40) (undo-tree-id1046 . -40) (undo-tree-id1047 . -40) 2776) nil (25939 53593 756945 526000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2774 . 2775) (nil fontified nil 2734 . 2775) (2734 . 2775) 2733) nil (25939 53593 756941 151000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t rear-nonsticky t)) . -2774) (undo-tree-id1041 . -1) 2775) nil (25939 53593 756940 186000) 0 nil])
([nil nil ((2734 . 2741)) nil (25939 53593 756938 750000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2715) (2715 . 2716) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2715) (2715 . 2716) (2714 . 2716)) nil (25939 53593 756937 995000) 0 nil])
([nil nil ((2715 . 2725)) nil (25939 53593 756936 912000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2717) (undo-tree-id1040 . -1) 2718) nil (25939 53593 756936 136000) 0 nil])
([nil nil ((2187 . 2189)) nil (25939 53593 756934 704000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2188) (undo-tree-id1037 . -1) (undo-tree-id1038 . 1) (undo-tree-id1039 . -1) 2189) nil (25939 53593 756934 52000) 0 nil])
([nil nil ((2219 . 2220) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2219) (2219 . 2220)) nil (25939 53593 756931 764000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2219) (undo-tree-id1026 . -1) (undo-tree-id1027 . 1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) 2220) nil (25939 53593 756930 395000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2187) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 2188) nil (25939 53593 756920 439000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2793) (2793 . 2794) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2793) (2793 . 2794) (2792 . 2794) (t 25939 53593 779808 806000)) nil (25939 53622 258277 676000) 0 nil])
([nil nil ((2793 . 2795)) nil (25939 53622 258273 290000) 0 nil])
([nil nil ((2798 . 2800) (t 25939 53622 281872 241000)) nil (25939 53658 327533 683000) 0 nil])
([nil nil ((2150 . 2154)) nil (25939 53658 327533 98000) 0 nil])
([nil nil ((2152 . 2159)) nil (25939 53658 327532 641000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2252) (undo-tree-id1302 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2253) (undo-tree-id1303 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2254) (undo-tree-id1304 . -1) (#(" " 0 1 (fontified t)) . -2255) (undo-tree-id1305 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2256) (undo-tree-id1306 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2257) (undo-tree-id1307 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2258) (undo-tree-id1308 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2259) (undo-tree-id1309 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2260) (undo-tree-id1310 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2261) (undo-tree-id1311 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2262) (undo-tree-id1312 . -1) (#("," 0 1 (fontified t)) . -2263) (undo-tree-id1313 . -1) (#(" " 0 1 (fontified t)) . -2264) (undo-tree-id1314 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2265) (undo-tree-id1315 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2266) (undo-tree-id1316 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2267) (undo-tree-id1317 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2268) (undo-tree-id1318 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -2269) (undo-tree-id1319 . -1) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2270) (undo-tree-id1320 . -1) (#(" " 0 1 (fontified t)) . -2271) (undo-tree-id1321 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2272) (undo-tree-id1322 . -1) 2273) nil (25939 53658 327529 264000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2231) (undo-tree-id1281 . -1) (#("	" 0 1 (fontified t)) . -2232) (undo-tree-id1282 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2233) (undo-tree-id1283 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2234) (undo-tree-id1284 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2235) (undo-tree-id1285 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2236) (undo-tree-id1286 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2237) (undo-tree-id1287 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2238) (undo-tree-id1288 . -1) (#(" " 0 1 (fontified t)) . -2239) (undo-tree-id1289 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2240) (undo-tree-id1290 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2241) (undo-tree-id1291 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2242) (undo-tree-id1292 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2243) (undo-tree-id1293 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2244) (undo-tree-id1294 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2245) (undo-tree-id1295 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2246) (undo-tree-id1296 . -1) (#(" " 0 1 (fontified t)) . -2247) (undo-tree-id1297 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2248) (undo-tree-id1298 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2249) (undo-tree-id1299 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2250) (undo-tree-id1300 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2251) (undo-tree-id1301 . -1) 2252) nil (25939 53658 327510 55000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2645) (undo-tree-id1277 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -2646) (undo-tree-id1278 . -1) (undo-tree-id1279 . 1) (undo-tree-id1280 . -1) 2647) nil (25939 53658 327421 997000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2197) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2198) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2199) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2200) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2201) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2202) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2203) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2204) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#(" " 0 1 (fontified t)) . -2205) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2206) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2207) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2208) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2209) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2210) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2211) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2212) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . 1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 2213) nil (25939 53658 327408 502000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2743) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2744) (undo-tree-id1325 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2745) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -2746) (undo-tree-id1328 . -1) (undo-tree-id1329 . 1) (undo-tree-id1330 . -1) 2747 (t 25939 53658 350952 497000)) nil (25939 53667 594939 925000) 0 nil])
([nil nil ((2715 . 2719)) nil (25939 53667 594923 555000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2750 . 2751) (#("
" 0 1 (fontified nil)) . -2869) (2750 . 2870) (t 25939 53667 617973 112000)) nil (25939 53705 396245 360000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2654) (undo-tree-id1405 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2655) (undo-tree-id1406 . -1) (#("c" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2656) (undo-tree-id1407 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2657) (undo-tree-id1408 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2658) (undo-tree-id1409 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2659) (undo-tree-id1410 . -1) 2660) nil (25939 53705 396243 704000) 0 nil])
([nil nil ((2654 . 2661)) nil (25939 53705 396239 345000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2850) (undo-tree-id1398 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2851) (undo-tree-id1399 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2852) (undo-tree-id1400 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2853) (undo-tree-id1401 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2854) (undo-tree-id1402 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2855) (undo-tree-id1403 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2856) (undo-tree-id1404 . -1) 2857) nil (25939 53705 396238 131000) 0 nil])
([nil nil ((2850 . 2856)) nil (25939 53705 396230 641000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2859) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2860) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("8" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2861) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2862) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2863) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2864) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2865) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 2866) nil (25939 53705 396227 400000) 0 nil])
([nil nil ((2859 . 2864)) nil (25939 53705 396167 975000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2697) (undo-tree-id1450 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2698) (undo-tree-id1451 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2699) (undo-tree-id1452 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2700) (undo-tree-id1453 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2701) (undo-tree-id1454 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2702) (undo-tree-id1455 . -1) (#(" " 0 1 (fontified t)) . -2703) (undo-tree-id1456 . -1) 2704 (t 25939 53705 420057 184000)) nil (25939 53936 334302 977000) 0 nil])
([nil nil ((2697 . 2703)) nil (25939 53936 334297 474000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2702) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) 2703) nil (25939 53936 334296 895000) 0 nil])
([nil nil ((2702 . 2717)) nil (25939 53936 334294 947000) 0 nil])
([nil nil ((2761 . 2763)) nil (25939 53936 334294 542000) 0 nil])
([nil nil ((2763 . 2765)) nil (25939 53936 334294 201000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2778) (2778 . 2779) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2778) (2778 . 2779) (2765 . 2779)) nil (25939 53936 334293 612000) 0 nil])
([nil nil ((2779 . 2781) (2780 . 2781) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2779) (2779 . 2781) (2778 . 2780)) nil (25939 53936 334292 591000) 0 nil])
([nil nil ((2781 . 2792)) nil (25939 53936 334291 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 2788 2799 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (2788 . 2799) (#("tokenString" 0 11 (fontified nil)) . 2788) (2788 . 2799) (#("toke" 0 4 (fontified nil)) . 2788) (2788 . 2792) (#("tokenString" 0 11 (fontified nil)) . -2788) (2788 . 2799) (#("toke" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2788) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) 2792) nil (25939 53936 334290 506000) 0 nil])
([nil nil ((2799 . 2802)) nil (25939 53936 334287 668000) 0 nil])
([nil nil ((2802 . 2804)) nil (25939 53936 334287 272000) 0 nil])
([nil nil ((2807 . 2809)) nil (25939 53936 334286 824000) 0 nil])
([nil nil ((2807 . 2812)) nil (25939 53936 334286 376000) 0 nil])
([nil nil ((2812 . 2815)) nil (25939 53936 334285 796000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2770) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) 2771) nil (25939 53936 334284 728000) 0 nil])
([nil nil ((2770 . 2771)) nil (25939 53936 334130 644000) 0 nil])
([nil nil ((#("	} else {}
" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t) 3 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 11 (fontified t)) . 2805) (undo-tree-id1411 . 2) (undo-tree-id1412 . -10) (undo-tree-id1413 . -7) (undo-tree-id1414 . -8) (undo-tree-id1415 . 1) (undo-tree-id1416 . -9) (undo-tree-id1417 . -9) (undo-tree-id1418 . -9) (undo-tree-id1419 . -9) (undo-tree-id1420 . -9) (undo-tree-id1421 . -9) (undo-tree-id1422 . -9) (undo-tree-id1423 . -9) (undo-tree-id1424 . -9) (undo-tree-id1425 . -9) (undo-tree-id1426 . -8) (undo-tree-id1427 . -8) (undo-tree-id1428 . 3) (undo-tree-id1429 . -9) (undo-tree-id1430 . 2) (undo-tree-id1431 . -10) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) (undo-tree-id1434 . -8) (undo-tree-id1435 . -8) (undo-tree-id1436 . -8) (undo-tree-id1437 . -8) (undo-tree-id1438 . -8) (undo-tree-id1439 . -11) 2813) nil (25939 53936 334127 223000) 0 nil])
([nil nil ((2806 . 2807) (#("}" 0 1 (fontified nil)) . -2806) (2806 . 2807) (t 25939 53936 361570 167000)) nil (25939 53939 750818 488000) 0 nil])
([nil nil ((2807 . 2809) (t 25939 53939 774577 742000)) nil (25939 53954 376058 777000) 0 nil])
([nil nil ((2809 . 2815)) nil (25939 53954 376058 43000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2808) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2809) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2810) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2811) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2812) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2813) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2814) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) 2815) nil (25939 53954 376056 463000) 0 nil])
([nil nil ((#("		return tokenString, err
" 0 2 (fontified t) 2 8 (fontified t face tree-sitter-hl-face:keyword) 8 9 (fontified t) 9 20 (fontified t face tree-sitter-hl-face:variable) 20 22 (fontified t) 22 25 (fontified t face tree-sitter-hl-face:variable) 25 26 (fontified t)) . 2779) (undo-tree-id1466 . 26) (undo-tree-id1467 . -25)) nil (25939 53954 376046 799000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2784 . 2785) (#("
" 0 1 (fontified nil)) . -2808) (2782 . 2809)) nil (25939 53954 376044 109000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2782) (undo-tree-id1465 . -1)) nil (25939 53954 376043 219000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2217) (#("	" 0 1 (fontified t)) . -2235) (#("	" 0 1 (fontified t)) . -2274) (#("	" 0 1 (fontified t)) . -2309) (#("	" 0 1 (fontified t)) . -2334) (#("	" 0 1 (fontified t)) . -2391) (2461 . 2462) (2462 . 2463) (#("	" 0 1 (fontified t)) . -2496) (#("	" 0 1 (fontified t)) . -2518) (#("  " 0 2 (fontified t)) . -2580) (#("	" 0 1 (fontified t)) . -2627) (#("	" 0 1 (fontified t)) . 2782) (#("
" 0 1 (fontified t)) . 2926) 2782) nil (25939 53954 376040 415000) 0 nil])
([nil nil ((2769 . 2772)) nil (25939 53954 376037 879000) 0 nil])
([nil current ((#("		" 0 2 (fontified t)) . -2770) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) 2772) nil (25939 53954 376034 847000) 0 nil])
nil
