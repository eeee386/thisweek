(undo-tree-save-format-version . 1)
"09f311da5e4e4cf93c1b5503405361c37a8cd40a"
[nil nil nil nil (25943 50415 210604 58000) 0 nil]
([nil nil ((1 . 13) (t 25943 50335 41765 89000)) nil (25943 50415 210602 916000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 13 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (9 . 13) (#("auth" 0 4 (fontified nil)) . 9) (9 . 13) (#("auth" 0 4 (fontified nil)) . 9) (9 . 13) (#("auth" 0 4 (fontified t)) . -9) (undo-tree-id15 . -4) (undo-tree-id16 . -4) 13) nil (25943 50415 210601 483000) 0 nil])
([nil nil ((13 . 15)) nil (25943 50415 210599 198000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15 . 16) (#("
" 0 1 (fontified nil)) . -1014) (15 . 1015)) nil (25943 50415 210598 453000) 0 nil])
([nil nil ((#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -21) (undo-tree-id14 . -1) 22) nil (25943 50415 210597 463000) 0 nil])
([nil nil ((21 . 22)) nil (25943 50415 210596 228000) 0 nil])
([nil nil ((#("M" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -21) (undo-tree-id13 . -1) 22) nil (25943 50415 210595 489000) 0 nil])
([nil nil ((21 . 22)) nil (25943 50415 210593 732000) 0 nil])
([nil nil ((#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -527) (undo-tree-id12 . -1) 528) nil (25943 50415 210592 988000) 0 nil])
([nil nil ((527 . 528)) nil (25943 50415 210591 611000) 0 nil])
([nil nil ((#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -898) (undo-tree-id11 . -1) 899) nil (25943 50415 210590 681000) 0 nil])
([nil nil ((898 . 899)) nil (25943 50415 210589 347000) 0 nil])
([nil nil ((15 . 16)) nil (25943 50415 210588 506000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -23) (23 . 24) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -23) (23 . 24) (15 . 24)) nil (25943 50415 210587 489000) 0 nil])
([nil nil ((24 . 25) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 24) (24 . 25) (23 . 25)) nil (25943 50415 210585 667000) 0 nil])
([nil nil ((26 . 34) (25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (25 . 26)) nil (25943 50415 210584 659000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -33) (undo-tree-id10 . -1) 34) nil (25943 50415 210583 532000) 0 nil])
([nil nil ((33 . 34)) nil (25943 50415 210581 915000) 0 nil])
([nil nil ((nil rear-nonsticky nil 36 . 37) (#("
" 0 1 (fontified nil)) . -63) (35 . 64) 34) nil (25943 50415 210581 2000) 0 nil])
([nil nil ((#("	\"godotenv\"
" 0 1 (fontified t) 1 11 (face tree-sitter-hl-face:string fontified t) 11 12 (fontified t)) . 24) (undo-tree-id6 . -10) (undo-tree-id7 . -1) (undo-tree-id8 . -11) (undo-tree-id9 . -11) 25) nil (25943 50415 210579 737000) 0 nil])
([nil nil ((51 . 53)) nil (25943 50415 210576 481000) 0 nil])
([nil nil ((54 . 57) (53 . 55) (#("\"" 0 1 (fontified nil)) . -53) (53 . 54)) nil (25943 50415 210575 687000) 0 nil])
([nil nil ((57 . 58)) nil (25943 50415 210574 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 54 63 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (54 . 63) (#("thisweek/" 0 9 (fontified nil)) . 54) (54 . 63) (#("this" 0 4 (fontified nil)) . 54) (54 . 58) (#("thisweek/" 0 9 (fontified nil)) . -54) (54 . 63) (#("this" 0 4 (face tree-sitter-hl-face:string fontified t)) . -54) (undo-tree-id4 . -4) (undo-tree-id5 . -4) 58) nil (25943 50415 210573 351000) 0 nil])
([nil nil ((63 . 70)) nil (25943 50415 210570 64000) 0 nil])
([nil nil ((apply yas--snippet-revive 63 71 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (63 . 71) (#("backend/" 0 8 (fontified nil)) . 63) (63 . 71) (#("backend" 0 7 (fontified nil)) . 63) (63 . 70) (#("backend/" 0 8 (fontified nil)) . -63) (63 . 71) (#("backend" 0 7 (face tree-sitter-hl-face:string fontified t)) . -63) (undo-tree-id2 . -7) (undo-tree-id3 . -7) 70) nil (25943 50415 210568 798000) 0 nil])
([nil nil ((71 . 74)) nil (25943 50415 210565 408000) 0 nil])
([nil nil ((apply yas--snippet-revive 71 80 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (71 . 80) (#("internal/" 0 9 (fontified nil)) . 71) (71 . 80) (#("int" 0 3 (fontified nil)) . 71) (71 . 74) (#("internal/" 0 9 (fontified nil)) . -71) (71 . 80) (#("int" 0 3 (face tree-sitter-hl-face:string fontified t)) . -71) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 74) nil (25943 50415 210563 271000) 0 nil])
([nil nil ((80 . 85)) nil (25943 50415 210540 399000) 0 nil])
([nil nil ((1088 . 1089)) nil (25943 50415 210537 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 87 . 88) (#("
" 0 1 (fontified nil)) . -118) (86 . 119) 85 (t 25943 50415 221886 12000)) nil (25943 50427 701743 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 119 . 120) (#("
" 0 1 (fontified nil)) . -126) (118 . 127) 87 (t 25943 50427 711904 836000)) nil (25943 50438 455799 772000) 0 nil])
([nil nil ((nil rear-nonsticky nil 128 . 129) (#("
" 0 1 (fontified nil)) . -218) (128 . 219) 127 (t 25943 50438 465921 40000)) nil (25943 50454 156422 976000) 0 nil])
([nil nil ((128 . 129)) nil (25943 50454 156418 771000) 0 nil])
([nil nil ((86 . 88) (t 25943 50454 167944 693000)) nil (25943 50471 98801 866000) 0 nil])
([nil nil ((89 . 93) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (88 . 89)) nil (25943 50471 98800 715000) 0 nil])
([nil nil ((apply yas--snippet-revive 89 98 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (89 . 98) (#("thisweek/" 0 9 (fontified nil)) . 89) (89 . 98) (#("this" 0 4 (fontified nil)) . 89) (89 . 93) (#("thisweek/" 0 9 (fontified nil)) . -89) (89 . 98) (#("this" 0 4 (face tree-sitter-hl-face:string fontified t)) . -89) (undo-tree-id23 . -4) (undo-tree-id24 . -4) 93) nil (25943 50471 98798 975000) 0 nil])
([nil nil ((98 . 101)) nil (25943 50471 98796 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 106 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (98 . 106) (#("backend/" 0 8 (fontified nil)) . 98) (98 . 106) (#("bac" 0 3 (fontified nil)) . 98) (98 . 101) (#("backend/" 0 8 (fontified nil)) . -98) (98 . 106) (#("bac" 0 3 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id21 . -3) (undo-tree-id22 . -3) 101) nil (25943 50471 98794 780000) 0 nil])
([nil nil ((106 . 109)) nil (25943 50471 98792 269000) 0 nil])
([nil nil ((apply yas--snippet-revive 106 115 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (106 . 115) (#("internal/" 0 9 (fontified nil)) . 106) (106 . 115) (#("int" 0 3 (fontified nil)) . 106) (106 . 109) (#("internal/" 0 9 (fontified nil)) . -106) (106 . 115) (#("int" 0 3 (face tree-sitter-hl-face:string fontified t)) . -106) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 109) nil (25943 50471 98790 920000) 0 nil])
([nil nil ((115 . 119)) nil (25943 50471 98787 233000) 0 nil])
([nil nil ((apply yas--snippet-revive 115 123 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (115 . 123) (#("database" 0 8 (fontified nil)) . 115) (115 . 123) (#("data" 0 4 (fontified nil)) . 115) (115 . 119) (#("database" 0 8 (fontified nil)) . -115) (115 . 123) (#("data" 0 4 (face tree-sitter-hl-face:string fontified t)) . -115) (undo-tree-id17 . -4) (undo-tree-id18 . -4) 119) nil (25943 50471 98783 811000) 0 nil])
([nil nil ((nil rear-nonsticky nil 165 . 166) (#("
" 0 1 (fontified nil)) . -170) (164 . 171) 157 (t 25943 50471 109970 212000)) nil (25943 50490 295578 405000) 0 nil])
([nil nil ((1264 . 1266) (t 25943 50490 306999 118000)) nil (25943 50779 563325 609000) 0 nil])
([nil nil ((1266 . 1274)) nil (25943 50779 563324 956000) 0 nil])
([nil nil ((1274 . 1283)) nil (25943 50779 563324 366000) 0 nil])
([nil nil ((1265 . 1267)) nil (25943 50779 563323 910000) 0 nil])
([nil nil ((#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1265) (undo-tree-id94 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1266) (undo-tree-id95 . -1) 1267) nil (25943 50779 563323 286000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1279) (undo-tree-id93 . -1) 1280) nil (25943 50779 563321 497000) 0 nil])
([nil nil ((1279 . 1280)) nil (25943 50779 563320 347000) 0 nil])
([nil nil ((1283 . 1289)) nil (25943 50779 563319 952000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1290) (1290 . 1291) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1290) (1290 . 1291) (1289 . 1291)) nil (25943 50779 563319 134000) 0 nil])
([nil nil ((1290 . 1303)) nil (25943 50779 563318 121000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1302) (undo-tree-id92 . -1) 1303) nil (25943 50779 563317 587000) 0 nil])
([nil nil ((1302 . 1307)) nil (25943 50779 563316 473000) 0 nil])
([nil nil ((1307 . 1308)) nil (25943 50779 563316 65000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1311) (1311 . 1312) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1311) (1311 . 1312) (1309 . 1312)) nil (25943 50779 563314 927000) 0 nil])
([nil nil ((1311 . 1317)) nil (25943 50779 563314 135000) 0 nil])
([nil nil ((1317 . 1321)) nil (25943 50779 563313 732000) 0 nil])
([nil nil ((1321 . 1322)) nil (25943 50779 563313 268000) 0 nil])
([nil nil ((1322 . 1326)) nil (25943 50779 563312 709000) 0 nil])
([nil nil ((1326 . 1328)) nil (25943 50779 563312 155000) 0 nil])
([nil nil ((1328 . 1331)) nil (25943 50779 563311 634000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1326) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -1327) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1328) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1329) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1330) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 1331) nil (25943 50779 563310 493000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1311) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1312) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1313) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1314) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1315) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("j" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1317) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("w" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1318) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1319) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("." 0 1 (fontified t)) . -1320) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1321) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1322) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1323) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1324) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1325) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 1326) nil (25943 50779 563302 96000) 0 nil])
([nil nil ((#("G" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1271) (undo-tree-id44 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1272) (undo-tree-id45 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1273) (undo-tree-id46 . -1) (#("T" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1274) (undo-tree-id47 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1275) (undo-tree-id48 . -1) (#("k" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1276) (undo-tree-id49 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1277) (undo-tree-id50 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1278) (undo-tree-id51 . -1) 1279) nil (25943 50779 563280 356000) 0 nil])
([nil nil ((1271 . 1278)) nil (25943 50779 563274 478000) 0 nil])
([nil nil ((#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1272) (undo-tree-id38 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1273) (undo-tree-id39 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1274) (undo-tree-id40 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1275) (undo-tree-id41 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1276) (undo-tree-id42 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1277) (undo-tree-id43 . -1) 1278) nil (25943 50779 563273 280000) 0 nil])
([nil nil ((#("W" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1272) (undo-tree-id28 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1273) (undo-tree-id29 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1274) (undo-tree-id30 . -1) (#("h" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1275) (undo-tree-id31 . -1) (#("C" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1276) (undo-tree-id32 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1277) (undo-tree-id33 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1278) (undo-tree-id34 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1279) (undo-tree-id35 . -1) (#("m" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1280) (undo-tree-id36 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1281) (undo-tree-id37 . -1) 1282) nil (25943 50779 563267 314000) 0 nil])
([nil nil ((1272 . 1289)) nil (25943 50779 563259 436000) 0 nil])
([nil nil ((#("n" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -1288) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 1289) nil (25943 50779 563258 107000) 0 nil])
([nil nil ((1288 . 1290)) nil (25943 50779 563248 837000) 0 nil])
([nil nil ((1312 . 1316)) nil (25943 50779 563247 908000) 0 nil])
([nil nil ((1317 . 1318)) nil (25943 50779 563243 869000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1312) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1313) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1314) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1315) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 1316 (t 25943 50779 573434 606000)) nil (25943 50785 368653 94000) 0 nil])
([nil nil ((1312 . 1316)) nil (25943 50785 368425 697000) 0 nil])
([nil nil ((1312 . 1313)) nil (25943 50785 368422 374000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1320) (1320 . 1321) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1320) (1320 . 1321) (1318 . 1321) (t 25943 50785 379443 346000)) nil (25943 50905 957308 540000) 0 nil])
([nil nil ((1321 . 1322) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1321) (1321 . 1322) (1320 . 1322)) nil (25943 50905 957307 562000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1324 . 1325) (#("
" 0 1 (fontified nil)) . -2027) (1322 . 2028) 1321) nil (25943 50905 957306 656000) 0 nil])
([nil nil ((#("	
		bearerToken := r.Header.Get(\"Authorization\")
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (fontified t) 16 18 (face tree-sitter-hl-face:operator fontified t) 18 19 (fontified t) 19 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 27 (face tree-sitter-hl-face:property fontified t) 27 28 (fontified t) 28 31 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 47 (face tree-sitter-hl-face:string fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (fontified t)) . 1321) (undo-tree-id197 . -48) (undo-tree-id198 . -1) (undo-tree-id199 . -1)) nil (25943 50905 957305 787000) 0 nil])
([nil nil ((1321 . 1370)) nil (25943 50905 957303 743000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1321) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25943 50905 957302 949000) 0 nil])
([nil nil ((#("		bearerToken := r.Header.Get(\"Authorization\")
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 13 (face tree-sitter-hl-face:variable fontified t) 13 14 (fontified t) 14 16 (face tree-sitter-hl-face:operator fontified t) 16 17 (fontified t) 17 18 (face tree-sitter-hl-face:variable fontified t) 18 19 (fontified t) 19 25 (face tree-sitter-hl-face:property fontified t) 25 26 (fontified t) 26 29 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 45 (face tree-sitter-hl-face:string fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (fontified t)) . 1321) (undo-tree-id191 . 20) (undo-tree-id192 . -46) (undo-tree-id193 . -26) 1347) nil (25943 50905 957300 534000) 0 nil])
([nil nil ((170 . 172)) nil (25943 50905 957298 94000) 0 nil])
([nil nil ((173 . 180) (172 . 174) (#("\"" 0 1 (fontified nil)) . -172) (172 . 173)) nil (25943 50905 957297 344000) 0 nil])
([nil nil ((#("			utils.RespondWithError(w, 401, \"Unauthorized\")
" 0 3 (fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 16 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 16 25 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t face tree-sitter-hl-face:variable) 27 29 (fontified t) 29 32 (fontified t face tree-sitter-hl-face:number) 32 34 (fontified t) 34 48 (fontified t face tree-sitter-hl-face:string) 48 49 (fontified t face (rainbow-delimiters-depth-3-face)) 49 50 (fontified t)) . 1667) (undo-tree-id189 . -49) (undo-tree-id190 . -8) 1675) nil (25943 50905 957296 59000) 0 nil])
([nil nil ((1677 . 1679) (#("\"" 0 1 (fontified nil)) . -1677) (1676 . 1678)) nil (25943 50905 957294 70000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1677) (undo-tree-id188 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 1678)) nil (25943 50905 957293 75000) 0 nil])
([nil nil ((1677 . 1680)) nil (25943 50905 957291 881000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1679) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 1680) nil (25943 50905 957291 169000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1677) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1678) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 1679) nil (25943 50905 957219 470000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1670) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1671) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1672) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1673) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1674) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1675) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#(" " 0 1 (fontified t)) . -1676) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 1677) nil (25943 50905 957214 128000) 0 nil])
([nil nil ((1670 . 1681)) nil (25943 50905 957201 490000) 0 nil])
([nil nil ((26 . 28) (#("gi" 0 2 (face tree-sitter-hl-face:string fontified t)) . -26) 28 (29 . 33) (#("hub.c" 0 5 (face tree-sitter-hl-face:string fontified t)) . -29) 34 (35 . 41) (#("m/joho/godo" 0 11 (face tree-sitter-hl-face:string fontified t)) . 35) (47 . 49) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . 47) (49 . 51) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . 49) (80 . 82) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . 80) (82 . 85) (#("il" 0 2 (face tree-sitter-hl-face:string fontified t)) . 82) (85 . 86) (115 . 116) (#("da" 0 2 (face tree-sitter-hl-face:string fontified t)) . 115) (118 . 120) (#("aba" 0 3 (face tree-sitter-hl-face:string fontified t)) . 118) (122 . 129) (124 . 125) (159 . 160) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . 159) (161 . 168) (162 . 171) (#("e\"
	\"" 0 2 (face tree-sitter-hl-face:string fontified t) 2 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (face tree-sitter-hl-face:string fontified t)) . -162) 167 (#("s\"
	\"s" 0 2 (face tree-sitter-hl-face:string fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 6 (face tree-sitter-hl-face:string fontified t)) . -168) (undo-tree-id161 . -2) (175 . 176) (#("ri" 0 2 (face tree-sitter-hl-face:string fontified t)) . -175) 177 (178 . 179) (#("gs" 0 2 (face tree-sitter-hl-face:string fontified t)) . -178) 180 (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1696 1711 nil nil nil t #s(yas--field 2 1713 1720 nil nil nil t nil)) #s(yas--field 2 1713 1720 nil nil nil t nil)) nil 27 nil #s(yas--field 2 1713 1720 nil nil nil t nil) nil nil)) (1681 . 1712) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 1681) (1681 . 1722) (#("Errorf" 0 6 (fontified nil)) . -1681) (1681 . 1687)) nil (25943 50905 957199 174000) 0 nil])
([nil nil ((1697 . 1705) (1696 . 1698) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1696) (#("format string" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 13 (face tree-sitter-hl-face:variable fontified nil)) . 1697) (1696 . 1697)) nil (25943 50905 957194 541000) 0 nil])
([nil nil ((1705 . 1710)) nil (25943 50905 957193 595000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1713) (undo-tree-id160 . -1) 1714) nil (25943 50905 957192 916000) 0 nil])
([nil nil ((apply yas--snippet-revive 1689 1721 #s(yas--snippet nil (#s(yas--field 1 1696 1711 nil nil nil t #s(yas--field 2 1713 1720 nil nil nil t nil)) #s(yas--field 2 1713 1720 nil nil nil t nil)) nil 27 nil #s(yas--field 2 1713 1720 nil nil nil t nil) nil nil))) nil (25943 50905 957191 420000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1711) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -1712) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -1713) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("." 0 1 (fontified t)) . -1714) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("." 0 1 (fontified t)) . -1715) (undo-tree-id155 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1716) (undo-tree-id156 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1717) (undo-tree-id157 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1718) (undo-tree-id158 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1719) (undo-tree-id159 . -1) 1720) nil (25943 50905 957187 726000) 0 nil])
([nil nil ((189 . 191) (t 25943 50905 963624 825000)) nil (25943 50940 819299 501000) 0 nil])
([nil nil ((192 . 196) (191 . 193) (#("\"" 0 1 (fontified nil)) . -191) (191 . 192)) nil (25943 50940 819298 770000) 0 nil])
([nil nil ((#("	\"uuid\"
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:string fontified t) 7 8 (fontified t)) . 190) (undo-tree-id200 . 2) (undo-tree-id201 . -7) (undo-tree-id202 . -5) (undo-tree-id203 . 2) 195) nil (25943 50940 819297 498000) 0 nil])
([nil nil ((nil rear-nonsticky nil 190 . 191) (#("
" 0 1 (fontified nil)) . -215) (189 . 216) 162) nil (25943 50940 819284 405000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1809 . 1810) (#("
" 0 1 (fontified nil)) . -1844) (1806 . 1845) 1805 (t 25943 50940 830677 296000)) nil (25943 50999 829225 798000) 0 nil])
([nil nil ((#("			utils.RespondWithError(w, 401, \"Unauthorized\")
			return
" 0 3 (fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 25 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face tree-sitter-hl-face:variable fontified t) 27 29 (fontified t) 29 32 (face tree-sitter-hl-face:number fontified t) 32 34 (fontified t) 34 48 (face tree-sitter-hl-face:string fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 53 (fontified t) 53 59 (face tree-sitter-hl-face:keyword fontified t) 59 60 (fontified t)) . 1845) (undo-tree-id277 . -53) (undo-tree-id278 . -59) (undo-tree-id279 . -53) (undo-tree-id280 . -3) (undo-tree-id281 . -53) (undo-tree-id282 . -3) (undo-tree-id283 . -53) 1898) nil (25943 50999 829224 610000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1968 . 1969) (#("
" 0 1 (fontified nil)) . -2025) (1965 . 2026) 1918) nil (25943 50999 829219 874000) 0 nil])
([nil nil ((#("			utils.RespondWithError(w, 401, \"Unauthorized\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 25 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face tree-sitter-hl-face:variable fontified t) 27 29 (fontified t) 29 32 (face tree-sitter-hl-face:number fontified t) 32 34 (fontified t) 34 48 (face tree-sitter-hl-face:string fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t)) . 1966) (undo-tree-id275 . -49) (undo-tree-id276 . -3) 1969) nil (25943 50999 829218 838000) 0 nil])
([nil nil ((#("			utils.RespondWithError(w, 401, \"Unauthorized\")
" 0 3 (fontified t) 3 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 25 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face tree-sitter-hl-face:variable fontified t) 27 29 (fontified t) 29 32 (face tree-sitter-hl-face:number fontified t) 32 34 (fontified t) 34 48 (face tree-sitter-hl-face:string fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t)) . 1916) (undo-tree-id273 . -49) (undo-tree-id274 . -3) 1919) nil (25943 50999 829216 974000) 0 nil])
([nil nil ((#("			return
" 0 3 (fontified t) 3 9 (face tree-sitter-hl-face:keyword fontified t) 9 10 (fontified t)) . 1916) (undo-tree-id271 . -9) (undo-tree-id272 . -3) 1919) nil (25943 50999 829215 212000) 0 nil])
([nil nil ((#("			return
" 0 3 (fontified t) 3 9 (face tree-sitter-hl-face:keyword fontified t) 9 10 (fontified t)) . 1916) (undo-tree-id269 . -9) (undo-tree-id270 . -3) 1919) nil (25943 50999 829213 231000) 0 nil])
([nil nil ((1915 . 1917) (1897 . 1898) (#("		" 0 2 (fontified nil)) . -1897) (1915 . 1916)) nil (25943 50999 829211 171000) 0 nil])
([nil nil ((1917 . 1922)) nil (25943 50999 829210 444000) 0 nil])
([nil nil ((apply yas--snippet-revive 1917 1923 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1917 . 1923) (#("return" 0 6 (fontified nil)) . 1917) (1917 . 1923) (#("retur" 0 5 (fontified nil)) . 1917) (1917 . 1922) (#("return" 0 6 (fontified nil)) . -1917) (1917 . 1923) (#("retur" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -1917) (undo-tree-id267 . -5) (undo-tree-id268 . -5) 1922) nil (25943 50999 829209 226000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1925) (undo-tree-id266 . -1) 1926) nil (25943 50999 829009 579000) 0 nil])
([nil nil ((1898 . 1900)) nil (25943 50999 829008 417000) 0 nil])
([nil nil ((1919 . 1921)) nil (25943 50999 829008 21000) 0 nil])
([nil nil ((1929 . 1931)) nil (25943 50999 829007 597000) 0 nil])
([nil nil ((1927 . 1932)) nil (25943 50999 829007 163000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1939 1954 nil nil nil t #s(yas--field 2 1954 1954 nil nil nil t nil)) #s(yas--field 2 1954 1954 nil nil nil t nil)) nil 29 nil #s(yas--field 2 1954 1954 nil nil nil t nil) nil nil)) (1932 . 1963) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 1932) (1932 . 1973) (#("Errorf" 0 6 (fontified nil)) . -1932) (1932 . 1938)) nil (25943 50999 829006 293000) 0 nil])
([nil nil ((1940 . 1953) (1939 . 1941) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1939) (undo-tree-id264 . -1) (#("format string" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 13 (face tree-sitter-hl-face:variable fontified nil)) . 1940) (undo-tree-id265 . -13) (1939 . 1940)) nil (25943 50999 829004 974000) 0 nil])
([nil nil ((1949 . 1950)) nil (25943 50999 829002 849000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1948) (undo-tree-id262 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1949) (undo-tree-id263 . -1) 1950) nil (25943 50999 829002 68000) 0 nil])
([nil nil ((1948 . 1949)) nil (25943 50999 829000 277000) 0 nil])
([nil nil ((#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 5 (face tree-sitter-hl-face:operator fontified t) 5 8 (face tree-sitter-hl-face:variable fontified t)) . 1956) (undo-tree-id258 . -8) (undo-tree-id259 . -5) (undo-tree-id260 . -6) (undo-tree-id261 . -1)) nil (25943 50999 828999 536000) 0 nil])
([nil nil ((1956 . 1958) (#("\"" 0 1 (fontified nil)) . -1956) (undo-tree-id257 . -1) (1956 . 1957)) nil (25943 50999 828996 449000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1956) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 1957) (undo-tree-id256 . -1)) nil (25943 50999 828994 612000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1954) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#(" " 0 1 (fontified t)) . -1955) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . 1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) 1956) nil (25943 50999 828986 104000) 0 nil])
([nil nil ((apply yas--snippet-revive 1932 1955 #s(yas--snippet nil (#s(yas--field 1 1939 1954 nil nil nil t #s(yas--field 2 1954 1954 nil nil nil t nil)) #s(yas--field 2 1954 1954 nil nil nil t nil)) nil 29 nil #s(yas--field 2 1954 1954 nil nil nil t nil) nil nil))) nil (25943 50999 828950 328000) 0 nil])
([nil nil ((1336 . 1340) (t 25943 50999 840150 427000)) nil (25943 51025 952429 741000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1338) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("B" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1339) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 1340) nil (25943 51025 952428 316000) 0 nil])
([nil nil ((1338 . 1344)) nil (25943 51025 952412 637000) 0 nil])
([nil nil ((apply yas--snippet-revive 1344 1352 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (1344 . 1352) (#("DBConfig" 0 8 (fontified nil)) . 1344) (1344 . 1352) (#("DBConfig" 0 8 (fontified nil)) . -1344) (1344 . 1352)) nil (25943 51025 952411 352000) 0 nil])
([nil nil ((1352 . 1354)) nil (25943 51025 952409 796000) 0 nil])
([nil nil ((1338 . 1339)) nil (25943 51025 952406 191000) 0 nil])
([nil nil ((1376 . 1382) (t 25943 51025 965374 342000)) nil (25943 51050 112808 843000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1376) (undo-tree-id394 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1377) (undo-tree-id395 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1378) (undo-tree-id396 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1379) (undo-tree-id397 . -1) 1380 (t 25943 51050 123574 226000)) nil (25943 51060 422718 552000) 0 nil])
([nil nil ((1376 . 1382)) nil (25943 51060 422715 55000) 0 nil])
([nil nil ((apply yas--snippet-revive 1376 1406 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (1376 . 1406) (#("database.AddRefreshTokenParams" 0 30 (fontified nil)) . 1376) (1376 . 1406) (#("databa" 0 6 (fontified nil)) . 1376) (1376 . 1382) (#("database.AddRefreshTokenParams" 0 30 (fontified nil)) . -1376) (1376 . 1406) (#("databa" 0 6 (face tree-sitter-hl-face:type fontified t)) . -1376) (undo-tree-id392 . -6) (undo-tree-id393 . -6) 1382) nil (25943 51060 422714 83000) 0 nil])
([nil nil ((1406 . 1407)) nil (25943 51060 422710 415000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1406) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 1407) nil (25943 51060 422709 226000) 0 nil])
([nil nil ((#("A" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1385) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1386) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1387) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1388) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1389) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1390) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1391) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1392) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1393) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1394) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1395) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1396) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1397) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1398) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1399) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1400) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1401) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1402) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1403) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1404) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1405) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 1406) nil (25943 51060 422702 251000) 0 nil])
([nil nil ((1385 . 1389)) nil (25943 51060 422634 237000) 0 nil])
([nil nil ((1745 . 1750) (t 25943 51060 434657 521000)) nil (25943 51270 734427 553000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1745) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1746) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified t)) . -1747) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 1748) nil (25943 51270 734426 428000) 0 nil])
([nil nil ((1745 . 1749)) nil (25943 51270 734421 710000) 0 nil])
([nil nil ((apply yas--snippet-revive 1745 1760 #s(yas--snippet nil nil #s(yas--exit 1759 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1759 nil) 32 nil nil nil nil)) (1745 . 1760) (#("database.User{$0\\}" 0 18 (fontified nil)) . 1745) (1745 . 1763) (#("data" 0 4 (fontified nil)) . 1745) (1745 . 1749) (#("database.User{}" 0 15 (fontified nil)) . -1745) (1745 . 1760) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1745) (undo-tree-id408 . -4) (undo-tree-id409 . -4) 1749) nil (25943 51270 734420 488000) 0 nil])
([nil nil ((1868 . 1869)) nil (25943 51270 734417 389000) 0 nil])
([nil nil ((1868 . 1872)) nil (25943 51270 734416 977000) 0 nil])
([nil nil ((apply yas--snippet-revive 1868 1883 #s(yas--snippet nil nil #s(yas--exit 1882 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1882 nil) 33 nil nil nil nil)) (1868 . 1883) (#("database.User{$0\\}" 0 18 (fontified nil)) . 1868) (1868 . 1886) (#("data" 0 4 (fontified nil)) . 1868) (1868 . 1872) (#("database.User{}" 0 15 (fontified nil)) . -1868) (1868 . 1883) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1868) (undo-tree-id406 . -4) (undo-tree-id407 . -4) 1872) nil (25943 51270 734415 834000) 0 nil])
([nil nil ((1884 . 1885)) nil (25943 51270 734412 840000) 0 nil])
([nil nil ((1996 . 2000)) nil (25943 51270 734412 215000) 0 nil])
([nil nil ((apply yas--snippet-revive 1996 2011 #s(yas--snippet nil nil #s(yas--exit 2010 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2010 nil) 34 nil nil nil nil)) (1996 . 2011) (#("database.User{$0\\}" 0 18 (fontified nil)) . 1996) (1996 . 2014) (#("datafmt" 0 4 (fontified nil) 4 7 (face tree-sitter-hl-face:variable fontified nil)) . 1996) (undo-tree-id402 . 3) (undo-tree-id403 . -7) (1996 . 2000) (#("database.User{}" 0 15 (fontified nil)) . -1996) (1996 . 2011) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1996) (undo-tree-id404 . -4) (undo-tree-id405 . -4) 2000) nil (25943 51270 734410 923000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2011) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) 2012) nil (25943 51270 734405 733000) 0 nil])
([nil nil ((2011 . 2017)) nil (25943 51270 734393 715000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1996) (undo-tree-id422 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1997) (undo-tree-id423 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1998) (undo-tree-id424 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1999) (undo-tree-id425 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2000) (undo-tree-id426 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2001) (undo-tree-id427 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2002) (undo-tree-id428 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2003) (undo-tree-id429 . -1) (#("." 0 1 (fontified t)) . -2004) (undo-tree-id430 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2005) (undo-tree-id431 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2006) (undo-tree-id432 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2007) (undo-tree-id433 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2008) (undo-tree-id434 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2009) (undo-tree-id435 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2010) (undo-tree-id436 . -1) (undo-tree-id437 . 1) (undo-tree-id438 . -1) 2011 (t 25943 51270 746130 830000)) nil (25943 51283 594615 611000) 0 nil])
([nil nil ((1996 . 2000)) nil (25943 51283 594601 746000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1952) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1953) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("x" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1954) (undo-tree-id420 . -1) (undo-tree-id421 . -1) 1955) nil (25943 51283 594600 107000) 0 nil])
([nil nil ((1952 . 1955)) nil (25943 51283 594586 59000) 0 nil])
([nil nil ((1919 . 1922) (t 25943 51283 606208 924000)) nil (25943 51671 807720 47000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1981) (1981 . 1982) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1981) (1981 . 1982) (1917 . 1918) (#("		" 0 2 (fontified nil)) . -1917) (1967 . 1983)) nil (25943 51671 807719 67000) 0 nil])
([nil nil ((1982 . 1984) (1983 . 1984) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1982) (1982 . 1984) (1981 . 1983)) nil (25943 51671 807717 777000) 0 nil])
([nil nil ((1984 . 2001)) nil (25943 51671 807716 484000) 0 nil])
([nil nil ((#("	  if derr != nil {
		  return user, fmt.Errorf(\"Invalid token\")
	  }
" 0 3 (fontified t) 3 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 8 (face tree-sitter-hl-face:variable fontified t) 8 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:operator fontified t) 13 14 (fontified t) 14 17 (face tree-sitter-hl-face:constant\.builtin fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (fontified t) 20 24 (fontified t) 24 30 (face tree-sitter-hl-face:keyword fontified t) 30 31 (fontified t) 31 35 (face tree-sitter-hl-face:variable fontified t) 35 37 (fontified t) 37 40 (face tree-sitter-hl-face:variable fontified t) 40 41 (fontified t) 41 47 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 63 (face tree-sitter-hl-face:string fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 65 (fontified t) 65 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t)) . 2005) (undo-tree-id544 . -65) (undo-tree-id545 . 70) (undo-tree-id546 . -69) (undo-tree-id547 . -65) (undo-tree-id548 . -65) (undo-tree-id549 . -19) (undo-tree-id550 . -65) 2070) nil (25943 51671 807715 472000) 0 nil])
([nil nil ((175 . 176) (#("j" 0 1 (face tree-sitter-hl-face:string fontified t)) . -175) 176 (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -177) (179 . 182) (180 . 188) (#("odotenv\"
	\"g" 0 2 (face tree-sitter-hl-face:string fontified t) 2 3 (face tree-sitter-hl-face:string fontified t) 3 4 (face tree-sitter-hl-face:string fontified t) 4 5 (face tree-sitter-hl-face:string fontified t) 5 6 (face tree-sitter-hl-face:string fontified t) 6 7 (face tree-sitter-hl-face:string fontified t) 7 8 (face tree-sitter-hl-face:string fontified t) 8 9 (fontified t) 9 10 (rear-nonsticky t fontified t) 10 12 (face tree-sitter-hl-face:string fontified t)) . 181) (undo-tree-id542 . -3) (203 . 204) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . 203) (205 . 206) (#("gle" 0 3 (face tree-sitter-hl-face:string fontified t)) . 206) (210 . 212) (#("uui" 0 3 (face tree-sitter-hl-face:string fontified t)) . 210) (214 . 219) (#("
" 0 1 (fontified t)) . -1308) (undo-tree-id543 . -1) (#("	" 0 1 (fontified t)) . -1400) (#("	" 0 1 (fontified t)) . -1449) (#("	" 0 1 (fontified t)) . -1484) (#("	" 0 1 (fontified t)) . -1585) (#("	" 0 1 (fontified t)) . -1625) (#("	" 0 1 (fontified t)) . -1658) (#("	" 0 1 (fontified t)) . -1663) (#("	" 0 1 (fontified t)) . -1735) (#("	" 0 1 (fontified t)) . -1790) (#("	" 0 1 (fontified t)) . -1794) (#("	" 0 1 (fontified t)) . -1839) (#("	" 0 1 (fontified t)) . -1858) (#("	" 0 1 (fontified t)) . -1913) 2005) nil (25943 51671 807709 143000) 0 nil])
([nil nil ((1990 . 1992)) nil (25943 51671 807704 904000) 0 nil])
([nil nil ((1655 . 1657)) nil (25943 51671 807704 491000) 0 nil])
([nil nil ((1657 . 1670)) nil (25943 51671 807704 86000) 0 nil])
([nil nil ((1670 . 1671)) nil (25943 51671 807703 675000) 0 nil])
([nil nil ((1671 . 1679)) nil (25943 51671 807703 110000) 0 nil])
([nil nil ((1679 . 1680)) nil (25943 51671 807702 573000) 0 nil])
([nil nil ((1680 . 1684)) nil (25943 51671 807702 153000) 0 nil])
([nil nil ((1684 . 1696)) nil (25943 51671 807701 746000) 0 nil])
([nil nil ((apply yas--snippet-revive 1696 1702 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1696 . 1702) (#("Issuer" 0 6 (fontified nil)) . 1696) (1696 . 1702) (#("Issuer" 0 6 (fontified nil)) . -1696) (1696 . 1702)) nil (25943 51671 807700 959000) 0 nil])
([nil nil ((1702 . 1704)) nil (25943 51671 807699 825000) 0 nil])
([nil nil ((1704 . 1712)) nil (25943 51671 807699 145000) 0 nil])
([nil nil ((apply yas--snippet-revive 1706 1723 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (1706 . 1723) (#("AccessTokenIssuer" 0 17 (fontified nil)) . 1706) (1706 . 1723) (#("Access" 0 6 (fontified nil)) . 1706) (1706 . 1712) (#("AccessTokenIssuer" 0 17 (fontified nil)) . -1706) (1706 . 1723) (#("Access" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1706) (undo-tree-id540 . -6) (undo-tree-id541 . -6) 1712) nil (25943 51671 807697 714000) 0 nil])
([nil nil ((1723 . 1725)) nil (25943 51671 807694 30000) 0 nil])
([nil nil ((1725 . 1739)) nil (25943 51671 807693 299000) 0 nil])
([nil nil ((1739 . 1741)) nil (25943 51671 807692 408000) 0 nil])
([nil nil ((apply -30 1742 2109 undo--wrap-and-run-primitive-undo 1742 2109 ((2102 . 2105) (2079 . 2082) (2011 . 2014) (2005 . 2008) (1948 . 1951) (1927 . 1930) (1880 . 1883) (1874 . 1877) (1817 . 1820) (1743 . 1746) 2077))) nil (25943 51671 807691 540000) 0 nil])
([nil nil ((1741 . 1746)) nil (25943 51671 807690 793000) 0 nil])
([nil nil ((1746 . 1749)) nil (25943 51671 807690 130000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1748) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 1749) nil (25943 51671 807689 390000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1752) (1752 . 1753) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1752) (1752 . 1753) (1748 . 1753)) nil (25943 51671 807687 604000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1723) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) 1724) nil (25943 51671 807686 501000) 0 nil])
([nil nil ((1723 . 1726)) nil (25943 51671 807682 747000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1750) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1751) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1752) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1753) (undo-tree-id529 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1754) (undo-tree-id530 . -1) (undo-tree-id531 . 1) (undo-tree-id532 . -1) 1755) nil (25943 51671 807681 621000) 0 nil])
([nil nil ((1750 . 1751)) nil (25943 51671 807675 327000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1754 1768 nil nil nil t nil)) nil 37 nil #s(yas--field 1 1754 1768 nil nil nil t nil) nil nil)) (1748 . 1763) (#("Parse(${1:s string})" 0 20 (fontified nil)) . 1748) (1748 . 1768) (#("Par" 0 3 (fontified nil)) . 1748) (1748 . 1751) (#("Parse" 0 5 (fontified nil)) . -1748) (1748 . 1753) (#("Par" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1748) (undo-tree-id521 . -3) (undo-tree-id522 . -3) 1751) nil (25943 51671 807674 360000) 0 nil])
([nil nil ((1755 . 1760) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 1755) (1754 . 1755)) nil (25943 51671 807671 744000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1758) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1759) (undo-tree-id519 . -1) (undo-tree-id520 . -1) 1760) nil (25943 51671 807670 854000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1757) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 1758) nil (25943 51671 807667 894000) 0 nil])
([nil nil ((1757 . 1761)) nil (25943 51671 807666 211000) 0 nil])
([nil nil ((apply yas--snippet-revive 1761 1768 #s(yas--snippet nil nil nil 38 nil nil #s(yas--field 1 1754 1768 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil #s(yas--field 1 1754 1768 nil nil nil t nil) nil)) (1761 . 1768) (#("Subject" 0 7 (fontified nil)) . 1761) (1761 . 1768) (#("Subject" 0 7 (fontified nil)) . -1761) (1761 . 1768)) nil (25943 51671 807665 476000) 0 nil])
([nil nil ((apply yas--snippet-revive 1748 1769 #s(yas--snippet nil (#s(yas--field 1 1754 1768 nil nil nil t nil)) nil 37 nil #s(yas--field 1 1754 1768 nil nil nil t nil) nil nil))) nil (25943 51671 807664 93000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1784) (1784 . 1785) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1784) (1784 . 1785) (1769 . 1785)) nil (25943 51671 807663 458000) 0 nil])
([nil nil ((1785 . 1787) (1786 . 1787) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1785) (1785 . 1787) (1784 . 1786)) nil (25943 51671 807662 475000) 0 nil])
([nil nil ((1727 . 1729)) nil (25943 51671 807661 610000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1728) (undo-tree-id512 . -1) (undo-tree-id513 . 1) (undo-tree-id514 . -1) 1729) nil (25943 51671 807660 994000) 0 nil])
([nil nil ((1783 . 1784) (#(")" 0 1 (face tree-sitter-hl-face:constant\.builtin fontified nil)) . -1783) (1783 . 1784)) nil (25943 51671 807658 538000) 0 nil])
([nil nil ((#("userId, perr := uuid.Parse(claims.Subject); perr != nil" 0 6 (face tree-sitter-hl-face:variable fontified t) 6 8 (fontified t) 8 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 20 (face tree-sitter-hl-face:variable fontified t) 20 21 (fontified t) 21 26 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (fontified t) 34 41 (face tree-sitter-hl-face:property fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 44 (fontified t) 44 48 (face tree-sitter-hl-face:variable fontified t) 48 49 (fontified t) 49 51 (face tree-sitter-hl-face:operator fontified t) 51 52 (fontified t) 52 55 (face tree-sitter-hl-face:constant\.builtin fontified t)) . 1728) (undo-tree-id507 . -54) (undo-tree-id508 . -54) (undo-tree-id509 . -54) (undo-tree-id510 . -42) (undo-tree-id511 . -54)) nil (25943 51671 807657 251000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1723) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1724) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1725) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#(" " 0 1 (fontified t)) . -1726) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1727) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1728) (undo-tree-id503 . 1) (undo-tree-id504 . -1) (undo-tree-id505 . 1) (undo-tree-id506 . -1) 1729) nil (25943 51671 807651 902000) 0 nil])
([nil nil ((1728 . 1731)) nil (25943 51671 807544 756000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1785 . 1786) (nil fontified nil 1731 . 1786) (1731 . 1786) 1730) nil (25943 51671 807544 254000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1788) (1788 . 1789) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1788) (1788 . 1789) (1786 . 1789)) nil (25943 51671 807543 328000) 0 nil])
([nil nil ((1789 . 1792) (1790 . 1792) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1789) (1789 . 1792) (1788 . 1790)) nil (25943 51671 807542 241000) 0 nil])
([nil nil ((1792 . 1801)) nil (25943 51671 807541 463000) 0 nil])
([nil nil ((1801 . 1802)) nil (25943 51671 807541 67000) 0 nil])
([nil nil ((1802 . 1804)) nil (25943 51671 807540 620000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1816 1821 nil nil nil t #s(yas--field 2 1823 1829 nil nil nil t nil)) #s(yas--field 2 1823 1829 nil nil nil t nil)) nil 39 nil #s(yas--field 2 1823 1829 nil nil nil t nil) nil nil)) (1804 . 1850) (#("GetUserById(${1:ctx context.Context}, ${2:id uuid.UUID})" 0 56 (fontified nil)) . 1804) (1804 . 1860) (#("GetUserById" 0 11 (fontified nil)) . -1804) (1804 . 1815)) nil (25943 51671 807539 854000) 0 nil])
([nil nil ((1817 . 1818) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 1817) (1816 . 1817)) nil (25943 51671 807538 250000) 0 nil])
([nil nil ((1818 . 1819)) nil (25943 51671 807537 271000) 0 nil])
([nil nil ((1819 . 1821)) nil (25943 51671 807536 454000) 0 nil])
([nil nil ((apply yas--snippet-revive 1818 1821 #s(yas--snippet nil nil nil 40 nil nil #s(yas--field 1 1816 1821 nil nil nil t #s(yas--field 2 1823 1829 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil #s(yas--field 1 1816 1821 nil nil nil t #s(yas--field 2 1823 1829 nil nil nil t nil)) nil)) (1818 . 1821) (#("CTX" 0 3 (fontified nil)) . 1818) (1818 . 1821) (#("CTX" 0 3 (fontified nil)) . 1818) (1818 . 1821) (#("CTX" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1818) (undo-tree-id461 . -3) (undo-tree-id462 . -3) 1821) nil (25943 51671 807535 410000) 0 nil])
([nil nil ((1824 . 1827) (#("id uuid.UUID" 0 2 (face tree-sitter-hl-face:variable fontified nil) 2 3 (fontified nil) 3 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 12 (face tree-sitter-hl-face:property fontified nil)) . 1824) (1823 . 1824)) nil (25943 51671 807532 579000) 0 nil])
([nil nil ((1827 . 1829)) nil (25943 51671 807531 789000) 0 nil])
([nil nil ((apply yas--snippet-revive 1804 1830 #s(yas--snippet nil (#s(yas--field 1 1816 1821 nil nil nil t #s(yas--field 2 1823 1829 nil nil nil t nil)) #s(yas--field 2 1823 1829 nil nil nil t nil)) nil 39 nil #s(yas--field 2 1823 1829 nil nil nil t nil) nil nil))) nil (25943 51671 807530 900000) 0 nil])
([nil nil ((1837 . 1839)) nil (25943 51671 807530 190000) 0 nil])
([nil nil ((1839 . 1850)) nil (25943 51671 807529 622000) 0 nil])
([nil nil ((apply yas--snippet-revive 1846 1861 #s(yas--snippet nil nil #s(yas--exit 1860 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1860 nil) 41 nil nil nil nil)) (1846 . 1861) (#("database.User{$0\\}" 0 18 (fontified nil)) . 1846) (1846 . 1864) (#("data" 0 4 (fontified nil)) . 1846) (1846 . 1850) (#("database.User{}" 0 15 (fontified nil)) . -1846) (1846 . 1861) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1846) (undo-tree-id459 . -4) (undo-tree-id460 . -4) 1850) nil (25943 51671 807528 511000) 0 nil])
([nil nil ((1861 . 1863)) nil (25943 51671 807525 889000) 0 nil])
([nil nil ((1863 . 1867)) nil (25943 51671 807525 102000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1874 1889 nil nil nil t #s(yas--field 2 1889 1889 nil nil nil t nil)) #s(yas--field 2 1889 1889 nil nil nil t nil)) nil 42 nil #s(yas--field 2 1889 1889 nil nil nil t nil) nil nil)) (1867 . 1898) (#("Errorf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 1867) (1867 . 1908) (#("Errorf" 0 6 (fontified nil)) . -1867) (1867 . 1873)) nil (25943 51671 807523 590000) 0 nil])
([nil nil ((1875 . 1888) (1874 . 1876) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1874) (undo-tree-id457 . -1) (#("format string" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 13 (face tree-sitter-hl-face:variable fontified nil)) . 1875) (undo-tree-id458 . -13) (1874 . 1875)) nil (25943 51671 807521 682000) 0 nil])
([nil nil ((#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified t) 1 2 (fontified t) 2 5 (face tree-sitter-hl-face:operator fontified t) 5 8 (face tree-sitter-hl-face:variable fontified t)) . 1891) (undo-tree-id454 . -8) (undo-tree-id455 . -5) (undo-tree-id456 . -6)) nil (25943 51671 807518 930000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1889) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(" " 0 1 (fontified t)) . -1890) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . 1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 1891) nil (25943 51671 807515 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 1867 1890 #s(yas--snippet nil (#s(yas--field 1 1874 1889 nil nil nil t #s(yas--field 2 1889 1889 nil nil nil t nil)) #s(yas--field 2 1889 1889 nil nil nil t nil)) nil 42 nil #s(yas--field 2 1889 1889 nil nil nil t nil) nil nil))) nil (25943 51671 807494 469000) 0 nil])
([nil nil ((#("	// if err != nil || !token.Valid || claims.Issuer != AccessTokenIssuer {
	// 	return database.User{}, fmt.Errorf(\"Invalid token\")
	// }
	// userId, perr := uuid.Parse(claims.Subject)
	// if perr != nil {
	// 	return database.User{}, fmt.Errorf(\"Invalid token\")
	// }
	// if user, derr := a.DB.GetUserById(a.CTX, userId); derr != nil {
	// 	return user, derr
	// }
	
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:comment fontified t) 4 6 (face tree-sitter-hl-face:comment fontified t) 6 7 (face tree-sitter-hl-face:comment fontified t) 7 10 (face tree-sitter-hl-face:comment fontified t) 10 11 (face tree-sitter-hl-face:comment fontified t) 11 13 (face tree-sitter-hl-face:comment fontified t) 13 14 (face tree-sitter-hl-face:comment fontified t) 14 17 (face tree-sitter-hl-face:comment fontified t) 17 18 (face tree-sitter-hl-face:comment fontified t) 18 20 (face tree-sitter-hl-face:comment fontified t) 20 21 (face tree-sitter-hl-face:comment fontified t) 21 22 (face tree-sitter-hl-face:comment fontified t) 22 27 (face tree-sitter-hl-face:comment fontified t) 27 28 (face tree-sitter-hl-face:comment fontified t) 28 33 (face tree-sitter-hl-face:comment fontified t) 33 34 (face tree-sitter-hl-face:comment fontified t) 34 36 (face tree-sitter-hl-face:comment fontified t) 36 37 (face tree-sitter-hl-face:comment fontified t) 37 43 (face tree-sitter-hl-face:comment fontified t) 43 44 (face tree-sitter-hl-face:comment fontified t) 44 50 (face tree-sitter-hl-face:comment fontified t) 50 51 (face tree-sitter-hl-face:comment fontified t) 51 53 (face tree-sitter-hl-face:comment fontified t) 53 54 (face tree-sitter-hl-face:comment fontified t) 54 71 (face tree-sitter-hl-face:comment fontified t) 71 72 (face tree-sitter-hl-face:comment fontified t) 72 73 (face tree-sitter-hl-face:comment fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 78 (face tree-sitter-hl-face:comment fontified t) 78 79 (face tree-sitter-hl-face:comment fontified t) 79 85 (face tree-sitter-hl-face:comment fontified t) 85 86 (face tree-sitter-hl-face:comment fontified t) 86 95 (face tree-sitter-hl-face:comment fontified t) 95 98 (face tree-sitter-hl-face:comment fontified t) 98 99 (face tree-sitter-hl-face:comment fontified t) 99 100 (face tree-sitter-hl-face:comment fontified t) 100 101 (face tree-sitter-hl-face:comment fontified t) 101 103 (face tree-sitter-hl-face:comment fontified t) 103 106 (face tree-sitter-hl-face:comment fontified t) 106 107 (face tree-sitter-hl-face:comment fontified t) 107 109 (face tree-sitter-hl-face:comment fontified t) 109 113 (face tree-sitter-hl-face:comment fontified t) 113 114 (face tree-sitter-hl-face:comment fontified t) 114 129 (face tree-sitter-hl-face:comment fontified t) 129 130 (face tree-sitter-hl-face:comment fontified t) 130 131 (fontified t) 131 132 (fontified t) 132 135 (face tree-sitter-hl-face:comment fontified t) 135 136 (face tree-sitter-hl-face:comment fontified t) 136 138 (fontified t) 138 141 (face tree-sitter-hl-face:comment fontified t) 141 147 (face tree-sitter-hl-face:comment fontified t) 147 149 (face tree-sitter-hl-face:comment fontified t) 149 153 (face tree-sitter-hl-face:comment fontified t) 153 154 (face tree-sitter-hl-face:comment fontified t) 154 156 (face tree-sitter-hl-face:comment fontified t) 156 157 (face tree-sitter-hl-face:comment fontified t) 157 161 (face tree-sitter-hl-face:comment fontified t) 161 162 (face tree-sitter-hl-face:comment fontified t) 162 167 (face tree-sitter-hl-face:comment fontified t) 167 168 (face tree-sitter-hl-face:comment fontified t) 168 174 (face tree-sitter-hl-face:comment fontified t) 174 175 (face tree-sitter-hl-face:comment fontified t) 175 182 (face tree-sitter-hl-face:comment fontified t) 182 183 (face tree-sitter-hl-face:comment fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 188 (face tree-sitter-hl-face:comment fontified t) 188 190 (face tree-sitter-hl-face:comment fontified t) 190 191 (face tree-sitter-hl-face:comment fontified t) 191 195 (face tree-sitter-hl-face:comment fontified t) 195 196 (face tree-sitter-hl-face:comment fontified t) 196 198 (face tree-sitter-hl-face:comment fontified t) 198 199 (face tree-sitter-hl-face:comment fontified t) 199 202 (face tree-sitter-hl-face:comment fontified t) 202 203 (face tree-sitter-hl-face:comment fontified t) 203 204 (face tree-sitter-hl-face:comment fontified t) 204 205 (fontified t) 205 206 (fontified t) 206 209 (face tree-sitter-hl-face:comment fontified t) 209 210 (face tree-sitter-hl-face:comment fontified t rear-nonsticky t) 210 216 (face tree-sitter-hl-face:comment fontified t) 216 217 (face tree-sitter-hl-face:comment fontified t) 217 226 (face tree-sitter-hl-face:comment fontified t) 226 229 (face tree-sitter-hl-face:comment fontified t) 229 230 (face tree-sitter-hl-face:comment fontified t) 230 231 (face tree-sitter-hl-face:comment fontified t) 231 232 (face tree-sitter-hl-face:comment fontified t) 232 234 (face tree-sitter-hl-face:comment fontified t) 234 237 (face tree-sitter-hl-face:comment fontified t) 237 238 (face tree-sitter-hl-face:comment fontified t) 238 240 (face tree-sitter-hl-face:comment fontified t) 240 244 (face tree-sitter-hl-face:comment fontified t) 244 245 (face tree-sitter-hl-face:comment fontified t) 245 260 (face tree-sitter-hl-face:comment fontified t) 260 261 (face tree-sitter-hl-face:comment fontified t) 261 262 (fontified t) 262 263 (fontified t) 263 266 (face tree-sitter-hl-face:comment fontified t) 266 267 (face tree-sitter-hl-face:comment fontified t) 267 268 (fontified t) 268 269 (fontified t) 269 272 (face tree-sitter-hl-face:comment fontified t) 272 274 (face tree-sitter-hl-face:comment fontified t) 274 275 (face tree-sitter-hl-face:comment fontified t) 275 279 (face tree-sitter-hl-face:comment fontified t) 279 281 (face tree-sitter-hl-face:comment fontified t) 281 285 (face tree-sitter-hl-face:comment fontified t) 285 286 (face tree-sitter-hl-face:comment fontified t) 286 288 (face tree-sitter-hl-face:comment fontified t) 288 289 (face tree-sitter-hl-face:comment fontified t) 289 290 (face tree-sitter-hl-face:comment fontified t) 290 291 (face tree-sitter-hl-face:comment fontified t) 291 293 (face tree-sitter-hl-face:comment fontified t) 293 294 (face tree-sitter-hl-face:comment fontified t) 294 305 (face tree-sitter-hl-face:comment fontified t) 305 306 (face tree-sitter-hl-face:comment fontified t) 306 307 (face tree-sitter-hl-face:comment fontified t) 307 308 (face tree-sitter-hl-face:comment fontified t) 308 311 (face tree-sitter-hl-face:comment fontified t) 311 313 (face tree-sitter-hl-face:comment fontified t) 313 319 (face tree-sitter-hl-face:comment fontified t) 319 320 (face tree-sitter-hl-face:comment fontified t) 320 322 (face tree-sitter-hl-face:comment fontified t) 322 326 (face tree-sitter-hl-face:comment fontified t) 326 327 (face tree-sitter-hl-face:comment fontified t) 327 329 (face tree-sitter-hl-face:comment fontified t) 329 330 (face tree-sitter-hl-face:comment fontified t) 330 333 (face tree-sitter-hl-face:comment fontified t) 333 334 (face tree-sitter-hl-face:comment fontified t) 334 335 (face tree-sitter-hl-face:comment fontified t) 335 336 (fontified t) 336 337 (fontified t) 337 340 (face tree-sitter-hl-face:comment fontified t) 340 341 (face tree-sitter-hl-face:comment fontified t) 341 347 (face tree-sitter-hl-face:comment fontified t) 347 348 (face tree-sitter-hl-face:comment fontified t) 348 352 (face tree-sitter-hl-face:comment fontified t) 352 354 (face tree-sitter-hl-face:comment fontified t) 354 358 (face tree-sitter-hl-face:comment fontified t) 358 359 (fontified t) 359 360 (fontified t) 360 363 (face tree-sitter-hl-face:comment fontified t) 363 364 (face tree-sitter-hl-face:comment fontified t) 364 365 (fontified t) 365 366 (fontified t) 366 367 (fontified t)) . 1891) (undo-tree-id551 . -366) (undo-tree-id552 . -366) (undo-tree-id553 . -79) (undo-tree-id554 . -51) (undo-tree-id555 . -366) (undo-tree-id556 . -130) (undo-tree-id557 . -367) (undo-tree-id558 . -366) (undo-tree-id559 . -51) (undo-tree-id560 . -51) (undo-tree-id561 . -51) (undo-tree-id562 . -51) (undo-tree-id563 . -367) (undo-tree-id564 . -51) (undo-tree-id565 . -366) (undo-tree-id566 . -51) (undo-tree-id567 . -51) (undo-tree-id568 . -136) (undo-tree-id569 . -183) (undo-tree-id570 . -204) (undo-tree-id571 . -256) (undo-tree-id572 . -267) (undo-tree-id573 . -319) (undo-tree-id574 . -358) (undo-tree-id575 . -364) (undo-tree-id576 . -366) (undo-tree-id577 . -365) (undo-tree-id578 . -366) (undo-tree-id579 . -366) (undo-tree-id580 . -366) (undo-tree-id581 . -366) (undo-tree-id582 . -366) (undo-tree-id583 . -366) (undo-tree-id584 . -367) 2257 (t 25943 51671 820125 14000)) nil (25943 51704 489897 84000) 0 nil])
([nil nil ((1893 . 1894) (t 25943 51704 503256 867000)) nil (25945 578 234238 99000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1894 . 1895) (#("
" 0 1 (fontified nil)) . -3148) (1894 . 3149)) nil (25945 578 234237 174000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2820) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("." 0 1 (fontified t)) . -2821) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 2822) nil (25945 578 234235 638000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2817) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2818) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2819) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 2820) nil (25945 578 234226 506000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2701) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2702) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2703) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2704) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("." 0 1 (fontified t)) . -2705) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 2706) nil (25945 578 234206 991000) 0 nil])
([nil nil ((3138 . 3139)) nil (25945 578 234166 479000) 0 nil])
([nil nil ((nil rear-nonsticky nil 216 . 217) (#("
" 0 1 (fontified nil)) . -245) (215 . 246) 214 (t 25945 578 248300 664000)) nil (25945 609 6072 877000) 0 nil])
([nil nil ((3168 . 3170) (t 25945 609 20122 779000)) nil (25945 2781 656756 924000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3170 . 3171) (#("
" 0 1 (fontified nil)) . -4247) (3170 . 4248)) nil (25945 2781 656752 669000) 0 nil])
([nil nil ((3252 . 3254) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -3252) (3252 . 3253) (t 25945 2781 670046 652000)) nil (25945 2801 286092 492000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3253) (undo-tree-id70 . -1) 3254) nil (25945 2801 286091 166000) 0 nil])
([nil nil ((3261 . 3263) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -3261) (3261 . 3262)) nil (25945 2801 286089 217000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 3262) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1)) nil (25945 2801 286086 106000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 4247) (undo-tree-id71 . -1) (t 25945 2801 298868 433000)) nil (25945 2810 798468 392000) 0 nil])
nil
