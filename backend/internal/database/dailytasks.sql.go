// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: dailytasks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addDailyTask = `-- name: AddDailyTask :one
INSERT INTO dailytasks(id, title, description, date_start, repetitions, user_id, tag_id, created_at, updated_at)
  VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
  RETURNING id, title, created_at, updated_at, description, date_start, repetitions, user_id, tag_id
`

type AddDailyTaskParams struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	DateStart   time.Time   `json:"date_start"`
	Repetitions interface{} `json:"repetitions"`
	UserID      uuid.UUID   `json:"user_id"`
	TagID       uuid.UUID   `json:"tag_id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) AddDailyTask(ctx context.Context, arg AddDailyTaskParams) (Dailytask, error) {
	row := q.db.QueryRowContext(ctx, addDailyTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.DateStart,
		arg.Repetitions,
		arg.UserID,
		arg.TagID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Dailytask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.DateStart,
		&i.Repetitions,
		&i.UserID,
		&i.TagID,
	)
	return i, err
}

const deleteDailyTask = `-- name: DeleteDailyTask :exec
  DELETE FROM dailytasks * WHERE id = $1 AND user_id = $2
`

type DeleteDailyTaskParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteDailyTask(ctx context.Context, arg DeleteDailyTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteDailyTask, arg.ID, arg.UserID)
	return err
}

const getDailyTasksByUserId = `-- name: GetDailyTasksByUserId :many
SELECT id, title, created_at, updated_at, description, date_start, repetitions, user_id, tag_id FROM dailytasks WHERE user_id = $1
`

func (q *Queries) GetDailyTasksByUserId(ctx context.Context, userID uuid.UUID) ([]Dailytask, error) {
	rows, err := q.db.QueryContext(ctx, getDailyTasksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dailytask
	for rows.Next() {
		var i Dailytask
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.DateStart,
			&i.Repetitions,
			&i.UserID,
			&i.TagID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDailyTask = `-- name: UpdateDailyTask :one
  UPDATE dailytasks
  SET title = $3,
      description = $4,
      date_start = $5,
      repetitions = $6,
      user_id = $7,
      tag_id = $8,
      updated_at = $9
  WHERE id = $1 AND user_id =$2
  RETURNING id, title, created_at, updated_at, description, date_start, repetitions, user_id, tag_id
`

type UpdateDailyTaskParams struct {
	ID          uuid.UUID   `json:"id"`
	UserID      uuid.UUID   `json:"user_id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	DateStart   time.Time   `json:"date_start"`
	Repetitions interface{} `json:"repetitions"`
	UserID_2    uuid.UUID   `json:"user_id_2"`
	TagID       uuid.UUID   `json:"tag_id"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateDailyTask(ctx context.Context, arg UpdateDailyTaskParams) (Dailytask, error) {
	row := q.db.QueryRowContext(ctx, updateDailyTask,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.DateStart,
		arg.Repetitions,
		arg.UserID_2,
		arg.TagID,
		arg.UpdatedAt,
	)
	var i Dailytask
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.DateStart,
		&i.Repetitions,
		&i.UserID,
		&i.TagID,
	)
	return i, err
}
