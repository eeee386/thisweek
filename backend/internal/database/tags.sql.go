// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tags.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addTag = `-- name: AddTag :one
  INSERT INTO tags(id, name, user_id, created_at, updated_at)
  VALUES ($1, $2, $3, $4, $5)
  RETURNING id, name, created_at, updated_at, user_id
`

type AddTagParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) AddTag(ctx context.Context, arg AddTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, addTag,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
  DELETE FROM tags WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagsByUserId = `-- name: GetTagsByUserId :many
  SELECT id, name, created_at, updated_at, user_id FROM tags WHERE user_id = $1
`

func (q *Queries) GetTagsByUserId(ctx context.Context, userID uuid.UUID) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameTag = `-- name: RenameTag :one
  UPDATE tags
   SET name = $2,
       created_at = $3
  WHERE id = $1
  RETURNING id, name, created_at, updated_at, user_id
`

type RenameTagParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) RenameTag(ctx context.Context, arg RenameTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, renameTag, arg.ID, arg.Name, arg.CreatedAt)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
