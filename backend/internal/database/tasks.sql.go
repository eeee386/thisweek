// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tasks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addTask = `-- name: AddTask :one
  INSERT INTO tasks(id, title, description, event_start, event_end, repetitions, user_id, tag_id, created_at, updated_at)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
  RETURNING id, title, created_at, updated_at, description, event_start, event_end, repetitions, user_id, tag_id
`

type AddTaskParams struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	EventStart  time.Time   `json:"event_start"`
	EventEnd    time.Time   `json:"event_end"`
	Repetitions interface{} `json:"repetitions"`
	UserID      uuid.UUID   `json:"user_id"`
	TagID       uuid.UUID   `json:"tag_id"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, addTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.EventStart,
		arg.EventEnd,
		arg.Repetitions,
		arg.UserID,
		arg.TagID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.EventStart,
		&i.EventEnd,
		&i.Repetitions,
		&i.UserID,
		&i.TagID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
  DELETE FROM tasks * WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTasksByUserId = `-- name: GetTasksByUserId :many
  SELECT id, title, created_at, updated_at, description, event_start, event_end, repetitions, user_id, tag_id FROM tasks WHERE user_id = $1
`

func (q *Queries) GetTasksByUserId(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.EventStart,
			&i.EventEnd,
			&i.Repetitions,
			&i.UserID,
			&i.TagID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
  UPDATE tasks
  SET title = $2,
      description = $3,
      event_start = $4,
      event_end = $5,
      repetitions = $6,
      user_id = $7,
      tag_id = $8,
      updated_at =$9
  WHERE id = $1
  RETURNING id, title, created_at, updated_at, description, event_start, event_end, repetitions, user_id, tag_id
`

type UpdateTaskParams struct {
	ID          uuid.UUID   `json:"id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	EventStart  time.Time   `json:"event_start"`
	EventEnd    time.Time   `json:"event_end"`
	Repetitions interface{} `json:"repetitions"`
	UserID      uuid.UUID   `json:"user_id"`
	TagID       uuid.UUID   `json:"tag_id"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.EventStart,
		arg.EventEnd,
		arg.Repetitions,
		arg.UserID,
		arg.TagID,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.EventStart,
		&i.EventEnd,
		&i.Repetitions,
		&i.UserID,
		&i.TagID,
	)
	return i, err
}
